
wcm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e52c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000e52c  0000e52c  0001e52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  0000e534  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000209c0  2**0
                  CONTENTS
  4 .bss          0000035c  200009c0  0000eef8  000209c0  2**3
                  ALLOC
  5 .stack        00001004  20000d1c  0000f254  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004feee  00000000  00000000  00020a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000078dc  00000000  00000000  0007092f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f8e9  00000000  00000000  0007820b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b08  00000000  00000000  00087af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001310  00000000  00000000  000885fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002373c  00000000  00000000  0008990c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a46f  00000000  00000000  000ad048  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00099a63  00000000  00000000  000c74b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ad8  00000000  00000000  00160f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 1d 00 20 d5 5a 00 00 d1 5a 00 00 d1 5a 00 00      .. .Z...Z...Z..
	...
      2c:	d1 5a 00 00 00 00 00 00 00 00 00 00 d1 5a 00 00     .Z...........Z..
      3c:	d1 5a 00 00 d1 5a 00 00 d1 5a 00 00 d1 5a 00 00     .Z...Z...Z...Z..
      4c:	cd 47 00 00 d1 5a 00 00 d1 5a 00 00 d1 5a 00 00     .G...Z...Z...Z..
      5c:	d1 5a 00 00 6d 47 00 00 7d 47 00 00 8d 47 00 00     .Z..mG..}G...G..
      6c:	9d 47 00 00 ad 47 00 00 bd 47 00 00 d1 5a 00 00     .G...G...G...Z..
      7c:	d1 5a 00 00 d1 5a 00 00 61 3a 00 00 71 3a 00 00     .Z...Z..a:..q:..
	...
      94:	81 3a 00 00 d1 5a 00 00 d1 5a 00 00 d1 5a 00 00     .:...Z...Z...Z..
      a4:	d1 5a 00 00 d1 5a 00 00 d1 5a 00 00 00 00 00 00     .Z...Z...Z......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c0 	.word	0x200009c0
      d4:	00000000 	.word	0x00000000
      d8:	0000e534 	.word	0x0000e534

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009c4 	.word	0x200009c4
     108:	0000e534 	.word	0x0000e534
     10c:	0000e534 	.word	0x0000e534
     110:	00000000 	.word	0x00000000

00000114 <tc_callback_to_read_mc3416>:
Local functions to configure TC for real time MC3416 measurements
****************************************************************************/

void tc_callback_to_read_mc3416(
struct tc_module *const module_inst)
{
     114:	b510      	push	{r4, lr}
	tc_set_count_value(&tc_instance, 0xFFFAA22C);
     116:	4904      	ldr	r1, [pc, #16]	; (128 <tc_callback_to_read_mc3416+0x14>)
     118:	4804      	ldr	r0, [pc, #16]	; (12c <tc_callback_to_read_mc3416+0x18>)
     11a:	4b05      	ldr	r3, [pc, #20]	; (130 <tc_callback_to_read_mc3416+0x1c>)
     11c:	4798      	blx	r3
	timer_0_elapsed = true;
     11e:	2201      	movs	r2, #1
     120:	4b04      	ldr	r3, [pc, #16]	; (134 <tc_callback_to_read_mc3416+0x20>)
     122:	701a      	strb	r2, [r3, #0]
}
     124:	bd10      	pop	{r4, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	fffaa22c 	.word	0xfffaa22c
     12c:	20000c6c 	.word	0x20000c6c
     130:	00003979 	.word	0x00003979
     134:	20000a02 	.word	0x20000a02

00000138 <initInternalHW>:

/****************************************************************************************
Local function to initialize the internal hardware
*****************************************************************************************/
static void initInternalHW(void)
{
     138:	b510      	push	{r4, lr}
	enum status_code status;

 	status = wcm_ms5637_init();
     13a:	4b13      	ldr	r3, [pc, #76]	; (188 <initInternalHW+0x50>)
     13c:	4798      	blx	r3
 	if (status == STATUS_OK)
     13e:	2800      	cmp	r0, #0
     140:	d112      	bne.n	168 <initInternalHW+0x30>
 	{
 		wcm_usart_send_pc_message("initInternalHW: wcm_ms5637_init done\r\n");
     142:	4c12      	ldr	r4, [pc, #72]	; (18c <initInternalHW+0x54>)
     144:	0020      	movs	r0, r4
     146:	4b12      	ldr	r3, [pc, #72]	; (190 <initInternalHW+0x58>)
     148:	4798      	blx	r3
 		wcm_usart_send_gps_command("initInternalHW: wcm_ms5637_init done\r\n");
     14a:	0020      	movs	r0, r4
     14c:	4b11      	ldr	r3, [pc, #68]	; (194 <initInternalHW+0x5c>)
     14e:	4798      	blx	r3
 	{
 		wcm_usart_send_pc_message("initInternalHW: Could not initialize MS5637!\r\n");
 		wcm_usart_send_gps_command("initInternalHW: Could not initialize MS5637!\r\n");
 	}
	
	status = wcm_mc3416_init();
     150:	4b11      	ldr	r3, [pc, #68]	; (198 <initInternalHW+0x60>)
     152:	4798      	blx	r3
	if (status == STATUS_OK)
     154:	2800      	cmp	r0, #0
     156:	d00f      	beq.n	178 <initInternalHW+0x40>
		wcm_usart_send_pc_message("initInternalHW: wcm_mc3416_init done\r\n");
		wcm_usart_send_gps_command("initInternalHW: wcm_mc3416_init done\r\n");
	}
	else
	{
		wcm_usart_send_pc_message("initInternalHW: Could not initialize MC3416!\r\n");
     158:	4c10      	ldr	r4, [pc, #64]	; (19c <initInternalHW+0x64>)
     15a:	0020      	movs	r0, r4
     15c:	4b0c      	ldr	r3, [pc, #48]	; (190 <initInternalHW+0x58>)
     15e:	4798      	blx	r3
		wcm_usart_send_gps_command("initInternalHW: Could not initialize MC3416!\r\n");
     160:	0020      	movs	r0, r4
     162:	4b0c      	ldr	r3, [pc, #48]	; (194 <initInternalHW+0x5c>)
     164:	4798      	blx	r3
	}
	
}	// End of initInternalHW
     166:	bd10      	pop	{r4, pc}
 		wcm_usart_send_pc_message("initInternalHW: Could not initialize MS5637!\r\n");
     168:	4c0d      	ldr	r4, [pc, #52]	; (1a0 <initInternalHW+0x68>)
     16a:	0020      	movs	r0, r4
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <initInternalHW+0x58>)
     16e:	4798      	blx	r3
 		wcm_usart_send_gps_command("initInternalHW: Could not initialize MS5637!\r\n");
     170:	0020      	movs	r0, r4
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <initInternalHW+0x5c>)
     174:	4798      	blx	r3
     176:	e7eb      	b.n	150 <initInternalHW+0x18>
		wcm_usart_send_pc_message("initInternalHW: wcm_mc3416_init done\r\n");
     178:	4c0a      	ldr	r4, [pc, #40]	; (1a4 <initInternalHW+0x6c>)
     17a:	0020      	movs	r0, r4
     17c:	4b04      	ldr	r3, [pc, #16]	; (190 <initInternalHW+0x58>)
     17e:	4798      	blx	r3
		wcm_usart_send_gps_command("initInternalHW: wcm_mc3416_init done\r\n");
     180:	0020      	movs	r0, r4
     182:	4b04      	ldr	r3, [pc, #16]	; (194 <initInternalHW+0x5c>)
     184:	4798      	blx	r3
     186:	e7ee      	b.n	166 <initInternalHW+0x2e>
     188:	00001f51 	.word	0x00001f51
     18c:	0000cd88 	.word	0x0000cd88
     190:	00002551 	.word	0x00002551
     194:	0000286d 	.word	0x0000286d
     198:	00001bdd 	.word	0x00001bdd
     19c:	0000ce08 	.word	0x0000ce08
     1a0:	0000cdb0 	.word	0x0000cdb0
     1a4:	0000cde0 	.word	0x0000cde0

000001a8 <read_mc3416>:
{
     1a8:	b530      	push	{r4, r5, lr}
     1aa:	b0a3      	sub	sp, #140	; 0x8c
	status = wcm_mc3416_read_tilt(&angle);
     1ac:	a820      	add	r0, sp, #128	; 0x80
     1ae:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <read_mc3416+0x3c>)
     1b0:	4798      	blx	r3
     1b2:	1e04      	subs	r4, r0, #0
	if (status == STATUS_OK)
     1b4:	d00b      	beq.n	1ce <read_mc3416+0x26>
		sprintf(response, "TILT ANGLE %.2f\r\n", angle);
     1b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
     1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
     1ba:	490b      	ldr	r1, [pc, #44]	; (1e8 <read_mc3416+0x40>)
     1bc:	4668      	mov	r0, sp
     1be:	4d0b      	ldr	r5, [pc, #44]	; (1ec <read_mc3416+0x44>)
     1c0:	47a8      	blx	r5
		wcm_usart_send_pc_message(response);		
     1c2:	4668      	mov	r0, sp
     1c4:	4b0a      	ldr	r3, [pc, #40]	; (1f0 <read_mc3416+0x48>)
     1c6:	4798      	blx	r3
}
     1c8:	0020      	movs	r0, r4
     1ca:	b023      	add	sp, #140	; 0x8c
     1cc:	bd30      	pop	{r4, r5, pc}
		sprintf(response, "TILT ANGLE %.2f\r\n", angle);
     1ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
     1d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
     1d2:	4905      	ldr	r1, [pc, #20]	; (1e8 <read_mc3416+0x40>)
     1d4:	4668      	mov	r0, sp
     1d6:	4d05      	ldr	r5, [pc, #20]	; (1ec <read_mc3416+0x44>)
     1d8:	47a8      	blx	r5
		wcm_usart_send_pc_message(response);
     1da:	4668      	mov	r0, sp
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <read_mc3416+0x48>)
     1de:	4798      	blx	r3
     1e0:	e7f2      	b.n	1c8 <read_mc3416+0x20>
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	00001c91 	.word	0x00001c91
     1e8:	0000ce38 	.word	0x0000ce38
     1ec:	00008405 	.word	0x00008405
     1f0:	00002551 	.word	0x00002551

000001f4 <wcm_init>:

/****************************************************************************************
Function to initialize the MMD WCM board
*****************************************************************************************/
void wcm_init(void)
{
     1f4:	b510      	push	{r4, lr}
	// Initialize the clocks, drivers, interfaces and interrupts
	wcm_power_normal_power_mode();
     1f6:	4b0c      	ldr	r3, [pc, #48]	; (228 <wcm_init+0x34>)
     1f8:	4798      	blx	r3
	
	wcm_adc_configure();
     1fa:	4b0c      	ldr	r3, [pc, #48]	; (22c <wcm_init+0x38>)
     1fc:	4798      	blx	r3
	wcm_bat_adc_configure();		
     1fe:	4b0c      	ldr	r3, [pc, #48]	; (230 <wcm_init+0x3c>)
     200:	4798      	blx	r3
	wcm_i2c_configure();
     202:	4b0c      	ldr	r3, [pc, #48]	; (234 <wcm_init+0x40>)
     204:	4798      	blx	r3
/*
	wcm_interrupt_configure();
*/

	// Turn on WCM board and sensors
	wcm_gpio_3v3va_on();
     206:	4b0c      	ldr	r3, [pc, #48]	; (238 <wcm_init+0x44>)
     208:	4798      	blx	r3
	wcm_gpio_gps_pwr_en_on();
     20a:	4b0c      	ldr	r3, [pc, #48]	; (23c <wcm_init+0x48>)
     20c:	4798      	blx	r3
//	wcm_gpio_ext_gpio2_off();
	

	// Turn off everything else
//	wcm_gpio_gps_pwr_en_off();
	wcm_gpio_cell_pwr_en_off();	
     20e:	4b0c      	ldr	r3, [pc, #48]	; (240 <wcm_init+0x4c>)
     210:	4798      	blx	r3
	wcm_gpio_wf_pwr_en_off();
     212:	4b0c      	ldr	r3, [pc, #48]	; (244 <wcm_init+0x50>)
     214:	4798      	blx	r3
	wcm_gpio_com_sw_a_off();
     216:	4b0c      	ldr	r3, [pc, #48]	; (248 <wcm_init+0x54>)
     218:	4798      	blx	r3
	wcm_gpio_sat_pwr_en_off();
     21a:	4b0c      	ldr	r3, [pc, #48]	; (24c <wcm_init+0x58>)
     21c:	4798      	blx	r3
	wcm_lgt_off();
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <wcm_init+0x5c>)
     220:	4798      	blx	r3

	initInternalHW();
     222:	4b0c      	ldr	r3, [pc, #48]	; (254 <wcm_init+0x60>)
     224:	4798      	blx	r3

}	// End of wcm_init
     226:	bd10      	pop	{r4, pc}
     228:	00002355 	.word	0x00002355
     22c:	00000fb5 	.word	0x00000fb5
     230:	00001049 	.word	0x00001049
     234:	000015f5 	.word	0x000015f5
     238:	000014d1 	.word	0x000014d1
     23c:	00001509 	.word	0x00001509
     240:	00001575 	.word	0x00001575
     244:	000015a5 	.word	0x000015a5
     248:	00001525 	.word	0x00001525
     24c:	0000154d 	.word	0x0000154d
     250:	000015d5 	.word	0x000015d5
     254:	00000139 	.word	0x00000139

00000258 <wcm_run>:

/****************************************************************************************
Function to run the MMD WCM board operations
*****************************************************************************************/
void wcm_run(void)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46d6      	mov	lr, sl
     25c:	464f      	mov	r7, r9
     25e:	4646      	mov	r6, r8
     260:	b5c0      	push	{r6, r7, lr}
     262:	b0ce      	sub	sp, #312	; 0x138
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     264:	aa40      	add	r2, sp, #256	; 0x100
     266:	2300      	movs	r3, #0
     268:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     26a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     26c:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
     26e:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
     270:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     272:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     274:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     276:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     278:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     27a:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     27c:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     27e:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     280:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     282:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     284:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     286:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     288:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     28a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     28c:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
     28e:	3334      	adds	r3, #52	; 0x34
     290:	2100      	movs	r1, #0
     292:	54d1      	strb	r1, [r2, r3]
	//Timer Configuration for MC3416
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
     294:	3b2c      	subs	r3, #44	; 0x2c
     296:	70d3      	strb	r3, [r2, #3]
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
     298:	23e0      	movs	r3, #224	; 0xe0
     29a:	00db      	lsls	r3, r3, #3
     29c:	8093      	strh	r3, [r2, #4]
	//	Delay  = 30s
	// 	Find number of cycles required to get given time delay
	// 	Desired Time/(prescaler/system clk frequency) = #cycles.
	//	30s/(1024/12000000) = 351563 cycles.
	// 	Subtract from max value to get number of clk cycles to load in timer; 2^32 - 351700 = 0xFFFAA22C 
	config_tc.counter_32_bit.value = 0xFFFAA22C;
     29e:	4bd3      	ldr	r3, [pc, #844]	; (5ec <wcm_run+0x394>)
     2a0:	6293      	str	r3, [r2, #40]	; 0x28
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     2a2:	4cd3      	ldr	r4, [pc, #844]	; (5f0 <wcm_run+0x398>)
     2a4:	49d3      	ldr	r1, [pc, #844]	; (5f4 <wcm_run+0x39c>)
     2a6:	0020      	movs	r0, r4
     2a8:	4bd3      	ldr	r3, [pc, #844]	; (5f8 <wcm_run+0x3a0>)
     2aa:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2ac:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     2ae:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
     2b0:	2a00      	cmp	r2, #0
     2b2:	d1fc      	bne.n	2ae <wcm_run+0x56>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	2102      	movs	r1, #2
     2b8:	430a      	orrs	r2, r1
     2ba:	601a      	str	r2, [r3, #0]
	tc_enable(&tc_instance);
		
	tc_register_callback(&tc_instance, tc_callback_to_read_mc3416,
     2bc:	4ccc      	ldr	r4, [pc, #816]	; (5f0 <wcm_run+0x398>)
     2be:	2200      	movs	r2, #0
     2c0:	49ce      	ldr	r1, [pc, #824]	; (5fc <wcm_run+0x3a4>)
     2c2:	0020      	movs	r0, r4
     2c4:	4bce      	ldr	r3, [pc, #824]	; (600 <wcm_run+0x3a8>)
     2c6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     2c8:	6820      	ldr	r0, [r4, #0]
     2ca:	4bce      	ldr	r3, [pc, #824]	; (604 <wcm_run+0x3ac>)
     2cc:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     2ce:	4bce      	ldr	r3, [pc, #824]	; (608 <wcm_run+0x3b0>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2d0:	5c1a      	ldrb	r2, [r3, r0]
     2d2:	231f      	movs	r3, #31
     2d4:	4013      	ands	r3, r2
     2d6:	2201      	movs	r2, #1
     2d8:	0011      	movs	r1, r2
     2da:	4099      	lsls	r1, r3
     2dc:	4bcb      	ldr	r3, [pc, #812]	; (60c <wcm_run+0x3b4>)
     2de:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     2e0:	7e63      	ldrb	r3, [r4, #25]
     2e2:	2101      	movs	r1, #1
     2e4:	430b      	orrs	r3, r1
     2e6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     2e8:	6823      	ldr	r3, [r4, #0]
     2ea:	725a      	strb	r2, [r3, #9]
	bool bValid;
	char command[COMMAND_LENGTH];
	enum status_code retval;
	
	int i;
	uint8_t spi_rx_buffer[SPI_BUFFER_LENGTH] = {0x00};
     2ec:	320f      	adds	r2, #15
     2ee:	2100      	movs	r1, #0
     2f0:	a82c      	add	r0, sp, #176	; 0xb0
     2f2:	4cc7      	ldr	r4, [pc, #796]	; (610 <wcm_run+0x3b8>)
     2f4:	47a0      	blx	r4
	uint8_t spi_tx_buffer[SPI_BUFFER_LENGTH] = {0x00};
     2f6:	2210      	movs	r2, #16
     2f8:	2100      	movs	r1, #0
     2fa:	a828      	add	r0, sp, #160	; 0xa0
     2fc:	47a0      	blx	r4

	wcm_usart_send_pc_message("wcm_run: started\r\n");
     2fe:	4cc5      	ldr	r4, [pc, #788]	; (614 <wcm_run+0x3bc>)
     300:	0020      	movs	r0, r4
     302:	4bc5      	ldr	r3, [pc, #788]	; (618 <wcm_run+0x3c0>)
     304:	4798      	blx	r3
	wcm_usart_send_gps_command("wcm_run: started\r\n");
     306:	0020      	movs	r0, r4
     308:	4bc4      	ldr	r3, [pc, #784]	; (61c <wcm_run+0x3c4>)
     30a:	4798      	blx	r3
	
	bSPIInitialized = false;
     30c:	2200      	movs	r2, #0
     30e:	4bc4      	ldr	r3, [pc, #784]	; (620 <wcm_run+0x3c8>)
     310:	701a      	strb	r2, [r3, #0]
	i = 0;
	
	while (1)
	{	
		
		timer_0_elapsed = false;
     312:	4bc4      	ldr	r3, [pc, #784]	; (624 <wcm_run+0x3cc>)
     314:	469a      	mov	sl, r3
     316:	2300      	movs	r3, #0
     318:	4698      	mov	r8, r3

		while (timer_0_elapsed == false)		
     31a:	4654      	mov	r4, sl
		{
			if (bSPIInitialized == false)
     31c:	4dc0      	ldr	r5, [pc, #768]	; (620 <wcm_run+0x3c8>)
				}
			}
			// Check for an SPI command
			if (bSPIInitialized == true)
			{
				if (wcm_spi_transfer_complete())
     31e:	4ec2      	ldr	r6, [pc, #776]	; (628 <wcm_run+0x3d0>)
		timer_0_elapsed = false;
     320:	4653      	mov	r3, sl
     322:	4642      	mov	r2, r8
     324:	701a      	strb	r2, [r3, #0]
		while (timer_0_elapsed == false)		
     326:	e00b      	b.n	340 <wcm_run+0xe8>
						wcm_usart_send_pc_message("wcm_run: wcm_spi_start_read failed (1)!\r\n");
     328:	48c0      	ldr	r0, [pc, #768]	; (62c <wcm_run+0x3d4>)
     32a:	4bbb      	ldr	r3, [pc, #748]	; (618 <wcm_run+0x3c0>)
     32c:	4798      	blx	r3
			if (bSPIInitialized == true)
     32e:	4bbc      	ldr	r3, [pc, #752]	; (620 <wcm_run+0x3c8>)
     330:	781b      	ldrb	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d126      	bne.n	384 <wcm_run+0x12c>
					}
				}
			}
		
			// Check for a serial command
			retval = wcm_usart_check_for_pc_command();
     336:	4bbe      	ldr	r3, [pc, #760]	; (630 <wcm_run+0x3d8>)
     338:	4798      	blx	r3
			if (retval == STATUS_OK)
     33a:	2800      	cmp	r0, #0
     33c:	d100      	bne.n	340 <wcm_run+0xe8>
     33e:	e30d      	b.n	95c <wcm_run+0x704>
		while (timer_0_elapsed == false)		
     340:	7823      	ldrb	r3, [r4, #0]
     342:	2b00      	cmp	r3, #0
     344:	d1ec      	bne.n	320 <wcm_run+0xc8>
			if (bSPIInitialized == false)
     346:	782b      	ldrb	r3, [r5, #0]
     348:	2b00      	cmp	r3, #0
     34a:	d11b      	bne.n	384 <wcm_run+0x12c>
				b = wcm_gpio_spi_slave_select_get();
     34c:	4bb9      	ldr	r3, [pc, #740]	; (634 <wcm_run+0x3dc>)
     34e:	4798      	blx	r3
				if (b == true)
     350:	2800      	cmp	r0, #0
     352:	d0ec      	beq.n	32e <wcm_run+0xd6>
     354:	2300      	movs	r3, #0
						spi_tx_buffer[i] = '-';
     356:	a928      	add	r1, sp, #160	; 0xa0
     358:	222d      	movs	r2, #45	; 0x2d
     35a:	545a      	strb	r2, [r3, r1]
					for (i = 0; i < 8; i++)
     35c:	3301      	adds	r3, #1
     35e:	2b08      	cmp	r3, #8
     360:	d1fb      	bne.n	35a <wcm_run+0x102>
					wcm_spi_configure(MODE_ENABLED);
     362:	2000      	movs	r0, #0
     364:	4bb4      	ldr	r3, [pc, #720]	; (638 <wcm_run+0x3e0>)
     366:	4798      	blx	r3
					retval = wcm_spi_start_read(spi_tx_buffer, spi_rx_buffer, spi_command_length);
     368:	2208      	movs	r2, #8
     36a:	a92c      	add	r1, sp, #176	; 0xb0
     36c:	a828      	add	r0, sp, #160	; 0xa0
     36e:	4bb3      	ldr	r3, [pc, #716]	; (63c <wcm_run+0x3e4>)
     370:	4798      	blx	r3
					if (retval == STATUS_OK)
     372:	2800      	cmp	r0, #0
     374:	d1d8      	bne.n	328 <wcm_run+0xd0>
						bSPIInitialized = true;
     376:	2201      	movs	r2, #1
     378:	4ba9      	ldr	r3, [pc, #676]	; (620 <wcm_run+0x3c8>)
     37a:	701a      	strb	r2, [r3, #0]
						wcm_usart_send_pc_message("wcm_run: SPI initialized\r\n");
     37c:	48b0      	ldr	r0, [pc, #704]	; (640 <wcm_run+0x3e8>)
     37e:	4ba6      	ldr	r3, [pc, #664]	; (618 <wcm_run+0x3c0>)
     380:	4798      	blx	r3
     382:	e7d4      	b.n	32e <wcm_run+0xd6>
				if (wcm_spi_transfer_complete())
     384:	47b0      	blx	r6
     386:	2800      	cmp	r0, #0
     388:	d0d5      	beq.n	336 <wcm_run+0xde>
					delay_ms(10);
     38a:	200a      	movs	r0, #10
     38c:	4bad      	ldr	r3, [pc, #692]	; (644 <wcm_run+0x3ec>)
     38e:	4798      	blx	r3
					spi_rx_buffer[spi_command_length] = '\0';
     390:	a82c      	add	r0, sp, #176	; 0xb0
     392:	2300      	movs	r3, #0
     394:	7203      	strb	r3, [r0, #8]
	if (strstr(command, "LEAK"))
     396:	49ac      	ldr	r1, [pc, #688]	; (648 <wcm_run+0x3f0>)
     398:	4bac      	ldr	r3, [pc, #688]	; (64c <wcm_run+0x3f4>)
     39a:	4798      	blx	r3
     39c:	2800      	cmp	r0, #0
     39e:	d024      	beq.n	3ea <wcm_run+0x192>
		strcpy(last_command, command);
     3a0:	a92c      	add	r1, sp, #176	; 0xb0
     3a2:	48ab      	ldr	r0, [pc, #684]	; (650 <wcm_run+0x3f8>)
     3a4:	4bab      	ldr	r3, [pc, #684]	; (654 <wcm_run+0x3fc>)
     3a6:	4798      	blx	r3
		status = wcm_adc_read(&v);
     3a8:	a808      	add	r0, sp, #32
     3aa:	4bab      	ldr	r3, [pc, #684]	; (658 <wcm_run+0x400>)
     3ac:	4798      	blx	r3
		if (status == STATUS_OK)
     3ae:	2800      	cmp	r0, #0
     3b0:	d117      	bne.n	3e2 <wcm_run+0x18a>
			sprintf(response, "%*.2f", spi_command_length, v);
     3b2:	9808      	ldr	r0, [sp, #32]
     3b4:	4ba9      	ldr	r3, [pc, #676]	; (65c <wcm_run+0x404>)
     3b6:	4798      	blx	r3
     3b8:	9000      	str	r0, [sp, #0]
     3ba:	9101      	str	r1, [sp, #4]
     3bc:	2208      	movs	r2, #8
     3be:	49a8      	ldr	r1, [pc, #672]	; (660 <wcm_run+0x408>)
     3c0:	a828      	add	r0, sp, #160	; 0xa0
     3c2:	4ba8      	ldr	r3, [pc, #672]	; (664 <wcm_run+0x40c>)
     3c4:	4798      	blx	r3
					retval = wcm_spi_start_read(spi_tx_buffer, spi_rx_buffer, spi_command_length);
     3c6:	2208      	movs	r2, #8
     3c8:	a92c      	add	r1, sp, #176	; 0xb0
     3ca:	a828      	add	r0, sp, #160	; 0xa0
     3cc:	4b9b      	ldr	r3, [pc, #620]	; (63c <wcm_run+0x3e4>)
     3ce:	4798      	blx	r3
					if (retval != STATUS_OK)
     3d0:	2800      	cmp	r0, #0
     3d2:	d0b0      	beq.n	336 <wcm_run+0xde>
						bSPIInitialized = false;
     3d4:	4b92      	ldr	r3, [pc, #584]	; (620 <wcm_run+0x3c8>)
     3d6:	2200      	movs	r2, #0
     3d8:	701a      	strb	r2, [r3, #0]
						wcm_usart_send_pc_message("wcm_run: wcm_spi_start_read failed (2)!\r\n");
     3da:	48a3      	ldr	r0, [pc, #652]	; (668 <wcm_run+0x410>)
     3dc:	4b8e      	ldr	r3, [pc, #568]	; (618 <wcm_run+0x3c0>)
     3de:	4798      	blx	r3
     3e0:	e7a9      	b.n	336 <wcm_run+0xde>
			wcm_usart_send_pc_message("handle_spi_command: Could not read leak detector!\r\n");
     3e2:	48a2      	ldr	r0, [pc, #648]	; (66c <wcm_run+0x414>)
     3e4:	4b8c      	ldr	r3, [pc, #560]	; (618 <wcm_run+0x3c0>)
     3e6:	4798      	blx	r3
     3e8:	e7ed      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "read_gps"))
     3ea:	49a1      	ldr	r1, [pc, #644]	; (670 <wcm_run+0x418>)
     3ec:	a82c      	add	r0, sp, #176	; 0xb0
     3ee:	4b97      	ldr	r3, [pc, #604]	; (64c <wcm_run+0x3f4>)
     3f0:	4798      	blx	r3
     3f2:	2800      	cmp	r0, #0
     3f4:	d018      	beq.n	428 <wcm_run+0x1d0>
		strcpy(last_command, command);
     3f6:	a92c      	add	r1, sp, #176	; 0xb0
     3f8:	4895      	ldr	r0, [pc, #596]	; (650 <wcm_run+0x3f8>)
     3fa:	4b96      	ldr	r3, [pc, #600]	; (654 <wcm_run+0x3fc>)
     3fc:	4798      	blx	r3
			status = wcm_usart_check_for_gps_data();
     3fe:	4f9d      	ldr	r7, [pc, #628]	; (674 <wcm_run+0x41c>)
     400:	47b8      	blx	r7
		while (status == STATUS_BUSY){
     402:	2805      	cmp	r0, #5
     404:	d0fc      	beq.n	400 <wcm_run+0x1a8>
		if (status == STATUS_OK)
     406:	2800      	cmp	r0, #0
     408:	d1dd      	bne.n	3c6 <wcm_run+0x16e>
			data_received = wcm_usart_get_gps_data(command, COMMAND_LENGTH);
     40a:	2140      	movs	r1, #64	; 0x40
     40c:	a82c      	add	r0, sp, #176	; 0xb0
     40e:	4b9a      	ldr	r3, [pc, #616]	; (678 <wcm_run+0x420>)
     410:	4798      	blx	r3
			if (data_received)
     412:	2800      	cmp	r0, #0
     414:	d0d7      	beq.n	3c6 <wcm_run+0x16e>
				sprintf(response, COMMAND_LENGTH, command);
     416:	aa2c      	add	r2, sp, #176	; 0xb0
     418:	2140      	movs	r1, #64	; 0x40
     41a:	a828      	add	r0, sp, #160	; 0xa0
     41c:	4b91      	ldr	r3, [pc, #580]	; (664 <wcm_run+0x40c>)
     41e:	4798      	blx	r3
				num_sent = 1;
     420:	2201      	movs	r2, #1
     422:	4b96      	ldr	r3, [pc, #600]	; (67c <wcm_run+0x424>)
     424:	701a      	strb	r2, [r3, #0]
     426:	e7ce      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "wcm_ping"))
     428:	4995      	ldr	r1, [pc, #596]	; (680 <wcm_run+0x428>)
     42a:	a82c      	add	r0, sp, #176	; 0xb0
     42c:	4b87      	ldr	r3, [pc, #540]	; (64c <wcm_run+0x3f4>)
     42e:	4798      	blx	r3
     430:	2800      	cmp	r0, #0
     432:	d00e      	beq.n	452 <wcm_run+0x1fa>
		strcpy(last_command, command);
     434:	a92c      	add	r1, sp, #176	; 0xb0
     436:	4886      	ldr	r0, [pc, #536]	; (650 <wcm_run+0x3f8>)
     438:	4b86      	ldr	r3, [pc, #536]	; (654 <wcm_run+0x3fc>)
     43a:	4798      	blx	r3
		wcm_usart_send_pc_message("handle_command: Ping!\r\n");
     43c:	4891      	ldr	r0, [pc, #580]	; (684 <wcm_run+0x42c>)
     43e:	4b76      	ldr	r3, [pc, #472]	; (618 <wcm_run+0x3c0>)
     440:	4798      	blx	r3
		tc_set_count_value(&tc_instance, 0xFFFAA22C);
     442:	496a      	ldr	r1, [pc, #424]	; (5ec <wcm_run+0x394>)
     444:	486a      	ldr	r0, [pc, #424]	; (5f0 <wcm_run+0x398>)
     446:	4b90      	ldr	r3, [pc, #576]	; (688 <wcm_run+0x430>)
     448:	4798      	blx	r3
		timer_0_elapsed = true;
     44a:	2201      	movs	r2, #1
     44c:	4b75      	ldr	r3, [pc, #468]	; (624 <wcm_run+0x3cc>)
     44e:	701a      	strb	r2, [r3, #0]
     450:	e7b9      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "MS5637"))
     452:	498e      	ldr	r1, [pc, #568]	; (68c <wcm_run+0x434>)
     454:	a82c      	add	r0, sp, #176	; 0xb0
     456:	4b7d      	ldr	r3, [pc, #500]	; (64c <wcm_run+0x3f4>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d01c      	beq.n	498 <wcm_run+0x240>
		strcpy(last_command, command);
     45e:	a92c      	add	r1, sp, #176	; 0xb0
     460:	487b      	ldr	r0, [pc, #492]	; (650 <wcm_run+0x3f8>)
     462:	4b7c      	ldr	r3, [pc, #496]	; (654 <wcm_run+0x3fc>)
     464:	4798      	blx	r3
		status = wcm_ms5637_read(&d1, &pressure, &d2, &ms5637_temperature);
     466:	4b8a      	ldr	r3, [pc, #552]	; (690 <wcm_run+0x438>)
     468:	aa06      	add	r2, sp, #24
     46a:	a908      	add	r1, sp, #32
     46c:	a804      	add	r0, sp, #16
     46e:	4f89      	ldr	r7, [pc, #548]	; (694 <wcm_run+0x43c>)
     470:	47b8      	blx	r7
		if (status == STATUS_OK)
     472:	2800      	cmp	r0, #0
     474:	d10c      	bne.n	490 <wcm_run+0x238>
			sprintf(response, "%*.2f", spi_command_length, pressure);
     476:	9a08      	ldr	r2, [sp, #32]
     478:	9b09      	ldr	r3, [sp, #36]	; 0x24
     47a:	9200      	str	r2, [sp, #0]
     47c:	9301      	str	r3, [sp, #4]
     47e:	2208      	movs	r2, #8
     480:	4977      	ldr	r1, [pc, #476]	; (660 <wcm_run+0x408>)
     482:	a828      	add	r0, sp, #160	; 0xa0
     484:	4b77      	ldr	r3, [pc, #476]	; (664 <wcm_run+0x40c>)
     486:	4798      	blx	r3
			num_sent = 1;
     488:	2201      	movs	r2, #1
     48a:	4b7c      	ldr	r3, [pc, #496]	; (67c <wcm_run+0x424>)
     48c:	701a      	strb	r2, [r3, #0]
     48e:	e79a      	b.n	3c6 <wcm_run+0x16e>
			wcm_usart_send_pc_message("handle_spi_command: Could not read MS5637!\r\n");
     490:	4881      	ldr	r0, [pc, #516]	; (698 <wcm_run+0x440>)
     492:	4b61      	ldr	r3, [pc, #388]	; (618 <wcm_run+0x3c0>)
     494:	4798      	blx	r3
     496:	e796      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "read_mc3416"))
     498:	4980      	ldr	r1, [pc, #512]	; (69c <wcm_run+0x444>)
     49a:	a82c      	add	r0, sp, #176	; 0xb0
     49c:	4b6b      	ldr	r3, [pc, #428]	; (64c <wcm_run+0x3f4>)
     49e:	4798      	blx	r3
     4a0:	2800      	cmp	r0, #0
     4a2:	d019      	beq.n	4d8 <wcm_run+0x280>
		strcpy(last_command, command);	
     4a4:	a92c      	add	r1, sp, #176	; 0xb0
     4a6:	486a      	ldr	r0, [pc, #424]	; (650 <wcm_run+0x3f8>)
     4a8:	4b6a      	ldr	r3, [pc, #424]	; (654 <wcm_run+0x3fc>)
     4aa:	4798      	blx	r3
		status = wcm_mc3416_read_tilt(&mc3416_angle);
     4ac:	a808      	add	r0, sp, #32
     4ae:	4b7c      	ldr	r3, [pc, #496]	; (6a0 <wcm_run+0x448>)
     4b0:	4798      	blx	r3
		if (status == STATUS_OK)
     4b2:	2800      	cmp	r0, #0
     4b4:	d10c      	bne.n	4d0 <wcm_run+0x278>
			sprintf(response, "%*.2f", spi_command_length, mc3416_angle);
     4b6:	9a08      	ldr	r2, [sp, #32]
     4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4ba:	9200      	str	r2, [sp, #0]
     4bc:	9301      	str	r3, [sp, #4]
     4be:	2208      	movs	r2, #8
     4c0:	4967      	ldr	r1, [pc, #412]	; (660 <wcm_run+0x408>)
     4c2:	a828      	add	r0, sp, #160	; 0xa0
     4c4:	4b67      	ldr	r3, [pc, #412]	; (664 <wcm_run+0x40c>)
     4c6:	4798      	blx	r3
			num_sent = 1;
     4c8:	2201      	movs	r2, #1
     4ca:	4b6c      	ldr	r3, [pc, #432]	; (67c <wcm_run+0x424>)
     4cc:	701a      	strb	r2, [r3, #0]
     4ce:	e77a      	b.n	3c6 <wcm_run+0x16e>
			wcm_usart_send_pc_message("handle_command: Could not read MC3416!\r\n");
     4d0:	4874      	ldr	r0, [pc, #464]	; (6a4 <wcm_run+0x44c>)
     4d2:	4b51      	ldr	r3, [pc, #324]	; (618 <wcm_run+0x3c0>)
     4d4:	4798      	blx	r3
     4d6:	e776      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "calibrate_mc3416"))
     4d8:	4973      	ldr	r1, [pc, #460]	; (6a8 <wcm_run+0x450>)
     4da:	a82c      	add	r0, sp, #176	; 0xb0
     4dc:	4b5b      	ldr	r3, [pc, #364]	; (64c <wcm_run+0x3f4>)
     4de:	4798      	blx	r3
     4e0:	2800      	cmp	r0, #0
     4e2:	d00c      	beq.n	4fe <wcm_run+0x2a6>
		strcpy(last_command, command);	
     4e4:	a92c      	add	r1, sp, #176	; 0xb0
     4e6:	485a      	ldr	r0, [pc, #360]	; (650 <wcm_run+0x3f8>)
     4e8:	4b5a      	ldr	r3, [pc, #360]	; (654 <wcm_run+0x3fc>)
     4ea:	4798      	blx	r3
		status = wcm_mc3416_calibrate();
     4ec:	4b6f      	ldr	r3, [pc, #444]	; (6ac <wcm_run+0x454>)
     4ee:	4798      	blx	r3
		if (status != STATUS_OK)
     4f0:	2800      	cmp	r0, #0
     4f2:	d100      	bne.n	4f6 <wcm_run+0x29e>
     4f4:	e767      	b.n	3c6 <wcm_run+0x16e>
			wcm_usart_send_pc_message("handle_command: Could not calibrate MC3416!\r\n");
     4f6:	486e      	ldr	r0, [pc, #440]	; (6b0 <wcm_run+0x458>)
     4f8:	4b47      	ldr	r3, [pc, #284]	; (618 <wcm_run+0x3c0>)
     4fa:	4798      	blx	r3
     4fc:	e763      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "zero_mc3416"))
     4fe:	496d      	ldr	r1, [pc, #436]	; (6b4 <wcm_run+0x45c>)
     500:	a82c      	add	r0, sp, #176	; 0xb0
     502:	4b52      	ldr	r3, [pc, #328]	; (64c <wcm_run+0x3f4>)
     504:	4798      	blx	r3
     506:	2800      	cmp	r0, #0
     508:	d00c      	beq.n	524 <wcm_run+0x2cc>
		strcpy(last_command, command);	
     50a:	a92c      	add	r1, sp, #176	; 0xb0
     50c:	4850      	ldr	r0, [pc, #320]	; (650 <wcm_run+0x3f8>)
     50e:	4b51      	ldr	r3, [pc, #324]	; (654 <wcm_run+0x3fc>)
     510:	4798      	blx	r3
		status = wcm_mc3416_zero_offsets();
     512:	4b69      	ldr	r3, [pc, #420]	; (6b8 <wcm_run+0x460>)
     514:	4798      	blx	r3
		if (status != STATUS_OK)
     516:	2800      	cmp	r0, #0
     518:	d100      	bne.n	51c <wcm_run+0x2c4>
     51a:	e754      	b.n	3c6 <wcm_run+0x16e>
			wcm_usart_send_pc_message("handle_command: Could not zero MC3416!\r\n");
     51c:	4867      	ldr	r0, [pc, #412]	; (6bc <wcm_run+0x464>)
     51e:	4b3e      	ldr	r3, [pc, #248]	; (618 <wcm_run+0x3c0>)
     520:	4798      	blx	r3
     522:	e750      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "POWER"))
     524:	4966      	ldr	r1, [pc, #408]	; (6c0 <wcm_run+0x468>)
     526:	a82c      	add	r0, sp, #176	; 0xb0
     528:	4b48      	ldr	r3, [pc, #288]	; (64c <wcm_run+0x3f4>)
     52a:	4798      	blx	r3
     52c:	2800      	cmp	r0, #0
     52e:	d028      	beq.n	582 <wcm_run+0x32a>
		strcpy(last_command, command);
     530:	a92c      	add	r1, sp, #176	; 0xb0
     532:	4847      	ldr	r0, [pc, #284]	; (650 <wcm_run+0x3f8>)
     534:	4b47      	ldr	r3, [pc, #284]	; (654 <wcm_run+0x3fc>)
     536:	4798      	blx	r3
		en_3v3va = wcm_gpio_3v3va_get();
     538:	4b62      	ldr	r3, [pc, #392]	; (6c4 <wcm_run+0x46c>)
     53a:	4798      	blx	r3
     53c:	0007      	movs	r7, r0
		gps_pwr_en = wcm_gpio_gps_pwr_en_get();
     53e:	4b62      	ldr	r3, [pc, #392]	; (6c8 <wcm_run+0x470>)
     540:	4798      	blx	r3
     542:	4b62      	ldr	r3, [pc, #392]	; (6cc <wcm_run+0x474>)
     544:	7018      	strb	r0, [r3, #0]
		cell_pwr_en = wcm_gpio_cell_pwr_en_get();
     546:	4b62      	ldr	r3, [pc, #392]	; (6d0 <wcm_run+0x478>)
     548:	4798      	blx	r3
     54a:	4b62      	ldr	r3, [pc, #392]	; (6d4 <wcm_run+0x47c>)
     54c:	7018      	strb	r0, [r3, #0]
		lgt_on = wcm_lgt_get();
     54e:	4b62      	ldr	r3, [pc, #392]	; (6d8 <wcm_run+0x480>)
     550:	4798      	blx	r3
     552:	4b62      	ldr	r3, [pc, #392]	; (6dc <wcm_run+0x484>)
     554:	7018      	strb	r0, [r3, #0]
		sat_pwr_en = wcm_gpio_sat_pwr_en_get();
     556:	4b62      	ldr	r3, [pc, #392]	; (6e0 <wcm_run+0x488>)
     558:	4798      	blx	r3
     55a:	4b62      	ldr	r3, [pc, #392]	; (6e4 <wcm_run+0x48c>)
     55c:	7018      	strb	r0, [r3, #0]
		wf_pwr_en = wcm_gpio_wf_pwr_en_get();
     55e:	4b62      	ldr	r3, [pc, #392]	; (6e8 <wcm_run+0x490>)
     560:	4798      	blx	r3
     562:	4b62      	ldr	r3, [pc, #392]	; (6ec <wcm_run+0x494>)
     564:	7018      	strb	r0, [r3, #0]
		com_sw_a = wcm_gpio_com_sw_a_get();
     566:	4b62      	ldr	r3, [pc, #392]	; (6f0 <wcm_run+0x498>)
     568:	4798      	blx	r3
     56a:	4b62      	ldr	r3, [pc, #392]	; (6f4 <wcm_run+0x49c>)
     56c:	7018      	strb	r0, [r3, #0]
		sprintf(response, "%*d",spi_command_length, (en_3v3va) ? 1 : 0);
     56e:	003b      	movs	r3, r7
     570:	2208      	movs	r2, #8
     572:	4961      	ldr	r1, [pc, #388]	; (6f8 <wcm_run+0x4a0>)
     574:	a828      	add	r0, sp, #160	; 0xa0
     576:	4f3b      	ldr	r7, [pc, #236]	; (664 <wcm_run+0x40c>)
     578:	47b8      	blx	r7
		num_sent = 1;
     57a:	2201      	movs	r2, #1
     57c:	4b3f      	ldr	r3, [pc, #252]	; (67c <wcm_run+0x424>)
     57e:	701a      	strb	r2, [r3, #0]
     580:	e721      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "RESP"))
     582:	495e      	ldr	r1, [pc, #376]	; (6fc <wcm_run+0x4a4>)
     584:	a82c      	add	r0, sp, #176	; 0xb0
     586:	4b31      	ldr	r3, [pc, #196]	; (64c <wcm_run+0x3f4>)
     588:	4798      	blx	r3
     58a:	2800      	cmp	r0, #0
     58c:	d100      	bne.n	590 <wcm_run+0x338>
     58e:	e71a      	b.n	3c6 <wcm_run+0x16e>
		if (strstr(last_command, "LEAK"))
     590:	492d      	ldr	r1, [pc, #180]	; (648 <wcm_run+0x3f0>)
     592:	482f      	ldr	r0, [pc, #188]	; (650 <wcm_run+0x3f8>)
     594:	4b2d      	ldr	r3, [pc, #180]	; (64c <wcm_run+0x3f4>)
     596:	4798      	blx	r3
     598:	2800      	cmp	r0, #0
     59a:	d006      	beq.n	5aa <wcm_run+0x352>
			sprintf(response, "--------");
     59c:	aa28      	add	r2, sp, #160	; 0xa0
     59e:	4b58      	ldr	r3, [pc, #352]	; (700 <wcm_run+0x4a8>)
     5a0:	cb03      	ldmia	r3!, {r0, r1}
     5a2:	c203      	stmia	r2!, {r0, r1}
     5a4:	781b      	ldrb	r3, [r3, #0]
     5a6:	7013      	strb	r3, [r2, #0]
     5a8:	e70d      	b.n	3c6 <wcm_run+0x16e>
		else if (strstr(last_command, "MS5637"))
     5aa:	4938      	ldr	r1, [pc, #224]	; (68c <wcm_run+0x434>)
     5ac:	4828      	ldr	r0, [pc, #160]	; (650 <wcm_run+0x3f8>)
     5ae:	4b27      	ldr	r3, [pc, #156]	; (64c <wcm_run+0x3f4>)
     5b0:	4798      	blx	r3
     5b2:	2800      	cmp	r0, #0
     5b4:	d100      	bne.n	5b8 <wcm_run+0x360>
     5b6:	e0a5      	b.n	704 <wcm_run+0x4ac>
			if (num_sent == 1)
     5b8:	4b30      	ldr	r3, [pc, #192]	; (67c <wcm_run+0x424>)
     5ba:	781b      	ldrb	r3, [r3, #0]
     5bc:	2b01      	cmp	r3, #1
     5be:	d10d      	bne.n	5dc <wcm_run+0x384>
				sprintf(response, "%*.2f", spi_command_length, ms5637_temperature);
     5c0:	4b33      	ldr	r3, [pc, #204]	; (690 <wcm_run+0x438>)
     5c2:	681a      	ldr	r2, [r3, #0]
     5c4:	685b      	ldr	r3, [r3, #4]
     5c6:	9200      	str	r2, [sp, #0]
     5c8:	9301      	str	r3, [sp, #4]
     5ca:	2208      	movs	r2, #8
     5cc:	4924      	ldr	r1, [pc, #144]	; (660 <wcm_run+0x408>)
     5ce:	a828      	add	r0, sp, #160	; 0xa0
     5d0:	4b24      	ldr	r3, [pc, #144]	; (664 <wcm_run+0x40c>)
     5d2:	4798      	blx	r3
				num_sent = 2;
     5d4:	2202      	movs	r2, #2
     5d6:	4b29      	ldr	r3, [pc, #164]	; (67c <wcm_run+0x424>)
     5d8:	701a      	strb	r2, [r3, #0]
     5da:	e6f4      	b.n	3c6 <wcm_run+0x16e>
				sprintf(response, "--------");
     5dc:	aa28      	add	r2, sp, #160	; 0xa0
     5de:	4b48      	ldr	r3, [pc, #288]	; (700 <wcm_run+0x4a8>)
     5e0:	cb03      	ldmia	r3!, {r0, r1}
     5e2:	c203      	stmia	r2!, {r0, r1}
     5e4:	781b      	ldrb	r3, [r3, #0]
     5e6:	7013      	strb	r3, [r2, #0]
     5e8:	e6ed      	b.n	3c6 <wcm_run+0x16e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	fffaa22c 	.word	0xfffaa22c
     5f0:	20000c6c 	.word	0x20000c6c
     5f4:	42002000 	.word	0x42002000
     5f8:	00003699 	.word	0x00003699
     5fc:	00000115 	.word	0x00000115
     600:	000039c9 	.word	0x000039c9
     604:	00003661 	.word	0x00003661
     608:	0000ce4c 	.word	0x0000ce4c
     60c:	e000e100 	.word	0xe000e100
     610:	00008371 	.word	0x00008371
     614:	0000ce50 	.word	0x0000ce50
     618:	00002551 	.word	0x00002551
     61c:	0000286d 	.word	0x0000286d
     620:	200009dc 	.word	0x200009dc
     624:	20000a02 	.word	0x20000a02
     628:	000024fd 	.word	0x000024fd
     62c:	0000ce80 	.word	0x0000ce80
     630:	00002509 	.word	0x00002509
     634:	0000148d 	.word	0x0000148d
     638:	00002391 	.word	0x00002391
     63c:	000024d9 	.word	0x000024d9
     640:	0000ce64 	.word	0x0000ce64
     644:	0000488d 	.word	0x0000488d
     648:	0000ceac 	.word	0x0000ceac
     64c:	00008781 	.word	0x00008781
     650:	200009e0 	.word	0x200009e0
     654:	00008449 	.word	0x00008449
     658:	000010dd 	.word	0x000010dd
     65c:	00008099 	.word	0x00008099
     660:	0000ceb4 	.word	0x0000ceb4
     664:	00008405 	.word	0x00008405
     668:	0000d110 	.word	0x0000d110
     66c:	0000cebc 	.word	0x0000cebc
     670:	0000cef0 	.word	0x0000cef0
     674:	00002521 	.word	0x00002521
     678:	000029b1 	.word	0x000029b1
     67c:	20000a00 	.word	0x20000a00
     680:	0000cefc 	.word	0x0000cefc
     684:	0000cf08 	.word	0x0000cf08
     688:	00003979 	.word	0x00003979
     68c:	0000cf20 	.word	0x0000cf20
     690:	200009f8 	.word	0x200009f8
     694:	00002019 	.word	0x00002019
     698:	0000cf28 	.word	0x0000cf28
     69c:	0000cf58 	.word	0x0000cf58
     6a0:	00001c91 	.word	0x00001c91
     6a4:	0000cf64 	.word	0x0000cf64
     6a8:	0000cf90 	.word	0x0000cf90
     6ac:	00001e45 	.word	0x00001e45
     6b0:	0000cfa4 	.word	0x0000cfa4
     6b4:	0000cfd4 	.word	0x0000cfd4
     6b8:	00001ee5 	.word	0x00001ee5
     6bc:	0000cfe0 	.word	0x0000cfe0
     6c0:	0000d00c 	.word	0x0000d00c
     6c4:	000014b1 	.word	0x000014b1
     6c8:	000014ed 	.word	0x000014ed
     6cc:	200009df 	.word	0x200009df
     6d0:	00001565 	.word	0x00001565
     6d4:	200009dd 	.word	0x200009dd
     6d8:	000015c5 	.word	0x000015c5
     6dc:	200009f0 	.word	0x200009f0
     6e0:	0000153d 	.word	0x0000153d
     6e4:	20000a01 	.word	0x20000a01
     6e8:	00001595 	.word	0x00001595
     6ec:	20000a03 	.word	0x20000a03
     6f0:	00001515 	.word	0x00001515
     6f4:	200009de 	.word	0x200009de
     6f8:	0000d014 	.word	0x0000d014
     6fc:	0000d018 	.word	0x0000d018
     700:	0000d020 	.word	0x0000d020
		else if (strstr(last_command, "POWER"))
     704:	49ca      	ldr	r1, [pc, #808]	; (a30 <wcm_run+0x7d8>)
     706:	48cb      	ldr	r0, [pc, #812]	; (a34 <wcm_run+0x7dc>)
     708:	4bcb      	ldr	r3, [pc, #812]	; (a38 <wcm_run+0x7e0>)
     70a:	4798      	blx	r3
     70c:	2800      	cmp	r0, #0
     70e:	d056      	beq.n	7be <wcm_run+0x566>
			if (num_sent == 1)
     710:	4bca      	ldr	r3, [pc, #808]	; (a3c <wcm_run+0x7e4>)
     712:	781b      	ldrb	r3, [r3, #0]
     714:	2b01      	cmp	r3, #1
     716:	d10a      	bne.n	72e <wcm_run+0x4d6>
				sprintf(response, "%*d",spi_command_length, (gps_pwr_en) ? 1 : 0);
     718:	4bc9      	ldr	r3, [pc, #804]	; (a40 <wcm_run+0x7e8>)
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	2208      	movs	r2, #8
     71e:	49c9      	ldr	r1, [pc, #804]	; (a44 <wcm_run+0x7ec>)
     720:	a828      	add	r0, sp, #160	; 0xa0
     722:	4fc9      	ldr	r7, [pc, #804]	; (a48 <wcm_run+0x7f0>)
     724:	47b8      	blx	r7
				num_sent = 2;
     726:	2202      	movs	r2, #2
     728:	4bc4      	ldr	r3, [pc, #784]	; (a3c <wcm_run+0x7e4>)
     72a:	701a      	strb	r2, [r3, #0]
     72c:	e64b      	b.n	3c6 <wcm_run+0x16e>
			else if (num_sent == 2)
     72e:	2b02      	cmp	r3, #2
     730:	d10a      	bne.n	748 <wcm_run+0x4f0>
				sprintf(response, "%*d",spi_command_length, (cell_pwr_en) ? 1 : 0);
     732:	4bc6      	ldr	r3, [pc, #792]	; (a4c <wcm_run+0x7f4>)
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2208      	movs	r2, #8
     738:	49c2      	ldr	r1, [pc, #776]	; (a44 <wcm_run+0x7ec>)
     73a:	a828      	add	r0, sp, #160	; 0xa0
     73c:	4fc2      	ldr	r7, [pc, #776]	; (a48 <wcm_run+0x7f0>)
     73e:	47b8      	blx	r7
				num_sent = 3;
     740:	2203      	movs	r2, #3
     742:	4bbe      	ldr	r3, [pc, #760]	; (a3c <wcm_run+0x7e4>)
     744:	701a      	strb	r2, [r3, #0]
     746:	e63e      	b.n	3c6 <wcm_run+0x16e>
			else if (num_sent == 3)
     748:	2b03      	cmp	r3, #3
     74a:	d10a      	bne.n	762 <wcm_run+0x50a>
				sprintf(response, "%*d",spi_command_length, (lgt_on) ? 1 : 0);
     74c:	4bc0      	ldr	r3, [pc, #768]	; (a50 <wcm_run+0x7f8>)
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	2208      	movs	r2, #8
     752:	49bc      	ldr	r1, [pc, #752]	; (a44 <wcm_run+0x7ec>)
     754:	a828      	add	r0, sp, #160	; 0xa0
     756:	4fbc      	ldr	r7, [pc, #752]	; (a48 <wcm_run+0x7f0>)
     758:	47b8      	blx	r7
				num_sent = 4;
     75a:	2204      	movs	r2, #4
     75c:	4bb7      	ldr	r3, [pc, #732]	; (a3c <wcm_run+0x7e4>)
     75e:	701a      	strb	r2, [r3, #0]
     760:	e631      	b.n	3c6 <wcm_run+0x16e>
			else if (num_sent == 4)
     762:	2b04      	cmp	r3, #4
     764:	d10a      	bne.n	77c <wcm_run+0x524>
				sprintf(response, "%*d",spi_command_length, (sat_pwr_en) ? 1 : 0);
     766:	4bbb      	ldr	r3, [pc, #748]	; (a54 <wcm_run+0x7fc>)
     768:	781b      	ldrb	r3, [r3, #0]
     76a:	2208      	movs	r2, #8
     76c:	49b5      	ldr	r1, [pc, #724]	; (a44 <wcm_run+0x7ec>)
     76e:	a828      	add	r0, sp, #160	; 0xa0
     770:	4fb5      	ldr	r7, [pc, #724]	; (a48 <wcm_run+0x7f0>)
     772:	47b8      	blx	r7
				num_sent = 5;
     774:	2205      	movs	r2, #5
     776:	4bb1      	ldr	r3, [pc, #708]	; (a3c <wcm_run+0x7e4>)
     778:	701a      	strb	r2, [r3, #0]
     77a:	e624      	b.n	3c6 <wcm_run+0x16e>
			else if (num_sent == 5)
     77c:	2b05      	cmp	r3, #5
     77e:	d10a      	bne.n	796 <wcm_run+0x53e>
				sprintf(response, "%*d",spi_command_length, (wf_pwr_en) ? 1 : 0);
     780:	4bb5      	ldr	r3, [pc, #724]	; (a58 <wcm_run+0x800>)
     782:	781b      	ldrb	r3, [r3, #0]
     784:	2208      	movs	r2, #8
     786:	49af      	ldr	r1, [pc, #700]	; (a44 <wcm_run+0x7ec>)
     788:	a828      	add	r0, sp, #160	; 0xa0
     78a:	4faf      	ldr	r7, [pc, #700]	; (a48 <wcm_run+0x7f0>)
     78c:	47b8      	blx	r7
				num_sent = 6;
     78e:	2206      	movs	r2, #6
     790:	4baa      	ldr	r3, [pc, #680]	; (a3c <wcm_run+0x7e4>)
     792:	701a      	strb	r2, [r3, #0]
     794:	e617      	b.n	3c6 <wcm_run+0x16e>
			else if (num_sent == 6)
     796:	2b06      	cmp	r3, #6
     798:	d10a      	bne.n	7b0 <wcm_run+0x558>
				sprintf(response, "%*d",spi_command_length, (com_sw_a) ? 1 : 0);
     79a:	4bb0      	ldr	r3, [pc, #704]	; (a5c <wcm_run+0x804>)
     79c:	781b      	ldrb	r3, [r3, #0]
     79e:	2208      	movs	r2, #8
     7a0:	49a8      	ldr	r1, [pc, #672]	; (a44 <wcm_run+0x7ec>)
     7a2:	a828      	add	r0, sp, #160	; 0xa0
     7a4:	4fa8      	ldr	r7, [pc, #672]	; (a48 <wcm_run+0x7f0>)
     7a6:	47b8      	blx	r7
				num_sent = 7;
     7a8:	2207      	movs	r2, #7
     7aa:	4ba4      	ldr	r3, [pc, #656]	; (a3c <wcm_run+0x7e4>)
     7ac:	701a      	strb	r2, [r3, #0]
     7ae:	e60a      	b.n	3c6 <wcm_run+0x16e>
				sprintf(response, "--------");
     7b0:	aa28      	add	r2, sp, #160	; 0xa0
     7b2:	4bab      	ldr	r3, [pc, #684]	; (a60 <wcm_run+0x808>)
     7b4:	cb03      	ldmia	r3!, {r0, r1}
     7b6:	c203      	stmia	r2!, {r0, r1}
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	7013      	strb	r3, [r2, #0]
     7bc:	e603      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "+3V3VA_EN"))
     7be:	49a9      	ldr	r1, [pc, #676]	; (a64 <wcm_run+0x80c>)
     7c0:	a82c      	add	r0, sp, #176	; 0xb0
     7c2:	4b9d      	ldr	r3, [pc, #628]	; (a38 <wcm_run+0x7e0>)
     7c4:	4798      	blx	r3
     7c6:	2800      	cmp	r0, #0
     7c8:	d016      	beq.n	7f8 <wcm_run+0x5a0>
		token = strtok(command, " ");
     7ca:	49a7      	ldr	r1, [pc, #668]	; (a68 <wcm_run+0x810>)
     7cc:	a82c      	add	r0, sp, #176	; 0xb0
     7ce:	4fa7      	ldr	r7, [pc, #668]	; (a6c <wcm_run+0x814>)
     7d0:	47b8      	blx	r7
		token = strtok(NULL, " ");
     7d2:	49a5      	ldr	r1, [pc, #660]	; (a68 <wcm_run+0x810>)
     7d4:	2000      	movs	r0, #0
     7d6:	47b8      	blx	r7
		i = atoi(token);
     7d8:	4ba5      	ldr	r3, [pc, #660]	; (a70 <wcm_run+0x818>)
     7da:	4798      	blx	r3
     7dc:	0007      	movs	r7, r0
		sprintf(command, "+3V3VA_EN %d", i);
     7de:	0002      	movs	r2, r0
     7e0:	49a4      	ldr	r1, [pc, #656]	; (a74 <wcm_run+0x81c>)
     7e2:	a82c      	add	r0, sp, #176	; 0xb0
     7e4:	4b98      	ldr	r3, [pc, #608]	; (a48 <wcm_run+0x7f0>)
     7e6:	4798      	blx	r3
		if (i == 0)
     7e8:	2f00      	cmp	r7, #0
     7ea:	d102      	bne.n	7f2 <wcm_run+0x59a>
			wcm_gpio_3v3va_off();
     7ec:	4ba2      	ldr	r3, [pc, #648]	; (a78 <wcm_run+0x820>)
     7ee:	4798      	blx	r3
     7f0:	e5e9      	b.n	3c6 <wcm_run+0x16e>
			wcm_gpio_3v3va_on();
     7f2:	4ba2      	ldr	r3, [pc, #648]	; (a7c <wcm_run+0x824>)
     7f4:	4798      	blx	r3
     7f6:	e5e6      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "GPS_PWR_EN"))
     7f8:	49a1      	ldr	r1, [pc, #644]	; (a80 <wcm_run+0x828>)
     7fa:	a82c      	add	r0, sp, #176	; 0xb0
     7fc:	4b8e      	ldr	r3, [pc, #568]	; (a38 <wcm_run+0x7e0>)
     7fe:	4798      	blx	r3
     800:	2800      	cmp	r0, #0
     802:	d016      	beq.n	832 <wcm_run+0x5da>
		token = strtok(command, " ");
     804:	4998      	ldr	r1, [pc, #608]	; (a68 <wcm_run+0x810>)
     806:	a82c      	add	r0, sp, #176	; 0xb0
     808:	4f98      	ldr	r7, [pc, #608]	; (a6c <wcm_run+0x814>)
     80a:	47b8      	blx	r7
		token = strtok(NULL, " ");
     80c:	4996      	ldr	r1, [pc, #600]	; (a68 <wcm_run+0x810>)
     80e:	2000      	movs	r0, #0
     810:	47b8      	blx	r7
		i = atoi(token);
     812:	4b97      	ldr	r3, [pc, #604]	; (a70 <wcm_run+0x818>)
     814:	4798      	blx	r3
     816:	0007      	movs	r7, r0
		sprintf(command, "GPS_PWR_EN %d", i);
     818:	0002      	movs	r2, r0
     81a:	499a      	ldr	r1, [pc, #616]	; (a84 <wcm_run+0x82c>)
     81c:	a82c      	add	r0, sp, #176	; 0xb0
     81e:	4b8a      	ldr	r3, [pc, #552]	; (a48 <wcm_run+0x7f0>)
     820:	4798      	blx	r3
		if (i == 0)
     822:	2f00      	cmp	r7, #0
     824:	d102      	bne.n	82c <wcm_run+0x5d4>
			wcm_gpio_gps_pwr_en_off();
     826:	4b98      	ldr	r3, [pc, #608]	; (a88 <wcm_run+0x830>)
     828:	4798      	blx	r3
     82a:	e5cc      	b.n	3c6 <wcm_run+0x16e>
			wcm_gpio_gps_pwr_en_on();
     82c:	4b97      	ldr	r3, [pc, #604]	; (a8c <wcm_run+0x834>)
     82e:	4798      	blx	r3
     830:	e5c9      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "COM_SW_A"))
     832:	4997      	ldr	r1, [pc, #604]	; (a90 <wcm_run+0x838>)
     834:	a82c      	add	r0, sp, #176	; 0xb0
     836:	4b80      	ldr	r3, [pc, #512]	; (a38 <wcm_run+0x7e0>)
     838:	4798      	blx	r3
     83a:	2800      	cmp	r0, #0
     83c:	d016      	beq.n	86c <wcm_run+0x614>
		token = strtok(command, " ");
     83e:	498a      	ldr	r1, [pc, #552]	; (a68 <wcm_run+0x810>)
     840:	a82c      	add	r0, sp, #176	; 0xb0
     842:	4f8a      	ldr	r7, [pc, #552]	; (a6c <wcm_run+0x814>)
     844:	47b8      	blx	r7
		token = strtok(NULL, " ");
     846:	4988      	ldr	r1, [pc, #544]	; (a68 <wcm_run+0x810>)
     848:	2000      	movs	r0, #0
     84a:	47b8      	blx	r7
		i = atoi(token);
     84c:	4b88      	ldr	r3, [pc, #544]	; (a70 <wcm_run+0x818>)
     84e:	4798      	blx	r3
     850:	0007      	movs	r7, r0
		sprintf(command, "COM_SW_A %d", i);
     852:	0002      	movs	r2, r0
     854:	498f      	ldr	r1, [pc, #572]	; (a94 <wcm_run+0x83c>)
     856:	a82c      	add	r0, sp, #176	; 0xb0
     858:	4b7b      	ldr	r3, [pc, #492]	; (a48 <wcm_run+0x7f0>)
     85a:	4798      	blx	r3
		if (i == 0)
     85c:	2f00      	cmp	r7, #0
     85e:	d102      	bne.n	866 <wcm_run+0x60e>
			wcm_gpio_com_sw_a_off();
     860:	4b8d      	ldr	r3, [pc, #564]	; (a98 <wcm_run+0x840>)
     862:	4798      	blx	r3
     864:	e5af      	b.n	3c6 <wcm_run+0x16e>
			wcm_gpio_com_sw_a_on();
     866:	4b8d      	ldr	r3, [pc, #564]	; (a9c <wcm_run+0x844>)
     868:	4798      	blx	r3
     86a:	e5ac      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "SAT_PWR_EN"))
     86c:	498c      	ldr	r1, [pc, #560]	; (aa0 <wcm_run+0x848>)
     86e:	a82c      	add	r0, sp, #176	; 0xb0
     870:	4b71      	ldr	r3, [pc, #452]	; (a38 <wcm_run+0x7e0>)
     872:	4798      	blx	r3
     874:	2800      	cmp	r0, #0
     876:	d016      	beq.n	8a6 <wcm_run+0x64e>
		token = strtok(command, " ");
     878:	497b      	ldr	r1, [pc, #492]	; (a68 <wcm_run+0x810>)
     87a:	a82c      	add	r0, sp, #176	; 0xb0
     87c:	4f7b      	ldr	r7, [pc, #492]	; (a6c <wcm_run+0x814>)
     87e:	47b8      	blx	r7
		token = strtok(NULL, " ");
     880:	4979      	ldr	r1, [pc, #484]	; (a68 <wcm_run+0x810>)
     882:	2000      	movs	r0, #0
     884:	47b8      	blx	r7
		i = atoi(token);
     886:	4b7a      	ldr	r3, [pc, #488]	; (a70 <wcm_run+0x818>)
     888:	4798      	blx	r3
     88a:	0007      	movs	r7, r0
		sprintf(command, "SAT_PWR_EN %d", i);
     88c:	0002      	movs	r2, r0
     88e:	4985      	ldr	r1, [pc, #532]	; (aa4 <wcm_run+0x84c>)
     890:	a82c      	add	r0, sp, #176	; 0xb0
     892:	4b6d      	ldr	r3, [pc, #436]	; (a48 <wcm_run+0x7f0>)
     894:	4798      	blx	r3
		if (i == 0)
     896:	2f00      	cmp	r7, #0
     898:	d102      	bne.n	8a0 <wcm_run+0x648>
			wcm_gpio_sat_pwr_en_off();
     89a:	4b83      	ldr	r3, [pc, #524]	; (aa8 <wcm_run+0x850>)
     89c:	4798      	blx	r3
     89e:	e592      	b.n	3c6 <wcm_run+0x16e>
			wcm_gpio_sat_pwr_en_on();
     8a0:	4b82      	ldr	r3, [pc, #520]	; (aac <wcm_run+0x854>)
     8a2:	4798      	blx	r3
     8a4:	e58f      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "CELL_PWR_EN"))
     8a6:	4982      	ldr	r1, [pc, #520]	; (ab0 <wcm_run+0x858>)
     8a8:	a82c      	add	r0, sp, #176	; 0xb0
     8aa:	4b63      	ldr	r3, [pc, #396]	; (a38 <wcm_run+0x7e0>)
     8ac:	4798      	blx	r3
     8ae:	2800      	cmp	r0, #0
     8b0:	d016      	beq.n	8e0 <wcm_run+0x688>
		token = strtok(command, " ");
     8b2:	496d      	ldr	r1, [pc, #436]	; (a68 <wcm_run+0x810>)
     8b4:	a82c      	add	r0, sp, #176	; 0xb0
     8b6:	4f6d      	ldr	r7, [pc, #436]	; (a6c <wcm_run+0x814>)
     8b8:	47b8      	blx	r7
		token = strtok(NULL, " ");
     8ba:	496b      	ldr	r1, [pc, #428]	; (a68 <wcm_run+0x810>)
     8bc:	2000      	movs	r0, #0
     8be:	47b8      	blx	r7
		i = atoi(token);
     8c0:	4b6b      	ldr	r3, [pc, #428]	; (a70 <wcm_run+0x818>)
     8c2:	4798      	blx	r3
     8c4:	0007      	movs	r7, r0
		sprintf(command, "CELL_PWR_EN %d", i);
     8c6:	0002      	movs	r2, r0
     8c8:	497a      	ldr	r1, [pc, #488]	; (ab4 <wcm_run+0x85c>)
     8ca:	a82c      	add	r0, sp, #176	; 0xb0
     8cc:	4b5e      	ldr	r3, [pc, #376]	; (a48 <wcm_run+0x7f0>)
     8ce:	4798      	blx	r3
		if (i == 0)
     8d0:	2f00      	cmp	r7, #0
     8d2:	d102      	bne.n	8da <wcm_run+0x682>
			wcm_gpio_cell_pwr_en_off();
     8d4:	4b78      	ldr	r3, [pc, #480]	; (ab8 <wcm_run+0x860>)
     8d6:	4798      	blx	r3
     8d8:	e575      	b.n	3c6 <wcm_run+0x16e>
			wcm_gpio_cell_pwr_en_on();
     8da:	4b78      	ldr	r3, [pc, #480]	; (abc <wcm_run+0x864>)
     8dc:	4798      	blx	r3
     8de:	e572      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "WF_PWR_EN"))
     8e0:	4977      	ldr	r1, [pc, #476]	; (ac0 <wcm_run+0x868>)
     8e2:	a82c      	add	r0, sp, #176	; 0xb0
     8e4:	4b54      	ldr	r3, [pc, #336]	; (a38 <wcm_run+0x7e0>)
     8e6:	4798      	blx	r3
     8e8:	2800      	cmp	r0, #0
     8ea:	d016      	beq.n	91a <wcm_run+0x6c2>
		token = strtok(command, " ");
     8ec:	495e      	ldr	r1, [pc, #376]	; (a68 <wcm_run+0x810>)
     8ee:	a82c      	add	r0, sp, #176	; 0xb0
     8f0:	4f5e      	ldr	r7, [pc, #376]	; (a6c <wcm_run+0x814>)
     8f2:	47b8      	blx	r7
		token = strtok(NULL, " ");
     8f4:	495c      	ldr	r1, [pc, #368]	; (a68 <wcm_run+0x810>)
     8f6:	2000      	movs	r0, #0
     8f8:	47b8      	blx	r7
		i = atoi(token);
     8fa:	4b5d      	ldr	r3, [pc, #372]	; (a70 <wcm_run+0x818>)
     8fc:	4798      	blx	r3
     8fe:	0007      	movs	r7, r0
		sprintf(command, "WF_PWR_EN %d", i);
     900:	0002      	movs	r2, r0
     902:	4970      	ldr	r1, [pc, #448]	; (ac4 <wcm_run+0x86c>)
     904:	a82c      	add	r0, sp, #176	; 0xb0
     906:	4b50      	ldr	r3, [pc, #320]	; (a48 <wcm_run+0x7f0>)
     908:	4798      	blx	r3
		if (i == 0)
     90a:	2f00      	cmp	r7, #0
     90c:	d102      	bne.n	914 <wcm_run+0x6bc>
			wcm_gpio_wf_pwr_en_off();
     90e:	4b6e      	ldr	r3, [pc, #440]	; (ac8 <wcm_run+0x870>)
     910:	4798      	blx	r3
     912:	e558      	b.n	3c6 <wcm_run+0x16e>
			wcm_gpio_wf_pwr_en_on();
     914:	4b6d      	ldr	r3, [pc, #436]	; (acc <wcm_run+0x874>)
     916:	4798      	blx	r3
     918:	e555      	b.n	3c6 <wcm_run+0x16e>
	else if (strstr(command, "LGT_ON"))
     91a:	496d      	ldr	r1, [pc, #436]	; (ad0 <wcm_run+0x878>)
     91c:	a82c      	add	r0, sp, #176	; 0xb0
     91e:	4b46      	ldr	r3, [pc, #280]	; (a38 <wcm_run+0x7e0>)
     920:	4798      	blx	r3
     922:	2800      	cmp	r0, #0
     924:	d016      	beq.n	954 <wcm_run+0x6fc>
		token = strtok(command, " ");
     926:	4950      	ldr	r1, [pc, #320]	; (a68 <wcm_run+0x810>)
     928:	a82c      	add	r0, sp, #176	; 0xb0
     92a:	4f50      	ldr	r7, [pc, #320]	; (a6c <wcm_run+0x814>)
     92c:	47b8      	blx	r7
		token = strtok(NULL, " ");
     92e:	494e      	ldr	r1, [pc, #312]	; (a68 <wcm_run+0x810>)
     930:	2000      	movs	r0, #0
     932:	47b8      	blx	r7
		i = atoi(token);
     934:	4b4e      	ldr	r3, [pc, #312]	; (a70 <wcm_run+0x818>)
     936:	4798      	blx	r3
     938:	0007      	movs	r7, r0
		sprintf(command, "LGT_ON %d", i);
     93a:	0002      	movs	r2, r0
     93c:	4965      	ldr	r1, [pc, #404]	; (ad4 <wcm_run+0x87c>)
     93e:	a82c      	add	r0, sp, #176	; 0xb0
     940:	4b41      	ldr	r3, [pc, #260]	; (a48 <wcm_run+0x7f0>)
     942:	4798      	blx	r3
		if (i == 0)
     944:	2f00      	cmp	r7, #0
     946:	d102      	bne.n	94e <wcm_run+0x6f6>
			wcm_lgt_off();
     948:	4b63      	ldr	r3, [pc, #396]	; (ad8 <wcm_run+0x880>)
     94a:	4798      	blx	r3
     94c:	e53b      	b.n	3c6 <wcm_run+0x16e>
			wcm_lgt_on();
     94e:	4b63      	ldr	r3, [pc, #396]	; (adc <wcm_run+0x884>)
     950:	4798      	blx	r3
     952:	e538      	b.n	3c6 <wcm_run+0x16e>
		wcm_usart_send_pc_message("handle_spi_command: Unknown command!\r\n");
     954:	4862      	ldr	r0, [pc, #392]	; (ae0 <wcm_run+0x888>)
     956:	4b63      	ldr	r3, [pc, #396]	; (ae4 <wcm_run+0x88c>)
     958:	4798      	blx	r3
     95a:	e534      	b.n	3c6 <wcm_run+0x16e>
			{
				bCommandReceived = wcm_usart_get_pc_command(command, COMMAND_LENGTH);
     95c:	2140      	movs	r1, #64	; 0x40
     95e:	a830      	add	r0, sp, #192	; 0xc0
     960:	4b61      	ldr	r3, [pc, #388]	; (ae8 <wcm_run+0x890>)
     962:	4798      	blx	r3
				if (bCommandReceived)
     964:	2800      	cmp	r0, #0
     966:	d100      	bne.n	96a <wcm_run+0x712>
     968:	e4ea      	b.n	340 <wcm_run+0xe8>
	if (strstr(command, "read_leak"))
     96a:	4960      	ldr	r1, [pc, #384]	; (aec <wcm_run+0x894>)
     96c:	a830      	add	r0, sp, #192	; 0xc0
     96e:	4b32      	ldr	r3, [pc, #200]	; (a38 <wcm_run+0x7e0>)
     970:	4798      	blx	r3
     972:	2800      	cmp	r0, #0
     974:	d01c      	beq.n	9b0 <wcm_run+0x758>
		status = wcm_adc_read(&v);
     976:	a806      	add	r0, sp, #24
     978:	4b5d      	ldr	r3, [pc, #372]	; (af0 <wcm_run+0x898>)
     97a:	4798      	blx	r3
		if (status == STATUS_OK)
     97c:	2800      	cmp	r0, #0
     97e:	d113      	bne.n	9a8 <wcm_run+0x750>
			sprintf(response, "LEAK %.2lf\r\n", v);
     980:	9806      	ldr	r0, [sp, #24]
     982:	4b5c      	ldr	r3, [pc, #368]	; (af4 <wcm_run+0x89c>)
     984:	4798      	blx	r3
     986:	0002      	movs	r2, r0
     988:	000b      	movs	r3, r1
     98a:	495b      	ldr	r1, [pc, #364]	; (af8 <wcm_run+0x8a0>)
     98c:	a808      	add	r0, sp, #32
     98e:	4f2e      	ldr	r7, [pc, #184]	; (a48 <wcm_run+0x7f0>)
     990:	47b8      	blx	r7
			wcm_usart_send_pc_message(response);
     992:	a808      	add	r0, sp, #32
     994:	4b53      	ldr	r3, [pc, #332]	; (ae4 <wcm_run+0x88c>)
     996:	4798      	blx	r3
				{
					bValid = handle_command(command);
					wcm_usart_send_pc_message(command);
     998:	a830      	add	r0, sp, #192	; 0xc0
     99a:	4f52      	ldr	r7, [pc, #328]	; (ae4 <wcm_run+0x88c>)
     99c:	47b8      	blx	r7
					wcm_usart_send_pc_message(" ");
     99e:	4832      	ldr	r0, [pc, #200]	; (a68 <wcm_run+0x810>)
     9a0:	47b8      	blx	r7
					if (bValid)
					{
						wcm_usart_send_pc_message("VALID\r\n");
     9a2:	4856      	ldr	r0, [pc, #344]	; (afc <wcm_run+0x8a4>)
     9a4:	47b8      	blx	r7
     9a6:	e4cb      	b.n	340 <wcm_run+0xe8>
			wcm_usart_send_pc_message("handle_command: Could not read leak detector!\r\n");
     9a8:	4855      	ldr	r0, [pc, #340]	; (b00 <wcm_run+0x8a8>)
     9aa:	4b4e      	ldr	r3, [pc, #312]	; (ae4 <wcm_run+0x88c>)
     9ac:	4798      	blx	r3
     9ae:	e7f3      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "read_batt"))
     9b0:	4954      	ldr	r1, [pc, #336]	; (b04 <wcm_run+0x8ac>)
     9b2:	a830      	add	r0, sp, #192	; 0xc0
     9b4:	4b20      	ldr	r3, [pc, #128]	; (a38 <wcm_run+0x7e0>)
     9b6:	4798      	blx	r3
     9b8:	2800      	cmp	r0, #0
     9ba:	d015      	beq.n	9e8 <wcm_run+0x790>
		status = wcm_bat_adc_read(&batt);
     9bc:	a806      	add	r0, sp, #24
     9be:	4b52      	ldr	r3, [pc, #328]	; (b08 <wcm_run+0x8b0>)
     9c0:	4798      	blx	r3
		if (status == STATUS_OK)
     9c2:	2800      	cmp	r0, #0
     9c4:	d10c      	bne.n	9e0 <wcm_run+0x788>
			sprintf(response, "BATTERY DETECT %.2lf\r\n", batt);
     9c6:	9806      	ldr	r0, [sp, #24]
     9c8:	4b4a      	ldr	r3, [pc, #296]	; (af4 <wcm_run+0x89c>)
     9ca:	4798      	blx	r3
     9cc:	0002      	movs	r2, r0
     9ce:	000b      	movs	r3, r1
     9d0:	494e      	ldr	r1, [pc, #312]	; (b0c <wcm_run+0x8b4>)
     9d2:	a808      	add	r0, sp, #32
     9d4:	4f1c      	ldr	r7, [pc, #112]	; (a48 <wcm_run+0x7f0>)
     9d6:	47b8      	blx	r7
			wcm_usart_send_pc_message(response);
     9d8:	a808      	add	r0, sp, #32
     9da:	4b42      	ldr	r3, [pc, #264]	; (ae4 <wcm_run+0x88c>)
     9dc:	4798      	blx	r3
     9de:	e7db      	b.n	998 <wcm_run+0x740>
			wcm_usart_send_pc_message("handle_command: Could not read battery detector!\r\n");
     9e0:	484b      	ldr	r0, [pc, #300]	; (b10 <wcm_run+0x8b8>)
     9e2:	4b40      	ldr	r3, [pc, #256]	; (ae4 <wcm_run+0x88c>)
     9e4:	4798      	blx	r3
     9e6:	e7d7      	b.n	998 <wcm_run+0x740>
	else if  (strstr(command, "read_coms"))
     9e8:	494a      	ldr	r1, [pc, #296]	; (b14 <wcm_run+0x8bc>)
     9ea:	a830      	add	r0, sp, #192	; 0xc0
     9ec:	4b12      	ldr	r3, [pc, #72]	; (a38 <wcm_run+0x7e0>)
     9ee:	4798      	blx	r3
     9f0:	2800      	cmp	r0, #0
     9f2:	d100      	bne.n	9f6 <wcm_run+0x79e>
     9f4:	e09a      	b.n	b2c <wcm_run+0x8d4>
		wcm_gpio_sat_pwr_en_on();
     9f6:	4b2d      	ldr	r3, [pc, #180]	; (aac <wcm_run+0x854>)
     9f8:	4798      	blx	r3
		sat_status = wcm_usart_check_for_com_data();
     9fa:	4b47      	ldr	r3, [pc, #284]	; (b18 <wcm_run+0x8c0>)
     9fc:	4798      	blx	r3
		if (sat_status == STATUS_OK)
     9fe:	2800      	cmp	r0, #0
     a00:	d10f      	bne.n	a22 <wcm_run+0x7ca>
			wcm_usart_send_com_command("AT&D0\r\n");
     a02:	4846      	ldr	r0, [pc, #280]	; (b1c <wcm_run+0x8c4>)
     a04:	4b46      	ldr	r3, [pc, #280]	; (b20 <wcm_run+0x8c8>)
     a06:	4798      	blx	r3
			satCommandReceived = wcm_usart_get_com_data(satcommand, COMMAND_LENGTH);
     a08:	2140      	movs	r1, #64	; 0x40
     a0a:	a808      	add	r0, sp, #32
     a0c:	4b45      	ldr	r3, [pc, #276]	; (b24 <wcm_run+0x8cc>)
     a0e:	4798      	blx	r3
			if (satCommandReceived)
     a10:	2800      	cmp	r0, #0
     a12:	d009      	beq.n	a28 <wcm_run+0x7d0>
				wcm_usart_send_pc_message(satcommand);
     a14:	a808      	add	r0, sp, #32
     a16:	4f33      	ldr	r7, [pc, #204]	; (ae4 <wcm_run+0x88c>)
     a18:	47b8      	blx	r7
				wcm_usart_send_pc_message(" ");					
     a1a:	4813      	ldr	r0, [pc, #76]	; (a68 <wcm_run+0x810>)
     a1c:	47b8      	blx	r7
				wcm_usart_send_pc_message("VALID\r\n");
     a1e:	4837      	ldr	r0, [pc, #220]	; (afc <wcm_run+0x8a4>)
     a20:	47b8      	blx	r7
		wcm_gpio_sat_pwr_en_off();
     a22:	4b21      	ldr	r3, [pc, #132]	; (aa8 <wcm_run+0x850>)
     a24:	4798      	blx	r3
     a26:	e7b7      	b.n	998 <wcm_run+0x740>
				wcm_usart_send_pc_message("INVALID\r\n");
     a28:	483f      	ldr	r0, [pc, #252]	; (b28 <wcm_run+0x8d0>)
     a2a:	4b2e      	ldr	r3, [pc, #184]	; (ae4 <wcm_run+0x88c>)
     a2c:	4798      	blx	r3
     a2e:	e7f8      	b.n	a22 <wcm_run+0x7ca>
     a30:	0000d00c 	.word	0x0000d00c
     a34:	200009e0 	.word	0x200009e0
     a38:	00008781 	.word	0x00008781
     a3c:	20000a00 	.word	0x20000a00
     a40:	200009df 	.word	0x200009df
     a44:	0000d014 	.word	0x0000d014
     a48:	00008405 	.word	0x00008405
     a4c:	200009dd 	.word	0x200009dd
     a50:	200009f0 	.word	0x200009f0
     a54:	20000a01 	.word	0x20000a01
     a58:	20000a03 	.word	0x20000a03
     a5c:	200009de 	.word	0x200009de
     a60:	0000d020 	.word	0x0000d020
     a64:	0000d02c 	.word	0x0000d02c
     a68:	0000d038 	.word	0x0000d038
     a6c:	00008989 	.word	0x00008989
     a70:	0000828d 	.word	0x0000828d
     a74:	0000d03c 	.word	0x0000d03c
     a78:	000014c1 	.word	0x000014c1
     a7c:	000014d1 	.word	0x000014d1
     a80:	0000d04c 	.word	0x0000d04c
     a84:	0000d058 	.word	0x0000d058
     a88:	000014fd 	.word	0x000014fd
     a8c:	00001509 	.word	0x00001509
     a90:	0000d068 	.word	0x0000d068
     a94:	0000d074 	.word	0x0000d074
     a98:	00001525 	.word	0x00001525
     a9c:	00001531 	.word	0x00001531
     aa0:	0000d080 	.word	0x0000d080
     aa4:	0000d08c 	.word	0x0000d08c
     aa8:	0000154d 	.word	0x0000154d
     aac:	00001559 	.word	0x00001559
     ab0:	0000d09c 	.word	0x0000d09c
     ab4:	0000d0a8 	.word	0x0000d0a8
     ab8:	00001575 	.word	0x00001575
     abc:	00001585 	.word	0x00001585
     ac0:	0000d0b8 	.word	0x0000d0b8
     ac4:	0000d0c4 	.word	0x0000d0c4
     ac8:	000015a5 	.word	0x000015a5
     acc:	000015b5 	.word	0x000015b5
     ad0:	0000d0d4 	.word	0x0000d0d4
     ad4:	0000d0dc 	.word	0x0000d0dc
     ad8:	000015d5 	.word	0x000015d5
     adc:	000015e5 	.word	0x000015e5
     ae0:	0000d0e8 	.word	0x0000d0e8
     ae4:	00002551 	.word	0x00002551
     ae8:	000028ad 	.word	0x000028ad
     aec:	0000d13c 	.word	0x0000d13c
     af0:	000010dd 	.word	0x000010dd
     af4:	00008099 	.word	0x00008099
     af8:	0000d148 	.word	0x0000d148
     afc:	0000d1f4 	.word	0x0000d1f4
     b00:	0000d158 	.word	0x0000d158
     b04:	0000d188 	.word	0x0000d188
     b08:	0000118d 	.word	0x0000118d
     b0c:	0000d194 	.word	0x0000d194
     b10:	0000d1ac 	.word	0x0000d1ac
     b14:	0000d1e0 	.word	0x0000d1e0
     b18:	00002539 	.word	0x00002539
     b1c:	0000d1ec 	.word	0x0000d1ec
     b20:	0000288d 	.word	0x0000288d
     b24:	00002ab5 	.word	0x00002ab5
     b28:	0000d1fc 	.word	0x0000d1fc
	else if (strstr(command, "read_gps"))
     b2c:	49d4      	ldr	r1, [pc, #848]	; (e80 <wcm_run+0xc28>)
     b2e:	a830      	add	r0, sp, #192	; 0xc0
     b30:	4bd4      	ldr	r3, [pc, #848]	; (e84 <wcm_run+0xc2c>)
     b32:	4798      	blx	r3
     b34:	2800      	cmp	r0, #0
     b36:	d016      	beq.n	b66 <wcm_run+0x90e>
		if (wcm_gpio_gps_pwr_en_get())
     b38:	4bd3      	ldr	r3, [pc, #844]	; (e88 <wcm_run+0xc30>)
     b3a:	4798      	blx	r3
     b3c:	2800      	cmp	r0, #0
     b3e:	d100      	bne.n	b42 <wcm_run+0x8ea>
     b40:	e72a      	b.n	998 <wcm_run+0x740>
			status = wcm_usart_check_for_gps_data();
     b42:	4bd2      	ldr	r3, [pc, #840]	; (e8c <wcm_run+0xc34>)
     b44:	4798      	blx	r3
			if (status == STATUS_OK)
     b46:	2800      	cmp	r0, #0
     b48:	d000      	beq.n	b4c <wcm_run+0x8f4>
     b4a:	e725      	b.n	998 <wcm_run+0x740>
				data_received = wcm_usart_get_gps_data(command, COMMAND_LENGTH);
     b4c:	2140      	movs	r1, #64	; 0x40
     b4e:	a830      	add	r0, sp, #192	; 0xc0
     b50:	4bcf      	ldr	r3, [pc, #828]	; (e90 <wcm_run+0xc38>)
     b52:	4798      	blx	r3
				if (data_received)
     b54:	2800      	cmp	r0, #0
     b56:	d100      	bne.n	b5a <wcm_run+0x902>
     b58:	e71e      	b.n	998 <wcm_run+0x740>
					wcm_usart_send_pc_message(command);
     b5a:	a830      	add	r0, sp, #192	; 0xc0
     b5c:	4fcd      	ldr	r7, [pc, #820]	; (e94 <wcm_run+0xc3c>)
     b5e:	47b8      	blx	r7
					wcm_usart_send_pc_message(" ");
     b60:	48cd      	ldr	r0, [pc, #820]	; (e98 <wcm_run+0xc40>)
     b62:	47b8      	blx	r7
     b64:	e718      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "wcm_ping"))
     b66:	49cd      	ldr	r1, [pc, #820]	; (e9c <wcm_run+0xc44>)
     b68:	a830      	add	r0, sp, #192	; 0xc0
     b6a:	4bc6      	ldr	r3, [pc, #792]	; (e84 <wcm_run+0xc2c>)
     b6c:	4798      	blx	r3
     b6e:	2800      	cmp	r0, #0
     b70:	d00a      	beq.n	b88 <wcm_run+0x930>
		wcm_usart_send_pc_message("handle_command: Ping Received!\r\n");
     b72:	48cb      	ldr	r0, [pc, #812]	; (ea0 <wcm_run+0xc48>)
     b74:	4bc7      	ldr	r3, [pc, #796]	; (e94 <wcm_run+0xc3c>)
     b76:	4798      	blx	r3
		tc_set_count_value(&tc_instance, 0xFFFAA22C);
     b78:	49ca      	ldr	r1, [pc, #808]	; (ea4 <wcm_run+0xc4c>)
     b7a:	48cb      	ldr	r0, [pc, #812]	; (ea8 <wcm_run+0xc50>)
     b7c:	4bcb      	ldr	r3, [pc, #812]	; (eac <wcm_run+0xc54>)
     b7e:	4798      	blx	r3
		timer_0_elapsed = true;
     b80:	2201      	movs	r2, #1
     b82:	4bcb      	ldr	r3, [pc, #812]	; (eb0 <wcm_run+0xc58>)
     b84:	701a      	strb	r2, [r3, #0]
     b86:	e707      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "read_ms5637"))
     b88:	49ca      	ldr	r1, [pc, #808]	; (eb4 <wcm_run+0xc5c>)
     b8a:	a830      	add	r0, sp, #192	; 0xc0
     b8c:	4bbd      	ldr	r3, [pc, #756]	; (e84 <wcm_run+0xc2c>)
     b8e:	4798      	blx	r3
     b90:	2800      	cmp	r0, #0
     b92:	d029      	beq.n	be8 <wcm_run+0x990>
		status = wcm_ms5637_read(&d1, &pressure, &d2, &temperature);
     b94:	ab04      	add	r3, sp, #16
     b96:	aa03      	add	r2, sp, #12
     b98:	a906      	add	r1, sp, #24
     b9a:	a802      	add	r0, sp, #8
     b9c:	4fc6      	ldr	r7, [pc, #792]	; (eb8 <wcm_run+0xc60>)
     b9e:	47b8      	blx	r7
		if (status == STATUS_OK)
     ba0:	2800      	cmp	r0, #0
     ba2:	d11d      	bne.n	be0 <wcm_run+0x988>
			sprintf(response, "D1 %lu\r\n", d1);
     ba4:	9a02      	ldr	r2, [sp, #8]
     ba6:	49c5      	ldr	r1, [pc, #788]	; (ebc <wcm_run+0xc64>)
     ba8:	a808      	add	r0, sp, #32
     baa:	4bc5      	ldr	r3, [pc, #788]	; (ec0 <wcm_run+0xc68>)
     bac:	4699      	mov	r9, r3
     bae:	4798      	blx	r3
			wcm_usart_send_pc_message(response);
     bb0:	a808      	add	r0, sp, #32
     bb2:	4fb8      	ldr	r7, [pc, #736]	; (e94 <wcm_run+0xc3c>)
     bb4:	47b8      	blx	r7
			sprintf(response, "D2 %lu\r\n", d2);
     bb6:	9a03      	ldr	r2, [sp, #12]
     bb8:	49c2      	ldr	r1, [pc, #776]	; (ec4 <wcm_run+0xc6c>)
     bba:	a808      	add	r0, sp, #32
     bbc:	47c8      	blx	r9
			wcm_usart_send_pc_message(response);
     bbe:	a808      	add	r0, sp, #32
     bc0:	47b8      	blx	r7
			sprintf(response, "MS5637 PRESSURE %.2f\r\n", pressure);
     bc2:	9a06      	ldr	r2, [sp, #24]
     bc4:	9b07      	ldr	r3, [sp, #28]
     bc6:	49c0      	ldr	r1, [pc, #768]	; (ec8 <wcm_run+0xc70>)
     bc8:	a808      	add	r0, sp, #32
     bca:	47c8      	blx	r9
			wcm_usart_send_pc_message(response);
     bcc:	a808      	add	r0, sp, #32
     bce:	47b8      	blx	r7
			sprintf(response, "MS5637 TEMPERATURE %.2f\r\n", temperature);
     bd0:	9a04      	ldr	r2, [sp, #16]
     bd2:	9b05      	ldr	r3, [sp, #20]
     bd4:	49bd      	ldr	r1, [pc, #756]	; (ecc <wcm_run+0xc74>)
     bd6:	a808      	add	r0, sp, #32
     bd8:	47c8      	blx	r9
			wcm_usart_send_pc_message(response);
     bda:	a808      	add	r0, sp, #32
     bdc:	47b8      	blx	r7
     bde:	e6db      	b.n	998 <wcm_run+0x740>
			wcm_usart_send_pc_message("handle_command: Could not read MS5637!\r\n");
     be0:	48bb      	ldr	r0, [pc, #748]	; (ed0 <wcm_run+0xc78>)
     be2:	4bac      	ldr	r3, [pc, #688]	; (e94 <wcm_run+0xc3c>)
     be4:	4798      	blx	r3
     be6:	e6d7      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "read_mc3416"))
     be8:	49ba      	ldr	r1, [pc, #744]	; (ed4 <wcm_run+0xc7c>)
     bea:	a830      	add	r0, sp, #192	; 0xc0
     bec:	4ba5      	ldr	r3, [pc, #660]	; (e84 <wcm_run+0xc2c>)
     bee:	4798      	blx	r3
     bf0:	2800      	cmp	r0, #0
     bf2:	d008      	beq.n	c06 <wcm_run+0x9ae>
		status = read_mc3416();
     bf4:	4bb8      	ldr	r3, [pc, #736]	; (ed8 <wcm_run+0xc80>)
     bf6:	4798      	blx	r3
		if (status != STATUS_OK)
     bf8:	2800      	cmp	r0, #0
     bfa:	d100      	bne.n	bfe <wcm_run+0x9a6>
     bfc:	e6cc      	b.n	998 <wcm_run+0x740>
			wcm_usart_send_pc_message("handle_command: Could not read MC3416!\r\n");
     bfe:	48b7      	ldr	r0, [pc, #732]	; (edc <wcm_run+0xc84>)
     c00:	4ba4      	ldr	r3, [pc, #656]	; (e94 <wcm_run+0xc3c>)
     c02:	4798      	blx	r3
     c04:	e6c8      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "calibrate_mc3416"))
     c06:	49b6      	ldr	r1, [pc, #728]	; (ee0 <wcm_run+0xc88>)
     c08:	a830      	add	r0, sp, #192	; 0xc0
     c0a:	4b9e      	ldr	r3, [pc, #632]	; (e84 <wcm_run+0xc2c>)
     c0c:	4798      	blx	r3
     c0e:	2800      	cmp	r0, #0
     c10:	d008      	beq.n	c24 <wcm_run+0x9cc>
		status = wcm_mc3416_calibrate();
     c12:	4bb4      	ldr	r3, [pc, #720]	; (ee4 <wcm_run+0xc8c>)
     c14:	4798      	blx	r3
		if (status != STATUS_OK)
     c16:	2800      	cmp	r0, #0
     c18:	d100      	bne.n	c1c <wcm_run+0x9c4>
     c1a:	e6bd      	b.n	998 <wcm_run+0x740>
			wcm_usart_send_pc_message("handle_command: Could not calibrate MC3416!\r\n");
     c1c:	48b2      	ldr	r0, [pc, #712]	; (ee8 <wcm_run+0xc90>)
     c1e:	4b9d      	ldr	r3, [pc, #628]	; (e94 <wcm_run+0xc3c>)
     c20:	4798      	blx	r3
     c22:	e6b9      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "zero_mc3416"))
     c24:	49b1      	ldr	r1, [pc, #708]	; (eec <wcm_run+0xc94>)
     c26:	a830      	add	r0, sp, #192	; 0xc0
     c28:	4b96      	ldr	r3, [pc, #600]	; (e84 <wcm_run+0xc2c>)
     c2a:	4798      	blx	r3
     c2c:	2800      	cmp	r0, #0
     c2e:	d008      	beq.n	c42 <wcm_run+0x9ea>
		status = wcm_mc3416_zero_offsets();
     c30:	4baf      	ldr	r3, [pc, #700]	; (ef0 <wcm_run+0xc98>)
     c32:	4798      	blx	r3
		if (status != STATUS_OK)
     c34:	2800      	cmp	r0, #0
     c36:	d100      	bne.n	c3a <wcm_run+0x9e2>
     c38:	e6ae      	b.n	998 <wcm_run+0x740>
			wcm_usart_send_pc_message("handle_command: Could not zero MC3416!\r\n");
     c3a:	48ae      	ldr	r0, [pc, #696]	; (ef4 <wcm_run+0xc9c>)
     c3c:	4b95      	ldr	r3, [pc, #596]	; (e94 <wcm_run+0xc3c>)
     c3e:	4798      	blx	r3
     c40:	e6aa      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "read_power_bits"))
     c42:	49ad      	ldr	r1, [pc, #692]	; (ef8 <wcm_run+0xca0>)
     c44:	a830      	add	r0, sp, #192	; 0xc0
     c46:	4b8f      	ldr	r3, [pc, #572]	; (e84 <wcm_run+0xc2c>)
     c48:	4798      	blx	r3
     c4a:	2800      	cmp	r0, #0
     c4c:	d03b      	beq.n	cc6 <wcm_run+0xa6e>
		b = wcm_gpio_3v3va_get();
     c4e:	4bab      	ldr	r3, [pc, #684]	; (efc <wcm_run+0xca4>)
     c50:	4798      	blx	r3
     c52:	0002      	movs	r2, r0
		sprintf(response, "+3V3VA_EN %d\r\n", (b) ? 1 : 0);
     c54:	49aa      	ldr	r1, [pc, #680]	; (f00 <wcm_run+0xca8>)
     c56:	a808      	add	r0, sp, #32
     c58:	4b99      	ldr	r3, [pc, #612]	; (ec0 <wcm_run+0xc68>)
     c5a:	4699      	mov	r9, r3
     c5c:	4798      	blx	r3
		wcm_usart_send_pc_message(response);
     c5e:	a808      	add	r0, sp, #32
     c60:	4f8c      	ldr	r7, [pc, #560]	; (e94 <wcm_run+0xc3c>)
     c62:	47b8      	blx	r7
		b = wcm_gpio_gps_pwr_en_get();
     c64:	4b88      	ldr	r3, [pc, #544]	; (e88 <wcm_run+0xc30>)
     c66:	4798      	blx	r3
     c68:	0002      	movs	r2, r0
		sprintf(response, "GPS_PWR_EN %d\r\n", (b) ? 1 : 0);
     c6a:	49a6      	ldr	r1, [pc, #664]	; (f04 <wcm_run+0xcac>)
     c6c:	a808      	add	r0, sp, #32
     c6e:	47c8      	blx	r9
		wcm_usart_send_pc_message(response);
     c70:	a808      	add	r0, sp, #32
     c72:	47b8      	blx	r7
		b = wcm_gpio_com_sw_a_get();
     c74:	4ba4      	ldr	r3, [pc, #656]	; (f08 <wcm_run+0xcb0>)
     c76:	4798      	blx	r3
     c78:	0002      	movs	r2, r0
		sprintf(response, "COM_SW_A %d\r\n", (b) ? 1 : 0);
     c7a:	49a4      	ldr	r1, [pc, #656]	; (f0c <wcm_run+0xcb4>)
     c7c:	a808      	add	r0, sp, #32
     c7e:	47c8      	blx	r9
		wcm_usart_send_pc_message(response);
     c80:	a808      	add	r0, sp, #32
     c82:	47b8      	blx	r7
		b = wcm_gpio_sat_pwr_en_get();
     c84:	4ba2      	ldr	r3, [pc, #648]	; (f10 <wcm_run+0xcb8>)
     c86:	4798      	blx	r3
     c88:	0002      	movs	r2, r0
		sprintf(response, "SAT_PWR_EN %d\r\n", (b) ? 1 : 0);
     c8a:	49a2      	ldr	r1, [pc, #648]	; (f14 <wcm_run+0xcbc>)
     c8c:	a808      	add	r0, sp, #32
     c8e:	47c8      	blx	r9
		wcm_usart_send_pc_message(response);
     c90:	a808      	add	r0, sp, #32
     c92:	47b8      	blx	r7
		b = wcm_gpio_cell_pwr_en_get();
     c94:	4ba0      	ldr	r3, [pc, #640]	; (f18 <wcm_run+0xcc0>)
     c96:	4798      	blx	r3
     c98:	0002      	movs	r2, r0
		sprintf(response, "CELL PWR_EN %d\r\n", (b) ? 1 : 0);
     c9a:	49a0      	ldr	r1, [pc, #640]	; (f1c <wcm_run+0xcc4>)
     c9c:	a808      	add	r0, sp, #32
     c9e:	47c8      	blx	r9
		wcm_usart_send_pc_message(response);
     ca0:	a808      	add	r0, sp, #32
     ca2:	47b8      	blx	r7
		b = wcm_gpio_wf_pwr_en_get();
     ca4:	4b9e      	ldr	r3, [pc, #632]	; (f20 <wcm_run+0xcc8>)
     ca6:	4798      	blx	r3
     ca8:	0002      	movs	r2, r0
		sprintf(response, "WF_PWR_EN %d\r\n", (b) ? 1 : 0);
     caa:	499e      	ldr	r1, [pc, #632]	; (f24 <wcm_run+0xccc>)
     cac:	a808      	add	r0, sp, #32
     cae:	47c8      	blx	r9
		wcm_usart_send_pc_message(response);
     cb0:	a808      	add	r0, sp, #32
     cb2:	47b8      	blx	r7
		b = wcm_lgt_get();
     cb4:	4b9c      	ldr	r3, [pc, #624]	; (f28 <wcm_run+0xcd0>)
     cb6:	4798      	blx	r3
     cb8:	0002      	movs	r2, r0
		sprintf(response, "LGT_ON %d\r\n", (b) ? 1 : 0);
     cba:	499c      	ldr	r1, [pc, #624]	; (f2c <wcm_run+0xcd4>)
     cbc:	a808      	add	r0, sp, #32
     cbe:	47c8      	blx	r9
		wcm_usart_send_pc_message(response);
     cc0:	a808      	add	r0, sp, #32
     cc2:	47b8      	blx	r7
     cc4:	e668      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "reinitialize"))
     cc6:	499a      	ldr	r1, [pc, #616]	; (f30 <wcm_run+0xcd8>)
     cc8:	a830      	add	r0, sp, #192	; 0xc0
     cca:	4b6e      	ldr	r3, [pc, #440]	; (e84 <wcm_run+0xc2c>)
     ccc:	4798      	blx	r3
     cce:	2800      	cmp	r0, #0
     cd0:	d002      	beq.n	cd8 <wcm_run+0xa80>
		initInternalHW();
     cd2:	4b98      	ldr	r3, [pc, #608]	; (f34 <wcm_run+0xcdc>)
     cd4:	4798      	blx	r3
     cd6:	e65f      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "+3V3VA_EN"))
     cd8:	4997      	ldr	r1, [pc, #604]	; (f38 <wcm_run+0xce0>)
     cda:	a830      	add	r0, sp, #192	; 0xc0
     cdc:	4b69      	ldr	r3, [pc, #420]	; (e84 <wcm_run+0xc2c>)
     cde:	4798      	blx	r3
     ce0:	2800      	cmp	r0, #0
     ce2:	d016      	beq.n	d12 <wcm_run+0xaba>
		token = strtok(command, " ");
     ce4:	496c      	ldr	r1, [pc, #432]	; (e98 <wcm_run+0xc40>)
     ce6:	a830      	add	r0, sp, #192	; 0xc0
     ce8:	4f94      	ldr	r7, [pc, #592]	; (f3c <wcm_run+0xce4>)
     cea:	47b8      	blx	r7
		token = strtok(NULL, " ");
     cec:	496a      	ldr	r1, [pc, #424]	; (e98 <wcm_run+0xc40>)
     cee:	2000      	movs	r0, #0
     cf0:	47b8      	blx	r7
		i = atoi(token);
     cf2:	4b93      	ldr	r3, [pc, #588]	; (f40 <wcm_run+0xce8>)
     cf4:	4798      	blx	r3
     cf6:	0007      	movs	r7, r0
		sprintf(command, "+3V3VA_EN %d", i);
     cf8:	0002      	movs	r2, r0
     cfa:	4992      	ldr	r1, [pc, #584]	; (f44 <wcm_run+0xcec>)
     cfc:	a830      	add	r0, sp, #192	; 0xc0
     cfe:	4b70      	ldr	r3, [pc, #448]	; (ec0 <wcm_run+0xc68>)
     d00:	4798      	blx	r3
		if (i == 0)
     d02:	2f00      	cmp	r7, #0
     d04:	d102      	bne.n	d0c <wcm_run+0xab4>
			wcm_gpio_3v3va_off();
     d06:	4b90      	ldr	r3, [pc, #576]	; (f48 <wcm_run+0xcf0>)
     d08:	4798      	blx	r3
     d0a:	e645      	b.n	998 <wcm_run+0x740>
			wcm_gpio_3v3va_on();
     d0c:	4b8f      	ldr	r3, [pc, #572]	; (f4c <wcm_run+0xcf4>)
     d0e:	4798      	blx	r3
     d10:	e642      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "GPS_PWR_EN"))
     d12:	498f      	ldr	r1, [pc, #572]	; (f50 <wcm_run+0xcf8>)
     d14:	a830      	add	r0, sp, #192	; 0xc0
     d16:	4b5b      	ldr	r3, [pc, #364]	; (e84 <wcm_run+0xc2c>)
     d18:	4798      	blx	r3
     d1a:	2800      	cmp	r0, #0
     d1c:	d016      	beq.n	d4c <wcm_run+0xaf4>
		token = strtok(command, " ");
     d1e:	495e      	ldr	r1, [pc, #376]	; (e98 <wcm_run+0xc40>)
     d20:	a830      	add	r0, sp, #192	; 0xc0
     d22:	4f86      	ldr	r7, [pc, #536]	; (f3c <wcm_run+0xce4>)
     d24:	47b8      	blx	r7
		token = strtok(NULL, " ");
     d26:	495c      	ldr	r1, [pc, #368]	; (e98 <wcm_run+0xc40>)
     d28:	2000      	movs	r0, #0
     d2a:	47b8      	blx	r7
		i = atoi(token);
     d2c:	4b84      	ldr	r3, [pc, #528]	; (f40 <wcm_run+0xce8>)
     d2e:	4798      	blx	r3
     d30:	0007      	movs	r7, r0
		sprintf(command, "GPS_PWR_EN %d", i);
     d32:	0002      	movs	r2, r0
     d34:	4987      	ldr	r1, [pc, #540]	; (f54 <wcm_run+0xcfc>)
     d36:	a830      	add	r0, sp, #192	; 0xc0
     d38:	4b61      	ldr	r3, [pc, #388]	; (ec0 <wcm_run+0xc68>)
     d3a:	4798      	blx	r3
		if (i == 0)
     d3c:	2f00      	cmp	r7, #0
     d3e:	d102      	bne.n	d46 <wcm_run+0xaee>
			wcm_gpio_gps_pwr_en_off();
     d40:	4b85      	ldr	r3, [pc, #532]	; (f58 <wcm_run+0xd00>)
     d42:	4798      	blx	r3
     d44:	e628      	b.n	998 <wcm_run+0x740>
			wcm_gpio_gps_pwr_en_on();
     d46:	4b85      	ldr	r3, [pc, #532]	; (f5c <wcm_run+0xd04>)
     d48:	4798      	blx	r3
     d4a:	e625      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "COM_SW_A"))
     d4c:	4984      	ldr	r1, [pc, #528]	; (f60 <wcm_run+0xd08>)
     d4e:	a830      	add	r0, sp, #192	; 0xc0
     d50:	4b4c      	ldr	r3, [pc, #304]	; (e84 <wcm_run+0xc2c>)
     d52:	4798      	blx	r3
     d54:	2800      	cmp	r0, #0
     d56:	d016      	beq.n	d86 <wcm_run+0xb2e>
		token = strtok(command, " ");
     d58:	494f      	ldr	r1, [pc, #316]	; (e98 <wcm_run+0xc40>)
     d5a:	a830      	add	r0, sp, #192	; 0xc0
     d5c:	4f77      	ldr	r7, [pc, #476]	; (f3c <wcm_run+0xce4>)
     d5e:	47b8      	blx	r7
		token = strtok(NULL, " ");
     d60:	494d      	ldr	r1, [pc, #308]	; (e98 <wcm_run+0xc40>)
     d62:	2000      	movs	r0, #0
     d64:	47b8      	blx	r7
		i = atoi(token);
     d66:	4b76      	ldr	r3, [pc, #472]	; (f40 <wcm_run+0xce8>)
     d68:	4798      	blx	r3
     d6a:	0007      	movs	r7, r0
		sprintf(command, "COM_SW_A %d", i);
     d6c:	0002      	movs	r2, r0
     d6e:	497d      	ldr	r1, [pc, #500]	; (f64 <wcm_run+0xd0c>)
     d70:	a830      	add	r0, sp, #192	; 0xc0
     d72:	4b53      	ldr	r3, [pc, #332]	; (ec0 <wcm_run+0xc68>)
     d74:	4798      	blx	r3
		if (i == 0)
     d76:	2f00      	cmp	r7, #0
     d78:	d102      	bne.n	d80 <wcm_run+0xb28>
			wcm_gpio_com_sw_a_off();
     d7a:	4b7b      	ldr	r3, [pc, #492]	; (f68 <wcm_run+0xd10>)
     d7c:	4798      	blx	r3
     d7e:	e60b      	b.n	998 <wcm_run+0x740>
			wcm_gpio_com_sw_a_on();
     d80:	4b7a      	ldr	r3, [pc, #488]	; (f6c <wcm_run+0xd14>)
     d82:	4798      	blx	r3
     d84:	e608      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "SAT_PWR_EN"))
     d86:	497a      	ldr	r1, [pc, #488]	; (f70 <wcm_run+0xd18>)
     d88:	a830      	add	r0, sp, #192	; 0xc0
     d8a:	4b3e      	ldr	r3, [pc, #248]	; (e84 <wcm_run+0xc2c>)
     d8c:	4798      	blx	r3
     d8e:	2800      	cmp	r0, #0
     d90:	d016      	beq.n	dc0 <wcm_run+0xb68>
		token = strtok(command, " ");
     d92:	4941      	ldr	r1, [pc, #260]	; (e98 <wcm_run+0xc40>)
     d94:	a830      	add	r0, sp, #192	; 0xc0
     d96:	4f69      	ldr	r7, [pc, #420]	; (f3c <wcm_run+0xce4>)
     d98:	47b8      	blx	r7
		token = strtok(NULL, " ");
     d9a:	493f      	ldr	r1, [pc, #252]	; (e98 <wcm_run+0xc40>)
     d9c:	2000      	movs	r0, #0
     d9e:	47b8      	blx	r7
		i = atoi(token);
     da0:	4b67      	ldr	r3, [pc, #412]	; (f40 <wcm_run+0xce8>)
     da2:	4798      	blx	r3
     da4:	0007      	movs	r7, r0
		sprintf(command, "SAT_PWR_EN %d", i);
     da6:	0002      	movs	r2, r0
     da8:	4972      	ldr	r1, [pc, #456]	; (f74 <wcm_run+0xd1c>)
     daa:	a830      	add	r0, sp, #192	; 0xc0
     dac:	4b44      	ldr	r3, [pc, #272]	; (ec0 <wcm_run+0xc68>)
     dae:	4798      	blx	r3
		if (i == 0)
     db0:	2f00      	cmp	r7, #0
     db2:	d102      	bne.n	dba <wcm_run+0xb62>
			wcm_gpio_sat_pwr_en_off();
     db4:	4b70      	ldr	r3, [pc, #448]	; (f78 <wcm_run+0xd20>)
     db6:	4798      	blx	r3
     db8:	e5ee      	b.n	998 <wcm_run+0x740>
			wcm_gpio_sat_pwr_en_on();
     dba:	4b70      	ldr	r3, [pc, #448]	; (f7c <wcm_run+0xd24>)
     dbc:	4798      	blx	r3
     dbe:	e5eb      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "CELL_PWR_EN"))
     dc0:	496f      	ldr	r1, [pc, #444]	; (f80 <wcm_run+0xd28>)
     dc2:	a830      	add	r0, sp, #192	; 0xc0
     dc4:	4b2f      	ldr	r3, [pc, #188]	; (e84 <wcm_run+0xc2c>)
     dc6:	4798      	blx	r3
     dc8:	2800      	cmp	r0, #0
     dca:	d016      	beq.n	dfa <wcm_run+0xba2>
		token = strtok(command, " ");
     dcc:	4932      	ldr	r1, [pc, #200]	; (e98 <wcm_run+0xc40>)
     dce:	a830      	add	r0, sp, #192	; 0xc0
     dd0:	4f5a      	ldr	r7, [pc, #360]	; (f3c <wcm_run+0xce4>)
     dd2:	47b8      	blx	r7
		token = strtok(NULL, " ");
     dd4:	4930      	ldr	r1, [pc, #192]	; (e98 <wcm_run+0xc40>)
     dd6:	2000      	movs	r0, #0
     dd8:	47b8      	blx	r7
		i = atoi(token);
     dda:	4b59      	ldr	r3, [pc, #356]	; (f40 <wcm_run+0xce8>)
     ddc:	4798      	blx	r3
     dde:	0007      	movs	r7, r0
		sprintf(command, "CELL_PWR_EN %d", i);
     de0:	0002      	movs	r2, r0
     de2:	4968      	ldr	r1, [pc, #416]	; (f84 <wcm_run+0xd2c>)
     de4:	a830      	add	r0, sp, #192	; 0xc0
     de6:	4b36      	ldr	r3, [pc, #216]	; (ec0 <wcm_run+0xc68>)
     de8:	4798      	blx	r3
		if (i == 1)
     dea:	2f01      	cmp	r7, #1
     dec:	d102      	bne.n	df4 <wcm_run+0xb9c>
			wcm_gpio_cell_pwr_en_on();
     dee:	4b66      	ldr	r3, [pc, #408]	; (f88 <wcm_run+0xd30>)
     df0:	4798      	blx	r3
     df2:	e5d1      	b.n	998 <wcm_run+0x740>
			wcm_gpio_cell_pwr_en_off();
     df4:	4b65      	ldr	r3, [pc, #404]	; (f8c <wcm_run+0xd34>)
     df6:	4798      	blx	r3
     df8:	e5ce      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "LGT_ON"))
     dfa:	4965      	ldr	r1, [pc, #404]	; (f90 <wcm_run+0xd38>)
     dfc:	a830      	add	r0, sp, #192	; 0xc0
     dfe:	4b21      	ldr	r3, [pc, #132]	; (e84 <wcm_run+0xc2c>)
     e00:	4798      	blx	r3
     e02:	2800      	cmp	r0, #0
     e04:	d016      	beq.n	e34 <wcm_run+0xbdc>
		token = strtok(command, " ");
     e06:	4924      	ldr	r1, [pc, #144]	; (e98 <wcm_run+0xc40>)
     e08:	a830      	add	r0, sp, #192	; 0xc0
     e0a:	4f4c      	ldr	r7, [pc, #304]	; (f3c <wcm_run+0xce4>)
     e0c:	47b8      	blx	r7
		token = strtok(NULL, " ");
     e0e:	4922      	ldr	r1, [pc, #136]	; (e98 <wcm_run+0xc40>)
     e10:	2000      	movs	r0, #0
     e12:	47b8      	blx	r7
		i = atoi(token);
     e14:	4b4a      	ldr	r3, [pc, #296]	; (f40 <wcm_run+0xce8>)
     e16:	4798      	blx	r3
     e18:	0007      	movs	r7, r0
		sprintf(command, "LGT_ON %d", i);
     e1a:	0002      	movs	r2, r0
     e1c:	495d      	ldr	r1, [pc, #372]	; (f94 <wcm_run+0xd3c>)
     e1e:	a830      	add	r0, sp, #192	; 0xc0
     e20:	4b27      	ldr	r3, [pc, #156]	; (ec0 <wcm_run+0xc68>)
     e22:	4798      	blx	r3
		if (i == 0)
     e24:	2f00      	cmp	r7, #0
     e26:	d102      	bne.n	e2e <wcm_run+0xbd6>
			wcm_lgt_off();
     e28:	4b5b      	ldr	r3, [pc, #364]	; (f98 <wcm_run+0xd40>)
     e2a:	4798      	blx	r3
     e2c:	e5b4      	b.n	998 <wcm_run+0x740>
			wcm_lgt_on();
     e2e:	4b5b      	ldr	r3, [pc, #364]	; (f9c <wcm_run+0xd44>)
     e30:	4798      	blx	r3
     e32:	e5b1      	b.n	998 <wcm_run+0x740>
	else if (strstr(command, "WF_PWR_EN"))
     e34:	495a      	ldr	r1, [pc, #360]	; (fa0 <wcm_run+0xd48>)
     e36:	a830      	add	r0, sp, #192	; 0xc0
     e38:	4b12      	ldr	r3, [pc, #72]	; (e84 <wcm_run+0xc2c>)
     e3a:	4798      	blx	r3
     e3c:	2800      	cmp	r0, #0
     e3e:	d016      	beq.n	e6e <wcm_run+0xc16>
		token = strtok(command, " ");
     e40:	4915      	ldr	r1, [pc, #84]	; (e98 <wcm_run+0xc40>)
     e42:	a830      	add	r0, sp, #192	; 0xc0
     e44:	4f3d      	ldr	r7, [pc, #244]	; (f3c <wcm_run+0xce4>)
     e46:	47b8      	blx	r7
		token = strtok(NULL, " ");
     e48:	4913      	ldr	r1, [pc, #76]	; (e98 <wcm_run+0xc40>)
     e4a:	2000      	movs	r0, #0
     e4c:	47b8      	blx	r7
		i = atoi(token);
     e4e:	4b3c      	ldr	r3, [pc, #240]	; (f40 <wcm_run+0xce8>)
     e50:	4798      	blx	r3
     e52:	0007      	movs	r7, r0
		sprintf(command, "WF_PWR_EN %d", i);
     e54:	0002      	movs	r2, r0
     e56:	4953      	ldr	r1, [pc, #332]	; (fa4 <wcm_run+0xd4c>)
     e58:	a830      	add	r0, sp, #192	; 0xc0
     e5a:	4b19      	ldr	r3, [pc, #100]	; (ec0 <wcm_run+0xc68>)
     e5c:	4798      	blx	r3
		if (i == 0)
     e5e:	2f00      	cmp	r7, #0
     e60:	d102      	bne.n	e68 <wcm_run+0xc10>
				wcm_gpio_wf_pwr_en_off();
     e62:	4b51      	ldr	r3, [pc, #324]	; (fa8 <wcm_run+0xd50>)
     e64:	4798      	blx	r3
     e66:	e597      	b.n	998 <wcm_run+0x740>
				wcm_gpio_wf_pwr_en_on();
     e68:	4b50      	ldr	r3, [pc, #320]	; (fac <wcm_run+0xd54>)
     e6a:	4798      	blx	r3
     e6c:	e594      	b.n	998 <wcm_run+0x740>
					wcm_usart_send_pc_message(command);
     e6e:	a830      	add	r0, sp, #192	; 0xc0
     e70:	4f08      	ldr	r7, [pc, #32]	; (e94 <wcm_run+0xc3c>)
     e72:	47b8      	blx	r7
					wcm_usart_send_pc_message(" ");
     e74:	4808      	ldr	r0, [pc, #32]	; (e98 <wcm_run+0xc40>)
     e76:	47b8      	blx	r7
					}
					else
					{
						wcm_usart_send_pc_message("INVALID\r\n");
     e78:	484d      	ldr	r0, [pc, #308]	; (fb0 <wcm_run+0xd58>)
     e7a:	47b8      	blx	r7
     e7c:	f7ff fa60 	bl	340 <wcm_run+0xe8>
     e80:	0000cef0 	.word	0x0000cef0
     e84:	00008781 	.word	0x00008781
     e88:	000014ed 	.word	0x000014ed
     e8c:	00002521 	.word	0x00002521
     e90:	000029b1 	.word	0x000029b1
     e94:	00002551 	.word	0x00002551
     e98:	0000d038 	.word	0x0000d038
     e9c:	0000cefc 	.word	0x0000cefc
     ea0:	0000d208 	.word	0x0000d208
     ea4:	fffaa22c 	.word	0xfffaa22c
     ea8:	20000c6c 	.word	0x20000c6c
     eac:	00003979 	.word	0x00003979
     eb0:	20000a02 	.word	0x20000a02
     eb4:	0000d22c 	.word	0x0000d22c
     eb8:	00002019 	.word	0x00002019
     ebc:	0000d238 	.word	0x0000d238
     ec0:	00008405 	.word	0x00008405
     ec4:	0000d244 	.word	0x0000d244
     ec8:	0000d250 	.word	0x0000d250
     ecc:	0000d268 	.word	0x0000d268
     ed0:	0000d284 	.word	0x0000d284
     ed4:	0000cf58 	.word	0x0000cf58
     ed8:	000001a9 	.word	0x000001a9
     edc:	0000cf64 	.word	0x0000cf64
     ee0:	0000cf90 	.word	0x0000cf90
     ee4:	00001e45 	.word	0x00001e45
     ee8:	0000cfa4 	.word	0x0000cfa4
     eec:	0000cfd4 	.word	0x0000cfd4
     ef0:	00001ee5 	.word	0x00001ee5
     ef4:	0000cfe0 	.word	0x0000cfe0
     ef8:	0000d2b0 	.word	0x0000d2b0
     efc:	000014b1 	.word	0x000014b1
     f00:	0000d2c0 	.word	0x0000d2c0
     f04:	0000d2d0 	.word	0x0000d2d0
     f08:	00001515 	.word	0x00001515
     f0c:	0000d2e0 	.word	0x0000d2e0
     f10:	0000153d 	.word	0x0000153d
     f14:	0000d2f0 	.word	0x0000d2f0
     f18:	00001565 	.word	0x00001565
     f1c:	0000d300 	.word	0x0000d300
     f20:	00001595 	.word	0x00001595
     f24:	0000d314 	.word	0x0000d314
     f28:	000015c5 	.word	0x000015c5
     f2c:	0000d324 	.word	0x0000d324
     f30:	0000d330 	.word	0x0000d330
     f34:	00000139 	.word	0x00000139
     f38:	0000d02c 	.word	0x0000d02c
     f3c:	00008989 	.word	0x00008989
     f40:	0000828d 	.word	0x0000828d
     f44:	0000d03c 	.word	0x0000d03c
     f48:	000014c1 	.word	0x000014c1
     f4c:	000014d1 	.word	0x000014d1
     f50:	0000d04c 	.word	0x0000d04c
     f54:	0000d058 	.word	0x0000d058
     f58:	000014fd 	.word	0x000014fd
     f5c:	00001509 	.word	0x00001509
     f60:	0000d068 	.word	0x0000d068
     f64:	0000d074 	.word	0x0000d074
     f68:	00001525 	.word	0x00001525
     f6c:	00001531 	.word	0x00001531
     f70:	0000d080 	.word	0x0000d080
     f74:	0000d08c 	.word	0x0000d08c
     f78:	0000154d 	.word	0x0000154d
     f7c:	00001559 	.word	0x00001559
     f80:	0000d09c 	.word	0x0000d09c
     f84:	0000d0a8 	.word	0x0000d0a8
     f88:	00001585 	.word	0x00001585
     f8c:	00001575 	.word	0x00001575
     f90:	0000d0d4 	.word	0x0000d0d4
     f94:	0000d0dc 	.word	0x0000d0dc
     f98:	000015d5 	.word	0x000015d5
     f9c:	000015e5 	.word	0x000015e5
     fa0:	0000d0b8 	.word	0x0000d0b8
     fa4:	0000d0c4 	.word	0x0000d0c4
     fa8:	000015a5 	.word	0x000015a5
     fac:	000015b5 	.word	0x000015b5
     fb0:	0000d1fc 	.word	0x0000d1fc

00000fb4 <wcm_adc_configure>:
Function to configure the MMD WCM ADC module

See https://asf.microchip.com/docs/latest/saml21/html/asfdoc_sam0_adc_basic_use_case.html
*****************************************************************************************/
void wcm_adc_configure(void)
{
     fb4:	b510      	push	{r4, lr}
     fb6:	b08c      	sub	sp, #48	; 0x30
	static bool bFirst = true;
	
	struct adc_config adc_config_struct;
	
	adc_get_config_defaults(&adc_config_struct);
     fb8:	ac01      	add	r4, sp, #4
     fba:	0020      	movs	r0, r4
     fbc:	4b1d      	ldr	r3, [pc, #116]	; (1034 <STACK_SIZE+0x34>)
     fbe:	4798      	blx	r3
	
	adc_config_struct.positive_input = ADC_POSITIVE_INPUT_PIN7;
     fc0:	2307      	movs	r3, #7
     fc2:	7123      	strb	r3, [r4, #4]
	adc_config_struct.reference = ADC_REFERENCE_INTVCC2;
     fc4:	3b02      	subs	r3, #2
     fc6:	7063      	strb	r3, [r4, #1]
	
	if (bFirst)
     fc8:	4b1b      	ldr	r3, [pc, #108]	; (1038 <STACK_SIZE+0x38>)
     fca:	781b      	ldrb	r3, [r3, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d01c      	beq.n	100a <STACK_SIZE+0xa>
	{
		bFirst = false;
     fd0:	2200      	movs	r2, #0
     fd2:	4b19      	ldr	r3, [pc, #100]	; (1038 <STACK_SIZE+0x38>)
     fd4:	701a      	strb	r2, [r3, #0]
	else
	{
		adc_disable(&adc_module_struct);
	}
	
	adc_init(&adc_module_struct, ADC, &adc_config_struct);
     fd6:	4c19      	ldr	r4, [pc, #100]	; (103c <STACK_SIZE+0x3c>)
     fd8:	aa01      	add	r2, sp, #4
     fda:	4919      	ldr	r1, [pc, #100]	; (1040 <STACK_SIZE+0x40>)
     fdc:	0020      	movs	r0, r4
     fde:	4b19      	ldr	r3, [pc, #100]	; (1044 <STACK_SIZE+0x44>)
     fe0:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     fe2:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     fe4:	8c13      	ldrh	r3, [r2, #32]
     fe6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     fe8:	2b00      	cmp	r3, #0
     fea:	d1fb      	bne.n	fe4 <wcm_adc_configure+0x30>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     fec:	3307      	adds	r3, #7
     fee:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     ff0:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     ff2:	7813      	ldrb	r3, [r2, #0]
     ff4:	2102      	movs	r1, #2
     ff6:	430b      	orrs	r3, r1
     ff8:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     ffa:	4b10      	ldr	r3, [pc, #64]	; (103c <STACK_SIZE+0x3c>)
     ffc:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
     ffe:	8c13      	ldrh	r3, [r2, #32]
    1000:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    1002:	2b00      	cmp	r3, #0
    1004:	d1fb      	bne.n	ffe <wcm_adc_configure+0x4a>
	
	adc_enable(&adc_module_struct);
	
}	// End of wcm_adc_configure
    1006:	b00c      	add	sp, #48	; 0x30
    1008:	bd10      	pop	{r4, pc}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    100a:	4b0c      	ldr	r3, [pc, #48]	; (103c <STACK_SIZE+0x3c>)
    100c:	681a      	ldr	r2, [r3, #0]
    100e:	8c13      	ldrh	r3, [r2, #32]
    1010:	b29b      	uxth	r3, r3
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    1012:	2b00      	cmp	r3, #0
    1014:	d1fb      	bne.n	100e <STACK_SIZE+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1016:	3307      	adds	r3, #7
    1018:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    101a:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    101c:	7813      	ldrb	r3, [r2, #0]
    101e:	2102      	movs	r1, #2
    1020:	438b      	bics	r3, r1
    1022:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1024:	4b05      	ldr	r3, [pc, #20]	; (103c <STACK_SIZE+0x3c>)
    1026:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    1028:	8c13      	ldrh	r3, [r2, #32]
    102a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    102c:	2b00      	cmp	r3, #0
    102e:	d1fb      	bne.n	1028 <STACK_SIZE+0x28>
    1030:	e7d1      	b.n	fd6 <wcm_adc_configure+0x22>
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	00002bb9 	.word	0x00002bb9
    1038:	20000000 	.word	0x20000000
    103c:	20000a04 	.word	0x20000a04
    1040:	43000c00 	.word	0x43000c00
    1044:	00002bfd 	.word	0x00002bfd

00001048 <wcm_bat_adc_configure>:
/****************************************************************************************
Function to configure adc for bat
*****************************************************************************************/

void wcm_bat_adc_configure(void)
{
    1048:	b510      	push	{r4, lr}
    104a:	b08c      	sub	sp, #48	; 0x30
	static bool bFirst = true;
	
	struct adc_config bat_adc_config_struct;
	
	adc_get_config_defaults(&bat_adc_config_struct);
    104c:	ac01      	add	r4, sp, #4
    104e:	0020      	movs	r0, r4
    1050:	4b1d      	ldr	r3, [pc, #116]	; (10c8 <wcm_bat_adc_configure+0x80>)
    1052:	4798      	blx	r3
	
	bat_adc_config_struct.positive_input = ADC_POSITIVE_INPUT_PIN19;
    1054:	2313      	movs	r3, #19
    1056:	7123      	strb	r3, [r4, #4]
	bat_adc_config_struct.reference = ADC_REFERENCE_INTVCC2;
    1058:	3b0e      	subs	r3, #14
    105a:	7063      	strb	r3, [r4, #1]
	
	if (bFirst)
    105c:	4b1b      	ldr	r3, [pc, #108]	; (10cc <wcm_bat_adc_configure+0x84>)
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	2b00      	cmp	r3, #0
    1062:	d01c      	beq.n	109e <wcm_bat_adc_configure+0x56>
	{
		bFirst = false;
    1064:	2200      	movs	r2, #0
    1066:	4b19      	ldr	r3, [pc, #100]	; (10cc <wcm_bat_adc_configure+0x84>)
    1068:	701a      	strb	r2, [r3, #0]
	else
	{
		adc_disable(&battery_adc_module_struct);
	}
	
	adc_init(&battery_adc_module_struct, ADC, &bat_adc_config_struct);
    106a:	4c19      	ldr	r4, [pc, #100]	; (10d0 <wcm_bat_adc_configure+0x88>)
    106c:	aa01      	add	r2, sp, #4
    106e:	4919      	ldr	r1, [pc, #100]	; (10d4 <wcm_bat_adc_configure+0x8c>)
    1070:	0020      	movs	r0, r4
    1072:	4b19      	ldr	r3, [pc, #100]	; (10d8 <wcm_bat_adc_configure+0x90>)
    1074:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1076:	6822      	ldr	r2, [r4, #0]
    1078:	8c13      	ldrh	r3, [r2, #32]
    107a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    107c:	2b00      	cmp	r3, #0
    107e:	d1fb      	bne.n	1078 <wcm_bat_adc_configure+0x30>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1080:	3307      	adds	r3, #7
    1082:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1084:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1086:	7813      	ldrb	r3, [r2, #0]
    1088:	2102      	movs	r1, #2
    108a:	430b      	orrs	r3, r1
    108c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    108e:	4b10      	ldr	r3, [pc, #64]	; (10d0 <wcm_bat_adc_configure+0x88>)
    1090:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    1092:	8c13      	ldrh	r3, [r2, #32]
    1094:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1096:	2b00      	cmp	r3, #0
    1098:	d1fb      	bne.n	1092 <wcm_bat_adc_configure+0x4a>
	
	adc_enable(&battery_adc_module_struct);
}
    109a:	b00c      	add	sp, #48	; 0x30
    109c:	bd10      	pop	{r4, pc}
	Adc *const adc_module = module_inst->hw;
    109e:	4b0c      	ldr	r3, [pc, #48]	; (10d0 <wcm_bat_adc_configure+0x88>)
    10a0:	681a      	ldr	r2, [r3, #0]
    10a2:	8c13      	ldrh	r3, [r2, #32]
    10a4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    10a6:	2b00      	cmp	r3, #0
    10a8:	d1fb      	bne.n	10a2 <wcm_bat_adc_configure+0x5a>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    10aa:	3307      	adds	r3, #7
    10ac:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    10ae:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    10b0:	7813      	ldrb	r3, [r2, #0]
    10b2:	2102      	movs	r1, #2
    10b4:	438b      	bics	r3, r1
    10b6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    10b8:	4b05      	ldr	r3, [pc, #20]	; (10d0 <wcm_bat_adc_configure+0x88>)
    10ba:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    10bc:	8c13      	ldrh	r3, [r2, #32]
    10be:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d1fb      	bne.n	10bc <wcm_bat_adc_configure+0x74>
    10c4:	e7d1      	b.n	106a <wcm_bat_adc_configure+0x22>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	00002bb9 	.word	0x00002bb9
    10cc:	20000001 	.word	0x20000001
    10d0:	20000a0c 	.word	0x20000a0c
    10d4:	43000c00 	.word	0x43000c00
    10d8:	00002bfd 	.word	0x00002bfd

000010dc <wcm_adc_read>:

/****************************************************************************************
Function to read an ADC value
*****************************************************************************************/
enum status_code wcm_adc_read(float *v)
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	0004      	movs	r4, r0
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    10e0:	4b21      	ldr	r3, [pc, #132]	; (1168 <wcm_adc_read+0x8c>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	8c1a      	ldrh	r2, [r3, #32]
    10e6:	b292      	uxth	r2, r2

	while (adc_is_syncing(module_inst)) {
    10e8:	2a00      	cmp	r2, #0
    10ea:	d1fb      	bne.n	10e4 <wcm_adc_read+0x8>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    10ec:	7e1a      	ldrb	r2, [r3, #24]
    10ee:	2102      	movs	r1, #2
    10f0:	430a      	orrs	r2, r1
    10f2:	761a      	strb	r2, [r3, #24]
    10f4:	8c1a      	ldrh	r2, [r3, #32]
    10f6:	b292      	uxth	r2, r2

	while (adc_is_syncing(module_inst)) {
    10f8:	2a00      	cmp	r2, #0
    10fa:	d1fb      	bne.n	10f4 <wcm_adc_read+0x18>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    10fc:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    10fe:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    1100:	2502      	movs	r5, #2
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1102:	799a      	ldrb	r2, [r3, #6]
    1104:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1106:	0001      	movs	r1, r0
    1108:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    110a:	4216      	tst	r6, r2
    110c:	d000      	beq.n	1110 <wcm_adc_read+0x34>
		status_flags |= ADC_STATUS_WINDOW;
    110e:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1110:	4215      	tst	r5, r2
    1112:	d000      	beq.n	1116 <wcm_adc_read+0x3a>
		status_flags |= ADC_STATUS_OVERRUN;
    1114:	4331      	orrs	r1, r6
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1116:	4208      	tst	r0, r1
    1118:	d0f3      	beq.n	1102 <wcm_adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    111a:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    111c:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    111e:	2201      	movs	r2, #1
    1120:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1122:	7999      	ldrb	r1, [r3, #6]
    1124:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1126:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1128:	074d      	lsls	r5, r1, #29
    112a:	d501      	bpl.n	1130 <wcm_adc_read+0x54>
		status_flags |= ADC_STATUS_WINDOW;
    112c:	2502      	movs	r5, #2
    112e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1130:	0789      	lsls	r1, r1, #30
    1132:	d501      	bpl.n	1138 <wcm_adc_read+0x5c>
		status_flags |= ADC_STATUS_OVERRUN;
    1134:	2104      	movs	r1, #4
    1136:	430a      	orrs	r2, r1

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1138:	0752      	lsls	r2, r2, #29
    113a:	d503      	bpl.n	1144 <wcm_adc_read+0x68>
	adc_module->INTFLAG.reg = int_flags;
    113c:	2202      	movs	r2, #2
    113e:	719a      	strb	r2, [r3, #6]
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
    1140:	201e      	movs	r0, #30
    1142:	e00f      	b.n	1164 <wcm_adc_read+0x88>
		}
		else
		{
			if (status == STATUS_OK)
			{
				*v = 3.3 * (float)result / 4095.0;
    1144:	4b09      	ldr	r3, [pc, #36]	; (116c <wcm_adc_read+0x90>)
    1146:	4798      	blx	r3
    1148:	4b09      	ldr	r3, [pc, #36]	; (1170 <wcm_adc_read+0x94>)
    114a:	4798      	blx	r3
    114c:	4a09      	ldr	r2, [pc, #36]	; (1174 <wcm_adc_read+0x98>)
    114e:	4b0a      	ldr	r3, [pc, #40]	; (1178 <wcm_adc_read+0x9c>)
    1150:	4d0a      	ldr	r5, [pc, #40]	; (117c <wcm_adc_read+0xa0>)
    1152:	47a8      	blx	r5
    1154:	2200      	movs	r2, #0
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <wcm_adc_read+0xa4>)
    1158:	4d0a      	ldr	r5, [pc, #40]	; (1184 <wcm_adc_read+0xa8>)
    115a:	47a8      	blx	r5
    115c:	4b0a      	ldr	r3, [pc, #40]	; (1188 <wcm_adc_read+0xac>)
    115e:	4798      	blx	r3
    1160:	6020      	str	r0, [r4, #0]
	}

	return STATUS_OK;
    1162:	2000      	movs	r0, #0
		}
	}
	
	return (status);
	
}	// End of wcm_adc_read
    1164:	bd70      	pop	{r4, r5, r6, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	20000a04 	.word	0x20000a04
    116c:	000064bd 	.word	0x000064bd
    1170:	00008099 	.word	0x00008099
    1174:	66666666 	.word	0x66666666
    1178:	400a6666 	.word	0x400a6666
    117c:	000073d1 	.word	0x000073d1
    1180:	40affe00 	.word	0x40affe00
    1184:	00006b69 	.word	0x00006b69
    1188:	0000813d 	.word	0x0000813d

0000118c <wcm_bat_adc_read>:

/****************************************************************************************
Function to read an ADC value for battery detector
*****************************************************************************************/
enum status_code wcm_bat_adc_read(float *v)
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	0004      	movs	r4, r0
	Adc *const adc_module = module_inst->hw;
    1190:	4b21      	ldr	r3, [pc, #132]	; (1218 <wcm_bat_adc_read+0x8c>)
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	8c1a      	ldrh	r2, [r3, #32]
    1196:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    1198:	2a00      	cmp	r2, #0
    119a:	d1fb      	bne.n	1194 <wcm_bat_adc_read+0x8>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    119c:	7e1a      	ldrb	r2, [r3, #24]
    119e:	2102      	movs	r1, #2
    11a0:	430a      	orrs	r2, r1
    11a2:	761a      	strb	r2, [r3, #24]
    11a4:	8c1a      	ldrh	r2, [r3, #32]
    11a6:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    11a8:	2a00      	cmp	r2, #0
    11aa:	d1fb      	bne.n	11a4 <wcm_bat_adc_read+0x18>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    11ac:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    11ae:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    11b0:	2502      	movs	r5, #2
	uint32_t int_flags = adc_module->INTFLAG.reg;
    11b2:	799a      	ldrb	r2, [r3, #6]
    11b4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    11b6:	0001      	movs	r1, r0
    11b8:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    11ba:	4216      	tst	r6, r2
    11bc:	d000      	beq.n	11c0 <wcm_bat_adc_read+0x34>
		status_flags |= ADC_STATUS_WINDOW;
    11be:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    11c0:	4215      	tst	r5, r2
    11c2:	d000      	beq.n	11c6 <wcm_bat_adc_read+0x3a>
		status_flags |= ADC_STATUS_OVERRUN;
    11c4:	4331      	orrs	r1, r6
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    11c6:	4208      	tst	r0, r1
    11c8:	d0f3      	beq.n	11b2 <wcm_bat_adc_read+0x26>
	*result = adc_module->RESULT.reg;
    11ca:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    11cc:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    11ce:	2201      	movs	r2, #1
    11d0:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    11d2:	7999      	ldrb	r1, [r3, #6]
    11d4:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    11d6:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    11d8:	074d      	lsls	r5, r1, #29
    11da:	d501      	bpl.n	11e0 <wcm_bat_adc_read+0x54>
		status_flags |= ADC_STATUS_WINDOW;
    11dc:	2502      	movs	r5, #2
    11de:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    11e0:	0789      	lsls	r1, r1, #30
    11e2:	d501      	bpl.n	11e8 <wcm_bat_adc_read+0x5c>
		status_flags |= ADC_STATUS_OVERRUN;
    11e4:	2104      	movs	r1, #4
    11e6:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    11e8:	0752      	lsls	r2, r2, #29
    11ea:	d503      	bpl.n	11f4 <wcm_bat_adc_read+0x68>
	adc_module->INTFLAG.reg = int_flags;
    11ec:	2202      	movs	r2, #2
    11ee:	719a      	strb	r2, [r3, #6]
		return STATUS_ERR_OVERFLOW;
    11f0:	201e      	movs	r0, #30
    11f2:	e00f      	b.n	1214 <wcm_bat_adc_read+0x88>
		}
		else
		{
			if (status == STATUS_OK)
			{
				*v = 3.3 * (float)result / 4095.0;
    11f4:	4b09      	ldr	r3, [pc, #36]	; (121c <wcm_bat_adc_read+0x90>)
    11f6:	4798      	blx	r3
    11f8:	4b09      	ldr	r3, [pc, #36]	; (1220 <wcm_bat_adc_read+0x94>)
    11fa:	4798      	blx	r3
    11fc:	4a09      	ldr	r2, [pc, #36]	; (1224 <wcm_bat_adc_read+0x98>)
    11fe:	4b0a      	ldr	r3, [pc, #40]	; (1228 <wcm_bat_adc_read+0x9c>)
    1200:	4d0a      	ldr	r5, [pc, #40]	; (122c <wcm_bat_adc_read+0xa0>)
    1202:	47a8      	blx	r5
    1204:	2200      	movs	r2, #0
    1206:	4b0a      	ldr	r3, [pc, #40]	; (1230 <wcm_bat_adc_read+0xa4>)
    1208:	4d0a      	ldr	r5, [pc, #40]	; (1234 <wcm_bat_adc_read+0xa8>)
    120a:	47a8      	blx	r5
    120c:	4b0a      	ldr	r3, [pc, #40]	; (1238 <wcm_bat_adc_read+0xac>)
    120e:	4798      	blx	r3
    1210:	6020      	str	r0, [r4, #0]
	return STATUS_OK;
    1212:	2000      	movs	r0, #0
		}
	}
	
	return (status);
	
}	// End of wcm_adc_read
    1214:	bd70      	pop	{r4, r5, r6, pc}
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	20000a0c 	.word	0x20000a0c
    121c:	000064bd 	.word	0x000064bd
    1220:	00008099 	.word	0x00008099
    1224:	66666666 	.word	0x66666666
    1228:	400a6666 	.word	0x400a6666
    122c:	000073d1 	.word	0x000073d1
    1230:	40affe00 	.word	0x40affe00
    1234:	00006b69 	.word	0x00006b69
    1238:	0000813d 	.word	0x0000813d

0000123c <wcm_clocks_configure>:
Function to configure the clocks

See https://asf.microchip.com/docs/latest/saml21/html/asfdoc_sam0_system_clock_basic_use_case.html
*****************************************************************************************/
void wcm_clocks_configure(uint8_t mode)
{
    123c:	b570      	push	{r4, r5, r6, lr}
    123e:	b086      	sub	sp, #24
    1240:	0006      	movs	r6, r0
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1242:	4a17      	ldr	r2, [pc, #92]	; (12a0 <wcm_clocks_configure+0x64>)
    1244:	6853      	ldr	r3, [r2, #4]
    1246:	211e      	movs	r1, #30
    1248:	438b      	bics	r3, r1
    124a:	391a      	subs	r1, #26
    124c:	430b      	orrs	r3, r1
    124e:	6053      	str	r3, [r2, #4]
	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1250:	a803      	add	r0, sp, #12
    1252:	2400      	movs	r4, #0
    1254:	7004      	strb	r4, [r0, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
    1256:	230e      	movs	r3, #14
    1258:	7043      	strb	r3, [r0, #1]
	config->auto_gain_control = false;
    125a:	7084      	strb	r4, [r0, #2]
	config->frequency         = 12000000UL;
    125c:	4b11      	ldr	r3, [pc, #68]	; (12a4 <wcm_clocks_configure+0x68>)
    125e:	6043      	str	r3, [r0, #4]
	config->run_in_standby    = false;
    1260:	7204      	strb	r4, [r0, #8]
	system_clock_source_xosc_get_config_defaults(&xosc_config_struct);

	xosc_config_struct.auto_gain_control = false;
	xosc_config_struct.external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	xosc_config_struct.frequency         = crystal_frequency;
	xosc_config_struct.on_demand         = true;
    1262:	2501      	movs	r5, #1
    1264:	7245      	strb	r5, [r0, #9]
	xosc_config_struct.run_in_standby    = false;
	xosc_config_struct.startup_time      = SYSTEM_XOSC_STARTUP_16384;

	system_clock_source_xosc_set_config(&xosc_config_struct);
    1266:	4b10      	ldr	r3, [pc, #64]	; (12a8 <wcm_clocks_configure+0x6c>)
    1268:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    126a:	2000      	movs	r0, #0
    126c:	4b0f      	ldr	r3, [pc, #60]	; (12ac <wcm_clocks_configure+0x70>)
    126e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1270:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1272:	466b      	mov	r3, sp
    1274:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1276:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1278:	725c      	strb	r4, [r3, #9]

	gclk_gen_config_struct.division_factor    = 1;
	gclk_gen_config_struct.high_when_disabled = false;
	gclk_gen_config_struct.output_enable      = false;
	gclk_gen_config_struct.run_in_standby     = false;
	if (mode == MODE_LOWPOWER){
    127a:	2e01      	cmp	r6, #1
    127c:	d00b      	beq.n	1296 <wcm_clocks_configure+0x5a>
		gclk_gen_config_struct.source_clock   = SYSTEM_CLOCK_SOURCE_ULP32K;}			
	else{
		gclk_gen_config_struct.source_clock   = SYSTEM_CLOCK_SOURCE_XOSC;}
    127e:	2300      	movs	r3, #0
    1280:	466a      	mov	r2, sp
    1282:	7013      	strb	r3, [r2, #0]

	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_gen_config_struct);
    1284:	4669      	mov	r1, sp
    1286:	2000      	movs	r0, #0
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <wcm_clocks_configure+0x74>)
    128a:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    128c:	2000      	movs	r0, #0
    128e:	4b09      	ldr	r3, [pc, #36]	; (12b4 <wcm_clocks_configure+0x78>)
    1290:	4798      	blx	r3

    1292:	b006      	add	sp, #24
    1294:	bd70      	pop	{r4, r5, r6, pc}
		gclk_gen_config_struct.source_clock   = SYSTEM_CLOCK_SOURCE_ULP32K;}			
    1296:	2303      	movs	r3, #3
    1298:	466a      	mov	r2, sp
    129a:	7013      	strb	r3, [r2, #0]
    129c:	e7f2      	b.n	1284 <wcm_clocks_configure+0x48>
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	41004000 	.word	0x41004000
    12a4:	00b71b00 	.word	0x00b71b00
    12a8:	000054fd 	.word	0x000054fd
    12ac:	000055bd 	.word	0x000055bd
    12b0:	000057ad 	.word	0x000057ad
    12b4:	00005859 	.word	0x00005859

000012b8 <eeprom_read_settings>:

/***************************************************************************
Local function to read the settings stored in the EEPROM emulator
****************************************************************************/
void eeprom_read_settings(uint16_t *x_coord, uint16_t *y_coord, uint16_t *z_coord)
{
    12b8:	b570      	push	{r4, r5, r6, lr}
    12ba:	0006      	movs	r6, r0
    12bc:	000d      	movs	r5, r1
    12be:	0014      	movs	r4, r2
	
	enum status_code status = eeprom_emulator_read_buffer(0, eeprom_data, EEPROM_DATA_LENGTH);
    12c0:	2206      	movs	r2, #6
    12c2:	490f      	ldr	r1, [pc, #60]	; (1300 <eeprom_read_settings+0x48>)
    12c4:	2000      	movs	r0, #0
    12c6:	4b0f      	ldr	r3, [pc, #60]	; (1304 <eeprom_read_settings+0x4c>)
    12c8:	4798      	blx	r3
	
	if(status == STATUS_OK )
    12ca:	2800      	cmp	r0, #0
    12cc:	d113      	bne.n	12f6 <eeprom_read_settings+0x3e>
	{
		*x_coord = eeprom_data[x_coord_offset];
    12ce:	4b0c      	ldr	r3, [pc, #48]	; (1300 <eeprom_read_settings+0x48>)
    12d0:	781a      	ldrb	r2, [r3, #0]
    12d2:	8032      	strh	r2, [r6, #0]
		*x_coord|= (uint16_t)(eeprom_data[x_coord_offset + 1]) << 8;
    12d4:	7859      	ldrb	r1, [r3, #1]
    12d6:	0209      	lsls	r1, r1, #8
    12d8:	430a      	orrs	r2, r1
    12da:	8032      	strh	r2, [r6, #0]
		
		*y_coord = eeprom_data[y_coord_offset];
    12dc:	789a      	ldrb	r2, [r3, #2]
    12de:	802a      	strh	r2, [r5, #0]
		*y_coord|= (uint16_t)(eeprom_data[y_coord_offset + 1]) << 8;
    12e0:	78d9      	ldrb	r1, [r3, #3]
    12e2:	0209      	lsls	r1, r1, #8
    12e4:	430a      	orrs	r2, r1
    12e6:	802a      	strh	r2, [r5, #0]
		
		*z_coord = eeprom_data[z_coord_offset];
    12e8:	791a      	ldrb	r2, [r3, #4]
    12ea:	8022      	strh	r2, [r4, #0]
		*z_coord|= (uint16_t)(eeprom_data[z_coord_offset + 1]) << 8;	
    12ec:	795b      	ldrb	r3, [r3, #5]
    12ee:	021b      	lsls	r3, r3, #8
    12f0:	431a      	orrs	r2, r3
    12f2:	8022      	strh	r2, [r4, #0]
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_READ_EEPROM\r\n");
	}

	

}	// End of eeprom_read_settings
    12f4:	bd70      	pop	{r4, r5, r6, pc}
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_READ_EEPROM\r\n");
    12f6:	4804      	ldr	r0, [pc, #16]	; (1308 <eeprom_read_settings+0x50>)
    12f8:	4b04      	ldr	r3, [pc, #16]	; (130c <eeprom_read_settings+0x54>)
    12fa:	4798      	blx	r3
}	// End of eeprom_read_settings
    12fc:	e7fa      	b.n	12f4 <eeprom_read_settings+0x3c>
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	20000a14 	.word	0x20000a14
    1304:	000050a1 	.word	0x000050a1
    1308:	0000d4a0 	.word	0x0000d4a0
    130c:	00002551 	.word	0x00002551

00001310 <eeprom_write_settings>:

/***************************************************************************
Function to save the settings to the EEPROM emulator
****************************************************************************/
void eeprom_write_settings(uint16_t x_coord, uint16_t y_coord, uint16_t z_coord)
{
    1310:	b510      	push	{r4, lr}
	for (i=0; i<EEPROM_DATA_LENGTH; i++)
	{
		eeprom_data[i] = 0;
	}

	eeprom_data[x_coord_offset] = (uint8_t) x_coord;
    1312:	4b0f      	ldr	r3, [pc, #60]	; (1350 <eeprom_write_settings+0x40>)
    1314:	7018      	strb	r0, [r3, #0]
	eeprom_data[x_coord_offset + 1] = (uint8_t)(x_coord >> 8);
    1316:	0a00      	lsrs	r0, r0, #8
    1318:	7058      	strb	r0, [r3, #1]
	
	eeprom_data[y_coord_offset] = y_coord;
    131a:	7099      	strb	r1, [r3, #2]
	eeprom_data[y_coord_offset + 1] = (uint8_t)(y_coord >> 8);
    131c:	0a09      	lsrs	r1, r1, #8
    131e:	70d9      	strb	r1, [r3, #3]
	
	eeprom_data[z_coord_offset] = z_coord;
    1320:	711a      	strb	r2, [r3, #4]
	eeprom_data[z_coord_offset + 1] = (uint8_t)(z_coord >> 8);
    1322:	0a12      	lsrs	r2, r2, #8
    1324:	715a      	strb	r2, [r3, #5]

	enum status_code status = eeprom_emulator_write_buffer(0, eeprom_data, EEPROM_DATA_LENGTH);
    1326:	2206      	movs	r2, #6
    1328:	0019      	movs	r1, r3
    132a:	2000      	movs	r0, #0
    132c:	4b09      	ldr	r3, [pc, #36]	; (1354 <eeprom_write_settings+0x44>)
    132e:	4798      	blx	r3
	
	if(status != STATUS_OK)
    1330:	2800      	cmp	r0, #0
    1332:	d104      	bne.n	133e <eeprom_write_settings+0x2e>
	{
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_WRITE_EEPROM_BUFFER\r\n");	
	}
	
	status = eeprom_emulator_commit_page_buffer();
    1334:	4b08      	ldr	r3, [pc, #32]	; (1358 <eeprom_write_settings+0x48>)
    1336:	4798      	blx	r3
	
	if(status != STATUS_OK)
    1338:	2800      	cmp	r0, #0
    133a:	d104      	bne.n	1346 <eeprom_write_settings+0x36>
	{
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_WRITE_EEPROM_COMMIT\r\n");
	}

}	// End of eeprom_write_settings
    133c:	bd10      	pop	{r4, pc}
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_WRITE_EEPROM_BUFFER\r\n");	
    133e:	4807      	ldr	r0, [pc, #28]	; (135c <eeprom_write_settings+0x4c>)
    1340:	4b07      	ldr	r3, [pc, #28]	; (1360 <eeprom_write_settings+0x50>)
    1342:	4798      	blx	r3
    1344:	e7f6      	b.n	1334 <eeprom_write_settings+0x24>
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_WRITE_EEPROM_COMMIT\r\n");
    1346:	4807      	ldr	r0, [pc, #28]	; (1364 <eeprom_write_settings+0x54>)
    1348:	4b05      	ldr	r3, [pc, #20]	; (1360 <eeprom_write_settings+0x50>)
    134a:	4798      	blx	r3
}	// End of eeprom_write_settings
    134c:	e7f6      	b.n	133c <eeprom_write_settings+0x2c>
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	20000a14 	.word	0x20000a14
    1354:	00005315 	.word	0x00005315
    1358:	00005151 	.word	0x00005151
    135c:	0000d4cc 	.word	0x0000d4cc
    1360:	00002551 	.word	0x00002551
    1364:	0000d500 	.word	0x0000d500

00001368 <eeprom_configure>:
{
    1368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    136a:	0004      	movs	r4, r0
    136c:	000d      	movs	r5, r1
    136e:	0016      	movs	r6, r2
	enum status_code retval = eeprom_emulator_init();
    1370:	4b17      	ldr	r3, [pc, #92]	; (13d0 <eeprom_configure+0x68>)
    1372:	4798      	blx	r3
	if (retval == STATUS_OK)
    1374:	2800      	cmp	r0, #0
    1376:	d011      	beq.n	139c <eeprom_configure+0x34>
	else if (retval == STATUS_ERR_NO_MEMORY)
    1378:	2816      	cmp	r0, #22
    137a:	d01a      	beq.n	13b2 <eeprom_configure+0x4a>
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_BAD_FORMAT\r\n");
    137c:	4815      	ldr	r0, [pc, #84]	; (13d4 <eeprom_configure+0x6c>)
    137e:	4f16      	ldr	r7, [pc, #88]	; (13d8 <eeprom_configure+0x70>)
    1380:	47b8      	blx	r7
		wcm_usart_send_pc_message("eeprom_configure: or\r\n");
    1382:	4816      	ldr	r0, [pc, #88]	; (13dc <eeprom_configure+0x74>)
    1384:	47b8      	blx	r7
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_IO\r\n");
    1386:	4816      	ldr	r0, [pc, #88]	; (13e0 <eeprom_configure+0x78>)
    1388:	47b8      	blx	r7
		wcm_usart_send_pc_message("eeprom_configure: Have to erase and initialize\r\n");
    138a:	4816      	ldr	r0, [pc, #88]	; (13e4 <eeprom_configure+0x7c>)
    138c:	47b8      	blx	r7
		eeprom_emulator_erase_memory();
    138e:	4b16      	ldr	r3, [pc, #88]	; (13e8 <eeprom_configure+0x80>)
    1390:	4798      	blx	r3
		retval = eeprom_emulator_init();
    1392:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <eeprom_configure+0x68>)
    1394:	4798      	blx	r3
		if (retval == STATUS_OK)
    1396:	2800      	cmp	r0, #0
    1398:	d00f      	beq.n	13ba <eeprom_configure+0x52>
}	// End of eeprom_configure
    139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wcm_usart_send_pc_message("eeprom_configure: STATUS_OK\r\n");
    139c:	4813      	ldr	r0, [pc, #76]	; (13ec <eeprom_configure+0x84>)
    139e:	4f0e      	ldr	r7, [pc, #56]	; (13d8 <eeprom_configure+0x70>)
    13a0:	47b8      	blx	r7
		wcm_usart_send_pc_message("eeprom_configure: Have to read settings\r\n");
    13a2:	4813      	ldr	r0, [pc, #76]	; (13f0 <eeprom_configure+0x88>)
    13a4:	47b8      	blx	r7
		eeprom_read_settings(x_coord, y_coord, z_coord);
    13a6:	0032      	movs	r2, r6
    13a8:	0029      	movs	r1, r5
    13aa:	0020      	movs	r0, r4
    13ac:	4b11      	ldr	r3, [pc, #68]	; (13f4 <eeprom_configure+0x8c>)
    13ae:	4798      	blx	r3
    13b0:	e7f3      	b.n	139a <eeprom_configure+0x32>
		wcm_usart_send_pc_message("eeprom_configure: STATUS_ERR_NO_MEMORY\r\n");
    13b2:	4811      	ldr	r0, [pc, #68]	; (13f8 <eeprom_configure+0x90>)
    13b4:	4b08      	ldr	r3, [pc, #32]	; (13d8 <eeprom_configure+0x70>)
    13b6:	4798      	blx	r3
    13b8:	e7ef      	b.n	139a <eeprom_configure+0x32>
			wcm_usart_send_pc_message("eeprom_configure: STATUS_OK 2\r\n");
    13ba:	4810      	ldr	r0, [pc, #64]	; (13fc <eeprom_configure+0x94>)
    13bc:	4f06      	ldr	r7, [pc, #24]	; (13d8 <eeprom_configure+0x70>)
    13be:	47b8      	blx	r7
			wcm_usart_send_pc_message("eeprom_configure: Have to write settings\r\n");
    13c0:	480f      	ldr	r0, [pc, #60]	; (1400 <eeprom_configure+0x98>)
    13c2:	47b8      	blx	r7
			eeprom_write_settings(*x_coord, *y_coord, *z_coord);
    13c4:	8832      	ldrh	r2, [r6, #0]
    13c6:	8829      	ldrh	r1, [r5, #0]
    13c8:	8820      	ldrh	r0, [r4, #0]
    13ca:	4b0e      	ldr	r3, [pc, #56]	; (1404 <eeprom_configure+0x9c>)
    13cc:	4798      	blx	r3
}	// End of eeprom_configure
    13ce:	e7e4      	b.n	139a <eeprom_configure+0x32>
    13d0:	00004e75 	.word	0x00004e75
    13d4:	0000d3b8 	.word	0x0000d3b8
    13d8:	00002551 	.word	0x00002551
    13dc:	0000d3e4 	.word	0x0000d3e4
    13e0:	0000d3fc 	.word	0x0000d3fc
    13e4:	0000d420 	.word	0x0000d420
    13e8:	00004f59 	.word	0x00004f59
    13ec:	0000d340 	.word	0x0000d340
    13f0:	0000d360 	.word	0x0000d360
    13f4:	000012b9 	.word	0x000012b9
    13f8:	0000d38c 	.word	0x0000d38c
    13fc:	0000d454 	.word	0x0000d454
    1400:	0000d474 	.word	0x0000d474
    1404:	00001311 	.word	0x00001311

00001408 <wcm_gpio_configure>:

/****************************************************************************************
Function to configure the MMD WCM GPIO pins
*****************************************************************************************/
void wcm_gpio_configure(void)
{
    1408:	b5f0      	push	{r4, r5, r6, r7, lr}
    140a:	46c6      	mov	lr, r8
    140c:	b500      	push	{lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    140e:	4c1b      	ldr	r4, [pc, #108]	; (147c <wcm_gpio_configure+0x74>)
    1410:	2301      	movs	r3, #1
    1412:	4698      	mov	r8, r3
    1414:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1416:	2600      	movs	r6, #0
    1418:	70a6      	strb	r6, [r4, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    141a:	4d19      	ldr	r5, [pc, #100]	; (1480 <wcm_gpio_configure+0x78>)
    141c:	2380      	movs	r3, #128	; 0x80
    141e:	702b      	strb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1420:	706e      	strb	r6, [r5, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1422:	4643      	mov	r3, r8
    1424:	70ab      	strb	r3, [r5, #2]
	config->powersave    = false;
    1426:	70ee      	strb	r6, [r5, #3]
	// Initialize the configuration structures
	port_get_config_defaults(&port_config_struct);
	system_pinmux_get_config_defaults(&system_pinmux_config_struct);

	// Configure output pin(s)
	port_config_struct.direction = PORT_PIN_DIR_OUTPUT;
    1428:	7023      	strb	r3, [r4, #0]
	
	port_pin_set_config(en_3v3va, &port_config_struct);
    142a:	0021      	movs	r1, r4
    142c:	2008      	movs	r0, #8
    142e:	4f15      	ldr	r7, [pc, #84]	; (1484 <wcm_gpio_configure+0x7c>)
    1430:	47b8      	blx	r7
	port_pin_set_config(gps_pwr_en, &port_config_struct);
    1432:	0021      	movs	r1, r4
    1434:	2002      	movs	r0, #2
    1436:	47b8      	blx	r7
	port_pin_set_config(sat_pwr_en, &port_config_struct);
    1438:	0021      	movs	r1, r4
    143a:	2006      	movs	r0, #6
    143c:	47b8      	blx	r7
	port_pin_set_config(cell_pwr_en, &port_config_struct);
    143e:	0021      	movs	r1, r4
    1440:	2012      	movs	r0, #18
    1442:	47b8      	blx	r7
	port_pin_set_config(wf_pwr_en, &port_config_struct);
    1444:	0021      	movs	r1, r4
    1446:	201b      	movs	r0, #27
    1448:	47b8      	blx	r7
	port_pin_set_config(lgt_on, &port_config_struct);
    144a:	0021      	movs	r1, r4
    144c:	2013      	movs	r0, #19
    144e:	47b8      	blx	r7

	
	// Configure input pin(s)
	port_config_struct.direction = PORT_PIN_DIR_INPUT;
    1450:	7026      	strb	r6, [r4, #0]
	port_config_struct.input_pull = PORT_PIN_PULL_NONE;
    1452:	7066      	strb	r6, [r4, #1]

	port_pin_set_config(spi_cs0, &port_config_struct);
    1454:	0021      	movs	r1, r4
    1456:	2018      	movs	r0, #24
    1458:	47b8      	blx	r7


	// Configure special input pin(s)
	system_pinmux_config_struct.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    145a:	706e      	strb	r6, [r5, #1]
	system_pinmux_config_struct.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    145c:	70ae      	strb	r6, [r5, #2]

	system_pinmux_config_struct.mux_position = MUX_PA07B_ADC_AIN7;
    145e:	4643      	mov	r3, r8
    1460:	702b      	strb	r3, [r5, #0]
	system_pinmux_pin_set_config(leak, &system_pinmux_config_struct);
    1462:	0029      	movs	r1, r5
    1464:	2007      	movs	r0, #7
    1466:	4c08      	ldr	r4, [pc, #32]	; (1488 <wcm_gpio_configure+0x80>)
    1468:	47a0      	blx	r4
	system_pinmux_config_struct.mux_position = MUX_PA11B_ADC_AIN19;
    146a:	4643      	mov	r3, r8
    146c:	702b      	strb	r3, [r5, #0]
	system_pinmux_pin_set_config(bat_detect, &system_pinmux_config_struct);	
    146e:	0029      	movs	r1, r5
    1470:	200b      	movs	r0, #11
    1472:	47a0      	blx	r4

}	// End of wcm_gpio_configure
    1474:	bc04      	pop	{r2}
    1476:	4690      	mov	r8, r2
    1478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	20000a1c 	.word	0x20000a1c
    1480:	20000a20 	.word	0x20000a20
    1484:	00004c81 	.word	0x00004c81
    1488:	00005a71 	.word	0x00005a71

0000148c <wcm_gpio_spi_slave_select_get>:
	
/****************************************************************************************
Function to return the slave select pin
*****************************************************************************************/
bool wcm_gpio_spi_slave_select_get(void)
{
    148c:	b510      	push	{r4, lr}
	system_pinmux_config_struct.mux_position = SYSTEM_PINMUX_GPIO;
    148e:	4905      	ldr	r1, [pc, #20]	; (14a4 <wcm_gpio_spi_slave_select_get+0x18>)
    1490:	2380      	movs	r3, #128	; 0x80
    1492:	700b      	strb	r3, [r1, #0]

	system_pinmux_pin_set_config(spi_cs0, &system_pinmux_config_struct);
    1494:	2018      	movs	r0, #24
    1496:	4b04      	ldr	r3, [pc, #16]	; (14a8 <wcm_gpio_spi_slave_select_get+0x1c>)
    1498:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    149a:	4b04      	ldr	r3, [pc, #16]	; (14ac <wcm_gpio_spi_slave_select_get+0x20>)
    149c:	6a18      	ldr	r0, [r3, #32]
    149e:	01c0      	lsls	r0, r0, #7

	return (port_pin_get_input_level(spi_cs0));
    14a0:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_spi_slave_select_get
    14a2:	bd10      	pop	{r4, pc}
    14a4:	20000a20 	.word	0x20000a20
    14a8:	00005a71 	.word	0x00005a71
    14ac:	40002800 	.word	0x40002800

000014b0 <wcm_gpio_3v3va_get>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->OUT.reg & pin_mask);
    14b0:	4b02      	ldr	r3, [pc, #8]	; (14bc <wcm_gpio_3v3va_get+0xc>)
    14b2:	6918      	ldr	r0, [r3, #16]
    14b4:	05c0      	lsls	r0, r0, #23
/****************************************************************************************
Function to return the +3.3 V analog (sensor) power bit
*****************************************************************************************/
bool wcm_gpio_3v3va_get(void)
{
	return (port_pin_get_output_level(en_3v3va));
    14b6:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_3v3va_get
    14b8:	4770      	bx	lr
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	40002800 	.word	0x40002800

000014c0 <wcm_gpio_3v3va_off>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14c0:	2280      	movs	r2, #128	; 0x80
    14c2:	0052      	lsls	r2, r2, #1
    14c4:	4b01      	ldr	r3, [pc, #4]	; (14cc <wcm_gpio_3v3va_off+0xc>)
    14c6:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_gpio_3v3va_off(void)
{
	port_pin_set_output_level(en_3v3va, false);

}	// End of wcm_gpio_3v3va_off
    14c8:	4770      	bx	lr
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	40002800 	.word	0x40002800

000014d0 <wcm_gpio_3v3va_on>:

/****************************************************************************************
Function to turn on the +3.3 V analog (sensor) power
*****************************************************************************************/
void wcm_gpio_3v3va_on(void)
{
    14d0:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    14d2:	2280      	movs	r2, #128	; 0x80
    14d4:	0052      	lsls	r2, r2, #1
    14d6:	4b03      	ldr	r3, [pc, #12]	; (14e4 <wcm_gpio_3v3va_on+0x14>)
    14d8:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(en_3v3va, true);
	delay_us(200);
    14da:	20c8      	movs	r0, #200	; 0xc8
    14dc:	4b02      	ldr	r3, [pc, #8]	; (14e8 <wcm_gpio_3v3va_on+0x18>)
    14de:	4798      	blx	r3
}	// End of wcm_gpio_3v3va_on
    14e0:	bd10      	pop	{r4, pc}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	40002800 	.word	0x40002800
    14e8:	00004861 	.word	0x00004861

000014ec <wcm_gpio_gps_pwr_en_get>:
	return (port_base->OUT.reg & pin_mask);
    14ec:	4b02      	ldr	r3, [pc, #8]	; (14f8 <wcm_gpio_gps_pwr_en_get+0xc>)
    14ee:	6918      	ldr	r0, [r3, #16]
    14f0:	0740      	lsls	r0, r0, #29
/****************************************************************************************
Function to return the gps power bit
*****************************************************************************************/
bool wcm_gpio_gps_pwr_en_get(void)
{
	return (port_pin_get_output_level(gps_pwr_en));
    14f2:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_gps_pwr_en_get
    14f4:	4770      	bx	lr
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	40002800 	.word	0x40002800

000014fc <wcm_gpio_gps_pwr_en_off>:
		port_base->OUTCLR.reg = pin_mask;
    14fc:	2204      	movs	r2, #4
    14fe:	4b01      	ldr	r3, [pc, #4]	; (1504 <wcm_gpio_gps_pwr_en_off+0x8>)
    1500:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_gpio_gps_pwr_en_off(void)
{
	port_pin_set_output_level(gps_pwr_en, false);

}	// End of wcm_gpio_gps_pwr_en_off
    1502:	4770      	bx	lr
    1504:	40002800 	.word	0x40002800

00001508 <wcm_gpio_gps_pwr_en_on>:
		port_base->OUTSET.reg = pin_mask;
    1508:	2204      	movs	r2, #4
    150a:	4b01      	ldr	r3, [pc, #4]	; (1510 <wcm_gpio_gps_pwr_en_on+0x8>)
    150c:	619a      	str	r2, [r3, #24]
*****************************************************************************************/
void wcm_gpio_gps_pwr_en_on(void)
{
	port_pin_set_output_level(gps_pwr_en, true);

}	// End of wcm_gpio_gps_pwr_en_on
    150e:	4770      	bx	lr
    1510:	40002800 	.word	0x40002800

00001514 <wcm_gpio_com_sw_a_get>:
	return (port_base->OUT.reg & pin_mask);
    1514:	4b02      	ldr	r3, [pc, #8]	; (1520 <wcm_gpio_com_sw_a_get+0xc>)
    1516:	6918      	ldr	r0, [r3, #16]
    1518:	0700      	lsls	r0, r0, #28
/****************************************************************************************
Function to return the com switch A enable bit
*****************************************************************************************/
bool wcm_gpio_com_sw_a_get(void)
{
	return (port_pin_get_output_level(com_sw_a));
    151a:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_com_sw_a_get
    151c:	4770      	bx	lr
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	40002800 	.word	0x40002800

00001524 <wcm_gpio_com_sw_a_off>:
		port_base->OUTCLR.reg = pin_mask;
    1524:	2208      	movs	r2, #8
    1526:	4b01      	ldr	r3, [pc, #4]	; (152c <wcm_gpio_com_sw_a_off+0x8>)
    1528:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_gpio_com_sw_a_off(void)
{
	port_pin_set_output_level(com_sw_a, false);

}	// End of wcm_gpio_com_sw_a_off
    152a:	4770      	bx	lr
    152c:	40002800 	.word	0x40002800

00001530 <wcm_gpio_com_sw_a_on>:
		port_base->OUTSET.reg = pin_mask;
    1530:	2208      	movs	r2, #8
    1532:	4b01      	ldr	r3, [pc, #4]	; (1538 <wcm_gpio_com_sw_a_on+0x8>)
    1534:	619a      	str	r2, [r3, #24]
*****************************************************************************************/
void wcm_gpio_com_sw_a_on(void)
{
	port_pin_set_output_level(com_sw_a, true);

}	// End of wcm_gpio_com_sw_a_on
    1536:	4770      	bx	lr
    1538:	40002800 	.word	0x40002800

0000153c <wcm_gpio_sat_pwr_en_get>:
	return (port_base->OUT.reg & pin_mask);
    153c:	4b02      	ldr	r3, [pc, #8]	; (1548 <wcm_gpio_sat_pwr_en_get+0xc>)
    153e:	6918      	ldr	r0, [r3, #16]
    1540:	0640      	lsls	r0, r0, #25
/****************************************************************************************
Function to return the SAT power bit
*****************************************************************************************/
bool wcm_gpio_sat_pwr_en_get(void)
{
	return (port_pin_get_output_level(sat_pwr_en));
    1542:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_sat_pwr_en_get
    1544:	4770      	bx	lr
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	40002800 	.word	0x40002800

0000154c <wcm_gpio_sat_pwr_en_off>:
		port_base->OUTCLR.reg = pin_mask;
    154c:	2240      	movs	r2, #64	; 0x40
    154e:	4b01      	ldr	r3, [pc, #4]	; (1554 <wcm_gpio_sat_pwr_en_off+0x8>)
    1550:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_gpio_sat_pwr_en_off(void)
{
	port_pin_set_output_level(sat_pwr_en, false);

}	// End of wcm_gpio_sat_pwr_en_off
    1552:	4770      	bx	lr
    1554:	40002800 	.word	0x40002800

00001558 <wcm_gpio_sat_pwr_en_on>:
		port_base->OUTSET.reg = pin_mask;
    1558:	2240      	movs	r2, #64	; 0x40
    155a:	4b01      	ldr	r3, [pc, #4]	; (1560 <wcm_gpio_sat_pwr_en_on+0x8>)
    155c:	619a      	str	r2, [r3, #24]
*****************************************************************************************/
void wcm_gpio_sat_pwr_en_on(void)
{
	port_pin_set_output_level(sat_pwr_en, true);

}	// End of wcm_gpio_sat_pwr_en_on
    155e:	4770      	bx	lr
    1560:	40002800 	.word	0x40002800

00001564 <wcm_gpio_cell_pwr_en_get>:
	return (port_base->OUT.reg & pin_mask);
    1564:	4b02      	ldr	r3, [pc, #8]	; (1570 <wcm_gpio_cell_pwr_en_get+0xc>)
    1566:	6918      	ldr	r0, [r3, #16]
    1568:	0340      	lsls	r0, r0, #13
/****************************************************************************************
Function to return the CELL power bit
*****************************************************************************************/
bool wcm_gpio_cell_pwr_en_get(void)
{
	return (port_pin_get_output_level(cell_pwr_en));
    156a:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_cell_pwr_en_get
    156c:	4770      	bx	lr
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	40002800 	.word	0x40002800

00001574 <wcm_gpio_cell_pwr_en_off>:
		port_base->OUTCLR.reg = pin_mask;
    1574:	2280      	movs	r2, #128	; 0x80
    1576:	02d2      	lsls	r2, r2, #11
    1578:	4b01      	ldr	r3, [pc, #4]	; (1580 <wcm_gpio_cell_pwr_en_off+0xc>)
    157a:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_gpio_cell_pwr_en_off(void)
{
	port_pin_set_output_level(cell_pwr_en, false);

}	// End of wcm_gpio_cell_pwr_en_off
    157c:	4770      	bx	lr
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	40002800 	.word	0x40002800

00001584 <wcm_gpio_cell_pwr_en_on>:
		port_base->OUTSET.reg = pin_mask;
    1584:	2280      	movs	r2, #128	; 0x80
    1586:	02d2      	lsls	r2, r2, #11
    1588:	4b01      	ldr	r3, [pc, #4]	; (1590 <wcm_gpio_cell_pwr_en_on+0xc>)
    158a:	619a      	str	r2, [r3, #24]
*****************************************************************************************/
void wcm_gpio_cell_pwr_en_on(void)
{
	port_pin_set_output_level(cell_pwr_en, true);

}	// End of wcm_gpio_cell_pwr_en_on
    158c:	4770      	bx	lr
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	40002800 	.word	0x40002800

00001594 <wcm_gpio_wf_pwr_en_get>:
	return (port_base->OUT.reg & pin_mask);
    1594:	4b02      	ldr	r3, [pc, #8]	; (15a0 <wcm_gpio_wf_pwr_en_get+0xc>)
    1596:	6918      	ldr	r0, [r3, #16]
    1598:	0100      	lsls	r0, r0, #4
/****************************************************************************************
Function to return the WIFI power bit
*****************************************************************************************/
bool wcm_gpio_wf_pwr_en_get(void)
{
	return (port_pin_get_output_level(wf_pwr_en));
    159a:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_gpio_wf_pwr_en_get
    159c:	4770      	bx	lr
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	40002800 	.word	0x40002800

000015a4 <wcm_gpio_wf_pwr_en_off>:
		port_base->OUTCLR.reg = pin_mask;
    15a4:	2280      	movs	r2, #128	; 0x80
    15a6:	0512      	lsls	r2, r2, #20
    15a8:	4b01      	ldr	r3, [pc, #4]	; (15b0 <wcm_gpio_wf_pwr_en_off+0xc>)
    15aa:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_gpio_wf_pwr_en_off(void)
{
	port_pin_set_output_level(wf_pwr_en, false);

}	// End of wcm_gpio_wf_pwr_en_off
    15ac:	4770      	bx	lr
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	40002800 	.word	0x40002800

000015b4 <wcm_gpio_wf_pwr_en_on>:
		port_base->OUTSET.reg = pin_mask;
    15b4:	2280      	movs	r2, #128	; 0x80
    15b6:	0512      	lsls	r2, r2, #20
    15b8:	4b01      	ldr	r3, [pc, #4]	; (15c0 <wcm_gpio_wf_pwr_en_on+0xc>)
    15ba:	619a      	str	r2, [r3, #24]
*****************************************************************************************/
void wcm_gpio_wf_pwr_en_on(void)
{
	port_pin_set_output_level(wf_pwr_en, true);

}	// End of wcm_gpio_wf_pwr_en_on
    15bc:	4770      	bx	lr
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	40002800 	.word	0x40002800

000015c4 <wcm_lgt_get>:
	return (port_base->OUT.reg & pin_mask);
    15c4:	4b02      	ldr	r3, [pc, #8]	; (15d0 <wcm_lgt_get+0xc>)
    15c6:	6918      	ldr	r0, [r3, #16]
    15c8:	0300      	lsls	r0, r0, #12
/****************************************************************************************
Function to return the LGT power bit
*****************************************************************************************/
bool wcm_lgt_get(void)
{
	return (port_pin_get_output_level(lgt_on));
    15ca:	0fc0      	lsrs	r0, r0, #31

}	// End of wcm_lgt_get
    15cc:	4770      	bx	lr
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	40002800 	.word	0x40002800

000015d4 <wcm_lgt_off>:
		port_base->OUTCLR.reg = pin_mask;
    15d4:	2280      	movs	r2, #128	; 0x80
    15d6:	0312      	lsls	r2, r2, #12
    15d8:	4b01      	ldr	r3, [pc, #4]	; (15e0 <wcm_lgt_off+0xc>)
    15da:	615a      	str	r2, [r3, #20]
*****************************************************************************************/
void wcm_lgt_off(void)
{
	port_pin_set_output_level(lgt_on, false);

}	// End of wcm_lgt_off
    15dc:	4770      	bx	lr
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	40002800 	.word	0x40002800

000015e4 <wcm_lgt_on>:
		port_base->OUTSET.reg = pin_mask;
    15e4:	2280      	movs	r2, #128	; 0x80
    15e6:	0312      	lsls	r2, r2, #12
    15e8:	4b01      	ldr	r3, [pc, #4]	; (15f0 <wcm_lgt_on+0xc>)
    15ea:	619a      	str	r2, [r3, #24]
*****************************************************************************************/
void wcm_lgt_on(void)
{
	port_pin_set_output_level(lgt_on, true);

}	// End of wcm_lgt_on
    15ec:	4770      	bx	lr
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	40002800 	.word	0x40002800

000015f4 <wcm_i2c_configure>:

/****************************************************************************************
Function to configure the MMD wcm I2C
*****************************************************************************************/
void wcm_i2c_configure(void)
{
    15f4:	b510      	push	{r4, lr}
    15f6:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    15f8:	aa01      	add	r2, sp, #4
    15fa:	2364      	movs	r3, #100	; 0x64
    15fc:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    15fe:	4b1e      	ldr	r3, [pc, #120]	; (1678 <wcm_i2c_configure+0x84>)
    1600:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1602:	2300      	movs	r3, #0
    1604:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1606:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1608:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    160a:	2180      	movs	r1, #128	; 0x80
    160c:	0389      	lsls	r1, r1, #14
    160e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    1610:	2101      	movs	r1, #1
    1612:	4249      	negs	r1, r1
    1614:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    1616:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1618:	3125      	adds	r1, #37	; 0x25
    161a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    161c:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    161e:	3108      	adds	r1, #8
    1620:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1622:	3101      	adds	r1, #1
    1624:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    1626:	3101      	adds	r1, #1
    1628:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    162a:	33d7      	adds	r3, #215	; 0xd7
    162c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config i2c_master_config_struct;
	
	i2c_master_get_config_defaults(&i2c_master_config_struct);
	
	//i2c_master_config_struct.buffer_timeout = 10000;
	i2c_master_config_struct.pinmux_pad0 = PINMUX_PA16D_SERCOM3_PAD0;
    162e:	4b13      	ldr	r3, [pc, #76]	; (167c <wcm_i2c_configure+0x88>)
    1630:	61d3      	str	r3, [r2, #28]
	i2c_master_config_struct.pinmux_pad1 = PINMUX_PA17D_SERCOM3_PAD1;
    1632:	4b13      	ldr	r3, [pc, #76]	; (1680 <wcm_i2c_configure+0x8c>)
    1634:	6213      	str	r3, [r2, #32]

	i2c_master_init(&i2c_master_module_struct, SERCOM3, &i2c_master_config_struct);
    1636:	4c13      	ldr	r4, [pc, #76]	; (1684 <wcm_i2c_configure+0x90>)
    1638:	4913      	ldr	r1, [pc, #76]	; (1688 <wcm_i2c_configure+0x94>)
    163a:	0020      	movs	r0, r4
    163c:	4b13      	ldr	r3, [pc, #76]	; (168c <wcm_i2c_configure+0x98>)
    163e:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1640:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1642:	2107      	movs	r1, #7
    1644:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    1646:	4219      	tst	r1, r3
    1648:	d1fc      	bne.n	1644 <wcm_i2c_configure+0x50>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    164a:	6813      	ldr	r3, [r2, #0]
    164c:	2102      	movs	r1, #2
    164e:	430b      	orrs	r3, r1
    1650:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1652:	4b0c      	ldr	r3, [pc, #48]	; (1684 <wcm_i2c_configure+0x90>)
    1654:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    1656:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1658:	2010      	movs	r0, #16
    165a:	8b51      	ldrh	r1, [r2, #26]
    165c:	4201      	tst	r1, r0
    165e:	d104      	bne.n	166a <wcm_i2c_configure+0x76>
		timeout_counter++;
    1660:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1662:	42a3      	cmp	r3, r4
    1664:	d3f9      	bcc.n	165a <wcm_i2c_configure+0x66>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1666:	2310      	movs	r3, #16
    1668:	8353      	strh	r3, [r2, #26]

	i2c_master_enable(&i2c_master_module_struct);

	packet.ten_bit_address = false;
    166a:	4b09      	ldr	r3, [pc, #36]	; (1690 <wcm_i2c_configure+0x9c>)
    166c:	2200      	movs	r2, #0
    166e:	721a      	strb	r2, [r3, #8]
	packet.high_speed = false;
    1670:	725a      	strb	r2, [r3, #9]
	packet.hs_master_code = 0x0;
    1672:	729a      	strb	r2, [r3, #10]

}	// End of wcm_i2c_configure
    1674:	b00e      	add	sp, #56	; 0x38
    1676:	bd10      	pop	{r4, pc}
    1678:	00000d48 	.word	0x00000d48
    167c:	00100003 	.word	0x00100003
    1680:	00110003 	.word	0x00110003
    1684:	20000a24 	.word	0x20000a24
    1688:	42000c00 	.word	0x42000c00
    168c:	00003039 	.word	0x00003039
    1690:	20000a30 	.word	0x20000a30

00001694 <wcm_i2c_read_response_packet>:

/****************************************************************************************
Function to read a response packet from an I2C device
*****************************************************************************************/
enum status_code wcm_i2c_read_response_packet(uint16_t address, uint32_t *data, uint16_t num_bytes)
{
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	b0a0      	sub	sp, #128	; 0x80
    1698:	000d      	movs	r5, r1
    169a:	0016      	movs	r6, r2
	enum status_code status;
	//uint16_t count;
	uint16_t i;
	uint16_t num_bits;

	packet.address = address;
    169c:	4915      	ldr	r1, [pc, #84]	; (16f4 <wcm_i2c_read_response_packet+0x60>)
    169e:	8008      	strh	r0, [r1, #0]
	packet.data = read_buffer;
    16a0:	4b15      	ldr	r3, [pc, #84]	; (16f8 <wcm_i2c_read_response_packet+0x64>)
    16a2:	604b      	str	r3, [r1, #4]
	packet.data_length = num_bytes;
    16a4:	804a      	strh	r2, [r1, #2]

	//count = 0;
	while (1)
	{
		status = i2c_master_read_packet_wait(&i2c_master_module_struct, &packet);
    16a6:	4815      	ldr	r0, [pc, #84]	; (16fc <wcm_i2c_read_response_packet+0x68>)
    16a8:	4b15      	ldr	r3, [pc, #84]	; (1700 <wcm_i2c_read_response_packet+0x6c>)
    16aa:	4798      	blx	r3
    16ac:	1e04      	subs	r4, r0, #0
		if (status == STATUS_OK)
    16ae:	d117      	bne.n	16e0 <wcm_i2c_read_response_packet+0x4c>
			return (status);

		}
	}

	*data = 0;
    16b0:	2300      	movs	r3, #0
    16b2:	602b      	str	r3, [r5, #0]
	num_bits = 8 * (num_bytes - 1);
    16b4:	1e73      	subs	r3, r6, #1
    16b6:	00db      	lsls	r3, r3, #3
    16b8:	b29b      	uxth	r3, r3
	for (i = 0; i < num_bytes; i++)
    16ba:	2e00      	cmp	r6, #0
    16bc:	d00d      	beq.n	16da <wcm_i2c_read_response_packet+0x46>
    16be:	4a0e      	ldr	r2, [pc, #56]	; (16f8 <wcm_i2c_read_response_packet+0x64>)
    16c0:	00f6      	lsls	r6, r6, #3
    16c2:	1b9e      	subs	r6, r3, r6
    16c4:	b2b6      	uxth	r6, r6
	{
		*data |= read_buffer[i] << num_bits;
    16c6:	7811      	ldrb	r1, [r2, #0]
    16c8:	4099      	lsls	r1, r3
    16ca:	6828      	ldr	r0, [r5, #0]
    16cc:	4301      	orrs	r1, r0
    16ce:	6029      	str	r1, [r5, #0]
		num_bits -= 8;
    16d0:	3b08      	subs	r3, #8
    16d2:	b29b      	uxth	r3, r3
    16d4:	3201      	adds	r2, #1
	for (i = 0; i < num_bytes; i++)
    16d6:	42b3      	cmp	r3, r6
    16d8:	d1f5      	bne.n	16c6 <wcm_i2c_read_response_packet+0x32>
	}

	return (status);

}	// End of wcm_i2c_read_response_packet
    16da:	0020      	movs	r0, r4
    16dc:	b020      	add	sp, #128	; 0x80
    16de:	bd70      	pop	{r4, r5, r6, pc}
			sprintf(response, "wcm_i2c_read_response_packet: status = 0x%x!\r\n", status);
    16e0:	0002      	movs	r2, r0
    16e2:	4908      	ldr	r1, [pc, #32]	; (1704 <wcm_i2c_read_response_packet+0x70>)
    16e4:	4668      	mov	r0, sp
    16e6:	4b08      	ldr	r3, [pc, #32]	; (1708 <wcm_i2c_read_response_packet+0x74>)
    16e8:	4798      	blx	r3
			wcm_usart_send_pc_message(response);
    16ea:	4668      	mov	r0, sp
    16ec:	4b07      	ldr	r3, [pc, #28]	; (170c <wcm_i2c_read_response_packet+0x78>)
    16ee:	4798      	blx	r3
			return (status);
    16f0:	e7f3      	b.n	16da <wcm_i2c_read_response_packet+0x46>
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	20000a30 	.word	0x20000a30
    16f8:	20000a3c 	.word	0x20000a3c
    16fc:	20000a24 	.word	0x20000a24
    1700:	00003625 	.word	0x00003625
    1704:	0000d5cc 	.word	0x0000d5cc
    1708:	00008405 	.word	0x00008405
    170c:	00002551 	.word	0x00002551

00001710 <wcm_i2c_write_command_packet>:

/****************************************************************************************
Function to write a command packet to an I2C device
*****************************************************************************************/
enum status_code wcm_i2c_write_command_packet(uint16_t address, uint8_t *command_bytes, uint16_t num_bytes, uint8_t repeated_start)
{
    1710:	b510      	push	{r4, lr}
    1712:	b0a0      	sub	sp, #128	; 0x80
	char response[128];
	enum status_code status;
	//uint16_t count;

	packet.address = address;
    1714:	4c0f      	ldr	r4, [pc, #60]	; (1754 <wcm_i2c_write_command_packet+0x44>)
    1716:	8020      	strh	r0, [r4, #0]
	packet.data = command_bytes;
    1718:	6061      	str	r1, [r4, #4]
	packet.data_length = num_bytes;
    171a:	8062      	strh	r2, [r4, #2]

	//count = 0;
	while (1)
	{
		if (repeated_start == 0)
    171c:	2b00      	cmp	r3, #0
    171e:	d109      	bne.n	1734 <wcm_i2c_write_command_packet+0x24>
		{
			status = i2c_master_write_packet_wait(&i2c_master_module_struct, &packet);
    1720:	0021      	movs	r1, r4
    1722:	480d      	ldr	r0, [pc, #52]	; (1758 <wcm_i2c_write_command_packet+0x48>)
    1724:	4b0d      	ldr	r3, [pc, #52]	; (175c <wcm_i2c_write_command_packet+0x4c>)
    1726:	4798      	blx	r3
    1728:	0004      	movs	r4, r0
		}
		else
		{
			status = i2c_master_write_packet_wait_no_stop(&i2c_master_module_struct, &packet);
		}
		if (status == STATUS_OK)
    172a:	2c00      	cmp	r4, #0
    172c:	d108      	bne.n	1740 <wcm_i2c_write_command_packet+0x30>
		}
	}

	return (status);

}	// End of wcm_i2c_write_command_packet
    172e:	0020      	movs	r0, r4
    1730:	b020      	add	sp, #128	; 0x80
    1732:	bd10      	pop	{r4, pc}
			status = i2c_master_write_packet_wait_no_stop(&i2c_master_module_struct, &packet);
    1734:	4907      	ldr	r1, [pc, #28]	; (1754 <wcm_i2c_write_command_packet+0x44>)
    1736:	4808      	ldr	r0, [pc, #32]	; (1758 <wcm_i2c_write_command_packet+0x48>)
    1738:	4b09      	ldr	r3, [pc, #36]	; (1760 <wcm_i2c_write_command_packet+0x50>)
    173a:	4798      	blx	r3
    173c:	0004      	movs	r4, r0
    173e:	e7f4      	b.n	172a <wcm_i2c_write_command_packet+0x1a>
			sprintf(response, "wcm_i2c_write_command_packet: status = 0x%x!\r\n", status);
    1740:	0022      	movs	r2, r4
    1742:	4908      	ldr	r1, [pc, #32]	; (1764 <wcm_i2c_write_command_packet+0x54>)
    1744:	4668      	mov	r0, sp
    1746:	4b08      	ldr	r3, [pc, #32]	; (1768 <wcm_i2c_write_command_packet+0x58>)
    1748:	4798      	blx	r3
			wcm_usart_send_pc_message(response);
    174a:	4668      	mov	r0, sp
    174c:	4b07      	ldr	r3, [pc, #28]	; (176c <wcm_i2c_write_command_packet+0x5c>)
    174e:	4798      	blx	r3
			break;
    1750:	e7ed      	b.n	172e <wcm_i2c_write_command_packet+0x1e>
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	20000a30 	.word	0x20000a30
    1758:	20000a24 	.word	0x20000a24
    175c:	00003639 	.word	0x00003639
    1760:	0000364d 	.word	0x0000364d
    1764:	0000d5fc 	.word	0x0000d5fc
    1768:	00008405 	.word	0x00008405
    176c:	00002551 	.word	0x00002551

00001770 <wcm_i2c_write_command_read_response>:
*****************************************************************************************/
enum status_code wcm_i2c_write_command_read_response(uint16_t address,
													uint8_t *command_bytes, uint16_t num_command_bytes,
													uint32_t *data, uint16_t num_response_bytes,
													uint8_t repeated_start)
{
    1770:	b5f0      	push	{r4, r5, r6, r7, lr}
    1772:	b0a1      	sub	sp, #132	; 0x84
    1774:	0005      	movs	r5, r0
    1776:	001e      	movs	r6, r3
    1778:	ab26      	add	r3, sp, #152	; 0x98
    177a:	881f      	ldrh	r7, [r3, #0]
    177c:	ab27      	add	r3, sp, #156	; 0x9c
    177e:	781b      	ldrb	r3, [r3, #0]
	enum status_code status;
	//uint16_t i;
	//uint16_t num_bits;
	char response[128];

	status = wcm_i2c_write_command_packet(address, command_bytes, num_command_bytes, repeated_start);
    1780:	4c0f      	ldr	r4, [pc, #60]	; (17c0 <wcm_i2c_write_command_read_response+0x50>)
    1782:	47a0      	blx	r4
    1784:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK)
    1786:	d10f      	bne.n	17a8 <wcm_i2c_write_command_read_response+0x38>
		wcm_usart_send_pc_message(response);

		return (status);
	}

	status = wcm_i2c_read_response_packet(address, data, num_response_bytes);
    1788:	003a      	movs	r2, r7
    178a:	0031      	movs	r1, r6
    178c:	0028      	movs	r0, r5
    178e:	4b0d      	ldr	r3, [pc, #52]	; (17c4 <wcm_i2c_write_command_read_response+0x54>)
    1790:	4798      	blx	r3
    1792:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK)
    1794:	d010      	beq.n	17b8 <wcm_i2c_write_command_read_response+0x48>
	{
		sprintf(response, "wcm_i2c_write_command_read_response: (2) status = 0x%x!\r\n", status);
    1796:	0002      	movs	r2, r0
    1798:	490b      	ldr	r1, [pc, #44]	; (17c8 <wcm_i2c_write_command_read_response+0x58>)
    179a:	4668      	mov	r0, sp
    179c:	4b0b      	ldr	r3, [pc, #44]	; (17cc <wcm_i2c_write_command_read_response+0x5c>)
    179e:	4798      	blx	r3
		wcm_usart_send_pc_message(response);
    17a0:	4668      	mov	r0, sp
    17a2:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <wcm_i2c_write_command_read_response+0x60>)
    17a4:	4798      	blx	r3

		return (status);
    17a6:	e007      	b.n	17b8 <wcm_i2c_write_command_read_response+0x48>
		sprintf(response, "wcm_i2c_write_command_read_response: (1) status = 0x%x!\r\n", status);
    17a8:	0002      	movs	r2, r0
    17aa:	490a      	ldr	r1, [pc, #40]	; (17d4 <wcm_i2c_write_command_read_response+0x64>)
    17ac:	4668      	mov	r0, sp
    17ae:	4b07      	ldr	r3, [pc, #28]	; (17cc <wcm_i2c_write_command_read_response+0x5c>)
    17b0:	4798      	blx	r3
		wcm_usart_send_pc_message(response);
    17b2:	4668      	mov	r0, sp
    17b4:	4b06      	ldr	r3, [pc, #24]	; (17d0 <wcm_i2c_write_command_read_response+0x60>)
    17b6:	4798      	blx	r3
		//num_bits -= 8;
	//}

	return (status);

}	// End of wcm_i2c_write_command_read_response
    17b8:	0020      	movs	r0, r4
    17ba:	b021      	add	sp, #132	; 0x84
    17bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	00001711 	.word	0x00001711
    17c4:	00001695 	.word	0x00001695
    17c8:	0000d668 	.word	0x0000d668
    17cc:	00008405 	.word	0x00008405
    17d0:	00002551 	.word	0x00002551
    17d4:	0000d62c 	.word	0x0000d62c

000017d8 <wcm_i2c_command_read_reg>:
Function to write a command to MC3416 Register from an I2C device
*****************************************************************************************/


enum status_code wcm_i2c_command_read_reg(uint16_t address, uint16_t num_command_bytes, uint8_t reg_address, uint8_t *data, uint16_t num_response_bytes)
{
    17d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17da:	b0a3      	sub	sp, #140	; 0x8c
    17dc:	0005      	movs	r5, r0
    17de:	0008      	movs	r0, r1
    17e0:	001e      	movs	r6, r3
    17e2:	ab28      	add	r3, sp, #160	; 0xa0
    17e4:	881f      	ldrh	r7, [r3, #0]
    17e6:	466b      	mov	r3, sp
    17e8:	1dd9      	adds	r1, r3, #7
    17ea:	700a      	strb	r2, [r1, #0]
	enum status_code status;
	char response[128];
	
	uint8_t no_stop =1;
	
	status = wcm_i2c_write_command_packet(address, command_reg, num_command_bytes, no_stop);
    17ec:	2301      	movs	r3, #1
    17ee:	0002      	movs	r2, r0
    17f0:	0028      	movs	r0, r5
    17f2:	4c10      	ldr	r4, [pc, #64]	; (1834 <wcm_i2c_command_read_reg+0x5c>)
    17f4:	47a0      	blx	r4
    17f6:	1e04      	subs	r4, r0, #0
	
	if (status != STATUS_OK)
    17f8:	d111      	bne.n	181e <wcm_i2c_command_read_reg+0x46>
		wcm_usart_send_pc_message(response);

		return (status);
	}

	packet.address = address;
    17fa:	490f      	ldr	r1, [pc, #60]	; (1838 <wcm_i2c_command_read_reg+0x60>)
    17fc:	800d      	strh	r5, [r1, #0]
	packet.data = data;
    17fe:	604e      	str	r6, [r1, #4]
	packet.data_length = num_response_bytes;
    1800:	804f      	strh	r7, [r1, #2]
	
	while (1)
	{
		status = i2c_master_read_packet_wait(&i2c_master_module_struct, &packet);
    1802:	480e      	ldr	r0, [pc, #56]	; (183c <wcm_i2c_command_read_reg+0x64>)
    1804:	4b0e      	ldr	r3, [pc, #56]	; (1840 <wcm_i2c_command_read_reg+0x68>)
    1806:	4798      	blx	r3
    1808:	1e04      	subs	r4, r0, #0
		if (status == STATUS_OK)
    180a:	d010      	beq.n	182e <wcm_i2c_command_read_reg+0x56>
		{
			break;
		}
		else
		{
			sprintf(response, "wcm_i2c_command_read_response: (2) status = 0x%x!\r\n", status);
    180c:	0002      	movs	r2, r0
    180e:	490d      	ldr	r1, [pc, #52]	; (1844 <wcm_i2c_command_read_reg+0x6c>)
    1810:	a802      	add	r0, sp, #8
    1812:	4b0d      	ldr	r3, [pc, #52]	; (1848 <wcm_i2c_command_read_reg+0x70>)
    1814:	4798      	blx	r3
			wcm_usart_send_pc_message(response);
    1816:	a802      	add	r0, sp, #8
    1818:	4b0c      	ldr	r3, [pc, #48]	; (184c <wcm_i2c_command_read_reg+0x74>)
    181a:	4798      	blx	r3

			return (status);
    181c:	e007      	b.n	182e <wcm_i2c_command_read_reg+0x56>
		sprintf(response, "wcm_i2c_command_read_reg_response: (1) status = 0x%x!\r\n", status);
    181e:	0002      	movs	r2, r0
    1820:	490b      	ldr	r1, [pc, #44]	; (1850 <wcm_i2c_command_read_reg+0x78>)
    1822:	a802      	add	r0, sp, #8
    1824:	4b08      	ldr	r3, [pc, #32]	; (1848 <wcm_i2c_command_read_reg+0x70>)
    1826:	4798      	blx	r3
		wcm_usart_send_pc_message(response);
    1828:	a802      	add	r0, sp, #8
    182a:	4b08      	ldr	r3, [pc, #32]	; (184c <wcm_i2c_command_read_reg+0x74>)
    182c:	4798      	blx	r3
		}
	}
	return (status);

}	// End of wcm_i2c_command_read_reg
    182e:	0020      	movs	r0, r4
    1830:	b023      	add	sp, #140	; 0x8c
    1832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1834:	00001711 	.word	0x00001711
    1838:	20000a30 	.word	0x20000a30
    183c:	20000a24 	.word	0x20000a24
    1840:	00003625 	.word	0x00003625
    1844:	0000d56c 	.word	0x0000d56c
    1848:	00008405 	.word	0x00008405
    184c:	00002551 	.word	0x00002551
    1850:	0000d534 	.word	0x0000d534

00001854 <wcm_i2c_command_write_reg>:
*****************************************************************************************/


enum status_code wcm_i2c_command_write_reg(uint16_t slave_address, uint8_t reg_address,
uint8_t *command_bytes, uint16_t num_bytes)
{
    1854:	b510      	push	{r4, lr}
    1856:	b0a2      	sub	sp, #136	; 0x88
	//Create write command. 8 MSB set for register address and 8 LSB for command data
	uint8_t full_address[2];
	full_address[0] = reg_address;
    1858:	ac21      	add	r4, sp, #132	; 0x84
    185a:	7021      	strb	r1, [r4, #0]
	full_address[1] = *command_bytes;;
    185c:	7812      	ldrb	r2, [r2, #0]
    185e:	7062      	strb	r2, [r4, #1]
	
	char response[128];
	enum status_code status;

	packet.address = slave_address;
    1860:	490a      	ldr	r1, [pc, #40]	; (188c <wcm_i2c_command_write_reg+0x38>)
    1862:	8008      	strh	r0, [r1, #0]
	packet.data = full_address;
    1864:	604c      	str	r4, [r1, #4]
	packet.data_length = num_bytes;
    1866:	804b      	strh	r3, [r1, #2]
	
	
	while (1)
	{
		status = i2c_master_write_packet_wait(&i2c_master_module_struct, &packet);
    1868:	4809      	ldr	r0, [pc, #36]	; (1890 <wcm_i2c_command_write_reg+0x3c>)
    186a:	4b0a      	ldr	r3, [pc, #40]	; (1894 <wcm_i2c_command_write_reg+0x40>)
    186c:	4798      	blx	r3
    186e:	1e04      	subs	r4, r0, #0
		if(status != STATUS_OK)
    1870:	d102      	bne.n	1878 <wcm_i2c_command_write_reg+0x24>
		
	}
	
	return (status);

}	// End of wcm_i2c_write_command_reg
    1872:	0020      	movs	r0, r4
    1874:	b022      	add	sp, #136	; 0x88
    1876:	bd10      	pop	{r4, pc}
			sprintf(response, "wcm_i2c_write_command_reg: status = 0x%x!\r\n", status);
    1878:	0002      	movs	r2, r0
    187a:	4907      	ldr	r1, [pc, #28]	; (1898 <wcm_i2c_command_write_reg+0x44>)
    187c:	a801      	add	r0, sp, #4
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <wcm_i2c_command_write_reg+0x48>)
    1880:	4798      	blx	r3
			wcm_usart_send_pc_message(response);
    1882:	a801      	add	r0, sp, #4
    1884:	4b06      	ldr	r3, [pc, #24]	; (18a0 <wcm_i2c_command_write_reg+0x4c>)
    1886:	4798      	blx	r3
			break;
    1888:	e7f3      	b.n	1872 <wcm_i2c_command_write_reg+0x1e>
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	20000a30 	.word	0x20000a30
    1890:	20000a24 	.word	0x20000a24
    1894:	00003639 	.word	0x00003639
    1898:	0000d5a0 	.word	0x0000d5a0
    189c:	00008405 	.word	0x00008405
    18a0:	00002551 	.word	0x00002551

000018a4 <mc3416_set_mode>:
/****************************************************************************************
Local function to set the Mode (STANDBY or WAKE) of the MC3416 device
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code mc3416_set_mode(uint8_t mode)
{
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	b082      	sub	sp, #8
	enum status_code status;
	
	uint8_t b_mode = mode;
    18a8:	466b      	mov	r3, sp
    18aa:	1ddc      	adds	r4, r3, #7
    18ac:	71d8      	strb	r0, [r3, #7]
	uint16_t wr_length = 0x02;
	
	status = wcm_i2c_command_write_reg(mc3416_address, MC3416_REG_MODE, &b_mode, wr_length);
    18ae:	2302      	movs	r3, #2
    18b0:	0022      	movs	r2, r4
    18b2:	2107      	movs	r1, #7
    18b4:	204c      	movs	r0, #76	; 0x4c
    18b6:	4d0c      	ldr	r5, [pc, #48]	; (18e8 <mc3416_set_mode+0x44>)
    18b8:	47a8      	blx	r5
    18ba:	0005      	movs	r5, r0
    18bc:	0006      	movs	r6, r0
	
	if((b_mode & MC3416_MODE_WAKE) ==  MC3416_MODE_WAKE)
    18be:	7823      	ldrb	r3, [r4, #0]
    18c0:	07db      	lsls	r3, r3, #31
    18c2:	d404      	bmi.n	18ce <mc3416_set_mode+0x2a>
	{
		delay_ms(mc3416_wakeup_delay_ms);
		wcm_usart_send_pc_message("wakeup delay finished!\r\n");
	}
	if(status != STATUS_OK)
    18c4:	2e00      	cmp	r6, #0
    18c6:	d10a      	bne.n	18de <mc3416_set_mode+0x3a>
	{
		wcm_usart_send_pc_message("mc3416_set_mode: write_failed!\r\n");
	}
	return (status);
}	//	End of mc3416_set_mode
    18c8:	0028      	movs	r0, r5
    18ca:	b002      	add	sp, #8
    18cc:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(mc3416_wakeup_delay_ms);
    18ce:	20fa      	movs	r0, #250	; 0xfa
    18d0:	0080      	lsls	r0, r0, #2
    18d2:	4b06      	ldr	r3, [pc, #24]	; (18ec <mc3416_set_mode+0x48>)
    18d4:	4798      	blx	r3
		wcm_usart_send_pc_message("wakeup delay finished!\r\n");
    18d6:	4806      	ldr	r0, [pc, #24]	; (18f0 <mc3416_set_mode+0x4c>)
    18d8:	4b06      	ldr	r3, [pc, #24]	; (18f4 <mc3416_set_mode+0x50>)
    18da:	4798      	blx	r3
    18dc:	e7f2      	b.n	18c4 <mc3416_set_mode+0x20>
		wcm_usart_send_pc_message("mc3416_set_mode: write_failed!\r\n");
    18de:	4806      	ldr	r0, [pc, #24]	; (18f8 <mc3416_set_mode+0x54>)
    18e0:	4b04      	ldr	r3, [pc, #16]	; (18f4 <mc3416_set_mode+0x50>)
    18e2:	4798      	blx	r3
    18e4:	e7f0      	b.n	18c8 <mc3416_set_mode+0x24>
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	00001855 	.word	0x00001855
    18ec:	0000488d 	.word	0x0000488d
    18f0:	0000d714 	.word	0x0000d714
    18f4:	00002551 	.word	0x00002551
    18f8:	0000d730 	.word	0x0000d730

000018fc <mc3416_check_mode>:
/****************************************************************************************
Local function to check the Mode (STANDBY or WAKE) of the MC3416 device
Returns AWAKE(0) if in WAKE state, SLEEP(-1) if in STANDBY and ERROR (1) if read failed 
*****************************************************************************************/
enum status_code mc3416_check_mode(void)
{
    18fc:	b510      	push	{r4, lr}
    18fe:	b084      	sub	sp, #16
	
	uint8_t b_mode;
	uint8_t rd_length = 0x01;
	uint8_t wr_length = 0x01;
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length , MC3416_REG_DEVICE_STATUS, &b_mode, rd_length);
    1900:	2301      	movs	r3, #1
    1902:	9300      	str	r3, [sp, #0]
    1904:	330e      	adds	r3, #14
    1906:	446b      	add	r3, sp
    1908:	2205      	movs	r2, #5
    190a:	2101      	movs	r1, #1
    190c:	204c      	movs	r0, #76	; 0x4c
    190e:	4c0b      	ldr	r4, [pc, #44]	; (193c <mc3416_check_mode+0x40>)
    1910:	47a0      	blx	r4
    1912:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1914:	d109      	bne.n	192a <mc3416_check_mode+0x2e>
	{
		wcm_usart_send_pc_message("mc3416_check_mode: read_failed!\r\n");
		return (status);
	}
	b_mode = (b_mode & MC3416_STATE_MASK);
    1916:	220f      	movs	r2, #15
    1918:	446a      	add	r2, sp
    191a:	7811      	ldrb	r1, [r2, #0]
    191c:	2303      	movs	r3, #3
    191e:	400b      	ands	r3, r1
    1920:	7013      	strb	r3, [r2, #0]
	
	if(b_mode == MC3416_MODE_STANDBY)
    1922:	d006      	beq.n	1932 <mc3416_check_mode+0x36>
	{
		status = STATUS_BUSY;
		wcm_usart_send_pc_message("mc3416_check_mode: STANDBY_MODE!\r\n");
	}
	return (status);
}	//	End of mc3416_check_mode
    1924:	0020      	movs	r0, r4
    1926:	b004      	add	sp, #16
    1928:	bd10      	pop	{r4, pc}
		wcm_usart_send_pc_message("mc3416_check_mode: read_failed!\r\n");
    192a:	4805      	ldr	r0, [pc, #20]	; (1940 <mc3416_check_mode+0x44>)
    192c:	4b05      	ldr	r3, [pc, #20]	; (1944 <mc3416_check_mode+0x48>)
    192e:	4798      	blx	r3
		return (status);
    1930:	e7f8      	b.n	1924 <mc3416_check_mode+0x28>
		wcm_usart_send_pc_message("mc3416_check_mode: STANDBY_MODE!\r\n");
    1932:	4805      	ldr	r0, [pc, #20]	; (1948 <mc3416_check_mode+0x4c>)
    1934:	4b03      	ldr	r3, [pc, #12]	; (1944 <mc3416_check_mode+0x48>)
    1936:	4798      	blx	r3
		status = STATUS_BUSY;
    1938:	2405      	movs	r4, #5
    193a:	e7f3      	b.n	1924 <mc3416_check_mode+0x28>
    193c:	000017d9 	.word	0x000017d9
    1940:	0000d6a4 	.word	0x0000d6a4
    1944:	00002551 	.word	0x00002551
    1948:	0000d6c8 	.word	0x0000d6c8

0000194c <mc3416_set_sampling_rate>:
/****************************************************************************************
Local function to set the output data rate of the MC3416 device
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code mc3416_set_sampling_rate(void)
{
    194c:	b510      	push	{r4, lr}
    194e:	b084      	sub	sp, #16
	enum status_code status;
	
	uint8_t b_odr = 0x00;
    1950:	230f      	movs	r3, #15
    1952:	446b      	add	r3, sp
    1954:	2200      	movs	r2, #0
    1956:	701a      	strb	r2, [r3, #0]
	uint8_t rd_length = 0x01;
	uint8_t wr1_length = 0x01;
	uint8_t wr2_length = 0x02;
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr1_length, MC3416_REG_SAMPLE_RATE, &b_odr, rd_length);
    1958:	3201      	adds	r2, #1
    195a:	9200      	str	r2, [sp, #0]
    195c:	3207      	adds	r2, #7
    195e:	2101      	movs	r1, #1
    1960:	204c      	movs	r0, #76	; 0x4c
    1962:	4c0d      	ldr	r4, [pc, #52]	; (1998 <mc3416_set_sampling_rate+0x4c>)
    1964:	47a0      	blx	r4
    1966:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1968:	d110      	bne.n	198c <mc3416_set_sampling_rate+0x40>
	{
		wcm_usart_send_pc_message("mc3416_set_sampling_rate: read_failed!\r\n");
		return (status);
	}
	b_odr = ((b_odr & MC3416_ODR_MASK) | MC3416_ODR);
    196a:	220f      	movs	r2, #15
    196c:	446a      	add	r2, sp
    196e:	7813      	ldrb	r3, [r2, #0]
    1970:	2107      	movs	r1, #7
    1972:	438b      	bics	r3, r1
    1974:	7013      	strb	r3, [r2, #0]
	status = wcm_i2c_command_write_reg(mc3416_address, MC3416_REG_SAMPLE_RATE, &b_odr, wr2_length);
    1976:	2302      	movs	r3, #2
    1978:	3101      	adds	r1, #1
    197a:	204c      	movs	r0, #76	; 0x4c
    197c:	4c07      	ldr	r4, [pc, #28]	; (199c <mc3416_set_sampling_rate+0x50>)
    197e:	47a0      	blx	r4
    1980:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1982:	d006      	beq.n	1992 <mc3416_set_sampling_rate+0x46>
	{
		wcm_usart_send_pc_message("mc3416_set_sampling_rate: write_failed!\r\n");
    1984:	4806      	ldr	r0, [pc, #24]	; (19a0 <mc3416_set_sampling_rate+0x54>)
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <mc3416_set_sampling_rate+0x58>)
    1988:	4798      	blx	r3
    198a:	e002      	b.n	1992 <mc3416_set_sampling_rate+0x46>
		wcm_usart_send_pc_message("mc3416_set_sampling_rate: read_failed!\r\n");
    198c:	4806      	ldr	r0, [pc, #24]	; (19a8 <mc3416_set_sampling_rate+0x5c>)
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <mc3416_set_sampling_rate+0x58>)
    1990:	4798      	blx	r3
	}
	
	return (status);
}	//	End of mc3416_set_sampling rate
    1992:	0020      	movs	r0, r4
    1994:	b004      	add	sp, #16
    1996:	bd10      	pop	{r4, pc}
    1998:	000017d9 	.word	0x000017d9
    199c:	00001855 	.word	0x00001855
    19a0:	0000d7dc 	.word	0x0000d7dc
    19a4:	00002551 	.word	0x00002551
    19a8:	0000d7b0 	.word	0x0000d7b0

000019ac <mc3416_set_range_resolution>:
/****************************************************************************************
Local function to set the G range of the MC3416 device
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code mc3416_set_range_resolution(void)
{
    19ac:	b510      	push	{r4, lr}
    19ae:	b084      	sub	sp, #16
	enum status_code status;
	
	uint8_t b_range = 0x00;
    19b0:	230f      	movs	r3, #15
    19b2:	446b      	add	r3, sp
    19b4:	2200      	movs	r2, #0
    19b6:	701a      	strb	r2, [r3, #0]
	uint8_t wr2_length = 0x02;
	uint8_t wr1_length = 0x01;
	uint8_t rd_length = 0x01;
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr1_length, MC3416_REG_RANGE, &b_range, rd_length);
    19b8:	3201      	adds	r2, #1
    19ba:	9200      	str	r2, [sp, #0]
    19bc:	321f      	adds	r2, #31
    19be:	2101      	movs	r1, #1
    19c0:	204c      	movs	r0, #76	; 0x4c
    19c2:	4c0e      	ldr	r4, [pc, #56]	; (19fc <mc3416_set_range_resolution+0x50>)
    19c4:	47a0      	blx	r4
    19c6:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    19c8:	d112      	bne.n	19f0 <mc3416_set_range_resolution+0x44>
	{
		wcm_usart_send_pc_message("mc3416_set_range_resolution: read_failed!\r\n");
		return (status);
	}
	
	b_range = ((b_range & MC3416_RANGE_MASK) | MC3416_RANGE_REG_VAL);
    19ca:	220f      	movs	r2, #15
    19cc:	446a      	add	r2, sp
    19ce:	7813      	ldrb	r3, [r2, #0]
    19d0:	217f      	movs	r1, #127	; 0x7f
    19d2:	438b      	bics	r3, r1
    19d4:	2109      	movs	r1, #9
    19d6:	430b      	orrs	r3, r1
    19d8:	7013      	strb	r3, [r2, #0]
	status = wcm_i2c_command_write_reg(mc3416_address, MC3416_REG_RANGE, &b_range, wr2_length);
    19da:	2302      	movs	r3, #2
    19dc:	2120      	movs	r1, #32
    19de:	204c      	movs	r0, #76	; 0x4c
    19e0:	4c07      	ldr	r4, [pc, #28]	; (1a00 <mc3416_set_range_resolution+0x54>)
    19e2:	47a0      	blx	r4
    19e4:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    19e6:	d006      	beq.n	19f6 <mc3416_set_range_resolution+0x4a>
	{
		wcm_usart_send_pc_message("mc3416_set_range_resolution: write_failed!\r\n");
    19e8:	4806      	ldr	r0, [pc, #24]	; (1a04 <mc3416_set_range_resolution+0x58>)
    19ea:	4b07      	ldr	r3, [pc, #28]	; (1a08 <mc3416_set_range_resolution+0x5c>)
    19ec:	4798      	blx	r3
    19ee:	e002      	b.n	19f6 <mc3416_set_range_resolution+0x4a>
		wcm_usart_send_pc_message("mc3416_set_range_resolution: read_failed!\r\n");
    19f0:	4806      	ldr	r0, [pc, #24]	; (1a0c <mc3416_set_range_resolution+0x60>)
    19f2:	4b05      	ldr	r3, [pc, #20]	; (1a08 <mc3416_set_range_resolution+0x5c>)
    19f4:	4798      	blx	r3
	}
	
	return (status);
}	//	End of mc3416_set_range_resolution
    19f6:	0020      	movs	r0, r4
    19f8:	b004      	add	sp, #16
    19fa:	bd10      	pop	{r4, pc}
    19fc:	000017d9 	.word	0x000017d9
    1a00:	00001855 	.word	0x00001855
    1a04:	0000d780 	.word	0x0000d780
    1a08:	00002551 	.word	0x00002551
    1a0c:	0000d754 	.word	0x0000d754

00001a10 <mc3416_validate_chip>:
/****************************************************************************************
Local function to check a valid Chip ID and Product Code for MC3416 device
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code mc3416_validate_chip(void)
{
    1a10:	b510      	push	{r4, lr}
    1a12:	b084      	sub	sp, #16
	enum status_code status;
	uint8_t b_chipid = 0x00;
    1a14:	230f      	movs	r3, #15
    1a16:	446b      	add	r3, sp
    1a18:	2200      	movs	r2, #0
    1a1a:	701a      	strb	r2, [r3, #0]
	uint8_t b_pcode = 0x00;
    1a1c:	210e      	movs	r1, #14
    1a1e:	4469      	add	r1, sp
    1a20:	700a      	strb	r2, [r1, #0]
	uint8_t rd_length = 0x01;
	uint8_t wr_length = 0x01;
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_CHIPID, &b_chipid, rd_length);
    1a22:	3201      	adds	r2, #1
    1a24:	9200      	str	r2, [sp, #0]
    1a26:	3217      	adds	r2, #23
    1a28:	2101      	movs	r1, #1
    1a2a:	204c      	movs	r0, #76	; 0x4c
    1a2c:	4c19      	ldr	r4, [pc, #100]	; (1a94 <mc3416_validate_chip+0x84>)
    1a2e:	47a0      	blx	r4
    1a30:	1e04      	subs	r4, r0, #0
	
	if(status != STATUS_OK)
    1a32:	d11f      	bne.n	1a74 <mc3416_validate_chip+0x64>
	{
		wcm_usart_send_pc_message("mc3416_validate_chip: chipID_read_failed!\r\n");
		return (status);
	}
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_PRODUCT_CODE_L, &b_pcode, rd_length);
    1a34:	2301      	movs	r3, #1
    1a36:	9300      	str	r3, [sp, #0]
    1a38:	330d      	adds	r3, #13
    1a3a:	446b      	add	r3, sp
    1a3c:	223b      	movs	r2, #59	; 0x3b
    1a3e:	2101      	movs	r1, #1
    1a40:	204c      	movs	r0, #76	; 0x4c
    1a42:	4c14      	ldr	r4, [pc, #80]	; (1a94 <mc3416_validate_chip+0x84>)
    1a44:	47a0      	blx	r4
    1a46:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1a48:	d11a      	bne.n	1a80 <mc3416_validate_chip+0x70>
	{
		wcm_usart_send_pc_message("mc3416_validate_chip: Pcode_read_failed!\r\n");
		return (status);
	}
	
	b_chipid = b_chipid & 0xF0;
    1a4a:	220f      	movs	r2, #15
    1a4c:	446a      	add	r2, sp
    1a4e:	7813      	ldrb	r3, [r2, #0]
    1a50:	210f      	movs	r1, #15
    1a52:	438b      	bics	r3, r1
    1a54:	7013      	strb	r3, [r2, #0]
	b_pcode = b_pcode & 0xF1;
    1a56:	3901      	subs	r1, #1
    1a58:	4469      	add	r1, sp
    1a5a:	780a      	ldrb	r2, [r1, #0]
    1a5c:	200e      	movs	r0, #14
    1a5e:	4382      	bics	r2, r0
    1a60:	700a      	strb	r2, [r1, #0]
	if(b_chipid != MC3416_CHIPID)
    1a62:	2ba0      	cmp	r3, #160	; 0xa0
    1a64:	d110      	bne.n	1a88 <mc3416_validate_chip+0x78>
	{
		wcm_usart_send_pc_message("mc3416_validate_chip: Chip_ID_incorrect!\r\n");
		return MC3416_ERROR;
	}

	if(b_pcode != MC3416_PCODE)
    1a66:	2a20      	cmp	r2, #32
    1a68:	d007      	beq.n	1a7a <mc3416_validate_chip+0x6a>
	{
		wcm_usart_send_pc_message("mc3416_validate_chip: Product_Code_incorrect!\r\n");
    1a6a:	480b      	ldr	r0, [pc, #44]	; (1a98 <mc3416_validate_chip+0x88>)
    1a6c:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <mc3416_validate_chip+0x8c>)
    1a6e:	4798      	blx	r3
		return MC3416_ERROR;
    1a70:	2401      	movs	r4, #1
    1a72:	e002      	b.n	1a7a <mc3416_validate_chip+0x6a>
		wcm_usart_send_pc_message("mc3416_validate_chip: chipID_read_failed!\r\n");
    1a74:	480a      	ldr	r0, [pc, #40]	; (1aa0 <mc3416_validate_chip+0x90>)
    1a76:	4b09      	ldr	r3, [pc, #36]	; (1a9c <mc3416_validate_chip+0x8c>)
    1a78:	4798      	blx	r3
	}
	
	return (status);
}	//	End of mc3416_validate_chip
    1a7a:	0020      	movs	r0, r4
    1a7c:	b004      	add	sp, #16
    1a7e:	bd10      	pop	{r4, pc}
		wcm_usart_send_pc_message("mc3416_validate_chip: Pcode_read_failed!\r\n");
    1a80:	4808      	ldr	r0, [pc, #32]	; (1aa4 <mc3416_validate_chip+0x94>)
    1a82:	4b06      	ldr	r3, [pc, #24]	; (1a9c <mc3416_validate_chip+0x8c>)
    1a84:	4798      	blx	r3
		return (status);
    1a86:	e7f8      	b.n	1a7a <mc3416_validate_chip+0x6a>
		wcm_usart_send_pc_message("mc3416_validate_chip: Chip_ID_incorrect!\r\n");
    1a88:	4807      	ldr	r0, [pc, #28]	; (1aa8 <mc3416_validate_chip+0x98>)
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <mc3416_validate_chip+0x8c>)
    1a8c:	4798      	blx	r3
		return MC3416_ERROR;
    1a8e:	2401      	movs	r4, #1
    1a90:	e7f3      	b.n	1a7a <mc3416_validate_chip+0x6a>
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	000017d9 	.word	0x000017d9
    1a98:	0000d88c 	.word	0x0000d88c
    1a9c:	00002551 	.word	0x00002551
    1aa0:	0000d808 	.word	0x0000d808
    1aa4:	0000d834 	.word	0x0000d834
    1aa8:	0000d860 	.word	0x0000d860

00001aac <mc3416_read_axis>:
/****************************************************************************************
Local function to sample the three axis of the MC3416 device
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code mc3416_read_axis(void)
{
    1aac:	b510      	push	{r4, lr}
    1aae:	b084      	sub	sp, #16
	
	uint8_t rd_length = 0x01;
	uint8_t wr_length = 0x01;

	
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_XOUT_EX_L, &b_xl, rd_length);
    1ab0:	2301      	movs	r3, #1
    1ab2:	9300      	str	r3, [sp, #0]
    1ab4:	330e      	adds	r3, #14
    1ab6:	446b      	add	r3, sp
    1ab8:	220d      	movs	r2, #13
    1aba:	2101      	movs	r1, #1
    1abc:	204c      	movs	r0, #76	; 0x4c
    1abe:	4c39      	ldr	r4, [pc, #228]	; (1ba4 <mc3416_read_axis+0xf8>)
    1ac0:	47a0      	blx	r4
	if(status != STATUS_OK)
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d155      	bne.n	1b72 <mc3416_read_axis+0xc6>
	{
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
	}
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length,MC3416_REG_XOUT_EX_H, &b_xh, rd_length);
    1ac6:	2301      	movs	r3, #1
    1ac8:	9300      	str	r3, [sp, #0]
    1aca:	330d      	adds	r3, #13
    1acc:	446b      	add	r3, sp
    1ace:	220e      	movs	r2, #14
    1ad0:	2101      	movs	r1, #1
    1ad2:	204c      	movs	r0, #76	; 0x4c
    1ad4:	4c33      	ldr	r4, [pc, #204]	; (1ba4 <mc3416_read_axis+0xf8>)
    1ad6:	47a0      	blx	r4
	if(status != STATUS_OK)
    1ad8:	2800      	cmp	r0, #0
    1ada:	d14e      	bne.n	1b7a <mc3416_read_axis+0xce>
	{
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
	}
	xout = (int16_t)((uint16_t)b_xh << 8 | b_xl);
    1adc:	230e      	movs	r3, #14
    1ade:	446b      	add	r3, sp
    1ae0:	781a      	ldrb	r2, [r3, #0]
    1ae2:	0212      	lsls	r2, r2, #8
    1ae4:	230f      	movs	r3, #15
    1ae6:	446b      	add	r3, sp
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	4313      	orrs	r3, r2
    1aec:	4a2e      	ldr	r2, [pc, #184]	; (1ba8 <mc3416_read_axis+0xfc>)
    1aee:	8013      	strh	r3, [r2, #0]
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_YOUT_EX_L, &b_yl, rd_length);
    1af0:	2301      	movs	r3, #1
    1af2:	9300      	str	r3, [sp, #0]
    1af4:	330c      	adds	r3, #12
    1af6:	446b      	add	r3, sp
    1af8:	220f      	movs	r2, #15
    1afa:	2101      	movs	r1, #1
    1afc:	204c      	movs	r0, #76	; 0x4c
    1afe:	4c29      	ldr	r4, [pc, #164]	; (1ba4 <mc3416_read_axis+0xf8>)
    1b00:	47a0      	blx	r4
	if(status != STATUS_OK)
    1b02:	2800      	cmp	r0, #0
    1b04:	d13d      	bne.n	1b82 <mc3416_read_axis+0xd6>
	{
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
	}
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_YOUT_EX_H, &b_yh, rd_length);
    1b06:	2301      	movs	r3, #1
    1b08:	9300      	str	r3, [sp, #0]
    1b0a:	ab03      	add	r3, sp, #12
    1b0c:	2210      	movs	r2, #16
    1b0e:	2101      	movs	r1, #1
    1b10:	204c      	movs	r0, #76	; 0x4c
    1b12:	4c24      	ldr	r4, [pc, #144]	; (1ba4 <mc3416_read_axis+0xf8>)
    1b14:	47a0      	blx	r4
	if(status != STATUS_OK)
    1b16:	2800      	cmp	r0, #0
    1b18:	d137      	bne.n	1b8a <mc3416_read_axis+0xde>
	{
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
	}
	yout = (int16_t)((uint16_t)b_yh << 8 | b_yl);
    1b1a:	ab03      	add	r3, sp, #12
    1b1c:	781a      	ldrb	r2, [r3, #0]
    1b1e:	0212      	lsls	r2, r2, #8
    1b20:	230d      	movs	r3, #13
    1b22:	446b      	add	r3, sp
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	4313      	orrs	r3, r2
    1b28:	4a20      	ldr	r2, [pc, #128]	; (1bac <mc3416_read_axis+0x100>)
    1b2a:	8013      	strh	r3, [r2, #0]
	
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_ZOUT_EX_L, &b_zl, rd_length);
    1b2c:	2301      	movs	r3, #1
    1b2e:	9300      	str	r3, [sp, #0]
    1b30:	330a      	adds	r3, #10
    1b32:	446b      	add	r3, sp
    1b34:	2211      	movs	r2, #17
    1b36:	2101      	movs	r1, #1
    1b38:	204c      	movs	r0, #76	; 0x4c
    1b3a:	4c1a      	ldr	r4, [pc, #104]	; (1ba4 <mc3416_read_axis+0xf8>)
    1b3c:	47a0      	blx	r4
	if(status != STATUS_OK)
    1b3e:	2800      	cmp	r0, #0
    1b40:	d127      	bne.n	1b92 <mc3416_read_axis+0xe6>
	{
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
	}
	status = wcm_i2c_command_read_reg(mc3416_address, wr_length, MC3416_REG_ZOUT_EX_H, &b_zh, rd_length);
    1b42:	2301      	movs	r3, #1
    1b44:	9300      	str	r3, [sp, #0]
    1b46:	3309      	adds	r3, #9
    1b48:	446b      	add	r3, sp
    1b4a:	2212      	movs	r2, #18
    1b4c:	2101      	movs	r1, #1
    1b4e:	204c      	movs	r0, #76	; 0x4c
    1b50:	4c14      	ldr	r4, [pc, #80]	; (1ba4 <mc3416_read_axis+0xf8>)
    1b52:	47a0      	blx	r4
    1b54:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1b56:	d120      	bne.n	1b9a <mc3416_read_axis+0xee>
	{
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
	}
	zout = (int16_t)((uint16_t)b_zh << 8 | b_zl);
    1b58:	230a      	movs	r3, #10
    1b5a:	446b      	add	r3, sp
    1b5c:	781a      	ldrb	r2, [r3, #0]
    1b5e:	0212      	lsls	r2, r2, #8
    1b60:	230b      	movs	r3, #11
    1b62:	446b      	add	r3, sp
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	4313      	orrs	r3, r2
    1b68:	4a11      	ldr	r2, [pc, #68]	; (1bb0 <mc3416_read_axis+0x104>)
    1b6a:	8013      	strh	r3, [r2, #0]
	
	return (status); //return error code or status?
	
	
}
    1b6c:	0020      	movs	r0, r4
    1b6e:	b004      	add	sp, #16
    1b70:	bd10      	pop	{r4, pc}
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
    1b72:	4810      	ldr	r0, [pc, #64]	; (1bb4 <mc3416_read_axis+0x108>)
    1b74:	4b10      	ldr	r3, [pc, #64]	; (1bb8 <mc3416_read_axis+0x10c>)
    1b76:	4798      	blx	r3
    1b78:	e7a5      	b.n	1ac6 <mc3416_read_axis+0x1a>
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
    1b7a:	480e      	ldr	r0, [pc, #56]	; (1bb4 <mc3416_read_axis+0x108>)
    1b7c:	4b0e      	ldr	r3, [pc, #56]	; (1bb8 <mc3416_read_axis+0x10c>)
    1b7e:	4798      	blx	r3
    1b80:	e7ac      	b.n	1adc <mc3416_read_axis+0x30>
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
    1b82:	480c      	ldr	r0, [pc, #48]	; (1bb4 <mc3416_read_axis+0x108>)
    1b84:	4b0c      	ldr	r3, [pc, #48]	; (1bb8 <mc3416_read_axis+0x10c>)
    1b86:	4798      	blx	r3
    1b88:	e7bd      	b.n	1b06 <mc3416_read_axis+0x5a>
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
    1b8a:	480a      	ldr	r0, [pc, #40]	; (1bb4 <mc3416_read_axis+0x108>)
    1b8c:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <mc3416_read_axis+0x10c>)
    1b8e:	4798      	blx	r3
    1b90:	e7c3      	b.n	1b1a <mc3416_read_axis+0x6e>
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
    1b92:	4808      	ldr	r0, [pc, #32]	; (1bb4 <mc3416_read_axis+0x108>)
    1b94:	4b08      	ldr	r3, [pc, #32]	; (1bb8 <mc3416_read_axis+0x10c>)
    1b96:	4798      	blx	r3
    1b98:	e7d3      	b.n	1b42 <mc3416_read_axis+0x96>
		wcm_usart_send_pc_message("mc3416_sample_axis: axis_read_failed!\r\n");
    1b9a:	4806      	ldr	r0, [pc, #24]	; (1bb4 <mc3416_read_axis+0x108>)
    1b9c:	4b06      	ldr	r3, [pc, #24]	; (1bb8 <mc3416_read_axis+0x10c>)
    1b9e:	4798      	blx	r3
    1ba0:	e7da      	b.n	1b58 <mc3416_read_axis+0xac>
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	000017d9 	.word	0x000017d9
    1ba8:	20000a58 	.word	0x20000a58
    1bac:	20000a78 	.word	0x20000a78
    1bb0:	20000a98 	.word	0x20000a98
    1bb4:	0000d6ec 	.word	0x0000d6ec
    1bb8:	00002551 	.word	0x00002551

00001bbc <mc3416_flash_read_offset>:
/****************************************************************************************
Local function to read the offset values from Flash memory
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code mc3416_flash_read_offset(void)
{
    1bbc:	b510      	push	{r4, lr}
	enum status_code status;
	
	eeprom_read_settings(&x_offset, &y_offset, &z_offset); //Pass address
    1bbe:	4a03      	ldr	r2, [pc, #12]	; (1bcc <mc3416_flash_read_offset+0x10>)
    1bc0:	4903      	ldr	r1, [pc, #12]	; (1bd0 <mc3416_flash_read_offset+0x14>)
    1bc2:	4804      	ldr	r0, [pc, #16]	; (1bd4 <mc3416_flash_read_offset+0x18>)
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <mc3416_flash_read_offset+0x1c>)
    1bc6:	4798      	blx	r3
	
	status = STATUS_OK;
	
	return (status);
}
    1bc8:	2000      	movs	r0, #0
    1bca:	bd10      	pop	{r4, pc}
    1bcc:	20000a88 	.word	0x20000a88
    1bd0:	20000a68 	.word	0x20000a68
    1bd4:	20000a48 	.word	0x20000a48
    1bd8:	000012b9 	.word	0x000012b9

00001bdc <wcm_mc3416_init>:
/****************************************************************************************
Function to initialize the MC3416 Accelerometer
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code wcm_mc3416_init(void)
{
    1bdc:	b510      	push	{r4, lr}
	enum status_code status;
	
	eeprom_configure(&x_offset, &y_offset, &z_offset); //Correct configuration??
    1bde:	4a1c      	ldr	r2, [pc, #112]	; (1c50 <wcm_mc3416_init+0x74>)
    1be0:	491c      	ldr	r1, [pc, #112]	; (1c54 <wcm_mc3416_init+0x78>)
    1be2:	481d      	ldr	r0, [pc, #116]	; (1c58 <wcm_mc3416_init+0x7c>)
    1be4:	4b1d      	ldr	r3, [pc, #116]	; (1c5c <wcm_mc3416_init+0x80>)
    1be6:	4798      	blx	r3
	
	status = mc3416_validate_chip();
    1be8:	4b1d      	ldr	r3, [pc, #116]	; (1c60 <wcm_mc3416_init+0x84>)
    1bea:	4798      	blx	r3
    1bec:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1bee:	d119      	bne.n	1c24 <wcm_mc3416_init+0x48>
	{
		wcm_usart_send_pc_message("wcm_mc3416_init: no_chip_detected!\r\n");
		return (status);
	}
	status = mc3416_set_mode(MC3416_MODE_STANDBY);
    1bf0:	2000      	movs	r0, #0
    1bf2:	4b1c      	ldr	r3, [pc, #112]	; (1c64 <wcm_mc3416_init+0x88>)
    1bf4:	4798      	blx	r3
    1bf6:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1bf8:	d119      	bne.n	1c2e <wcm_mc3416_init+0x52>
	{
		wcm_usart_send_pc_message("wcm_mc3416_init: standby_mode_not_entered!\r\n");
		return (status);
	}
	status = mc3416_set_sampling_rate();
    1bfa:	4b1b      	ldr	r3, [pc, #108]	; (1c68 <wcm_mc3416_init+0x8c>)
    1bfc:	4798      	blx	r3
    1bfe:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1c00:	d119      	bne.n	1c36 <wcm_mc3416_init+0x5a>
	{
		wcm_usart_send_pc_message("wcm_mc3416_init: Sampling_rate_not_configured!\r\n");
		return (status);
	}
	status = mc3416_set_range_resolution();
    1c02:	4b1a      	ldr	r3, [pc, #104]	; (1c6c <wcm_mc3416_init+0x90>)
    1c04:	4798      	blx	r3
    1c06:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1c08:	d119      	bne.n	1c3e <wcm_mc3416_init+0x62>
	{
		wcm_usart_send_pc_message("wcm_mc3416_init: Range_res_not_configured!\r\n");
		return (status);
	}
	
	status = mc3416_flash_read_offset();
    1c0a:	4b19      	ldr	r3, [pc, #100]	; (1c70 <wcm_mc3416_init+0x94>)
    1c0c:	4798      	blx	r3
    1c0e:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1c10:	d119      	bne.n	1c46 <wcm_mc3416_init+0x6a>
	{
		wcm_usart_send_pc_message("wcm_mc3416_init: Offset_reads_failed!\r\n");
		return (status);
	}
	status = mc3416_set_mode(MC3416_MODE_WAKE);
    1c12:	2001      	movs	r0, #1
    1c14:	4b13      	ldr	r3, [pc, #76]	; (1c64 <wcm_mc3416_init+0x88>)
    1c16:	4798      	blx	r3
    1c18:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1c1a:	d006      	beq.n	1c2a <wcm_mc3416_init+0x4e>
	{
		wcm_usart_send_pc_message("wcm_mc3416_init: wake_mode_not_entered!\r\n");
    1c1c:	4815      	ldr	r0, [pc, #84]	; (1c74 <wcm_mc3416_init+0x98>)
    1c1e:	4b16      	ldr	r3, [pc, #88]	; (1c78 <wcm_mc3416_init+0x9c>)
    1c20:	4798      	blx	r3
		return (status);
    1c22:	e002      	b.n	1c2a <wcm_mc3416_init+0x4e>
		wcm_usart_send_pc_message("wcm_mc3416_init: no_chip_detected!\r\n");
    1c24:	4815      	ldr	r0, [pc, #84]	; (1c7c <wcm_mc3416_init+0xa0>)
    1c26:	4b14      	ldr	r3, [pc, #80]	; (1c78 <wcm_mc3416_init+0x9c>)
    1c28:	4798      	blx	r3
	}
	
	return (status);	
}	//	End of vbs_m3416_init
    1c2a:	0020      	movs	r0, r4
    1c2c:	bd10      	pop	{r4, pc}
		wcm_usart_send_pc_message("wcm_mc3416_init: standby_mode_not_entered!\r\n");
    1c2e:	4814      	ldr	r0, [pc, #80]	; (1c80 <wcm_mc3416_init+0xa4>)
    1c30:	4b11      	ldr	r3, [pc, #68]	; (1c78 <wcm_mc3416_init+0x9c>)
    1c32:	4798      	blx	r3
		return (status);
    1c34:	e7f9      	b.n	1c2a <wcm_mc3416_init+0x4e>
		wcm_usart_send_pc_message("wcm_mc3416_init: Sampling_rate_not_configured!\r\n");
    1c36:	4813      	ldr	r0, [pc, #76]	; (1c84 <wcm_mc3416_init+0xa8>)
    1c38:	4b0f      	ldr	r3, [pc, #60]	; (1c78 <wcm_mc3416_init+0x9c>)
    1c3a:	4798      	blx	r3
		return (status);
    1c3c:	e7f5      	b.n	1c2a <wcm_mc3416_init+0x4e>
		wcm_usart_send_pc_message("wcm_mc3416_init: Range_res_not_configured!\r\n");
    1c3e:	4812      	ldr	r0, [pc, #72]	; (1c88 <wcm_mc3416_init+0xac>)
    1c40:	4b0d      	ldr	r3, [pc, #52]	; (1c78 <wcm_mc3416_init+0x9c>)
    1c42:	4798      	blx	r3
		return (status);
    1c44:	e7f1      	b.n	1c2a <wcm_mc3416_init+0x4e>
		wcm_usart_send_pc_message("wcm_mc3416_init: Offset_reads_failed!\r\n");
    1c46:	4811      	ldr	r0, [pc, #68]	; (1c8c <wcm_mc3416_init+0xb0>)
    1c48:	4b0b      	ldr	r3, [pc, #44]	; (1c78 <wcm_mc3416_init+0x9c>)
    1c4a:	4798      	blx	r3
		return (status);
    1c4c:	e7ed      	b.n	1c2a <wcm_mc3416_init+0x4e>
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	20000a88 	.word	0x20000a88
    1c54:	20000a68 	.word	0x20000a68
    1c58:	20000a48 	.word	0x20000a48
    1c5c:	00001369 	.word	0x00001369
    1c60:	00001a11 	.word	0x00001a11
    1c64:	000018a5 	.word	0x000018a5
    1c68:	0000194d 	.word	0x0000194d
    1c6c:	000019ad 	.word	0x000019ad
    1c70:	00001bbd 	.word	0x00001bbd
    1c74:	0000da20 	.word	0x0000da20
    1c78:	00002551 	.word	0x00002551
    1c7c:	0000d93c 	.word	0x0000d93c
    1c80:	0000d964 	.word	0x0000d964
    1c84:	0000d994 	.word	0x0000d994
    1c88:	0000d9c8 	.word	0x0000d9c8
    1c8c:	0000d9f8 	.word	0x0000d9f8

00001c90 <wcm_mc3416_read_tilt>:
/****************************************************************************************
Function to read the MC3416 Accelerometer
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code wcm_mc3416_read_tilt(double *tilt_arg)
{
    1c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c92:	46de      	mov	lr, fp
    1c94:	4657      	mov	r7, sl
    1c96:	b580      	push	{r7, lr}
    1c98:	b089      	sub	sp, #36	; 0x24
    1c9a:	4682      	mov	sl, r0
	
	enum status_code status;
	double tilt_angle;
	status = mc3416_check_mode();
    1c9c:	4b4d      	ldr	r3, [pc, #308]	; (1dd4 <wcm_mc3416_read_tilt+0x144>)
    1c9e:	4798      	blx	r3
    1ca0:	0005      	movs	r5, r0
	if(status != STATUS_BUSY && status != STATUS_OK)
    1ca2:	2805      	cmp	r0, #5
    1ca4:	d100      	bne.n	1ca8 <wcm_mc3416_read_tilt+0x18>
    1ca6:	e087      	b.n	1db8 <wcm_mc3416_read_tilt+0x128>
    1ca8:	2800      	cmp	r0, #0
    1caa:	d000      	beq.n	1cae <wcm_mc3416_read_tilt+0x1e>
    1cac:	e080      	b.n	1db0 <wcm_mc3416_read_tilt+0x120>
		{
			wcm_usart_send_pc_message("wcm_mc3416_read_tilt: Wakeup_failed!\r\n");
			return (status);
		}
	}
	status = mc3416_read_axis();
    1cae:	4b4a      	ldr	r3, [pc, #296]	; (1dd8 <wcm_mc3416_read_tilt+0x148>)
    1cb0:	4798      	blx	r3
    1cb2:	1e05      	subs	r5, r0, #0
	if(status != STATUS_OK)
    1cb4:	d000      	beq.n	1cb8 <wcm_mc3416_read_tilt+0x28>
    1cb6:	e089      	b.n	1dcc <wcm_mc3416_read_tilt+0x13c>
	xout -= x_offset;
    1cb8:	4b48      	ldr	r3, [pc, #288]	; (1ddc <wcm_mc3416_read_tilt+0x14c>)
    1cba:	8818      	ldrh	r0, [r3, #0]
    1cbc:	4a48      	ldr	r2, [pc, #288]	; (1de0 <wcm_mc3416_read_tilt+0x150>)
    1cbe:	8812      	ldrh	r2, [r2, #0]
    1cc0:	1a80      	subs	r0, r0, r2
    1cc2:	b200      	sxth	r0, r0
    1cc4:	8018      	strh	r0, [r3, #0]
	yout -= y_offset;
    1cc6:	4a47      	ldr	r2, [pc, #284]	; (1de4 <wcm_mc3416_read_tilt+0x154>)
    1cc8:	8813      	ldrh	r3, [r2, #0]
    1cca:	4947      	ldr	r1, [pc, #284]	; (1de8 <wcm_mc3416_read_tilt+0x158>)
    1ccc:	8809      	ldrh	r1, [r1, #0]
    1cce:	1a5b      	subs	r3, r3, r1
    1cd0:	b21b      	sxth	r3, r3
    1cd2:	469b      	mov	fp, r3
    1cd4:	8013      	strh	r3, [r2, #0]
	zout -= z_offset;
    1cd6:	4b45      	ldr	r3, [pc, #276]	; (1dec <wcm_mc3416_read_tilt+0x15c>)
    1cd8:	881e      	ldrh	r6, [r3, #0]
    1cda:	4a45      	ldr	r2, [pc, #276]	; (1df0 <wcm_mc3416_read_tilt+0x160>)
    1cdc:	8812      	ldrh	r2, [r2, #0]
    1cde:	1ab6      	subs	r6, r6, r2
    1ce0:	b236      	sxth	r6, r6
    1ce2:	801e      	strh	r6, [r3, #0]
	xg = (double)xout * resolution;
    1ce4:	4f43      	ldr	r7, [pc, #268]	; (1df4 <wcm_mc3416_read_tilt+0x164>)
    1ce6:	47b8      	blx	r7
    1ce8:	4c43      	ldr	r4, [pc, #268]	; (1df8 <wcm_mc3416_read_tilt+0x168>)
    1cea:	2200      	movs	r2, #0
    1cec:	4b43      	ldr	r3, [pc, #268]	; (1dfc <wcm_mc3416_read_tilt+0x16c>)
    1cee:	47a0      	blx	r4
    1cf0:	4b43      	ldr	r3, [pc, #268]	; (1e00 <wcm_mc3416_read_tilt+0x170>)
    1cf2:	9002      	str	r0, [sp, #8]
    1cf4:	9103      	str	r1, [sp, #12]
    1cf6:	000a      	movs	r2, r1
    1cf8:	0001      	movs	r1, r0
    1cfa:	6019      	str	r1, [r3, #0]
    1cfc:	605a      	str	r2, [r3, #4]
	yg = (double)yout * resolution;
    1cfe:	4658      	mov	r0, fp
    1d00:	47b8      	blx	r7
    1d02:	2200      	movs	r2, #0
    1d04:	4b3d      	ldr	r3, [pc, #244]	; (1dfc <wcm_mc3416_read_tilt+0x16c>)
    1d06:	47a0      	blx	r4
    1d08:	4b3e      	ldr	r3, [pc, #248]	; (1e04 <wcm_mc3416_read_tilt+0x174>)
    1d0a:	9000      	str	r0, [sp, #0]
    1d0c:	9101      	str	r1, [sp, #4]
    1d0e:	000a      	movs	r2, r1
    1d10:	0001      	movs	r1, r0
    1d12:	6019      	str	r1, [r3, #0]
    1d14:	605a      	str	r2, [r3, #4]
	zg = (double)zout * resolution;
    1d16:	0030      	movs	r0, r6
    1d18:	47b8      	blx	r7
    1d1a:	2200      	movs	r2, #0
    1d1c:	4b37      	ldr	r3, [pc, #220]	; (1dfc <wcm_mc3416_read_tilt+0x16c>)
    1d1e:	47a0      	blx	r4
    1d20:	0006      	movs	r6, r0
    1d22:	000f      	movs	r7, r1
    1d24:	4b38      	ldr	r3, [pc, #224]	; (1e08 <wcm_mc3416_read_tilt+0x178>)
    1d26:	601e      	str	r6, [r3, #0]
    1d28:	605f      	str	r7, [r3, #4]
	x2 = xg * xg;
    1d2a:	9802      	ldr	r0, [sp, #8]
    1d2c:	9903      	ldr	r1, [sp, #12]
    1d2e:	0002      	movs	r2, r0
    1d30:	000b      	movs	r3, r1
    1d32:	47a0      	blx	r4
    1d34:	000a      	movs	r2, r1
    1d36:	0001      	movs	r1, r0
    1d38:	4b34      	ldr	r3, [pc, #208]	; (1e0c <wcm_mc3416_read_tilt+0x17c>)
    1d3a:	9102      	str	r1, [sp, #8]
    1d3c:	9203      	str	r2, [sp, #12]
    1d3e:	6019      	str	r1, [r3, #0]
    1d40:	605a      	str	r2, [r3, #4]
	y2 = yg * yg;
    1d42:	9800      	ldr	r0, [sp, #0]
    1d44:	9901      	ldr	r1, [sp, #4]
    1d46:	0002      	movs	r2, r0
    1d48:	000b      	movs	r3, r1
    1d4a:	47a0      	blx	r4
    1d4c:	000a      	movs	r2, r1
    1d4e:	0001      	movs	r1, r0
    1d50:	4b2f      	ldr	r3, [pc, #188]	; (1e10 <wcm_mc3416_read_tilt+0x180>)
    1d52:	9104      	str	r1, [sp, #16]
    1d54:	9205      	str	r2, [sp, #20]
    1d56:	6019      	str	r1, [r3, #0]
    1d58:	605a      	str	r2, [r3, #4]
	z2 = zg * zg;
    1d5a:	0032      	movs	r2, r6
    1d5c:	003b      	movs	r3, r7
    1d5e:	0030      	movs	r0, r6
    1d60:	0039      	movs	r1, r7
    1d62:	47a0      	blx	r4
    1d64:	0006      	movs	r6, r0
    1d66:	000f      	movs	r7, r1
    1d68:	4b2a      	ldr	r3, [pc, #168]	; (1e14 <wcm_mc3416_read_tilt+0x184>)
    1d6a:	9606      	str	r6, [sp, #24]
    1d6c:	9707      	str	r7, [sp, #28]
    1d6e:	601e      	str	r6, [r3, #0]
    1d70:	605f      	str	r7, [r3, #4]
		return (status);
	}
	
	mc3416_convert_to_g();

	tilt_angle = radian_to_degrees * acos(yg / sqrt(x2 + y2 + z2));
    1d72:	4e29      	ldr	r6, [pc, #164]	; (1e18 <wcm_mc3416_read_tilt+0x188>)
    1d74:	9a04      	ldr	r2, [sp, #16]
    1d76:	9b05      	ldr	r3, [sp, #20]
    1d78:	9802      	ldr	r0, [sp, #8]
    1d7a:	9903      	ldr	r1, [sp, #12]
    1d7c:	47b0      	blx	r6
    1d7e:	9a06      	ldr	r2, [sp, #24]
    1d80:	9b07      	ldr	r3, [sp, #28]
    1d82:	47b0      	blx	r6
    1d84:	4b25      	ldr	r3, [pc, #148]	; (1e1c <wcm_mc3416_read_tilt+0x18c>)
    1d86:	4798      	blx	r3
    1d88:	0002      	movs	r2, r0
    1d8a:	000b      	movs	r3, r1
    1d8c:	9800      	ldr	r0, [sp, #0]
    1d8e:	9901      	ldr	r1, [sp, #4]
    1d90:	4e23      	ldr	r6, [pc, #140]	; (1e20 <wcm_mc3416_read_tilt+0x190>)
    1d92:	47b0      	blx	r6
    1d94:	4b23      	ldr	r3, [pc, #140]	; (1e24 <wcm_mc3416_read_tilt+0x194>)
    1d96:	4798      	blx	r3
    1d98:	4a23      	ldr	r2, [pc, #140]	; (1e28 <wcm_mc3416_read_tilt+0x198>)
    1d9a:	4b24      	ldr	r3, [pc, #144]	; (1e2c <wcm_mc3416_read_tilt+0x19c>)
    1d9c:	47a0      	blx	r4
	
	*tilt_arg = tilt_angle;
    1d9e:	4653      	mov	r3, sl
    1da0:	6018      	str	r0, [r3, #0]
    1da2:	6059      	str	r1, [r3, #4]
	
	return (status);
	
}	//	End of wcm_mc3416_read_tilt
    1da4:	0028      	movs	r0, r5
    1da6:	b009      	add	sp, #36	; 0x24
    1da8:	bc0c      	pop	{r2, r3}
    1daa:	4692      	mov	sl, r2
    1dac:	469b      	mov	fp, r3
    1dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wcm_usart_send_pc_message("wcm_mc3416_read_tilt: mode_check_failed!\r\n");
    1db0:	481f      	ldr	r0, [pc, #124]	; (1e30 <wcm_mc3416_read_tilt+0x1a0>)
    1db2:	4b20      	ldr	r3, [pc, #128]	; (1e34 <wcm_mc3416_read_tilt+0x1a4>)
    1db4:	4798      	blx	r3
		return (status);
    1db6:	e7f5      	b.n	1da4 <wcm_mc3416_read_tilt+0x114>
		status = mc3416_set_mode(MC3416_MODE_WAKE);
    1db8:	2001      	movs	r0, #1
    1dba:	4b1f      	ldr	r3, [pc, #124]	; (1e38 <wcm_mc3416_read_tilt+0x1a8>)
    1dbc:	4798      	blx	r3
    1dbe:	1e05      	subs	r5, r0, #0
		if(status != STATUS_OK)
    1dc0:	d100      	bne.n	1dc4 <wcm_mc3416_read_tilt+0x134>
    1dc2:	e774      	b.n	1cae <wcm_mc3416_read_tilt+0x1e>
			wcm_usart_send_pc_message("wcm_mc3416_read_tilt: Wakeup_failed!\r\n");
    1dc4:	481d      	ldr	r0, [pc, #116]	; (1e3c <wcm_mc3416_read_tilt+0x1ac>)
    1dc6:	4b1b      	ldr	r3, [pc, #108]	; (1e34 <wcm_mc3416_read_tilt+0x1a4>)
    1dc8:	4798      	blx	r3
			return (status);
    1dca:	e7eb      	b.n	1da4 <wcm_mc3416_read_tilt+0x114>
		wcm_usart_send_pc_message("wcm_mc3416_read_tilt: Sample_axis_failed!\r\n");
    1dcc:	481c      	ldr	r0, [pc, #112]	; (1e40 <wcm_mc3416_read_tilt+0x1b0>)
    1dce:	4b19      	ldr	r3, [pc, #100]	; (1e34 <wcm_mc3416_read_tilt+0x1a4>)
    1dd0:	4798      	blx	r3
		return (status);
    1dd2:	e7e7      	b.n	1da4 <wcm_mc3416_read_tilt+0x114>
    1dd4:	000018fd 	.word	0x000018fd
    1dd8:	00001aad 	.word	0x00001aad
    1ddc:	20000a58 	.word	0x20000a58
    1de0:	20000a48 	.word	0x20000a48
    1de4:	20000a78 	.word	0x20000a78
    1de8:	20000a68 	.word	0x20000a68
    1dec:	20000a98 	.word	0x20000a98
    1df0:	20000a88 	.word	0x20000a88
    1df4:	00007fa5 	.word	0x00007fa5
    1df8:	000073d1 	.word	0x000073d1
    1dfc:	3f100000 	.word	0x3f100000
    1e00:	20000a50 	.word	0x20000a50
    1e04:	20000a70 	.word	0x20000a70
    1e08:	20000a90 	.word	0x20000a90
    1e0c:	20000a40 	.word	0x20000a40
    1e10:	20000a60 	.word	0x20000a60
    1e14:	20000a80 	.word	0x20000a80
    1e18:	00006549 	.word	0x00006549
    1e1c:	00005c51 	.word	0x00005c51
    1e20:	00006b69 	.word	0x00006b69
    1e24:	00005b91 	.word	0x00005b91
    1e28:	1a5d2372 	.word	0x1a5d2372
    1e2c:	404ca5dc 	.word	0x404ca5dc
    1e30:	0000da4c 	.word	0x0000da4c
    1e34:	00002551 	.word	0x00002551
    1e38:	000018a5 	.word	0x000018a5
    1e3c:	0000da78 	.word	0x0000da78
    1e40:	0000daa0 	.word	0x0000daa0

00001e44 <wcm_mc3416_calibrate>:
/****************************************************************************************
Function to read the MC3416 Accelerometer and save values for offset adjustment
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code wcm_mc3416_calibrate(void)
{
    1e44:	b510      	push	{r4, lr}
	enum status_code status;
	status = mc3416_check_mode();
    1e46:	4b18      	ldr	r3, [pc, #96]	; (1ea8 <wcm_mc3416_calibrate+0x64>)
    1e48:	4798      	blx	r3
    1e4a:	0004      	movs	r4, r0
	if(status != STATUS_BUSY && status != STATUS_OK)
    1e4c:	2805      	cmp	r0, #5
    1e4e:	d01e      	beq.n	1e8e <wcm_mc3416_calibrate+0x4a>
    1e50:	2800      	cmp	r0, #0
    1e52:	d118      	bne.n	1e86 <wcm_mc3416_calibrate+0x42>
		{
			wcm_usart_send_pc_message("wcm_mc3416_calibrate: Wakeup_failed!\r\n");
			return (status);
		}
	}
	status = mc3416_read_axis();
    1e54:	4b15      	ldr	r3, [pc, #84]	; (1eac <wcm_mc3416_calibrate+0x68>)
    1e56:	4798      	blx	r3
    1e58:	1e04      	subs	r4, r0, #0
	if(status != STATUS_OK)
    1e5a:	d121      	bne.n	1ea0 <wcm_mc3416_calibrate+0x5c>
	{
		wcm_usart_send_pc_message("wcm_mc3416_calibrate: Read_axis_failed!\r\n");
		return (status);
	}

	yout = yout - y_ref_value; // y_offset is referenced to 1G due to orientation
    1e5c:	4b14      	ldr	r3, [pc, #80]	; (1eb0 <wcm_mc3416_calibrate+0x6c>)
    1e5e:	8819      	ldrh	r1, [r3, #0]
    1e60:	4a14      	ldr	r2, [pc, #80]	; (1eb4 <wcm_mc3416_calibrate+0x70>)
    1e62:	4694      	mov	ip, r2
    1e64:	4461      	add	r1, ip
    1e66:	b289      	uxth	r1, r1
    1e68:	8019      	strh	r1, [r3, #0]
	
	x_offset = xout;
    1e6a:	4b13      	ldr	r3, [pc, #76]	; (1eb8 <wcm_mc3416_calibrate+0x74>)
    1e6c:	8818      	ldrh	r0, [r3, #0]
    1e6e:	4b13      	ldr	r3, [pc, #76]	; (1ebc <wcm_mc3416_calibrate+0x78>)
    1e70:	8018      	strh	r0, [r3, #0]
	y_offset = yout;
    1e72:	4b13      	ldr	r3, [pc, #76]	; (1ec0 <wcm_mc3416_calibrate+0x7c>)
    1e74:	8019      	strh	r1, [r3, #0]
	z_offset = zout;
    1e76:	4b13      	ldr	r3, [pc, #76]	; (1ec4 <wcm_mc3416_calibrate+0x80>)
    1e78:	881a      	ldrh	r2, [r3, #0]
    1e7a:	4b13      	ldr	r3, [pc, #76]	; (1ec8 <wcm_mc3416_calibrate+0x84>)
    1e7c:	801a      	strh	r2, [r3, #0]
	
	eeprom_write_settings(x_offset,  y_offset,  z_offset);
    1e7e:	4b13      	ldr	r3, [pc, #76]	; (1ecc <wcm_mc3416_calibrate+0x88>)
    1e80:	4798      	blx	r3
	
	return (status);
}	//	End of vbs_mc3416_calibrate
    1e82:	0020      	movs	r0, r4
    1e84:	bd10      	pop	{r4, pc}
		wcm_usart_send_pc_message("wcm_mc3416_calibrate: mode_check_failed!\r\n");
    1e86:	4812      	ldr	r0, [pc, #72]	; (1ed0 <wcm_mc3416_calibrate+0x8c>)
    1e88:	4b12      	ldr	r3, [pc, #72]	; (1ed4 <wcm_mc3416_calibrate+0x90>)
    1e8a:	4798      	blx	r3
		return (status);
    1e8c:	e7f9      	b.n	1e82 <wcm_mc3416_calibrate+0x3e>
		status = mc3416_set_mode(MC3416_MODE_WAKE);
    1e8e:	2001      	movs	r0, #1
    1e90:	4b11      	ldr	r3, [pc, #68]	; (1ed8 <wcm_mc3416_calibrate+0x94>)
    1e92:	4798      	blx	r3
    1e94:	1e04      	subs	r4, r0, #0
		if(status != STATUS_OK)
    1e96:	d0dd      	beq.n	1e54 <wcm_mc3416_calibrate+0x10>
			wcm_usart_send_pc_message("wcm_mc3416_calibrate: Wakeup_failed!\r\n");
    1e98:	4810      	ldr	r0, [pc, #64]	; (1edc <wcm_mc3416_calibrate+0x98>)
    1e9a:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <wcm_mc3416_calibrate+0x90>)
    1e9c:	4798      	blx	r3
			return (status);
    1e9e:	e7f0      	b.n	1e82 <wcm_mc3416_calibrate+0x3e>
		wcm_usart_send_pc_message("wcm_mc3416_calibrate: Read_axis_failed!\r\n");
    1ea0:	480f      	ldr	r0, [pc, #60]	; (1ee0 <wcm_mc3416_calibrate+0x9c>)
    1ea2:	4b0c      	ldr	r3, [pc, #48]	; (1ed4 <wcm_mc3416_calibrate+0x90>)
    1ea4:	4798      	blx	r3
		return (status);
    1ea6:	e7ec      	b.n	1e82 <wcm_mc3416_calibrate+0x3e>
    1ea8:	000018fd 	.word	0x000018fd
    1eac:	00001aad 	.word	0x00001aad
    1eb0:	20000a78 	.word	0x20000a78
    1eb4:	ffffc000 	.word	0xffffc000
    1eb8:	20000a58 	.word	0x20000a58
    1ebc:	20000a48 	.word	0x20000a48
    1ec0:	20000a68 	.word	0x20000a68
    1ec4:	20000a98 	.word	0x20000a98
    1ec8:	20000a88 	.word	0x20000a88
    1ecc:	00001311 	.word	0x00001311
    1ed0:	0000d8bc 	.word	0x0000d8bc
    1ed4:	00002551 	.word	0x00002551
    1ed8:	000018a5 	.word	0x000018a5
    1edc:	0000d8e8 	.word	0x0000d8e8
    1ee0:	0000d910 	.word	0x0000d910

00001ee4 <wcm_mc3416_zero_offsets>:
/****************************************************************************************
Function to set the Offset values to 0
Returns status code indicating success or failure 
*****************************************************************************************/
enum status_code wcm_mc3416_zero_offsets(void)
{
    1ee4:	b510      	push	{r4, lr}
	enum status_code status;
	//write zeros to offsets in flash
	
	x_offset = 0;
    1ee6:	2300      	movs	r3, #0
    1ee8:	4a06      	ldr	r2, [pc, #24]	; (1f04 <wcm_mc3416_zero_offsets+0x20>)
    1eea:	8013      	strh	r3, [r2, #0]
	y_offset = 0;
    1eec:	4a06      	ldr	r2, [pc, #24]	; (1f08 <wcm_mc3416_zero_offsets+0x24>)
    1eee:	8013      	strh	r3, [r2, #0]
	z_offset = 0;
    1ef0:	4a06      	ldr	r2, [pc, #24]	; (1f0c <wcm_mc3416_zero_offsets+0x28>)
    1ef2:	8013      	strh	r3, [r2, #0]
	
	eeprom_write_settings( x_offset,  y_offset,  z_offset);
    1ef4:	2200      	movs	r2, #0
    1ef6:	2100      	movs	r1, #0
    1ef8:	2000      	movs	r0, #0
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <wcm_mc3416_zero_offsets+0x2c>)
    1efc:	4798      	blx	r3
	
	status = STATUS_OK;
	
	return (status);
}	//	End of vbs_mc3416_zero_offsets
    1efe:	2000      	movs	r0, #0
    1f00:	bd10      	pop	{r4, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	20000a48 	.word	0x20000a48
    1f08:	20000a68 	.word	0x20000a68
    1f0c:	20000a88 	.word	0x20000a88
    1f10:	00001311 	.word	0x00001311

00001f14 <ms5637_adc_read>:

/****************************************************************************************
Local function to read the MS5637 ADC
*****************************************************************************************/
static enum status_code ms5637_adc_read(uint32_t *adc_value)
{
    1f14:	b530      	push	{r4, r5, lr}
    1f16:	b085      	sub	sp, #20
    1f18:	0005      	movs	r5, r0
	enum status_code status;
	uint8_t command;
	uint8_t repeated_start;
	uint32_t data;

	command = 0x00;
    1f1a:	210f      	movs	r1, #15
    1f1c:	4469      	add	r1, sp
    1f1e:	2300      	movs	r3, #0
    1f20:	700b      	strb	r3, [r1, #0]
	repeated_start = 0;
	status = wcm_i2c_write_command_read_response(ms5637_address, &command, 1, &data, 3, repeated_start);
    1f22:	9301      	str	r3, [sp, #4]
    1f24:	3303      	adds	r3, #3
    1f26:	9300      	str	r3, [sp, #0]
    1f28:	ab02      	add	r3, sp, #8
    1f2a:	2201      	movs	r2, #1
    1f2c:	2076      	movs	r0, #118	; 0x76
    1f2e:	4c06      	ldr	r4, [pc, #24]	; (1f48 <ms5637_adc_read+0x34>)
    1f30:	47a0      	blx	r4
    1f32:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK)
    1f34:	d002      	beq.n	1f3c <ms5637_adc_read+0x28>

	delay_ms(20);

	return (status);

}	// End of ms5637_adc_read
    1f36:	0020      	movs	r0, r4
    1f38:	b005      	add	sp, #20
    1f3a:	bd30      	pop	{r4, r5, pc}
	*adc_value = data;
    1f3c:	9b02      	ldr	r3, [sp, #8]
    1f3e:	602b      	str	r3, [r5, #0]
	delay_ms(20);
    1f40:	2014      	movs	r0, #20
    1f42:	4b02      	ldr	r3, [pc, #8]	; (1f4c <ms5637_adc_read+0x38>)
    1f44:	4798      	blx	r3
	return (status);
    1f46:	e7f6      	b.n	1f36 <ms5637_adc_read+0x22>
    1f48:	00001771 	.word	0x00001771
    1f4c:	0000488d 	.word	0x0000488d

00001f50 <wcm_ms5637_init>:

/****************************************************************************************
Function to initialize the MS5637 pressure sensor
*****************************************************************************************/
enum status_code wcm_ms5637_init(void)
{
    1f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f52:	46c6      	mov	lr, r8
    1f54:	b500      	push	{lr}
    1f56:	b084      	sub	sp, #16
	command = 0x1e;
    1f58:	a903      	add	r1, sp, #12
    1f5a:	231e      	movs	r3, #30
    1f5c:	700b      	strb	r3, [r1, #0]
	status = wcm_i2c_write_command_packet(ms5637_address, &command, 1, repeated_start);
    1f5e:	2300      	movs	r3, #0
    1f60:	2201      	movs	r2, #1
    1f62:	2076      	movs	r0, #118	; 0x76
    1f64:	4c24      	ldr	r4, [pc, #144]	; (1ff8 <wcm_ms5637_init+0xa8>)
    1f66:	47a0      	blx	r4
    1f68:	1e04      	subs	r4, r0, #0
	enum status_code status;

	// Reset the MS5637 once after power-on
	status = ms5637_reset();
	if (status != STATUS_OK)
    1f6a:	d134      	bne.n	1fd6 <wcm_ms5637_init+0x86>
	command = 0xa0;
    1f6c:	210b      	movs	r1, #11
    1f6e:	4469      	add	r1, sp
    1f70:	23a0      	movs	r3, #160	; 0xa0
    1f72:	700b      	strb	r3, [r1, #0]
	status = wcm_i2c_write_command_read_response(ms5637_address, &command, 1, &data, 2, repeated_start);
    1f74:	2300      	movs	r3, #0
    1f76:	9301      	str	r3, [sp, #4]
    1f78:	3302      	adds	r3, #2
    1f7a:	9300      	str	r3, [sp, #0]
    1f7c:	ab03      	add	r3, sp, #12
    1f7e:	2201      	movs	r2, #1
    1f80:	2076      	movs	r0, #118	; 0x76
    1f82:	4c1e      	ldr	r4, [pc, #120]	; (1ffc <wcm_ms5637_init+0xac>)
    1f84:	47a0      	blx	r4
    1f86:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK)
    1f88:	d12d      	bne.n	1fe6 <wcm_ms5637_init+0x96>
	c[0] = (data >> 12) & 0x0f;
    1f8a:	4e1d      	ldr	r6, [pc, #116]	; (2000 <wcm_ms5637_init+0xb0>)
    1f8c:	9b03      	ldr	r3, [sp, #12]
    1f8e:	041b      	lsls	r3, r3, #16
    1f90:	0f1b      	lsrs	r3, r3, #28
    1f92:	8033      	strh	r3, [r6, #0]
	delay_ms(20);
    1f94:	2014      	movs	r0, #20
    1f96:	4b1b      	ldr	r3, [pc, #108]	; (2004 <wcm_ms5637_init+0xb4>)
    1f98:	4798      	blx	r3
    1f9a:	3602      	adds	r6, #2
    1f9c:	27a2      	movs	r7, #162	; 0xa2
		command = 0xa0 + (i << 1);
    1f9e:	250b      	movs	r5, #11
    1fa0:	446d      	add	r5, sp
		status = wcm_i2c_write_command_read_response(ms5637_address, &command, 1, &data, 2, repeated_start);
    1fa2:	4b16      	ldr	r3, [pc, #88]	; (1ffc <wcm_ms5637_init+0xac>)
    1fa4:	4698      	mov	r8, r3
		command = 0xa0 + (i << 1);
    1fa6:	702f      	strb	r7, [r5, #0]
		status = wcm_i2c_write_command_read_response(ms5637_address, &command, 1, &data, 2, repeated_start);
    1fa8:	2300      	movs	r3, #0
    1faa:	9301      	str	r3, [sp, #4]
    1fac:	3302      	adds	r3, #2
    1fae:	9300      	str	r3, [sp, #0]
    1fb0:	ab03      	add	r3, sp, #12
    1fb2:	2201      	movs	r2, #1
    1fb4:	0029      	movs	r1, r5
    1fb6:	2076      	movs	r0, #118	; 0x76
    1fb8:	47c0      	blx	r8
    1fba:	1e04      	subs	r4, r0, #0
		if (status != STATUS_OK)
    1fbc:	d117      	bne.n	1fee <wcm_ms5637_init+0x9e>
		c[i] = data;
    1fbe:	466b      	mov	r3, sp
    1fc0:	899b      	ldrh	r3, [r3, #12]
    1fc2:	8033      	strh	r3, [r6, #0]
		delay_ms(20);
    1fc4:	2014      	movs	r0, #20
    1fc6:	4b0f      	ldr	r3, [pc, #60]	; (2004 <wcm_ms5637_init+0xb4>)
    1fc8:	4798      	blx	r3
    1fca:	3702      	adds	r7, #2
    1fcc:	b2ff      	uxtb	r7, r7
    1fce:	3602      	adds	r6, #2
	for (i = 1; i <= 6; i++)
    1fd0:	2fae      	cmp	r7, #174	; 0xae
    1fd2:	d1e8      	bne.n	1fa6 <wcm_ms5637_init+0x56>
    1fd4:	e002      	b.n	1fdc <wcm_ms5637_init+0x8c>
	{
		wcm_usart_send_pc_message("wcm_ms5637_init: Could not reset!\r\n");
    1fd6:	480c      	ldr	r0, [pc, #48]	; (2008 <wcm_ms5637_init+0xb8>)
    1fd8:	4b0c      	ldr	r3, [pc, #48]	; (200c <wcm_ms5637_init+0xbc>)
    1fda:	4798      	blx	r3
		return (status);
	}

	return (status);

}	// End of wcm_ms5637_init
    1fdc:	0020      	movs	r0, r4
    1fde:	b004      	add	sp, #16
    1fe0:	bc04      	pop	{r2}
    1fe2:	4690      	mov	r8, r2
    1fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wcm_usart_send_pc_message("wcm_ms5637_prom_read: Could not read CRC!\r\n");
    1fe6:	480a      	ldr	r0, [pc, #40]	; (2010 <wcm_ms5637_init+0xc0>)
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <wcm_ms5637_init+0xbc>)
    1fea:	4798      	blx	r3
    1fec:	e7f6      	b.n	1fdc <wcm_ms5637_init+0x8c>
			wcm_usart_send_pc_message("wcm_ms5637_prom_read: Could not read calibration coefficient!\r\n");
    1fee:	4809      	ldr	r0, [pc, #36]	; (2014 <wcm_ms5637_init+0xc4>)
    1ff0:	4b06      	ldr	r3, [pc, #24]	; (200c <wcm_ms5637_init+0xbc>)
    1ff2:	4798      	blx	r3
    1ff4:	e7f2      	b.n	1fdc <wcm_ms5637_init+0x8c>
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	00001711 	.word	0x00001711
    1ffc:	00001771 	.word	0x00001771
    2000:	20000a9c 	.word	0x20000a9c
    2004:	0000488d 	.word	0x0000488d
    2008:	0000dacc 	.word	0x0000dacc
    200c:	00002551 	.word	0x00002551
    2010:	0000daf0 	.word	0x0000daf0
    2014:	0000db1c 	.word	0x0000db1c

00002018 <wcm_ms5637_read>:

/****************************************************************************************
Function to read the MS5637 pressure sensor
*****************************************************************************************/
enum status_code wcm_ms5637_read(uint32_t *d1_arg, double *pressure, uint32_t *d2_arg, double *temperature)
{
    2018:	b5f0      	push	{r4, r5, r6, r7, lr}
    201a:	46de      	mov	lr, fp
    201c:	4657      	mov	r7, sl
    201e:	464e      	mov	r6, r9
    2020:	4645      	mov	r5, r8
    2022:	b5e0      	push	{r5, r6, r7, lr}
    2024:	b091      	sub	sp, #68	; 0x44
    2026:	0006      	movs	r6, r0
    2028:	468b      	mov	fp, r1
    202a:	0015      	movs	r5, r2
    202c:	4698      	mov	r8, r3
	command = 0x48;
    202e:	a90f      	add	r1, sp, #60	; 0x3c
    2030:	2348      	movs	r3, #72	; 0x48
    2032:	700b      	strb	r3, [r1, #0]
	status = wcm_i2c_write_command_packet(ms5637_address, &command, 1, repeated_start);
    2034:	2300      	movs	r3, #0
    2036:	2201      	movs	r2, #1
    2038:	2076      	movs	r0, #118	; 0x76
    203a:	4ca4      	ldr	r4, [pc, #656]	; (22cc <wcm_ms5637_read+0x2b4>)
    203c:	47a0      	blx	r4
    203e:	0004      	movs	r4, r0
	delay_ms(20);
    2040:	2014      	movs	r0, #20
    2042:	4ba3      	ldr	r3, [pc, #652]	; (22d0 <wcm_ms5637_read+0x2b8>)
    2044:	4798      	blx	r3
	if (status != STATUS_OK)
    2046:	2c00      	cmp	r4, #0
    2048:	d000      	beq.n	204c <wcm_ms5637_read+0x34>
    204a:	e0db      	b.n	2204 <wcm_ms5637_read+0x1ec>
	status = ms5637_adc_read(&adc_value);
    204c:	a80f      	add	r0, sp, #60	; 0x3c
    204e:	4ba1      	ldr	r3, [pc, #644]	; (22d4 <wcm_ms5637_read+0x2bc>)
    2050:	4798      	blx	r3
    2052:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK)
    2054:	d000      	beq.n	2058 <wcm_ms5637_read+0x40>
    2056:	e0d9      	b.n	220c <wcm_ms5637_read+0x1f4>
	d1 = adc_value;
    2058:	4b9f      	ldr	r3, [pc, #636]	; (22d8 <wcm_ms5637_read+0x2c0>)
    205a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    205c:	601a      	str	r2, [r3, #0]
	command = 0x58;
    205e:	ab0e      	add	r3, sp, #56	; 0x38
    2060:	1cd9      	adds	r1, r3, #3
    2062:	2358      	movs	r3, #88	; 0x58
    2064:	700b      	strb	r3, [r1, #0]
	status = wcm_i2c_write_command_packet(ms5637_address, &command, 1, repeated_start);
    2066:	2300      	movs	r3, #0
    2068:	2201      	movs	r2, #1
    206a:	2076      	movs	r0, #118	; 0x76
    206c:	4c97      	ldr	r4, [pc, #604]	; (22cc <wcm_ms5637_read+0x2b4>)
    206e:	47a0      	blx	r4
    2070:	0004      	movs	r4, r0
	delay_ms(20);
    2072:	2014      	movs	r0, #20
    2074:	4b96      	ldr	r3, [pc, #600]	; (22d0 <wcm_ms5637_read+0x2b8>)
    2076:	4798      	blx	r3
	if (status != STATUS_OK)
    2078:	2c00      	cmp	r4, #0
    207a:	d000      	beq.n	207e <wcm_ms5637_read+0x66>
    207c:	e0ca      	b.n	2214 <wcm_ms5637_read+0x1fc>
	status = ms5637_adc_read(&adc_value);
    207e:	a80f      	add	r0, sp, #60	; 0x3c
    2080:	4b94      	ldr	r3, [pc, #592]	; (22d4 <wcm_ms5637_read+0x2bc>)
    2082:	4798      	blx	r3
    2084:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK)
    2086:	d000      	beq.n	208a <wcm_ms5637_read+0x72>
    2088:	e0c8      	b.n	221c <wcm_ms5637_read+0x204>
	d2 = adc_value;
    208a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    208c:	4b93      	ldr	r3, [pc, #588]	; (22dc <wcm_ms5637_read+0x2c4>)
    208e:	6018      	str	r0, [r3, #0]
	if (status != STATUS_OK)
	{
		return (status);
	}

	*d1_arg = d1;
    2090:	4b91      	ldr	r3, [pc, #580]	; (22d8 <wcm_ms5637_read+0x2c0>)
    2092:	681b      	ldr	r3, [r3, #0]
    2094:	469a      	mov	sl, r3
    2096:	6033      	str	r3, [r6, #0]
	*d2_arg = d2;
    2098:	6028      	str	r0, [r5, #0]
	
	// Calculate temperature
	// dT = D2 - TREF = D2 - C5 * 2^8
	// TEMP = 20 C + dT * TEMPSENS = 2000 + dT * C6 / 2^23
	dt = (double)d2 - (double)c[5] * pow(2, 8);
    209a:	4f91      	ldr	r7, [pc, #580]	; (22e0 <wcm_ms5637_read+0x2c8>)
    209c:	47b8      	blx	r7
    209e:	9000      	str	r0, [sp, #0]
    20a0:	9101      	str	r1, [sp, #4]
    20a2:	4b90      	ldr	r3, [pc, #576]	; (22e4 <wcm_ms5637_read+0x2cc>)
    20a4:	4699      	mov	r9, r3
    20a6:	8958      	ldrh	r0, [r3, #10]
    20a8:	47b8      	blx	r7
    20aa:	4d8f      	ldr	r5, [pc, #572]	; (22e8 <wcm_ms5637_read+0x2d0>)
    20ac:	2200      	movs	r2, #0
    20ae:	4b8f      	ldr	r3, [pc, #572]	; (22ec <wcm_ms5637_read+0x2d4>)
    20b0:	47a8      	blx	r5
    20b2:	0002      	movs	r2, r0
    20b4:	000b      	movs	r3, r1
    20b6:	9800      	ldr	r0, [sp, #0]
    20b8:	9901      	ldr	r1, [sp, #4]
    20ba:	4e8d      	ldr	r6, [pc, #564]	; (22f0 <wcm_ms5637_read+0x2d8>)
    20bc:	47b0      	blx	r6
    20be:	9000      	str	r0, [sp, #0]
    20c0:	9101      	str	r1, [sp, #4]
	temp = 2000.0 + dt * (double)c[6] / pow(2, 23);
    20c2:	464b      	mov	r3, r9
    20c4:	8998      	ldrh	r0, [r3, #12]
    20c6:	47b8      	blx	r7
    20c8:	9a00      	ldr	r2, [sp, #0]
    20ca:	9b01      	ldr	r3, [sp, #4]
    20cc:	47a8      	blx	r5
    20ce:	2200      	movs	r2, #0
    20d0:	23fa      	movs	r3, #250	; 0xfa
    20d2:	059b      	lsls	r3, r3, #22
    20d4:	47a8      	blx	r5
    20d6:	4e87      	ldr	r6, [pc, #540]	; (22f4 <wcm_ms5637_read+0x2dc>)
    20d8:	2200      	movs	r2, #0
    20da:	4b87      	ldr	r3, [pc, #540]	; (22f8 <wcm_ms5637_read+0x2e0>)
    20dc:	47b0      	blx	r6
    20de:	9002      	str	r0, [sp, #8]
    20e0:	9103      	str	r1, [sp, #12]

	// Calculate temperature compensated pressure
	// OFF = OFFT1 + TCO * dT = C2 * 2^17 + (C4 * dT ) / 2^6
	// SENS = SENST1 + TCS * dT = C1 * 2^16 + (C3 * dT ) / 2^7
	// P = D1 * SENS - OFF = (D1 * SENS / 2^21 - OFF) / 2^15
	off = (double)c[2] * pow(2, 17) + (double)c[4] * dt / pow(2, 6);
    20e2:	464b      	mov	r3, r9
    20e4:	8918      	ldrh	r0, [r3, #8]
    20e6:	47b8      	blx	r7
    20e8:	9a00      	ldr	r2, [sp, #0]
    20ea:	9b01      	ldr	r3, [sp, #4]
    20ec:	47a8      	blx	r5
    20ee:	2200      	movs	r2, #0
    20f0:	4b82      	ldr	r3, [pc, #520]	; (22fc <wcm_ms5637_read+0x2e4>)
    20f2:	47a8      	blx	r5
    20f4:	9004      	str	r0, [sp, #16]
    20f6:	9105      	str	r1, [sp, #20]
    20f8:	464b      	mov	r3, r9
    20fa:	8898      	ldrh	r0, [r3, #4]
    20fc:	47b8      	blx	r7
    20fe:	2200      	movs	r2, #0
    2100:	2382      	movs	r3, #130	; 0x82
    2102:	05db      	lsls	r3, r3, #23
    2104:	47a8      	blx	r5
    2106:	0002      	movs	r2, r0
    2108:	000b      	movs	r3, r1
    210a:	9804      	ldr	r0, [sp, #16]
    210c:	9905      	ldr	r1, [sp, #20]
    210e:	47b0      	blx	r6
    2110:	9008      	str	r0, [sp, #32]
    2112:	9109      	str	r1, [sp, #36]	; 0x24
	sens = (double)c[1] * pow(2, 16) + (double)c[3] * dt / pow(2, 7);
    2114:	464b      	mov	r3, r9
    2116:	88d8      	ldrh	r0, [r3, #6]
    2118:	47b8      	blx	r7
    211a:	9a00      	ldr	r2, [sp, #0]
    211c:	9b01      	ldr	r3, [sp, #4]
    211e:	47a8      	blx	r5
    2120:	2200      	movs	r2, #0
    2122:	23fe      	movs	r3, #254	; 0xfe
    2124:	059b      	lsls	r3, r3, #22
    2126:	47a8      	blx	r5
    2128:	9004      	str	r0, [sp, #16]
    212a:	9105      	str	r1, [sp, #20]
    212c:	464b      	mov	r3, r9
    212e:	8858      	ldrh	r0, [r3, #2]
    2130:	47b8      	blx	r7
    2132:	2200      	movs	r2, #0
    2134:	4b72      	ldr	r3, [pc, #456]	; (2300 <wcm_ms5637_read+0x2e8>)
    2136:	47a8      	blx	r5
    2138:	0002      	movs	r2, r0
    213a:	000b      	movs	r3, r1
    213c:	9804      	ldr	r0, [sp, #16]
    213e:	9905      	ldr	r1, [sp, #20]
    2140:	47b0      	blx	r6
    2142:	900a      	str	r0, [sp, #40]	; 0x28
    2144:	910b      	str	r1, [sp, #44]	; 0x2c
	//p = (d1 * sens / 2097152 - off) / 32768;

	// Second order temperature compensation
	if (temp < 2000.0)
    2146:	2200      	movs	r2, #0
    2148:	4b6b      	ldr	r3, [pc, #428]	; (22f8 <wcm_ms5637_read+0x2e0>)
    214a:	9802      	ldr	r0, [sp, #8]
    214c:	9903      	ldr	r1, [sp, #12]
    214e:	4d6d      	ldr	r5, [pc, #436]	; (2304 <wcm_ms5637_read+0x2ec>)
    2150:	47a8      	blx	r5
    2152:	2800      	cmp	r0, #0
    2154:	d066      	beq.n	2224 <wcm_ms5637_read+0x20c>

		// Low temperature
		// T2 = 3 * dT^2 / 2^33
		// OFF2 = 61 * (TEMP - 2000)^2 / 2^4
		// SENS2 = 29 * (TEMP - 2000)^2 / 2^4
		t2 = 3.0 * dt * dt / pow(2, 33);
    2156:	4d64      	ldr	r5, [pc, #400]	; (22e8 <wcm_ms5637_read+0x2d0>)
    2158:	2200      	movs	r2, #0
    215a:	4b6b      	ldr	r3, [pc, #428]	; (2308 <wcm_ms5637_read+0x2f0>)
    215c:	9e00      	ldr	r6, [sp, #0]
    215e:	9f01      	ldr	r7, [sp, #4]
    2160:	0030      	movs	r0, r6
    2162:	0039      	movs	r1, r7
    2164:	47a8      	blx	r5
    2166:	0032      	movs	r2, r6
    2168:	003b      	movs	r3, r7
    216a:	47a8      	blx	r5
    216c:	2200      	movs	r2, #0
    216e:	4b67      	ldr	r3, [pc, #412]	; (230c <wcm_ms5637_read+0x2f4>)
    2170:	47a8      	blx	r5
    2172:	9006      	str	r0, [sp, #24]
    2174:	9107      	str	r1, [sp, #28]
		tmp = (temp - 2000.0) * (temp - 2000.0) / pow(2, 4);
    2176:	2200      	movs	r2, #0
    2178:	4b5f      	ldr	r3, [pc, #380]	; (22f8 <wcm_ms5637_read+0x2e0>)
    217a:	9802      	ldr	r0, [sp, #8]
    217c:	9903      	ldr	r1, [sp, #12]
    217e:	4e5c      	ldr	r6, [pc, #368]	; (22f0 <wcm_ms5637_read+0x2d8>)
    2180:	47b0      	blx	r6
    2182:	0002      	movs	r2, r0
    2184:	000b      	movs	r3, r1
    2186:	47a8      	blx	r5
    2188:	2200      	movs	r2, #0
    218a:	4b61      	ldr	r3, [pc, #388]	; (2310 <wcm_ms5637_read+0x2f8>)
    218c:	47a8      	blx	r5
    218e:	0006      	movs	r6, r0
    2190:	000f      	movs	r7, r1
		off2 = 61.0 * tmp;
    2192:	2200      	movs	r2, #0
    2194:	4b5f      	ldr	r3, [pc, #380]	; (2314 <wcm_ms5637_read+0x2fc>)
    2196:	47a8      	blx	r5
    2198:	9000      	str	r0, [sp, #0]
    219a:	9101      	str	r1, [sp, #4]
		sens2 = 29.0 * tmp;
    219c:	2200      	movs	r2, #0
    219e:	4b5e      	ldr	r3, [pc, #376]	; (2318 <wcm_ms5637_read+0x300>)
    21a0:	0030      	movs	r0, r6
    21a2:	0039      	movs	r1, r7
    21a4:	47a8      	blx	r5
    21a6:	9004      	str	r0, [sp, #16]
    21a8:	9105      	str	r1, [sp, #20]

		if (temp < -1500.0)
    21aa:	2200      	movs	r2, #0
    21ac:	4b5b      	ldr	r3, [pc, #364]	; (231c <wcm_ms5637_read+0x304>)
    21ae:	9e02      	ldr	r6, [sp, #8]
    21b0:	9f03      	ldr	r7, [sp, #12]
    21b2:	0030      	movs	r0, r6
    21b4:	0039      	movs	r1, r7
    21b6:	4d53      	ldr	r5, [pc, #332]	; (2304 <wcm_ms5637_read+0x2ec>)
    21b8:	47a8      	blx	r5
    21ba:	2800      	cmp	r0, #0
    21bc:	d048      	beq.n	2250 <wcm_ms5637_read+0x238>
		{
			// Very low temperature
			// OFF2 = OFF2 + 17 * (TEMP + 1500)^2
			// SENS2 = SENS2 + 9 * (TEMP + 1500)^2
			tmp = (temp + 1500.0) * (temp + 1500.0);
    21be:	4d4d      	ldr	r5, [pc, #308]	; (22f4 <wcm_ms5637_read+0x2dc>)
    21c0:	2200      	movs	r2, #0
    21c2:	4b57      	ldr	r3, [pc, #348]	; (2320 <wcm_ms5637_read+0x308>)
    21c4:	0030      	movs	r0, r6
    21c6:	0039      	movs	r1, r7
    21c8:	47a8      	blx	r5
    21ca:	4e47      	ldr	r6, [pc, #284]	; (22e8 <wcm_ms5637_read+0x2d0>)
    21cc:	0002      	movs	r2, r0
    21ce:	000b      	movs	r3, r1
    21d0:	47b0      	blx	r6
			off2 += 17.0 * tmp;
    21d2:	2200      	movs	r2, #0
    21d4:	4b53      	ldr	r3, [pc, #332]	; (2324 <wcm_ms5637_read+0x30c>)
    21d6:	900c      	str	r0, [sp, #48]	; 0x30
    21d8:	910d      	str	r1, [sp, #52]	; 0x34
    21da:	47b0      	blx	r6
    21dc:	0002      	movs	r2, r0
    21de:	000b      	movs	r3, r1
    21e0:	9800      	ldr	r0, [sp, #0]
    21e2:	9901      	ldr	r1, [sp, #4]
    21e4:	47a8      	blx	r5
    21e6:	9000      	str	r0, [sp, #0]
    21e8:	9101      	str	r1, [sp, #4]
			sens2 += 9.0 * tmp;
    21ea:	2200      	movs	r2, #0
    21ec:	4b4e      	ldr	r3, [pc, #312]	; (2328 <wcm_ms5637_read+0x310>)
    21ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    21f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    21f2:	47b0      	blx	r6
    21f4:	0002      	movs	r2, r0
    21f6:	000b      	movs	r3, r1
    21f8:	9804      	ldr	r0, [sp, #16]
    21fa:	9905      	ldr	r1, [sp, #20]
    21fc:	47a8      	blx	r5
    21fe:	9004      	str	r0, [sp, #16]
    2200:	9105      	str	r1, [sp, #20]
    2202:	e025      	b.n	2250 <wcm_ms5637_read+0x238>
		wcm_usart_send_pc_message("ms5637_read_d1_d2: Could not convert D1!\r\n");
    2204:	4849      	ldr	r0, [pc, #292]	; (232c <wcm_ms5637_read+0x314>)
    2206:	4b4a      	ldr	r3, [pc, #296]	; (2330 <wcm_ms5637_read+0x318>)
    2208:	4798      	blx	r3
    220a:	e057      	b.n	22bc <wcm_ms5637_read+0x2a4>
		wcm_usart_send_pc_message("ms5637_read_d1_d2: Could not read ADC (1)!\r\n");
    220c:	4849      	ldr	r0, [pc, #292]	; (2334 <wcm_ms5637_read+0x31c>)
    220e:	4b48      	ldr	r3, [pc, #288]	; (2330 <wcm_ms5637_read+0x318>)
    2210:	4798      	blx	r3
    2212:	e053      	b.n	22bc <wcm_ms5637_read+0x2a4>
		wcm_usart_send_pc_message("ms5637_read_d1_d2: Could not convert D2!\r\n");
    2214:	4848      	ldr	r0, [pc, #288]	; (2338 <wcm_ms5637_read+0x320>)
    2216:	4b46      	ldr	r3, [pc, #280]	; (2330 <wcm_ms5637_read+0x318>)
    2218:	4798      	blx	r3
    221a:	e04f      	b.n	22bc <wcm_ms5637_read+0x2a4>
		wcm_usart_send_pc_message("ms5637_read_d1_d2: Could not read ADC (2)!\r\n");
    221c:	4847      	ldr	r0, [pc, #284]	; (233c <wcm_ms5637_read+0x324>)
    221e:	4b44      	ldr	r3, [pc, #272]	; (2330 <wcm_ms5637_read+0x318>)
    2220:	4798      	blx	r3
    2222:	e04b      	b.n	22bc <wcm_ms5637_read+0x2a4>
	{
		// High temperature
		// T2 = 5 * dT^2 / 2^38
		// OFF2 = 0
		// SENS2 = 0
		t2 = 5.0 * dt * dt / pow(2, 38);
    2224:	4d30      	ldr	r5, [pc, #192]	; (22e8 <wcm_ms5637_read+0x2d0>)
    2226:	2200      	movs	r2, #0
    2228:	4b45      	ldr	r3, [pc, #276]	; (2340 <wcm_ms5637_read+0x328>)
    222a:	9e00      	ldr	r6, [sp, #0]
    222c:	9f01      	ldr	r7, [sp, #4]
    222e:	0030      	movs	r0, r6
    2230:	0039      	movs	r1, r7
    2232:	47a8      	blx	r5
    2234:	0032      	movs	r2, r6
    2236:	003b      	movs	r3, r7
    2238:	47a8      	blx	r5
    223a:	2200      	movs	r2, #0
    223c:	4b41      	ldr	r3, [pc, #260]	; (2344 <wcm_ms5637_read+0x32c>)
    223e:	47a8      	blx	r5
    2240:	9006      	str	r0, [sp, #24]
    2242:	9107      	str	r1, [sp, #28]
		off2 = 0.0;
		sens2 = 0.0;
    2244:	2200      	movs	r2, #0
    2246:	2300      	movs	r3, #0
    2248:	9204      	str	r2, [sp, #16]
    224a:	9305      	str	r3, [sp, #20]
		off2 = 0.0;
    224c:	9200      	str	r2, [sp, #0]
    224e:	9301      	str	r3, [sp, #4]
	}

	temp -= t2;
	off -= off2;
	sens -= sens2;
    2250:	4d27      	ldr	r5, [pc, #156]	; (22f0 <wcm_ms5637_read+0x2d8>)
    2252:	9a04      	ldr	r2, [sp, #16]
    2254:	9b05      	ldr	r3, [sp, #20]
    2256:	980a      	ldr	r0, [sp, #40]	; 0x28
    2258:	990b      	ldr	r1, [sp, #44]	; 0x2c
    225a:	47a8      	blx	r5
    225c:	9004      	str	r0, [sp, #16]
    225e:	9105      	str	r1, [sp, #20]

	p = ((double)d1 * sens / pow(2, 21) - off) / pow(2, 15);
    2260:	4650      	mov	r0, sl
    2262:	4b1f      	ldr	r3, [pc, #124]	; (22e0 <wcm_ms5637_read+0x2c8>)
    2264:	4798      	blx	r3
    2266:	0002      	movs	r2, r0
    2268:	000b      	movs	r3, r1
    226a:	4e1f      	ldr	r6, [pc, #124]	; (22e8 <wcm_ms5637_read+0x2d0>)
    226c:	9804      	ldr	r0, [sp, #16]
    226e:	9905      	ldr	r1, [sp, #20]
    2270:	47b0      	blx	r6
    2272:	2200      	movs	r2, #0
    2274:	4b34      	ldr	r3, [pc, #208]	; (2348 <wcm_ms5637_read+0x330>)
    2276:	47b0      	blx	r6
    2278:	9004      	str	r0, [sp, #16]
    227a:	9105      	str	r1, [sp, #20]
	off -= off2;
    227c:	9a00      	ldr	r2, [sp, #0]
    227e:	9b01      	ldr	r3, [sp, #4]
    2280:	9808      	ldr	r0, [sp, #32]
    2282:	9909      	ldr	r1, [sp, #36]	; 0x24
    2284:	47a8      	blx	r5
    2286:	0002      	movs	r2, r0
    2288:	000b      	movs	r3, r1
	p = ((double)d1 * sens / pow(2, 21) - off) / pow(2, 15);
    228a:	9804      	ldr	r0, [sp, #16]
    228c:	9905      	ldr	r1, [sp, #20]
    228e:	47a8      	blx	r5
    2290:	2200      	movs	r2, #0
    2292:	23fc      	movs	r3, #252	; 0xfc
    2294:	059b      	lsls	r3, r3, #22
    2296:	47b0      	blx	r6

	*pressure = p / 100;
    2298:	4e2c      	ldr	r6, [pc, #176]	; (234c <wcm_ms5637_read+0x334>)
    229a:	2200      	movs	r2, #0
    229c:	4b2c      	ldr	r3, [pc, #176]	; (2350 <wcm_ms5637_read+0x338>)
    229e:	47b0      	blx	r6
    22a0:	465b      	mov	r3, fp
    22a2:	6018      	str	r0, [r3, #0]
    22a4:	6059      	str	r1, [r3, #4]
	temp -= t2;
    22a6:	9a06      	ldr	r2, [sp, #24]
    22a8:	9b07      	ldr	r3, [sp, #28]
    22aa:	9802      	ldr	r0, [sp, #8]
    22ac:	9903      	ldr	r1, [sp, #12]
    22ae:	47a8      	blx	r5
	*temperature = temp / 100;
    22b0:	2200      	movs	r2, #0
    22b2:	4b27      	ldr	r3, [pc, #156]	; (2350 <wcm_ms5637_read+0x338>)
    22b4:	47b0      	blx	r6
    22b6:	4643      	mov	r3, r8
    22b8:	6018      	str	r0, [r3, #0]
    22ba:	6059      	str	r1, [r3, #4]

	return (status);

}	// End of wcm_ms5637_read
    22bc:	0020      	movs	r0, r4
    22be:	b011      	add	sp, #68	; 0x44
    22c0:	bc3c      	pop	{r2, r3, r4, r5}
    22c2:	4690      	mov	r8, r2
    22c4:	4699      	mov	r9, r3
    22c6:	46a2      	mov	sl, r4
    22c8:	46ab      	mov	fp, r5
    22ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22cc:	00001711 	.word	0x00001711
    22d0:	0000488d 	.word	0x0000488d
    22d4:	00001f15 	.word	0x00001f15
    22d8:	20000aac 	.word	0x20000aac
    22dc:	20000ab0 	.word	0x20000ab0
    22e0:	00008029 	.word	0x00008029
    22e4:	20000a9c 	.word	0x20000a9c
    22e8:	000073d1 	.word	0x000073d1
    22ec:	40700000 	.word	0x40700000
    22f0:	000078d1 	.word	0x000078d1
    22f4:	00006549 	.word	0x00006549
    22f8:	409f4000 	.word	0x409f4000
    22fc:	3f900000 	.word	0x3f900000
    2300:	40f00000 	.word	0x40f00000
    2304:	00006419 	.word	0x00006419
    2308:	40080000 	.word	0x40080000
    230c:	3de00000 	.word	0x3de00000
    2310:	3fb00000 	.word	0x3fb00000
    2314:	404e8000 	.word	0x404e8000
    2318:	403d0000 	.word	0x403d0000
    231c:	c0977000 	.word	0xc0977000
    2320:	40977000 	.word	0x40977000
    2324:	40310000 	.word	0x40310000
    2328:	40220000 	.word	0x40220000
    232c:	0000db5c 	.word	0x0000db5c
    2330:	00002551 	.word	0x00002551
    2334:	0000db88 	.word	0x0000db88
    2338:	0000dbb8 	.word	0x0000dbb8
    233c:	0000dbe4 	.word	0x0000dbe4
    2340:	40140000 	.word	0x40140000
    2344:	3d900000 	.word	0x3d900000
    2348:	3ea00000 	.word	0x3ea00000
    234c:	00006b69 	.word	0x00006b69
    2350:	40590000 	.word	0x40590000

00002354 <wcm_power_normal_power_mode>:

/***************************************************************************
Local function to enter normal power mode
****************************************************************************/
void wcm_power_normal_power_mode(void)
{
    2354:	b510      	push	{r4, lr}
	
	wcm_gpio_configure();
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <wcm_power_normal_power_mode+0x1c>)
    2358:	4798      	blx	r3
	wcm_clocks_configure(MODE_NORMALPOWER);
    235a:	2000      	movs	r0, #0
    235c:	4b05      	ldr	r3, [pc, #20]	; (2374 <wcm_power_normal_power_mode+0x20>)
    235e:	4798      	blx	r3
	wcm_usart_configure();
    2360:	4b05      	ldr	r3, [pc, #20]	; (2378 <wcm_power_normal_power_mode+0x24>)
    2362:	4798      	blx	r3
	wcm_spi_configure(MODE_NORMALPOWER);
    2364:	2000      	movs	r0, #0
    2366:	4b05      	ldr	r3, [pc, #20]	; (237c <wcm_power_normal_power_mode+0x28>)
    2368:	4798      	blx	r3
	delay_init();
    236a:	4b05      	ldr	r3, [pc, #20]	; (2380 <wcm_power_normal_power_mode+0x2c>)
    236c:	4798      	blx	r3

}	// End of normal_power_mode
    236e:	bd10      	pop	{r4, pc}
    2370:	00001409 	.word	0x00001409
    2374:	0000123d 	.word	0x0000123d
    2378:	00002849 	.word	0x00002849
    237c:	00002391 	.word	0x00002391
    2380:	00004821 	.word	0x00004821

00002384 <spi_slave_callback>:
/****************************************************************************************
SPI slave callback function
*****************************************************************************************/
static void spi_slave_callback(struct spi_module *const module)
{
	transfer_complete = true;
    2384:	2201      	movs	r2, #1
    2386:	4b01      	ldr	r3, [pc, #4]	; (238c <spi_slave_callback+0x8>)
    2388:	701a      	strb	r2, [r3, #0]

}	// End of spi_slave_callback
    238a:	4770      	bx	lr
    238c:	20000af0 	.word	0x20000af0

00002390 <wcm_spi_configure>:
{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	b08e      	sub	sp, #56	; 0x38
    2394:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
    2396:	2400      	movs	r4, #0
    2398:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    239a:	9402      	str	r4, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    239c:	23c0      	movs	r3, #192	; 0xc0
    239e:	039b      	lsls	r3, r3, #14
    23a0:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    23a2:	466b      	mov	r3, sp
    23a4:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
    23a6:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
    23a8:	2501      	movs	r5, #1
    23aa:	749d      	strb	r5, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    23ac:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    23ae:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    23b0:	2324      	movs	r3, #36	; 0x24
    23b2:	466a      	mov	r2, sp
    23b4:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    23b6:	220c      	movs	r2, #12
    23b8:	2100      	movs	r1, #0
    23ba:	a806      	add	r0, sp, #24
    23bc:	4b37      	ldr	r3, [pc, #220]	; (249c <wcm_spi_configure+0x10c>)
    23be:	4798      	blx	r3
	spi_config_struct.mode = SPI_MODE_SLAVE;
    23c0:	466b      	mov	r3, sp
    23c2:	701c      	strb	r4, [r3, #0]
	spi_config_struct.mode_specific.slave.preload_enable = true;
    23c4:	2320      	movs	r3, #32
    23c6:	466a      	mov	r2, sp
    23c8:	54d5      	strb	r5, [r2, r3]
	spi_config_struct.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
    23ca:	9406      	str	r4, [sp, #24]
	spi_config_struct.pinmux_pad0 = PINMUX_PA22D_SERCOM5_PAD0;
    23cc:	4b34      	ldr	r3, [pc, #208]	; (24a0 <wcm_spi_configure+0x110>)
    23ce:	930a      	str	r3, [sp, #40]	; 0x28
	spi_config_struct.pinmux_pad1 = PINMUX_PA23D_SERCOM5_PAD1;
    23d0:	4b34      	ldr	r3, [pc, #208]	; (24a4 <wcm_spi_configure+0x114>)
    23d2:	930b      	str	r3, [sp, #44]	; 0x2c
	spi_config_struct.pinmux_pad2 = PINMUX_PA24D_SERCOM5_PAD2;
    23d4:	4b34      	ldr	r3, [pc, #208]	; (24a8 <wcm_spi_configure+0x118>)
    23d6:	930c      	str	r3, [sp, #48]	; 0x30
	spi_config_struct.pinmux_pad3 = PINMUX_PA25D_SERCOM5_PAD3;
    23d8:	4b34      	ldr	r3, [pc, #208]	; (24ac <wcm_spi_configure+0x11c>)
    23da:	930d      	str	r3, [sp, #52]	; 0x34
	if (bFirst)
    23dc:	4b34      	ldr	r3, [pc, #208]	; (24b0 <wcm_spi_configure+0x120>)
    23de:	781b      	ldrb	r3, [r3, #0]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d028      	beq.n	2436 <wcm_spi_configure+0xa6>
		bFirst = false;
    23e4:	2200      	movs	r2, #0
    23e6:	4b32      	ldr	r3, [pc, #200]	; (24b0 <wcm_spi_configure+0x120>)
    23e8:	701a      	strb	r2, [r3, #0]
	spi_init(&spi_module_struct, SERCOM5, &spi_config_struct);
    23ea:	4c32      	ldr	r4, [pc, #200]	; (24b4 <wcm_spi_configure+0x124>)
    23ec:	466a      	mov	r2, sp
    23ee:	4932      	ldr	r1, [pc, #200]	; (24b8 <wcm_spi_configure+0x128>)
    23f0:	0020      	movs	r0, r4
    23f2:	4b32      	ldr	r3, [pc, #200]	; (24bc <wcm_spi_configure+0x12c>)
    23f4:	4798      	blx	r3
	spi_register_callback(&spi_module_struct, spi_slave_callback, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    23f6:	2202      	movs	r2, #2
    23f8:	4931      	ldr	r1, [pc, #196]	; (24c0 <wcm_spi_configure+0x130>)
    23fa:	0020      	movs	r0, r4
    23fc:	4b31      	ldr	r3, [pc, #196]	; (24c4 <wcm_spi_configure+0x134>)
    23fe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    2400:	2237      	movs	r2, #55	; 0x37
    2402:	5ca3      	ldrb	r3, [r4, r2]
    2404:	2104      	movs	r1, #4
    2406:	430b      	orrs	r3, r1
    2408:	54a3      	strb	r3, [r4, r2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    240a:	6825      	ldr	r5, [r4, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    240c:	0028      	movs	r0, r5
    240e:	4b2e      	ldr	r3, [pc, #184]	; (24c8 <wcm_spi_configure+0x138>)
    2410:	4798      	blx	r3
    2412:	231f      	movs	r3, #31
    2414:	4018      	ands	r0, r3
    2416:	3b1e      	subs	r3, #30
    2418:	4083      	lsls	r3, r0
    241a:	4a2c      	ldr	r2, [pc, #176]	; (24cc <wcm_spi_configure+0x13c>)
    241c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    241e:	6822      	ldr	r2, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    2420:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    2422:	2b00      	cmp	r3, #0
    2424:	d1fc      	bne.n	2420 <wcm_spi_configure+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2426:	682b      	ldr	r3, [r5, #0]
    2428:	2202      	movs	r2, #2
    242a:	4313      	orrs	r3, r2
    242c:	602b      	str	r3, [r5, #0]
	if (mode == MODE_DISABLED){
    242e:	2e01      	cmp	r6, #1
    2430:	d019      	beq.n	2466 <wcm_spi_configure+0xd6>
}	// End of wcm_spi_configure
    2432:	b00e      	add	sp, #56	; 0x38
    2434:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2436:	4d1f      	ldr	r5, [pc, #124]	; (24b4 <wcm_spi_configure+0x124>)
    2438:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    243a:	0020      	movs	r0, r4
    243c:	4b22      	ldr	r3, [pc, #136]	; (24c8 <wcm_spi_configure+0x138>)
    243e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2440:	231f      	movs	r3, #31
    2442:	4018      	ands	r0, r3
    2444:	3b1e      	subs	r3, #30
    2446:	4083      	lsls	r3, r0
    2448:	2280      	movs	r2, #128	; 0x80
    244a:	4920      	ldr	r1, [pc, #128]	; (24cc <wcm_spi_configure+0x13c>)
    244c:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    244e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2450:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    2452:	2b00      	cmp	r3, #0
    2454:	d1fc      	bne.n	2450 <wcm_spi_configure+0xc0>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2456:	338f      	adds	r3, #143	; 0x8f
    2458:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    245a:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    245c:	6823      	ldr	r3, [r4, #0]
    245e:	2202      	movs	r2, #2
    2460:	4393      	bics	r3, r2
    2462:	6023      	str	r3, [r4, #0]
    2464:	e7c1      	b.n	23ea <wcm_spi_configure+0x5a>
		wcm_usart_send_pc_message("spi disabled!\r\n");
    2466:	481a      	ldr	r0, [pc, #104]	; (24d0 <wcm_spi_configure+0x140>)
    2468:	4b1a      	ldr	r3, [pc, #104]	; (24d4 <wcm_spi_configure+0x144>)
    246a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    246c:	4d11      	ldr	r5, [pc, #68]	; (24b4 <wcm_spi_configure+0x124>)
    246e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2470:	0020      	movs	r0, r4
    2472:	4b15      	ldr	r3, [pc, #84]	; (24c8 <wcm_spi_configure+0x138>)
    2474:	4798      	blx	r3
    2476:	231f      	movs	r3, #31
    2478:	4018      	ands	r0, r3
    247a:	3b1e      	subs	r3, #30
    247c:	4083      	lsls	r3, r0
    247e:	2280      	movs	r2, #128	; 0x80
    2480:	4912      	ldr	r1, [pc, #72]	; (24cc <wcm_spi_configure+0x13c>)
    2482:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2484:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2486:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2488:	2b00      	cmp	r3, #0
    248a:	d1fc      	bne.n	2486 <wcm_spi_configure+0xf6>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    248c:	338f      	adds	r3, #143	; 0x8f
    248e:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2490:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2492:	6823      	ldr	r3, [r4, #0]
    2494:	2202      	movs	r2, #2
    2496:	4393      	bics	r3, r2
    2498:	6023      	str	r3, [r4, #0]
}	// End of wcm_spi_configure
    249a:	e7ca      	b.n	2432 <wcm_spi_configure+0xa2>
    249c:	00008371 	.word	0x00008371
    24a0:	00160003 	.word	0x00160003
    24a4:	00170003 	.word	0x00170003
    24a8:	00180003 	.word	0x00180003
    24ac:	00190003 	.word	0x00190003
    24b0:	20000002 	.word	0x20000002
    24b4:	20000ab4 	.word	0x20000ab4
    24b8:	43000400 	.word	0x43000400
    24bc:	00003ef1 	.word	0x00003ef1
    24c0:	00002385 	.word	0x00002385
    24c4:	00004125 	.word	0x00004125
    24c8:	0000473d 	.word	0x0000473d
    24cc:	e000e100 	.word	0xe000e100
    24d0:	0000dc14 	.word	0x0000dc14
    24d4:	00002551 	.word	0x00002551

000024d8 <wcm_spi_start_read>:
{
    24d8:	b510      	push	{r4, lr}
	transfer_complete = false;
    24da:	2400      	movs	r4, #0
    24dc:	4b04      	ldr	r3, [pc, #16]	; (24f0 <wcm_spi_start_read+0x18>)
    24de:	701c      	strb	r4, [r3, #0]
	status = spi_transceive_buffer_job(&spi_module_struct, tx_buffer, rx_buffer, buffer_length);
    24e0:	b293      	uxth	r3, r2
    24e2:	000a      	movs	r2, r1
    24e4:	0001      	movs	r1, r0
    24e6:	4803      	ldr	r0, [pc, #12]	; (24f4 <wcm_spi_start_read+0x1c>)
    24e8:	4c03      	ldr	r4, [pc, #12]	; (24f8 <wcm_spi_start_read+0x20>)
    24ea:	47a0      	blx	r4
}	// End of wcm_spi_start_read
    24ec:	bd10      	pop	{r4, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	20000af0 	.word	0x20000af0
    24f4:	20000ab4 	.word	0x20000ab4
    24f8:	0000413d 	.word	0x0000413d

000024fc <wcm_spi_transfer_complete>:
	return (transfer_complete);
    24fc:	4b01      	ldr	r3, [pc, #4]	; (2504 <wcm_spi_transfer_complete+0x8>)
    24fe:	7818      	ldrb	r0, [r3, #0]
    2500:	b2c0      	uxtb	r0, r0
}	// End of wcm_spi_transfer_complete
    2502:	4770      	bx	lr
    2504:	20000af0 	.word	0x20000af0

00002508 <wcm_usart_check_for_pc_command>:
Function to check for a command from the control computer
****************************************************************************/
enum status_code wcm_usart_check_for_pc_command(void)
{
	// Check if USART has new data
	if (pc_usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
    2508:	4b04      	ldr	r3, [pc, #16]	; (251c <wcm_usart_check_for_pc_command+0x14>)
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	7e1b      	ldrb	r3, [r3, #24]
    250e:	075b      	lsls	r3, r3, #29
    2510:	d401      	bmi.n	2516 <wcm_usart_check_for_pc_command+0xe>
	{
		return STATUS_OK;
	}

	return STATUS_BUSY;
    2512:	2005      	movs	r0, #5

}	// End of wcm_usart_check_for_pc_command
    2514:	4770      	bx	lr
		return STATUS_OK;
    2516:	2000      	movs	r0, #0
    2518:	e7fc      	b.n	2514 <wcm_usart_check_for_pc_command+0xc>
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	20000b14 	.word	0x20000b14

00002520 <wcm_usart_check_for_gps_data>:
Function to check for a data from the gps
****************************************************************************/
enum status_code wcm_usart_check_for_gps_data(void)
{
	// Check if USART has new data
	if (gps_usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
    2520:	4b04      	ldr	r3, [pc, #16]	; (2534 <wcm_usart_check_for_gps_data+0x14>)
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	7e1b      	ldrb	r3, [r3, #24]
    2526:	075b      	lsls	r3, r3, #29
    2528:	d401      	bmi.n	252e <wcm_usart_check_for_gps_data+0xe>
	{
		return STATUS_OK;
	}

	return STATUS_BUSY;
    252a:	2005      	movs	r0, #5

}	// End of wcm_usart_check_for_gps_data
    252c:	4770      	bx	lr
		return STATUS_OK;
    252e:	2000      	movs	r0, #0
    2530:	e7fc      	b.n	252c <wcm_usart_check_for_gps_data+0xc>
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	20000b04 	.word	0x20000b04

00002538 <wcm_usart_check_for_com_data>:
Function to check for a command from the Iridium module 
****************************************************************************/
enum status_code wcm_usart_check_for_com_data(void)
{
	// Check if USART has new data
	if (com_usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
    2538:	4b04      	ldr	r3, [pc, #16]	; (254c <wcm_usart_check_for_com_data+0x14>)
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	7e1b      	ldrb	r3, [r3, #24]
    253e:	075b      	lsls	r3, r3, #29
    2540:	d401      	bmi.n	2546 <wcm_usart_check_for_com_data+0xe>
	{
		return STATUS_OK;
	}

	return STATUS_BUSY;
    2542:	2005      	movs	r0, #5

}	// End of wcm_usart_check_for_com_data
    2544:	4770      	bx	lr
		return STATUS_OK;
    2546:	2000      	movs	r0, #0
    2548:	e7fc      	b.n	2544 <wcm_usart_check_for_com_data+0xc>
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	20000af4 	.word	0x20000af4

00002550 <wcm_usart_send_pc_message>:

/***************************************************************************
Function to send a message to the control computer
****************************************************************************/
void wcm_usart_send_pc_message(const char *message)
{
    2550:	b510      	push	{r4, lr}
    2552:	0004      	movs	r4, r0
	usart_write_buffer_wait(&pc_usart_module_struct, (uint8_t *)message, strlen(message));
    2554:	4b03      	ldr	r3, [pc, #12]	; (2564 <wcm_usart_send_pc_message+0x14>)
    2556:	4798      	blx	r3
    2558:	b282      	uxth	r2, r0
    255a:	0021      	movs	r1, r4
    255c:	4802      	ldr	r0, [pc, #8]	; (2568 <wcm_usart_send_pc_message+0x18>)
    255e:	4b03      	ldr	r3, [pc, #12]	; (256c <wcm_usart_send_pc_message+0x1c>)
    2560:	4798      	blx	r3

}	// End of wcm_usart_send_pc_message
    2562:	bd10      	pop	{r4, pc}
    2564:	00008459 	.word	0x00008459
    2568:	20000b18 	.word	0x20000b18
    256c:	00003e35 	.word	0x00003e35

00002570 <pc_usart_configure>:

/****************************************************************************************
Local function to configure the SERCOM2 USART for communication with the control computer
*****************************************************************************************/
static void pc_usart_configure(uint8_t mode)
{
    2570:	b530      	push	{r4, r5, lr}
    2572:	b091      	sub	sp, #68	; 0x44
    2574:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2576:	2380      	movs	r3, #128	; 0x80
    2578:	05db      	lsls	r3, r3, #23
    257a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    257c:	2300      	movs	r3, #0
    257e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2580:	22ff      	movs	r2, #255	; 0xff
    2582:	4669      	mov	r1, sp
    2584:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2586:	2200      	movs	r2, #0
    2588:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    258a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    258c:	2101      	movs	r1, #1
    258e:	2024      	movs	r0, #36	; 0x24
    2590:	466d      	mov	r5, sp
    2592:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
    2594:	3001      	adds	r0, #1
    2596:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
    2598:	3125      	adds	r1, #37	; 0x25
    259a:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
    259c:	3101      	adds	r1, #1
    259e:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
    25a0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    25a2:	2188      	movs	r1, #136	; 0x88
    25a4:	0349      	lsls	r1, r1, #13
    25a6:	9103      	str	r1, [sp, #12]
	config->run_in_standby   = false;
    25a8:	212c      	movs	r1, #44	; 0x2c
    25aa:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
    25ac:	3101      	adds	r1, #1
    25ae:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    25b0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    25b2:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    25b4:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    25b6:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    25b8:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    25ba:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
    25bc:	2313      	movs	r3, #19
    25be:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    25c0:	776a      	strb	r2, [r5, #29]

	struct usart_config usart_config_struct;

	usart_get_config_defaults(&usart_config_struct);

	usart_config_struct.baudrate                               = 38400;
    25c2:	2396      	movs	r3, #150	; 0x96
    25c4:	021b      	lsls	r3, r3, #8
    25c6:	9308      	str	r3, [sp, #32]
	usart_config_struct.mux_setting                            = USART_RX_1_TX_2_XCK_3;
	usart_config_struct.pinmux_pad0                            = PINMUX_UNUSED;
    25c8:	2301      	movs	r3, #1
    25ca:	425b      	negs	r3, r3
    25cc:	930c      	str	r3, [sp, #48]	; 0x30
	usart_config_struct.pinmux_pad1                            = PINMUX_PA09D_SERCOM2_PAD1;
    25ce:	4a1c      	ldr	r2, [pc, #112]	; (2640 <pc_usart_configure+0xd0>)
    25d0:	920d      	str	r2, [sp, #52]	; 0x34
	usart_config_struct.pinmux_pad2                            = PINMUX_PA10D_SERCOM2_PAD2;
    25d2:	4a1c      	ldr	r2, [pc, #112]	; (2644 <pc_usart_configure+0xd4>)
    25d4:	920e      	str	r2, [sp, #56]	; 0x38
	usart_config_struct.pinmux_pad3                            = PINMUX_UNUSED;
    25d6:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_config_struct.transfer_mode                          = USART_TRANSFER_ASYNCHRONOUSLY;

	if (bFirst)
    25d8:	4b1b      	ldr	r3, [pc, #108]	; (2648 <pc_usart_configure+0xd8>)
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	2b00      	cmp	r3, #0
    25de:	d018      	beq.n	2612 <pc_usart_configure+0xa2>
	{
		bFirst = false;
    25e0:	2200      	movs	r2, #0
    25e2:	4b19      	ldr	r3, [pc, #100]	; (2648 <pc_usart_configure+0xd8>)
    25e4:	701a      	strb	r2, [r3, #0]
	{
		usart_disable(&pc_usart_module_struct);
	}
	
	
	usart_init(&pc_usart_module_struct, SERCOM2, &usart_config_struct);
    25e6:	4d19      	ldr	r5, [pc, #100]	; (264c <pc_usart_configure+0xdc>)
    25e8:	466a      	mov	r2, sp
    25ea:	4919      	ldr	r1, [pc, #100]	; (2650 <pc_usart_configure+0xe0>)
    25ec:	0028      	movs	r0, r5
    25ee:	4b19      	ldr	r3, [pc, #100]	; (2654 <pc_usart_configure+0xe4>)
    25f0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    25f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    25f4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1fc      	bne.n	25f4 <pc_usart_configure+0x84>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    25fa:	6813      	ldr	r3, [r2, #0]
    25fc:	2102      	movs	r1, #2
    25fe:	430b      	orrs	r3, r1
    2600:	6013      	str	r3, [r2, #0]
	usart_enable(&pc_usart_module_struct);
	
	if (mode == MODE_DISABLED){
    2602:	2c01      	cmp	r4, #1
    2604:	d00f      	beq.n	2626 <pc_usart_configure+0xb6>
		wcm_usart_send_pc_message("pc usart disabled!\r\n");
		usart_disable(&pc_usart_module_struct);
	}

	// Get a pointer to the hardware module instance
	pc_usart_hw = &((&pc_usart_module_struct)->hw->USART);
    2606:	4b11      	ldr	r3, [pc, #68]	; (264c <pc_usart_configure+0xdc>)
    2608:	681a      	ldr	r2, [r3, #0]
    260a:	4b13      	ldr	r3, [pc, #76]	; (2658 <pc_usart_configure+0xe8>)
    260c:	601a      	str	r2, [r3, #0]

}	// End of pc_usart_configure
    260e:	b011      	add	sp, #68	; 0x44
    2610:	bd30      	pop	{r4, r5, pc}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2612:	4b0e      	ldr	r3, [pc, #56]	; (264c <pc_usart_configure+0xdc>)
    2614:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2616:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2618:	2b00      	cmp	r3, #0
    261a:	d1fc      	bne.n	2616 <pc_usart_configure+0xa6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    261c:	6813      	ldr	r3, [r2, #0]
    261e:	2102      	movs	r1, #2
    2620:	438b      	bics	r3, r1
    2622:	6013      	str	r3, [r2, #0]
    2624:	e7df      	b.n	25e6 <pc_usart_configure+0x76>
		wcm_usart_send_pc_message("pc usart disabled!\r\n");
    2626:	480d      	ldr	r0, [pc, #52]	; (265c <pc_usart_configure+0xec>)
    2628:	4b0d      	ldr	r3, [pc, #52]	; (2660 <pc_usart_configure+0xf0>)
    262a:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    262c:	4b07      	ldr	r3, [pc, #28]	; (264c <pc_usart_configure+0xdc>)
    262e:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2630:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2632:	2b00      	cmp	r3, #0
    2634:	d1fc      	bne.n	2630 <pc_usart_configure+0xc0>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2636:	6813      	ldr	r3, [r2, #0]
    2638:	2102      	movs	r1, #2
    263a:	438b      	bics	r3, r1
    263c:	6013      	str	r3, [r2, #0]
    263e:	e7e2      	b.n	2606 <pc_usart_configure+0x96>
    2640:	00090003 	.word	0x00090003
    2644:	000a0003 	.word	0x000a0003
    2648:	20000003 	.word	0x20000003
    264c:	20000b18 	.word	0x20000b18
    2650:	42000800 	.word	0x42000800
    2654:	00003a91 	.word	0x00003a91
    2658:	20000b14 	.word	0x20000b14
    265c:	0000dc54 	.word	0x0000dc54
    2660:	00002551 	.word	0x00002551

00002664 <gps_usart_configure>:

/****************************************************************************************
Local function to configure the SERCOM1 USART for communication with the GPS
*****************************************************************************************/
static void gps_usart_configure(uint8_t mode)
{
    2664:	b530      	push	{r4, r5, lr}
    2666:	b091      	sub	sp, #68	; 0x44
    2668:	0004      	movs	r4, r0
	config->data_order       = USART_DATAORDER_LSB;
    266a:	2380      	movs	r3, #128	; 0x80
    266c:	05db      	lsls	r3, r3, #23
    266e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2670:	2300      	movs	r3, #0
    2672:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2674:	22ff      	movs	r2, #255	; 0xff
    2676:	4669      	mov	r1, sp
    2678:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    267a:	2200      	movs	r2, #0
    267c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    267e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    2680:	2101      	movs	r1, #1
    2682:	2024      	movs	r0, #36	; 0x24
    2684:	466d      	mov	r5, sp
    2686:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
    2688:	3001      	adds	r0, #1
    268a:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
    268c:	3125      	adds	r1, #37	; 0x25
    268e:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
    2690:	3101      	adds	r1, #1
    2692:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
    2694:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2696:	3105      	adds	r1, #5
    2698:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
    269a:	3101      	adds	r1, #1
    269c:	546b      	strb	r3, [r5, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    269e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    26a0:	822b      	strh	r3, [r5, #16]
	config->lin_slave_enable      = false;
    26a2:	76eb      	strb	r3, [r5, #27]
	config->immediate_buffer_overflow_notification  = false;
    26a4:	762a      	strb	r2, [r5, #24]
	config->start_frame_detection_enable            = false;
    26a6:	772a      	strb	r2, [r5, #28]
	config->encoding_format_enable                  = false;
    26a8:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
    26aa:	2313      	movs	r3, #19
    26ac:	76ab      	strb	r3, [r5, #26]
	config->collision_detection_enable              = false;
    26ae:	776a      	strb	r2, [r5, #29]

	struct usart_config usart_config_struct;

	usart_get_config_defaults(&usart_config_struct);

	usart_config_struct.baudrate                               = 38400;
    26b0:	2396      	movs	r3, #150	; 0x96
    26b2:	021b      	lsls	r3, r3, #8
    26b4:	9308      	str	r3, [sp, #32]
	usart_config_struct.mux_setting                            = USART_RX_1_TX_0_XCK_1;
    26b6:	2380      	movs	r3, #128	; 0x80
    26b8:	035b      	lsls	r3, r3, #13
    26ba:	9303      	str	r3, [sp, #12]
	usart_config_struct.pinmux_pad0                            = PINMUX_PA00D_SERCOM1_PAD0;
    26bc:	2303      	movs	r3, #3
    26be:	930c      	str	r3, [sp, #48]	; 0x30
	usart_config_struct.pinmux_pad1                            = PINMUX_PA01D_SERCOM1_PAD1;
    26c0:	4b1c      	ldr	r3, [pc, #112]	; (2734 <gps_usart_configure+0xd0>)
    26c2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_config_struct.pinmux_pad2                            = PINMUX_UNUSED;
    26c4:	2301      	movs	r3, #1
    26c6:	425b      	negs	r3, r3
    26c8:	930e      	str	r3, [sp, #56]	; 0x38
	usart_config_struct.pinmux_pad3                            = PINMUX_UNUSED;
    26ca:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_config_struct.transfer_mode                          = USART_TRANSFER_ASYNCHRONOUSLY;

	if (bFirst)
    26cc:	4b1a      	ldr	r3, [pc, #104]	; (2738 <gps_usart_configure+0xd4>)
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	2b00      	cmp	r3, #0
    26d2:	d018      	beq.n	2706 <gps_usart_configure+0xa2>
	{
		bFirst = false;
    26d4:	2200      	movs	r2, #0
    26d6:	4b18      	ldr	r3, [pc, #96]	; (2738 <gps_usart_configure+0xd4>)
    26d8:	701a      	strb	r2, [r3, #0]
	else
	{
		usart_disable(&gps_usart_module_struct);
	}
	
	usart_init(&gps_usart_module_struct, SERCOM1, &usart_config_struct);
    26da:	4d18      	ldr	r5, [pc, #96]	; (273c <gps_usart_configure+0xd8>)
    26dc:	466a      	mov	r2, sp
    26de:	4918      	ldr	r1, [pc, #96]	; (2740 <gps_usart_configure+0xdc>)
    26e0:	0028      	movs	r0, r5
    26e2:	4b18      	ldr	r3, [pc, #96]	; (2744 <gps_usart_configure+0xe0>)
    26e4:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    26e6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26e8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26ea:	2b00      	cmp	r3, #0
    26ec:	d1fc      	bne.n	26e8 <gps_usart_configure+0x84>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    26ee:	6813      	ldr	r3, [r2, #0]
    26f0:	2102      	movs	r1, #2
    26f2:	430b      	orrs	r3, r1
    26f4:	6013      	str	r3, [r2, #0]
	usart_enable(&gps_usart_module_struct);		
	
	if (mode == MODE_DISABLED){
    26f6:	2c01      	cmp	r4, #1
    26f8:	d00f      	beq.n	271a <gps_usart_configure+0xb6>
		wcm_usart_send_pc_message("gps usart disabled!\r\n");
		usart_disable(&gps_usart_module_struct);		
	}
	
	gps_usart_hw = &((&gps_usart_module_struct)->hw->USART);
    26fa:	4b10      	ldr	r3, [pc, #64]	; (273c <gps_usart_configure+0xd8>)
    26fc:	681a      	ldr	r2, [r3, #0]
    26fe:	4b12      	ldr	r3, [pc, #72]	; (2748 <gps_usart_configure+0xe4>)
    2700:	601a      	str	r2, [r3, #0]

}	// End of gps_usart_configure
    2702:	b011      	add	sp, #68	; 0x44
    2704:	bd30      	pop	{r4, r5, pc}
	SercomUsart *const usart_hw = &(module->hw->USART);
    2706:	4b0d      	ldr	r3, [pc, #52]	; (273c <gps_usart_configure+0xd8>)
    2708:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    270a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    270c:	2b00      	cmp	r3, #0
    270e:	d1fc      	bne.n	270a <gps_usart_configure+0xa6>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2710:	6813      	ldr	r3, [r2, #0]
    2712:	2102      	movs	r1, #2
    2714:	438b      	bics	r3, r1
    2716:	6013      	str	r3, [r2, #0]
    2718:	e7df      	b.n	26da <gps_usart_configure+0x76>
		wcm_usart_send_pc_message("gps usart disabled!\r\n");
    271a:	480c      	ldr	r0, [pc, #48]	; (274c <gps_usart_configure+0xe8>)
    271c:	4b0c      	ldr	r3, [pc, #48]	; (2750 <gps_usart_configure+0xec>)
    271e:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2720:	4b06      	ldr	r3, [pc, #24]	; (273c <gps_usart_configure+0xd8>)
    2722:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2724:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2726:	2b00      	cmp	r3, #0
    2728:	d1fc      	bne.n	2724 <gps_usart_configure+0xc0>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    272a:	6813      	ldr	r3, [r2, #0]
    272c:	2102      	movs	r1, #2
    272e:	438b      	bics	r3, r1
    2730:	6013      	str	r3, [r2, #0]
    2732:	e7e2      	b.n	26fa <gps_usart_configure+0x96>
    2734:	00010003 	.word	0x00010003
    2738:	20000004 	.word	0x20000004
    273c:	20000b08 	.word	0x20000b08
    2740:	42000400 	.word	0x42000400
    2744:	00003a91 	.word	0x00003a91
    2748:	20000b04 	.word	0x20000b04
    274c:	0000dc3c 	.word	0x0000dc3c
    2750:	00002551 	.word	0x00002551

00002754 <com_usart_configure>:

/****************************************************************************************
Local function to configure the SERCOM0 USART for communication with the SAT/CELL
*****************************************************************************************/
static void com_usart_configure(uint8_t mode)
{
    2754:	b530      	push	{r4, r5, lr}
    2756:	b091      	sub	sp, #68	; 0x44
    2758:	0004      	movs	r4, r0
	config->data_order       = USART_DATAORDER_LSB;
    275a:	2380      	movs	r3, #128	; 0x80
    275c:	05db      	lsls	r3, r3, #23
    275e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2760:	2300      	movs	r3, #0
    2762:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2764:	22ff      	movs	r2, #255	; 0xff
    2766:	4669      	mov	r1, sp
    2768:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    276a:	2200      	movs	r2, #0
    276c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    276e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    2770:	2101      	movs	r1, #1
    2772:	2024      	movs	r0, #36	; 0x24
    2774:	466d      	mov	r5, sp
    2776:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
    2778:	3001      	adds	r0, #1
    277a:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
    277c:	3125      	adds	r1, #37	; 0x25
    277e:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
    2780:	3101      	adds	r1, #1
    2782:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
    2784:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2786:	3105      	adds	r1, #5
    2788:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
    278a:	3101      	adds	r1, #1
    278c:	546b      	strb	r3, [r5, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    278e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2790:	822b      	strh	r3, [r5, #16]
	config->lin_slave_enable      = false;
    2792:	76eb      	strb	r3, [r5, #27]
	config->immediate_buffer_overflow_notification  = false;
    2794:	762a      	strb	r2, [r5, #24]
	config->start_frame_detection_enable            = false;
    2796:	772a      	strb	r2, [r5, #28]
	config->encoding_format_enable                  = false;
    2798:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
    279a:	2313      	movs	r3, #19
    279c:	76ab      	strb	r3, [r5, #26]
	config->collision_detection_enable              = false;
    279e:	776a      	strb	r2, [r5, #29]

	struct usart_config usart_config_struct;

	usart_get_config_defaults(&usart_config_struct);

	usart_config_struct.baudrate                               = 38400;
    27a0:	2396      	movs	r3, #150	; 0x96
    27a2:	021b      	lsls	r3, r3, #8
    27a4:	9308      	str	r3, [sp, #32]
	usart_config_struct.mux_setting                            = USART_RX_1_TX_0_XCK_1;
    27a6:	2380      	movs	r3, #128	; 0x80
    27a8:	035b      	lsls	r3, r3, #13
    27aa:	9303      	str	r3, [sp, #12]
	usart_config_struct.pinmux_pad0                            = PINMUX_PA04D_SERCOM0_PAD0;
    27ac:	4b1e      	ldr	r3, [pc, #120]	; (2828 <com_usart_configure+0xd4>)
    27ae:	930c      	str	r3, [sp, #48]	; 0x30
	usart_config_struct.pinmux_pad1                            = PINMUX_PA05D_SERCOM0_PAD1;
    27b0:	4b1e      	ldr	r3, [pc, #120]	; (282c <com_usart_configure+0xd8>)
    27b2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_config_struct.pinmux_pad2                            = PINMUX_UNUSED;
    27b4:	2301      	movs	r3, #1
    27b6:	425b      	negs	r3, r3
    27b8:	930e      	str	r3, [sp, #56]	; 0x38
	usart_config_struct.pinmux_pad3                            = PINMUX_UNUSED;
    27ba:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_config_struct.transfer_mode                          = USART_TRANSFER_ASYNCHRONOUSLY;

	if (bFirst)
    27bc:	4b1c      	ldr	r3, [pc, #112]	; (2830 <com_usart_configure+0xdc>)
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d019      	beq.n	27f8 <com_usart_configure+0xa4>
	{
		bFirst = false;
    27c4:	2200      	movs	r2, #0
    27c6:	4b1a      	ldr	r3, [pc, #104]	; (2830 <com_usart_configure+0xdc>)
    27c8:	701a      	strb	r2, [r3, #0]
	{
		usart_disable(&com_usart_module_struct);
	}
	
	
	usart_init(&com_usart_module_struct, SERCOM0, &usart_config_struct);
    27ca:	4d1a      	ldr	r5, [pc, #104]	; (2834 <com_usart_configure+0xe0>)
    27cc:	466a      	mov	r2, sp
    27ce:	2184      	movs	r1, #132	; 0x84
    27d0:	05c9      	lsls	r1, r1, #23
    27d2:	0028      	movs	r0, r5
    27d4:	4b18      	ldr	r3, [pc, #96]	; (2838 <com_usart_configure+0xe4>)
    27d6:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    27d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27dc:	2b00      	cmp	r3, #0
    27de:	d1fc      	bne.n	27da <com_usart_configure+0x86>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    27e0:	6813      	ldr	r3, [r2, #0]
    27e2:	2102      	movs	r1, #2
    27e4:	430b      	orrs	r3, r1
    27e6:	6013      	str	r3, [r2, #0]
	usart_enable(&com_usart_module_struct);
	
	if (mode == MODE_DISABLED){
    27e8:	2c01      	cmp	r4, #1
    27ea:	d00f      	beq.n	280c <com_usart_configure+0xb8>
		wcm_usart_send_pc_message("com usart disabled!\r\n");
		usart_disable(&com_usart_module_struct);
	}

	// Get a pointer to the hardware module instance
	com_usart_hw = &((&com_usart_module_struct)->hw->USART);
    27ec:	4b11      	ldr	r3, [pc, #68]	; (2834 <com_usart_configure+0xe0>)
    27ee:	681a      	ldr	r2, [r3, #0]
    27f0:	4b12      	ldr	r3, [pc, #72]	; (283c <com_usart_configure+0xe8>)
    27f2:	601a      	str	r2, [r3, #0]

}	// End of com_usart_configure
    27f4:	b011      	add	sp, #68	; 0x44
    27f6:	bd30      	pop	{r4, r5, pc}
	SercomUsart *const usart_hw = &(module->hw->USART);
    27f8:	4b0e      	ldr	r3, [pc, #56]	; (2834 <com_usart_configure+0xe0>)
    27fa:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    27fc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27fe:	2b00      	cmp	r3, #0
    2800:	d1fc      	bne.n	27fc <com_usart_configure+0xa8>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2802:	6813      	ldr	r3, [r2, #0]
    2804:	2102      	movs	r1, #2
    2806:	438b      	bics	r3, r1
    2808:	6013      	str	r3, [r2, #0]
    280a:	e7de      	b.n	27ca <com_usart_configure+0x76>
		wcm_usart_send_pc_message("com usart disabled!\r\n");
    280c:	480c      	ldr	r0, [pc, #48]	; (2840 <com_usart_configure+0xec>)
    280e:	4b0d      	ldr	r3, [pc, #52]	; (2844 <com_usart_configure+0xf0>)
    2810:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2812:	4b08      	ldr	r3, [pc, #32]	; (2834 <com_usart_configure+0xe0>)
    2814:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2816:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2818:	2b00      	cmp	r3, #0
    281a:	d1fc      	bne.n	2816 <com_usart_configure+0xc2>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    281c:	6813      	ldr	r3, [r2, #0]
    281e:	2102      	movs	r1, #2
    2820:	438b      	bics	r3, r1
    2822:	6013      	str	r3, [r2, #0]
    2824:	e7e2      	b.n	27ec <com_usart_configure+0x98>
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	00040003 	.word	0x00040003
    282c:	00050003 	.word	0x00050003
    2830:	20000005 	.word	0x20000005
    2834:	20000af8 	.word	0x20000af8
    2838:	00003a91 	.word	0x00003a91
    283c:	20000af4 	.word	0x20000af4
    2840:	0000dc24 	.word	0x0000dc24
    2844:	00002551 	.word	0x00002551

00002848 <wcm_usart_configure>:
{
    2848:	b510      	push	{r4, lr}
	pc_usart_configure(MODE_ENABLED);
    284a:	2000      	movs	r0, #0
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <wcm_usart_configure+0x18>)
    284e:	4798      	blx	r3
	gps_usart_configure(MODE_ENABLED);
    2850:	2000      	movs	r0, #0
    2852:	4b04      	ldr	r3, [pc, #16]	; (2864 <wcm_usart_configure+0x1c>)
    2854:	4798      	blx	r3
	com_usart_configure(MODE_ENABLED);
    2856:	2000      	movs	r0, #0
    2858:	4b03      	ldr	r3, [pc, #12]	; (2868 <wcm_usart_configure+0x20>)
    285a:	4798      	blx	r3
}	// End of wcm_usart_configure
    285c:	bd10      	pop	{r4, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	00002571 	.word	0x00002571
    2864:	00002665 	.word	0x00002665
    2868:	00002755 	.word	0x00002755

0000286c <wcm_usart_send_gps_command>:
{
    286c:	b510      	push	{r4, lr}
    286e:	0004      	movs	r4, r0
	usart_write_buffer_wait(&gps_usart_module_struct, (uint8_t *)command, strlen(command));
    2870:	4b03      	ldr	r3, [pc, #12]	; (2880 <wcm_usart_send_gps_command+0x14>)
    2872:	4798      	blx	r3
    2874:	b282      	uxth	r2, r0
    2876:	0021      	movs	r1, r4
    2878:	4802      	ldr	r0, [pc, #8]	; (2884 <wcm_usart_send_gps_command+0x18>)
    287a:	4b03      	ldr	r3, [pc, #12]	; (2888 <wcm_usart_send_gps_command+0x1c>)
    287c:	4798      	blx	r3
}	// End of wcm_usart_send_gps_command
    287e:	bd10      	pop	{r4, pc}
    2880:	00008459 	.word	0x00008459
    2884:	20000b08 	.word	0x20000b08
    2888:	00003e35 	.word	0x00003e35

0000288c <wcm_usart_send_com_command>:
{
    288c:	b510      	push	{r4, lr}
    288e:	0004      	movs	r4, r0
	usart_write_buffer_wait(&com_usart_module_struct, (uint8_t *)command, strlen(command));
    2890:	4b03      	ldr	r3, [pc, #12]	; (28a0 <wcm_usart_send_com_command+0x14>)
    2892:	4798      	blx	r3
    2894:	b282      	uxth	r2, r0
    2896:	0021      	movs	r1, r4
    2898:	4802      	ldr	r0, [pc, #8]	; (28a4 <wcm_usart_send_com_command+0x18>)
    289a:	4b03      	ldr	r3, [pc, #12]	; (28a8 <wcm_usart_send_com_command+0x1c>)
    289c:	4798      	blx	r3
}	// End of wcm_usart_com_send_com_command
    289e:	bd10      	pop	{r4, pc}
    28a0:	00008459 	.word	0x00008459
    28a4:	20000af8 	.word	0x20000af8
    28a8:	00003e35 	.word	0x00003e35

000028ac <wcm_usart_get_pc_command>:

/***************************************************************************
Function to wait for a command from the control computer
****************************************************************************/
bool wcm_usart_get_pc_command(char *command, int command_length)
{
    28ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ae:	b085      	sub	sp, #20
    28b0:	0005      	movs	r5, r0
    28b2:	9101      	str	r1, [sp, #4]
	int i;
	uint16_t received_data;
	bool bCommandReceived;

	i = 0;
	received_data = 0;
    28b4:	2200      	movs	r2, #0
    28b6:	ab02      	add	r3, sp, #8
    28b8:	80da      	strh	r2, [r3, #6]
	bCommandReceived = false;
    28ba:	2600      	movs	r6, #0
	i = 0;
    28bc:	2700      	movs	r7, #0
	while (1)
	{
		retval = usart_read_wait(&pc_usart_module_struct, &received_data);
    28be:	4c32      	ldr	r4, [pc, #200]	; (2988 <wcm_usart_get_pc_command+0xdc>)
    28c0:	ab02      	add	r3, sp, #8
    28c2:	1d99      	adds	r1, r3, #6
    28c4:	4831      	ldr	r0, [pc, #196]	; (298c <wcm_usart_get_pc_command+0xe0>)
    28c6:	47a0      	blx	r4
		if (retval == STATUS_OK)
    28c8:	2800      	cmp	r0, #0
    28ca:	d11c      	bne.n	2906 <wcm_usart_get_pc_command+0x5a>
		{
			if (received_data == '\n')
    28cc:	ab02      	add	r3, sp, #8
    28ce:	88db      	ldrh	r3, [r3, #6]
    28d0:	2b0a      	cmp	r3, #10
    28d2:	d008      	beq.n	28e6 <wcm_usart_get_pc_command+0x3a>
				{
					continue;
				}
			}

			command[i++] = (char)received_data;
    28d4:	1c7a      	adds	r2, r7, #1
    28d6:	55eb      	strb	r3, [r5, r7]
			if (received_data == '\r')
    28d8:	2b0d      	cmp	r3, #13
    28da:	d007      	beq.n	28ec <wcm_usart_get_pc_command+0x40>
			{
				command[i-1] = '\0';
				bCommandReceived = true;
				continue;
			}
			if (i == command_length)
    28dc:	9b01      	ldr	r3, [sp, #4]
    28de:	429a      	cmp	r2, r3
    28e0:	d00b      	beq.n	28fa <wcm_usart_get_pc_command+0x4e>
			command[i++] = (char)received_data;
    28e2:	0017      	movs	r7, r2
    28e4:	e7ec      	b.n	28c0 <wcm_usart_get_pc_command+0x14>
				if (bCommandReceived)
    28e6:	2e00      	cmp	r6, #0
    28e8:	d0ea      	beq.n	28c0 <wcm_usart_get_pc_command+0x14>
    28ea:	e020      	b.n	292e <wcm_usart_get_pc_command+0x82>
				command[i-1] = '\0';
    28ec:	18ab      	adds	r3, r5, r2
    28ee:	3b01      	subs	r3, #1
    28f0:	2100      	movs	r1, #0
    28f2:	7019      	strb	r1, [r3, #0]
			command[i++] = (char)received_data;
    28f4:	0017      	movs	r7, r2
				bCommandReceived = true;
    28f6:	2601      	movs	r6, #1
				continue;
    28f8:	e7e2      	b.n	28c0 <wcm_usart_get_pc_command+0x14>
			{
				// Null terminate the string
				command[i-1] = '\0';
    28fa:	18aa      	adds	r2, r5, r2
    28fc:	3a01      	subs	r2, #1
    28fe:	2300      	movs	r3, #0
    2900:	7013      	strb	r3, [r2, #0]

				bCommandReceived = false;
    2902:	2600      	movs	r6, #0
				break;
    2904:	e013      	b.n	292e <wcm_usart_get_pc_command+0x82>
			}
		}
		else if (retval == STATUS_BUSY)
    2906:	2805      	cmp	r0, #5
    2908:	d0da      	beq.n	28c0 <wcm_usart_get_pc_command+0x14>
		{
			continue;
		}
		else
		{
			if (retval == STATUS_ERR_BAD_FORMAT)
    290a:	281a      	cmp	r0, #26
    290c:	d012      	beq.n	2934 <wcm_usart_get_pc_command+0x88>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_FORMAT!\r\n");
			}
			else if (retval == STATUS_ERR_OVERFLOW)
    290e:	281e      	cmp	r0, #30
    2910:	d017      	beq.n	2942 <wcm_usart_get_pc_command+0x96>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_OVERFLOW!\r\n");
			}
			else if (retval == STATUS_ERR_BAD_DATA)
    2912:	2813      	cmp	r0, #19
    2914:	d01c      	beq.n	2950 <wcm_usart_get_pc_command+0xa4>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_DATA!\r\n");
			}
			else if (retval == STATUS_ERR_DENIED)
    2916:	281c      	cmp	r0, #28
    2918:	d021      	beq.n	295e <wcm_usart_get_pc_command+0xb2>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_DENIED!\r\n");
			}
			else if (retval == STATUS_ERR_PROTOCOL)
    291a:	2842      	cmp	r0, #66	; 0x42
    291c:	d026      	beq.n	296c <wcm_usart_get_pc_command+0xc0>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_PROTOCOL!\r\n");
			}
			else if (retval == STATUS_ERR_PACKET_COLLISION)
    291e:	2841      	cmp	r0, #65	; 0x41
    2920:	d02b      	beq.n	297a <wcm_usart_get_pc_command+0xce>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_PACKET_COLLISION!\r\n");
			}
			else
			{
				sprintf(command, "usart_read_wait UNKNOWN!\r\n");
    2922:	221b      	movs	r2, #27
    2924:	491a      	ldr	r1, [pc, #104]	; (2990 <wcm_usart_get_pc_command+0xe4>)
    2926:	0028      	movs	r0, r5
    2928:	4b1a      	ldr	r3, [pc, #104]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    292a:	4798      	blx	r3
			}

			bCommandReceived = false;
    292c:	2600      	movs	r6, #0
		}
	}

	return (bCommandReceived);

}	// End of wcm_usart_get_pc_command
    292e:	0030      	movs	r0, r6
    2930:	b005      	add	sp, #20
    2932:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_FORMAT!\r\n");
    2934:	2229      	movs	r2, #41	; 0x29
    2936:	4918      	ldr	r1, [pc, #96]	; (2998 <wcm_usart_get_pc_command+0xec>)
    2938:	0028      	movs	r0, r5
    293a:	4b16      	ldr	r3, [pc, #88]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    293c:	4798      	blx	r3
			bCommandReceived = false;
    293e:	2600      	movs	r6, #0
    2940:	e7f5      	b.n	292e <wcm_usart_get_pc_command+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_OVERFLOW!\r\n");
    2942:	2227      	movs	r2, #39	; 0x27
    2944:	4915      	ldr	r1, [pc, #84]	; (299c <wcm_usart_get_pc_command+0xf0>)
    2946:	0028      	movs	r0, r5
    2948:	4b12      	ldr	r3, [pc, #72]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    294a:	4798      	blx	r3
			bCommandReceived = false;
    294c:	2600      	movs	r6, #0
    294e:	e7ee      	b.n	292e <wcm_usart_get_pc_command+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_DATA!\r\n");
    2950:	2227      	movs	r2, #39	; 0x27
    2952:	4913      	ldr	r1, [pc, #76]	; (29a0 <wcm_usart_get_pc_command+0xf4>)
    2954:	0028      	movs	r0, r5
    2956:	4b0f      	ldr	r3, [pc, #60]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    2958:	4798      	blx	r3
			bCommandReceived = false;
    295a:	2600      	movs	r6, #0
    295c:	e7e7      	b.n	292e <wcm_usart_get_pc_command+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_DENIED!\r\n");
    295e:	2225      	movs	r2, #37	; 0x25
    2960:	4910      	ldr	r1, [pc, #64]	; (29a4 <wcm_usart_get_pc_command+0xf8>)
    2962:	0028      	movs	r0, r5
    2964:	4b0b      	ldr	r3, [pc, #44]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    2966:	4798      	blx	r3
			bCommandReceived = false;
    2968:	2600      	movs	r6, #0
    296a:	e7e0      	b.n	292e <wcm_usart_get_pc_command+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_PROTOCOL!\r\n");
    296c:	2227      	movs	r2, #39	; 0x27
    296e:	490e      	ldr	r1, [pc, #56]	; (29a8 <wcm_usart_get_pc_command+0xfc>)
    2970:	0028      	movs	r0, r5
    2972:	4b08      	ldr	r3, [pc, #32]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    2974:	4798      	blx	r3
			bCommandReceived = false;
    2976:	2600      	movs	r6, #0
    2978:	e7d9      	b.n	292e <wcm_usart_get_pc_command+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_PACKET_COLLISION!\r\n");
    297a:	222f      	movs	r2, #47	; 0x2f
    297c:	490b      	ldr	r1, [pc, #44]	; (29ac <wcm_usart_get_pc_command+0x100>)
    297e:	0028      	movs	r0, r5
    2980:	4b04      	ldr	r3, [pc, #16]	; (2994 <wcm_usart_get_pc_command+0xe8>)
    2982:	4798      	blx	r3
			bCommandReceived = false;
    2984:	2600      	movs	r6, #0
    2986:	e7d2      	b.n	292e <wcm_usart_get_pc_command+0x82>
    2988:	00003dd1 	.word	0x00003dd1
    298c:	20000b18 	.word	0x20000b18
    2990:	0000dd68 	.word	0x0000dd68
    2994:	000082ed 	.word	0x000082ed
    2998:	0000dc6c 	.word	0x0000dc6c
    299c:	0000dc98 	.word	0x0000dc98
    29a0:	0000dcc0 	.word	0x0000dcc0
    29a4:	0000dce8 	.word	0x0000dce8
    29a8:	0000dd10 	.word	0x0000dd10
    29ac:	0000dd38 	.word	0x0000dd38

000029b0 <wcm_usart_get_gps_data>:

/***************************************************************************
Function to wait for a data from gps
****************************************************************************/
bool wcm_usart_get_gps_data(char *command, int command_length)
{
    29b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b2:	b085      	sub	sp, #20
    29b4:	0005      	movs	r5, r0
    29b6:	9101      	str	r1, [sp, #4]
	int i;
	uint16_t received_data;
	bool bCommandReceived;

	i = 0;
	received_data = 0;
    29b8:	2200      	movs	r2, #0
    29ba:	ab02      	add	r3, sp, #8
    29bc:	80da      	strh	r2, [r3, #6]
	bCommandReceived = false;
    29be:	2600      	movs	r6, #0
	i = 0;
    29c0:	2700      	movs	r7, #0
	while (1)
	{
		retval = usart_read_wait(&gps_usart_module_struct, &received_data);
    29c2:	4c32      	ldr	r4, [pc, #200]	; (2a8c <wcm_usart_get_gps_data+0xdc>)
    29c4:	ab02      	add	r3, sp, #8
    29c6:	1d99      	adds	r1, r3, #6
    29c8:	4831      	ldr	r0, [pc, #196]	; (2a90 <wcm_usart_get_gps_data+0xe0>)
    29ca:	47a0      	blx	r4
		if (retval == STATUS_OK)
    29cc:	2800      	cmp	r0, #0
    29ce:	d11c      	bne.n	2a0a <wcm_usart_get_gps_data+0x5a>
		{
			if (received_data == '\n')
    29d0:	ab02      	add	r3, sp, #8
    29d2:	88db      	ldrh	r3, [r3, #6]
    29d4:	2b0a      	cmp	r3, #10
    29d6:	d008      	beq.n	29ea <wcm_usart_get_gps_data+0x3a>
				{
					continue;
				}
			}

			command[i++] = (char)received_data;
    29d8:	1c7a      	adds	r2, r7, #1
    29da:	55eb      	strb	r3, [r5, r7]
			if (received_data == '\r')
    29dc:	2b0d      	cmp	r3, #13
    29de:	d007      	beq.n	29f0 <wcm_usart_get_gps_data+0x40>
			{
				command[i-1] = '\0';
				bCommandReceived = true;
				continue;
			}
			if (i == command_length)
    29e0:	9b01      	ldr	r3, [sp, #4]
    29e2:	429a      	cmp	r2, r3
    29e4:	d00b      	beq.n	29fe <wcm_usart_get_gps_data+0x4e>
			command[i++] = (char)received_data;
    29e6:	0017      	movs	r7, r2
    29e8:	e7ec      	b.n	29c4 <wcm_usart_get_gps_data+0x14>
				if (bCommandReceived)
    29ea:	2e00      	cmp	r6, #0
    29ec:	d0ea      	beq.n	29c4 <wcm_usart_get_gps_data+0x14>
    29ee:	e020      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
				command[i-1] = '\0';
    29f0:	18ab      	adds	r3, r5, r2
    29f2:	3b01      	subs	r3, #1
    29f4:	2100      	movs	r1, #0
    29f6:	7019      	strb	r1, [r3, #0]
			command[i++] = (char)received_data;
    29f8:	0017      	movs	r7, r2
				bCommandReceived = true;
    29fa:	2601      	movs	r6, #1
				continue;
    29fc:	e7e2      	b.n	29c4 <wcm_usart_get_gps_data+0x14>
			{
				// Null terminate the string
				command[i-1] = '\0';
    29fe:	18aa      	adds	r2, r5, r2
    2a00:	3a01      	subs	r2, #1
    2a02:	2300      	movs	r3, #0
    2a04:	7013      	strb	r3, [r2, #0]

				bCommandReceived = false;
    2a06:	2600      	movs	r6, #0
				break;
    2a08:	e013      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
			}
		}
		else if (retval == STATUS_BUSY)
    2a0a:	2805      	cmp	r0, #5
    2a0c:	d0da      	beq.n	29c4 <wcm_usart_get_gps_data+0x14>
		{
			continue;
		}
		else
		{
			if (retval == STATUS_ERR_BAD_FORMAT)
    2a0e:	281a      	cmp	r0, #26
    2a10:	d012      	beq.n	2a38 <wcm_usart_get_gps_data+0x88>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_FORMAT!\r\n");
			}
			else if (retval == STATUS_ERR_OVERFLOW)
    2a12:	281e      	cmp	r0, #30
    2a14:	d017      	beq.n	2a46 <wcm_usart_get_gps_data+0x96>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_OVERFLOW!\r\n");
			}
			else if (retval == STATUS_ERR_BAD_DATA)
    2a16:	2813      	cmp	r0, #19
    2a18:	d01c      	beq.n	2a54 <wcm_usart_get_gps_data+0xa4>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_DATA!\r\n");
			}
			else if (retval == STATUS_ERR_DENIED)
    2a1a:	281c      	cmp	r0, #28
    2a1c:	d021      	beq.n	2a62 <wcm_usart_get_gps_data+0xb2>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_DENIED!\r\n");
			}
			else if (retval == STATUS_ERR_PROTOCOL)
    2a1e:	2842      	cmp	r0, #66	; 0x42
    2a20:	d026      	beq.n	2a70 <wcm_usart_get_gps_data+0xc0>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_PROTOCOL!\r\n");
			}
			else if (retval == STATUS_ERR_PACKET_COLLISION)
    2a22:	2841      	cmp	r0, #65	; 0x41
    2a24:	d02b      	beq.n	2a7e <wcm_usart_get_gps_data+0xce>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_PACKET_COLLISION!\r\n");
			}
			else
			{
				sprintf(command, "usart_read_wait UNKNOWN!\r\n");
    2a26:	221b      	movs	r2, #27
    2a28:	491a      	ldr	r1, [pc, #104]	; (2a94 <wcm_usart_get_gps_data+0xe4>)
    2a2a:	0028      	movs	r0, r5
    2a2c:	4b1a      	ldr	r3, [pc, #104]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a2e:	4798      	blx	r3
			}

			bCommandReceived = false;
    2a30:	2600      	movs	r6, #0
		}
	}

	return (bCommandReceived);

}	// End of wcm_usart_get_gps_data
    2a32:	0030      	movs	r0, r6
    2a34:	b005      	add	sp, #20
    2a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_FORMAT!\r\n");
    2a38:	2229      	movs	r2, #41	; 0x29
    2a3a:	4918      	ldr	r1, [pc, #96]	; (2a9c <wcm_usart_get_gps_data+0xec>)
    2a3c:	0028      	movs	r0, r5
    2a3e:	4b16      	ldr	r3, [pc, #88]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a40:	4798      	blx	r3
			bCommandReceived = false;
    2a42:	2600      	movs	r6, #0
    2a44:	e7f5      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_OVERFLOW!\r\n");
    2a46:	2227      	movs	r2, #39	; 0x27
    2a48:	4915      	ldr	r1, [pc, #84]	; (2aa0 <wcm_usart_get_gps_data+0xf0>)
    2a4a:	0028      	movs	r0, r5
    2a4c:	4b12      	ldr	r3, [pc, #72]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a4e:	4798      	blx	r3
			bCommandReceived = false;
    2a50:	2600      	movs	r6, #0
    2a52:	e7ee      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_DATA!\r\n");
    2a54:	2227      	movs	r2, #39	; 0x27
    2a56:	4913      	ldr	r1, [pc, #76]	; (2aa4 <wcm_usart_get_gps_data+0xf4>)
    2a58:	0028      	movs	r0, r5
    2a5a:	4b0f      	ldr	r3, [pc, #60]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a5c:	4798      	blx	r3
			bCommandReceived = false;
    2a5e:	2600      	movs	r6, #0
    2a60:	e7e7      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_DENIED!\r\n");
    2a62:	2225      	movs	r2, #37	; 0x25
    2a64:	4910      	ldr	r1, [pc, #64]	; (2aa8 <wcm_usart_get_gps_data+0xf8>)
    2a66:	0028      	movs	r0, r5
    2a68:	4b0b      	ldr	r3, [pc, #44]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a6a:	4798      	blx	r3
			bCommandReceived = false;
    2a6c:	2600      	movs	r6, #0
    2a6e:	e7e0      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_PROTOCOL!\r\n");
    2a70:	2227      	movs	r2, #39	; 0x27
    2a72:	490e      	ldr	r1, [pc, #56]	; (2aac <wcm_usart_get_gps_data+0xfc>)
    2a74:	0028      	movs	r0, r5
    2a76:	4b08      	ldr	r3, [pc, #32]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a78:	4798      	blx	r3
			bCommandReceived = false;
    2a7a:	2600      	movs	r6, #0
    2a7c:	e7d9      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_PACKET_COLLISION!\r\n");
    2a7e:	222f      	movs	r2, #47	; 0x2f
    2a80:	490b      	ldr	r1, [pc, #44]	; (2ab0 <wcm_usart_get_gps_data+0x100>)
    2a82:	0028      	movs	r0, r5
    2a84:	4b04      	ldr	r3, [pc, #16]	; (2a98 <wcm_usart_get_gps_data+0xe8>)
    2a86:	4798      	blx	r3
			bCommandReceived = false;
    2a88:	2600      	movs	r6, #0
    2a8a:	e7d2      	b.n	2a32 <wcm_usart_get_gps_data+0x82>
    2a8c:	00003dd1 	.word	0x00003dd1
    2a90:	20000b08 	.word	0x20000b08
    2a94:	0000dd68 	.word	0x0000dd68
    2a98:	000082ed 	.word	0x000082ed
    2a9c:	0000dc6c 	.word	0x0000dc6c
    2aa0:	0000dc98 	.word	0x0000dc98
    2aa4:	0000dcc0 	.word	0x0000dcc0
    2aa8:	0000dce8 	.word	0x0000dce8
    2aac:	0000dd10 	.word	0x0000dd10
    2ab0:	0000dd38 	.word	0x0000dd38

00002ab4 <wcm_usart_get_com_data>:

/***************************************************************************
Function to wait for a data from Iridium Module
****************************************************************************/
bool wcm_usart_get_com_data(char *command, int command_length)
{
    2ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab6:	b085      	sub	sp, #20
    2ab8:	0005      	movs	r5, r0
    2aba:	9101      	str	r1, [sp, #4]
	int i;
	uint16_t received_data;
	bool bCommandReceived;

	i = 0;
	received_data = 0;
    2abc:	2200      	movs	r2, #0
    2abe:	ab02      	add	r3, sp, #8
    2ac0:	80da      	strh	r2, [r3, #6]
	bCommandReceived = false;
    2ac2:	2600      	movs	r6, #0
	i = 0;
    2ac4:	2700      	movs	r7, #0
	while (1)
	{
		retval = usart_read_wait(&com_usart_module_struct, &received_data);
    2ac6:	4c32      	ldr	r4, [pc, #200]	; (2b90 <wcm_usart_get_com_data+0xdc>)
    2ac8:	ab02      	add	r3, sp, #8
    2aca:	1d99      	adds	r1, r3, #6
    2acc:	4831      	ldr	r0, [pc, #196]	; (2b94 <wcm_usart_get_com_data+0xe0>)
    2ace:	47a0      	blx	r4
		if (retval == STATUS_OK)
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d11c      	bne.n	2b0e <wcm_usart_get_com_data+0x5a>
		{
			if (received_data == '\n')
    2ad4:	ab02      	add	r3, sp, #8
    2ad6:	88db      	ldrh	r3, [r3, #6]
    2ad8:	2b0a      	cmp	r3, #10
    2ada:	d008      	beq.n	2aee <wcm_usart_get_com_data+0x3a>
				{
					continue;
				}
			}

			command[i++] = (char)received_data;
    2adc:	1c7a      	adds	r2, r7, #1
    2ade:	55eb      	strb	r3, [r5, r7]
			if (received_data == '\r')
    2ae0:	2b0d      	cmp	r3, #13
    2ae2:	d007      	beq.n	2af4 <wcm_usart_get_com_data+0x40>
			{
				command[i-1] = '\0';
				bCommandReceived = true;
				continue;
			}
			if (i == command_length)
    2ae4:	9b01      	ldr	r3, [sp, #4]
    2ae6:	429a      	cmp	r2, r3
    2ae8:	d00b      	beq.n	2b02 <wcm_usart_get_com_data+0x4e>
			command[i++] = (char)received_data;
    2aea:	0017      	movs	r7, r2
    2aec:	e7ec      	b.n	2ac8 <wcm_usart_get_com_data+0x14>
				if (bCommandReceived)
    2aee:	2e00      	cmp	r6, #0
    2af0:	d0ea      	beq.n	2ac8 <wcm_usart_get_com_data+0x14>
    2af2:	e020      	b.n	2b36 <wcm_usart_get_com_data+0x82>
				command[i-1] = '\0';
    2af4:	18ab      	adds	r3, r5, r2
    2af6:	3b01      	subs	r3, #1
    2af8:	2100      	movs	r1, #0
    2afa:	7019      	strb	r1, [r3, #0]
			command[i++] = (char)received_data;
    2afc:	0017      	movs	r7, r2
				bCommandReceived = true;
    2afe:	2601      	movs	r6, #1
				continue;
    2b00:	e7e2      	b.n	2ac8 <wcm_usart_get_com_data+0x14>
			{
				// Null terminate the string
				command[i-1] = '\0';
    2b02:	18aa      	adds	r2, r5, r2
    2b04:	3a01      	subs	r2, #1
    2b06:	2300      	movs	r3, #0
    2b08:	7013      	strb	r3, [r2, #0]

				bCommandReceived = false;
    2b0a:	2600      	movs	r6, #0
				break;
    2b0c:	e013      	b.n	2b36 <wcm_usart_get_com_data+0x82>
			}
		}
		else if (retval == STATUS_BUSY)
    2b0e:	2805      	cmp	r0, #5
    2b10:	d0da      	beq.n	2ac8 <wcm_usart_get_com_data+0x14>
		{
			continue;
		}
		else
		{
			if (retval == STATUS_ERR_BAD_FORMAT)
    2b12:	281a      	cmp	r0, #26
    2b14:	d012      	beq.n	2b3c <wcm_usart_get_com_data+0x88>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_FORMAT!\r\n");
			}
			else if (retval == STATUS_ERR_OVERFLOW)
    2b16:	281e      	cmp	r0, #30
    2b18:	d017      	beq.n	2b4a <wcm_usart_get_com_data+0x96>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_OVERFLOW!\r\n");
			}
			else if (retval == STATUS_ERR_BAD_DATA)
    2b1a:	2813      	cmp	r0, #19
    2b1c:	d01c      	beq.n	2b58 <wcm_usart_get_com_data+0xa4>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_DATA!\r\n");
			}
			else if (retval == STATUS_ERR_DENIED)
    2b1e:	281c      	cmp	r0, #28
    2b20:	d021      	beq.n	2b66 <wcm_usart_get_com_data+0xb2>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_DENIED!\r\n");
			}
			else if (retval == STATUS_ERR_PROTOCOL)
    2b22:	2842      	cmp	r0, #66	; 0x42
    2b24:	d026      	beq.n	2b74 <wcm_usart_get_com_data+0xc0>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_PROTOCOL!\r\n");
			}
			else if (retval == STATUS_ERR_PACKET_COLLISION)
    2b26:	2841      	cmp	r0, #65	; 0x41
    2b28:	d02b      	beq.n	2b82 <wcm_usart_get_com_data+0xce>
			{
				sprintf(command, "usart_read_wait STATUS_ERR_PACKET_COLLISION!\r\n");
			}
			else
			{
				sprintf(command, "usart_read_wait UNKNOWN!\r\n");
    2b2a:	221b      	movs	r2, #27
    2b2c:	491a      	ldr	r1, [pc, #104]	; (2b98 <wcm_usart_get_com_data+0xe4>)
    2b2e:	0028      	movs	r0, r5
    2b30:	4b1a      	ldr	r3, [pc, #104]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b32:	4798      	blx	r3
			}

			bCommandReceived = false;
    2b34:	2600      	movs	r6, #0
		}
	}

	return (bCommandReceived);

    2b36:	0030      	movs	r0, r6
    2b38:	b005      	add	sp, #20
    2b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_FORMAT!\r\n");
    2b3c:	2229      	movs	r2, #41	; 0x29
    2b3e:	4918      	ldr	r1, [pc, #96]	; (2ba0 <wcm_usart_get_com_data+0xec>)
    2b40:	0028      	movs	r0, r5
    2b42:	4b16      	ldr	r3, [pc, #88]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b44:	4798      	blx	r3
			bCommandReceived = false;
    2b46:	2600      	movs	r6, #0
    2b48:	e7f5      	b.n	2b36 <wcm_usart_get_com_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_OVERFLOW!\r\n");
    2b4a:	2227      	movs	r2, #39	; 0x27
    2b4c:	4915      	ldr	r1, [pc, #84]	; (2ba4 <wcm_usart_get_com_data+0xf0>)
    2b4e:	0028      	movs	r0, r5
    2b50:	4b12      	ldr	r3, [pc, #72]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b52:	4798      	blx	r3
			bCommandReceived = false;
    2b54:	2600      	movs	r6, #0
    2b56:	e7ee      	b.n	2b36 <wcm_usart_get_com_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_BAD_DATA!\r\n");
    2b58:	2227      	movs	r2, #39	; 0x27
    2b5a:	4913      	ldr	r1, [pc, #76]	; (2ba8 <wcm_usart_get_com_data+0xf4>)
    2b5c:	0028      	movs	r0, r5
    2b5e:	4b0f      	ldr	r3, [pc, #60]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b60:	4798      	blx	r3
			bCommandReceived = false;
    2b62:	2600      	movs	r6, #0
    2b64:	e7e7      	b.n	2b36 <wcm_usart_get_com_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_DENIED!\r\n");
    2b66:	2225      	movs	r2, #37	; 0x25
    2b68:	4910      	ldr	r1, [pc, #64]	; (2bac <wcm_usart_get_com_data+0xf8>)
    2b6a:	0028      	movs	r0, r5
    2b6c:	4b0b      	ldr	r3, [pc, #44]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b6e:	4798      	blx	r3
			bCommandReceived = false;
    2b70:	2600      	movs	r6, #0
    2b72:	e7e0      	b.n	2b36 <wcm_usart_get_com_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_PROTOCOL!\r\n");
    2b74:	2227      	movs	r2, #39	; 0x27
    2b76:	490e      	ldr	r1, [pc, #56]	; (2bb0 <wcm_usart_get_com_data+0xfc>)
    2b78:	0028      	movs	r0, r5
    2b7a:	4b08      	ldr	r3, [pc, #32]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b7c:	4798      	blx	r3
			bCommandReceived = false;
    2b7e:	2600      	movs	r6, #0
    2b80:	e7d9      	b.n	2b36 <wcm_usart_get_com_data+0x82>
				sprintf(command, "usart_read_wait STATUS_ERR_PACKET_COLLISION!\r\n");
    2b82:	222f      	movs	r2, #47	; 0x2f
    2b84:	490b      	ldr	r1, [pc, #44]	; (2bb4 <wcm_usart_get_com_data+0x100>)
    2b86:	0028      	movs	r0, r5
    2b88:	4b04      	ldr	r3, [pc, #16]	; (2b9c <wcm_usart_get_com_data+0xe8>)
    2b8a:	4798      	blx	r3
			bCommandReceived = false;
    2b8c:	2600      	movs	r6, #0
    2b8e:	e7d2      	b.n	2b36 <wcm_usart_get_com_data+0x82>
    2b90:	00003dd1 	.word	0x00003dd1
    2b94:	20000af8 	.word	0x20000af8
    2b98:	0000dd68 	.word	0x0000dd68
    2b9c:	000082ed 	.word	0x000082ed
    2ba0:	0000dc6c 	.word	0x0000dc6c
    2ba4:	0000dc98 	.word	0x0000dc98
    2ba8:	0000dcc0 	.word	0x0000dcc0
    2bac:	0000dce8 	.word	0x0000dce8
    2bb0:	0000dd10 	.word	0x0000dd10
    2bb4:	0000dd38 	.word	0x0000dd38

00002bb8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2bb8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2bba:	2300      	movs	r3, #0
    2bbc:	2200      	movs	r2, #0
    2bbe:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    2bc0:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    2bc2:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2bc4:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2bc6:	2100      	movs	r1, #0
    2bc8:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2bca:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    2bcc:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
    2bce:	2401      	movs	r4, #1
    2bd0:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    2bd2:	24c0      	movs	r4, #192	; 0xc0
    2bd4:	0164      	lsls	r4, r4, #5
    2bd6:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2bd8:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2bda:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    2bdc:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    2bde:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    2be0:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2be2:	242a      	movs	r4, #42	; 0x2a
    2be4:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    2be6:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    2be8:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    2bea:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    2bec:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    2bee:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    2bf0:	3c06      	subs	r4, #6
    2bf2:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2bf4:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2bf6:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2bf8:	7541      	strb	r1, [r0, #21]
}
    2bfa:	bd10      	pop	{r4, pc}

00002bfc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfe:	46ce      	mov	lr, r9
    2c00:	b500      	push	{lr}
    2c02:	b09a      	sub	sp, #104	; 0x68
    2c04:	0005      	movs	r5, r0
    2c06:	0016      	movs	r6, r2

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2c08:	6001      	str	r1, [r0, #0]
			MCLK->APBDMASK.reg |= mask;
    2c0a:	4ab5      	ldr	r2, [pc, #724]	; (2ee0 <adc_init+0x2e4>)
    2c0c:	6a13      	ldr	r3, [r2, #32]
    2c0e:	2008      	movs	r0, #8
    2c10:	4303      	orrs	r3, r0
    2c12:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2c14:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2c16:	3803      	subs	r0, #3
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2c18:	07db      	lsls	r3, r3, #31
    2c1a:	d503      	bpl.n	2c24 <adc_init+0x28>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    2c1c:	b01a      	add	sp, #104	; 0x68
    2c1e:	bc04      	pop	{r2}
    2c20:	4691      	mov	r9, r2
    2c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Adc *const adc_module = module_inst->hw;
    2c24:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2c26:	8c13      	ldrh	r3, [r2, #32]
    2c28:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d1fb      	bne.n	2c26 <adc_init+0x2a>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2c2e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    2c30:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2c32:	079b      	lsls	r3, r3, #30
    2c34:	d4f2      	bmi.n	2c1c <adc_init+0x20>
	module_inst->reference = config->reference;
    2c36:	7873      	ldrb	r3, [r6, #1]
    2c38:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d104      	bne.n	2c48 <adc_init+0x4c>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    2c3e:	4aa9      	ldr	r2, [pc, #676]	; (2ee4 <adc_init+0x2e8>)
    2c40:	69d3      	ldr	r3, [r2, #28]
    2c42:	2104      	movs	r1, #4
    2c44:	430b      	orrs	r3, r1
    2c46:	61d3      	str	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    2c48:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
    2c4a:	7833      	ldrb	r3, [r6, #0]
    2c4c:	466a      	mov	r2, sp
    2c4e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    2c50:	4669      	mov	r1, sp
    2c52:	201e      	movs	r0, #30
    2c54:	4ba4      	ldr	r3, [pc, #656]	; (2ee8 <adc_init+0x2ec>)
    2c56:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    2c58:	201e      	movs	r0, #30
    2c5a:	4ba4      	ldr	r3, [pc, #656]	; (2eec <adc_init+0x2f0>)
    2c5c:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
    2c5e:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
    2c60:	2260      	movs	r2, #96	; 0x60
    2c62:	49a3      	ldr	r1, [pc, #652]	; (2ef0 <adc_init+0x2f4>)
    2c64:	a802      	add	r0, sp, #8
    2c66:	4ba3      	ldr	r3, [pc, #652]	; (2ef4 <adc_init+0x2f8>)
    2c68:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    2c6a:	2c13      	cmp	r4, #19
    2c6c:	d90b      	bls.n	2c86 <adc_init+0x8a>
	_adc_configure_ain_pin(index, config->negative_input);
    2c6e:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
    2c70:	2260      	movs	r2, #96	; 0x60
    2c72:	499f      	ldr	r1, [pc, #636]	; (2ef0 <adc_init+0x2f4>)
    2c74:	a802      	add	r0, sp, #8
    2c76:	4b9f      	ldr	r3, [pc, #636]	; (2ef4 <adc_init+0x2f8>)
    2c78:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    2c7a:	2c13      	cmp	r4, #19
    2c7c:	d911      	bls.n	2ca2 <adc_init+0xa6>
    2c7e:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
    2c80:	4b9c      	ldr	r3, [pc, #624]	; (2ef4 <adc_init+0x2f8>)
    2c82:	4699      	mov	r9, r3
    2c84:	e01e      	b.n	2cc4 <adc_init+0xc8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2c86:	00a4      	lsls	r4, r4, #2
    2c88:	ab02      	add	r3, sp, #8
    2c8a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c8c:	a901      	add	r1, sp, #4
    2c8e:	2300      	movs	r3, #0
    2c90:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2c92:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2c94:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2c96:	3301      	adds	r3, #1
    2c98:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2c9a:	b2c0      	uxtb	r0, r0
    2c9c:	4b96      	ldr	r3, [pc, #600]	; (2ef8 <adc_init+0x2fc>)
    2c9e:	4798      	blx	r3
    2ca0:	e7e5      	b.n	2c6e <adc_init+0x72>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2ca2:	00a4      	lsls	r4, r4, #2
    2ca4:	ab02      	add	r3, sp, #8
    2ca6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ca8:	a901      	add	r1, sp, #4
    2caa:	2300      	movs	r3, #0
    2cac:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2cae:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2cb0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2cb2:	3301      	adds	r3, #1
    2cb4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2cb6:	b2c0      	uxtb	r0, r0
    2cb8:	4b8f      	ldr	r3, [pc, #572]	; (2ef8 <adc_init+0x2fc>)
    2cba:	4798      	blx	r3
    2cbc:	e7df      	b.n	2c7e <adc_init+0x82>
    2cbe:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    2cc0:	2c14      	cmp	r4, #20
    2cc2:	d018      	beq.n	2cf6 <adc_init+0xfa>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    2cc4:	2301      	movs	r3, #1
    2cc6:	40a3      	lsls	r3, r4
    2cc8:	6932      	ldr	r2, [r6, #16]
    2cca:	421a      	tst	r2, r3
    2ccc:	d0f7      	beq.n	2cbe <adc_init+0xc2>
	const uint32_t pinmapping[] = {
    2cce:	2260      	movs	r2, #96	; 0x60
    2cd0:	4987      	ldr	r1, [pc, #540]	; (2ef0 <adc_init+0x2f4>)
    2cd2:	a802      	add	r0, sp, #8
    2cd4:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
    2cd6:	2c13      	cmp	r4, #19
    2cd8:	d8f1      	bhi.n	2cbe <adc_init+0xc2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2cda:	00a3      	lsls	r3, r4, #2
    2cdc:	aa02      	add	r2, sp, #8
    2cde:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ce0:	a901      	add	r1, sp, #4
    2ce2:	2300      	movs	r3, #0
    2ce4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2ce6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ce8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2cea:	3301      	adds	r3, #1
    2cec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2cee:	b2c0      	uxtb	r0, r0
    2cf0:	4b81      	ldr	r3, [pc, #516]	; (2ef8 <adc_init+0x2fc>)
    2cf2:	4798      	blx	r3
    2cf4:	e7e3      	b.n	2cbe <adc_init+0xc2>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2cf6:	7b73      	ldrb	r3, [r6, #13]
    2cf8:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
    2cfa:	7bb2      	ldrb	r2, [r6, #14]
    2cfc:	01d2      	lsls	r2, r2, #7
    2cfe:	4313      	orrs	r3, r2
    2d00:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2d02:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
    2d04:	7d33      	ldrb	r3, [r6, #20]
    2d06:	01db      	lsls	r3, r3, #7
			| (config->reference);
    2d08:	7872      	ldrb	r2, [r6, #1]
    2d0a:	4313      	orrs	r3, r2
    2d0c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    2d0e:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
    2d10:	78f3      	ldrb	r3, [r6, #3]
    2d12:	2b34      	cmp	r3, #52	; 0x34
    2d14:	d900      	bls.n	2d18 <adc_init+0x11c>
    2d16:	e133      	b.n	2f80 <adc_init+0x384>
    2d18:	009b      	lsls	r3, r3, #2
    2d1a:	4a78      	ldr	r2, [pc, #480]	; (2efc <adc_init+0x300>)
    2d1c:	58d3      	ldr	r3, [r2, r3]
    2d1e:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2d20:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
    2d22:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    2d24:	2102      	movs	r1, #2
    2d26:	e01a      	b.n	2d5e <adc_init+0x162>
		adjres = config->divide_result;
    2d28:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
    2d2a:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
    2d2c:	2410      	movs	r4, #16
    2d2e:	e016      	b.n	2d5e <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2d30:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
    2d32:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2d34:	2101      	movs	r1, #1
    2d36:	e012      	b.n	2d5e <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2d38:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
    2d3a:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2d3c:	2100      	movs	r1, #0
    2d3e:	e00e      	b.n	2d5e <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2d40:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
    2d42:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    2d44:	2100      	movs	r1, #0
    2d46:	e00a      	b.n	2d5e <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2d48:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
    2d4a:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    2d4c:	2100      	movs	r1, #0
    2d4e:	e006      	b.n	2d5e <adc_init+0x162>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2d50:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
    2d52:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    2d54:	2100      	movs	r1, #0
    2d56:	e002      	b.n	2d5e <adc_init+0x162>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2d58:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
    2d5a:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2d5c:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2d5e:	0109      	lsls	r1, r1, #4
    2d60:	2370      	movs	r3, #112	; 0x70
    2d62:	400b      	ands	r3, r1
    2d64:	4313      	orrs	r3, r2
    2d66:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
    2d68:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2d6a:	8c13      	ldrh	r3, [r2, #32]
    2d6c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d1fb      	bne.n	2d6a <adc_init+0x16e>
	if (config->sample_length > 63) {
    2d72:	7d73      	ldrb	r3, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
    2d74:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    2d76:	2b3f      	cmp	r3, #63	; 0x3f
    2d78:	d900      	bls.n	2d7c <adc_init+0x180>
    2d7a:	e74f      	b.n	2c1c <adc_init+0x20>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
    2d7c:	7bf2      	ldrb	r2, [r6, #15]
    2d7e:	01d2      	lsls	r2, r2, #7
    2d80:	4313      	orrs	r3, r2
    2d82:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
    2d84:	737b      	strb	r3, [r7, #13]
	Adc *const adc_module = module_inst->hw;
    2d86:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2d88:	8c13      	ldrh	r3, [r2, #32]
    2d8a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d1fb      	bne.n	2d88 <adc_init+0x18c>
			config->clock_prescaler;
    2d90:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
    2d92:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    2d94:	2324      	movs	r3, #36	; 0x24
    2d96:	5cf3      	ldrb	r3, [r6, r3]
    2d98:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
    2d9a:	7b32      	ldrb	r2, [r6, #12]
    2d9c:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    2d9e:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
    2da0:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    2da2:	4313      	orrs	r3, r2
    2da4:	7ab2      	ldrb	r2, [r6, #10]
    2da6:	0052      	lsls	r2, r2, #1
    2da8:	4313      	orrs	r3, r2
    2daa:	4323      	orrs	r3, r4
	adc_module->CTRLC.reg =
    2dac:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    2dae:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2db0:	8c13      	ldrh	r3, [r2, #32]
    2db2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2db4:	2b00      	cmp	r3, #0
    2db6:	d1fb      	bne.n	2db0 <adc_init+0x1b4>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2db8:	8b33      	ldrh	r3, [r6, #24]
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d01f      	beq.n	2dfe <adc_init+0x202>
		switch (resolution) {
    2dbe:	2c10      	cmp	r4, #16
    2dc0:	d100      	bne.n	2dc4 <adc_init+0x1c8>
    2dc2:	e0bf      	b.n	2f44 <adc_init+0x348>
    2dc4:	d96b      	bls.n	2e9e <adc_init+0x2a2>
    2dc6:	2c20      	cmp	r4, #32
    2dc8:	d100      	bne.n	2dcc <adc_init+0x1d0>
    2dca:	e09d      	b.n	2f08 <adc_init+0x30c>
    2dcc:	2c30      	cmp	r4, #48	; 0x30
    2dce:	d116      	bne.n	2dfe <adc_init+0x202>
			if (config->differential_mode &&
    2dd0:	7af2      	ldrb	r2, [r6, #11]
    2dd2:	2a00      	cmp	r2, #0
    2dd4:	d00a      	beq.n	2dec <adc_init+0x1f0>
					(config->window.window_lower_value > 127 ||
    2dd6:	69f2      	ldr	r2, [r6, #28]
    2dd8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    2dda:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2ddc:	2aff      	cmp	r2, #255	; 0xff
    2dde:	d900      	bls.n	2de2 <adc_init+0x1e6>
    2de0:	e71c      	b.n	2c1c <adc_init+0x20>
					config->window.window_lower_value < -128 ||
    2de2:	6a32      	ldr	r2, [r6, #32]
    2de4:	3280      	adds	r2, #128	; 0x80
    2de6:	2aff      	cmp	r2, #255	; 0xff
    2de8:	d900      	bls.n	2dec <adc_init+0x1f0>
    2dea:	e717      	b.n	2c1c <adc_init+0x20>
				return STATUS_ERR_INVALID_ARG;
    2dec:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    2dee:	69f2      	ldr	r2, [r6, #28]
    2df0:	2aff      	cmp	r2, #255	; 0xff
    2df2:	dd00      	ble.n	2df6 <adc_init+0x1fa>
    2df4:	e712      	b.n	2c1c <adc_init+0x20>
    2df6:	6a32      	ldr	r2, [r6, #32]
    2df8:	2aff      	cmp	r2, #255	; 0xff
    2dfa:	dd00      	ble.n	2dfe <adc_init+0x202>
    2dfc:	e70e      	b.n	2c1c <adc_init+0x20>
	adc_module->CTRLC.reg |= config->window.window_mode;
    2dfe:	897a      	ldrh	r2, [r7, #10]
    2e00:	4313      	orrs	r3, r2
    2e02:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    2e04:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2e06:	8c13      	ldrh	r3, [r2, #32]
    2e08:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d1fb      	bne.n	2e06 <adc_init+0x20a>
	adc_module->WINLT.reg =
    2e0e:	8bb3      	ldrh	r3, [r6, #28]
    2e10:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
    2e12:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2e14:	8c13      	ldrh	r3, [r2, #32]
    2e16:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d1fb      	bne.n	2e14 <adc_init+0x218>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2e1c:	8c33      	ldrh	r3, [r6, #32]
    2e1e:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
    2e20:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2e22:	8c13      	ldrh	r3, [r2, #32]
    2e24:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2e26:	2b00      	cmp	r3, #0
    2e28:	d1fb      	bne.n	2e22 <adc_init+0x226>
			config->positive_input;
    2e2a:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
    2e2c:	88f2      	ldrh	r2, [r6, #6]
    2e2e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    2e30:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
    2e32:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2e34:	8c13      	ldrh	r3, [r2, #32]
    2e36:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d1fb      	bne.n	2e34 <adc_init+0x238>
	adc_module->EVCTRL.reg = config->event_action;
    2e3c:	332a      	adds	r3, #42	; 0x2a
    2e3e:	5cf3      	ldrb	r3, [r6, r3]
    2e40:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
    2e42:	2307      	movs	r3, #7
    2e44:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
    2e46:	331d      	adds	r3, #29
    2e48:	5cf3      	ldrb	r3, [r6, r3]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d01b      	beq.n	2e86 <adc_init+0x28a>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2e4e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    2e50:	4a2b      	ldr	r2, [pc, #172]	; (2f00 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
    2e52:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2e54:	4293      	cmp	r3, r2
    2e56:	d900      	bls.n	2e5a <adc_init+0x25e>
    2e58:	e6e0      	b.n	2c1c <adc_init+0x20>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2e5a:	827b      	strh	r3, [r7, #18]
	Adc *const adc_module = module_inst->hw;
    2e5c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2e5e:	8c13      	ldrh	r3, [r2, #32]
    2e60:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    2e62:	2b00      	cmp	r3, #0
    2e64:	d1fb      	bne.n	2e5e <adc_init+0x262>
		if (config->correction.offset_correction > 2047 ||
    2e66:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    2e68:	2380      	movs	r3, #128	; 0x80
    2e6a:	011b      	lsls	r3, r3, #4
    2e6c:	18d3      	adds	r3, r2, r3
    2e6e:	4924      	ldr	r1, [pc, #144]	; (2f00 <adc_init+0x304>)
    2e70:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
    2e72:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
    2e74:	428b      	cmp	r3, r1
    2e76:	d900      	bls.n	2e7a <adc_init+0x27e>
    2e78:	e6d0      	b.n	2c1c <adc_init+0x20>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2e7a:	82ba      	strh	r2, [r7, #20]
	Adc *const adc_module = module_inst->hw;
    2e7c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2e7e:	8c13      	ldrh	r3, [r2, #32]
    2e80:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    2e82:	2b00      	cmp	r3, #0
    2e84:	d1fb      	bne.n	2e7e <adc_init+0x282>
			ADC_CALIB_BIASREFBUF(
    2e86:	4b1f      	ldr	r3, [pc, #124]	; (2f04 <adc_init+0x308>)
    2e88:	681b      	ldr	r3, [r3, #0]
    2e8a:	021a      	lsls	r2, r3, #8
    2e8c:	21e0      	movs	r1, #224	; 0xe0
    2e8e:	00c9      	lsls	r1, r1, #3
    2e90:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
    2e92:	069b      	lsls	r3, r3, #26
    2e94:	0f5b      	lsrs	r3, r3, #29
			) |
    2e96:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    2e98:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
    2e9a:	2000      	movs	r0, #0
    2e9c:	e6be      	b.n	2c1c <adc_init+0x20>
		switch (resolution) {
    2e9e:	2c00      	cmp	r4, #0
    2ea0:	d1ad      	bne.n	2dfe <adc_init+0x202>
			if (config->differential_mode &&
    2ea2:	7af2      	ldrb	r2, [r6, #11]
    2ea4:	2a00      	cmp	r2, #0
    2ea6:	d00f      	beq.n	2ec8 <adc_init+0x2cc>
					(config->window.window_lower_value > 2047 ||
    2ea8:	69f2      	ldr	r2, [r6, #28]
    2eaa:	2180      	movs	r1, #128	; 0x80
    2eac:	0109      	lsls	r1, r1, #4
    2eae:	468c      	mov	ip, r1
    2eb0:	4462      	add	r2, ip
			if (config->differential_mode &&
    2eb2:	4913      	ldr	r1, [pc, #76]	; (2f00 <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
    2eb4:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2eb6:	428a      	cmp	r2, r1
    2eb8:	d900      	bls.n	2ebc <adc_init+0x2c0>
    2eba:	e6af      	b.n	2c1c <adc_init+0x20>
					config->window.window_lower_value < -2048 ||
    2ebc:	6a32      	ldr	r2, [r6, #32]
    2ebe:	4462      	add	r2, ip
    2ec0:	490f      	ldr	r1, [pc, #60]	; (2f00 <adc_init+0x304>)
    2ec2:	428a      	cmp	r2, r1
    2ec4:	d900      	bls.n	2ec8 <adc_init+0x2cc>
    2ec6:	e6a9      	b.n	2c1c <adc_init+0x20>
			} else if (config->window.window_lower_value > 4095 ||
    2ec8:	4a0d      	ldr	r2, [pc, #52]	; (2f00 <adc_init+0x304>)
				return STATUS_ERR_INVALID_ARG;
    2eca:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    2ecc:	69f1      	ldr	r1, [r6, #28]
    2ece:	4291      	cmp	r1, r2
    2ed0:	dd00      	ble.n	2ed4 <adc_init+0x2d8>
    2ed2:	e6a3      	b.n	2c1c <adc_init+0x20>
    2ed4:	6a31      	ldr	r1, [r6, #32]
    2ed6:	4291      	cmp	r1, r2
    2ed8:	dd00      	ble.n	2edc <adc_init+0x2e0>
    2eda:	e69f      	b.n	2c1c <adc_init+0x20>
    2edc:	e78f      	b.n	2dfe <adc_init+0x202>
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	40000400 	.word	0x40000400
    2ee4:	40001400 	.word	0x40001400
    2ee8:	00005975 	.word	0x00005975
    2eec:	00005905 	.word	0x00005905
    2ef0:	0000de58 	.word	0x0000de58
    2ef4:	000082ed 	.word	0x000082ed
    2ef8:	00005a71 	.word	0x00005a71
    2efc:	0000dd84 	.word	0x0000dd84
    2f00:	00000fff 	.word	0x00000fff
    2f04:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    2f08:	7af2      	ldrb	r2, [r6, #11]
    2f0a:	2a00      	cmp	r2, #0
    2f0c:	d00f      	beq.n	2f2e <adc_init+0x332>
					(config->window.window_lower_value > 511 ||
    2f0e:	69f2      	ldr	r2, [r6, #28]
    2f10:	2180      	movs	r1, #128	; 0x80
    2f12:	0089      	lsls	r1, r1, #2
    2f14:	468c      	mov	ip, r1
    2f16:	4462      	add	r2, ip
			if (config->differential_mode &&
    2f18:	491a      	ldr	r1, [pc, #104]	; (2f84 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
    2f1a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2f1c:	428a      	cmp	r2, r1
    2f1e:	d900      	bls.n	2f22 <adc_init+0x326>
    2f20:	e67c      	b.n	2c1c <adc_init+0x20>
					config->window.window_lower_value < -512 ||
    2f22:	6a32      	ldr	r2, [r6, #32]
    2f24:	4462      	add	r2, ip
    2f26:	4917      	ldr	r1, [pc, #92]	; (2f84 <adc_init+0x388>)
    2f28:	428a      	cmp	r2, r1
    2f2a:	d900      	bls.n	2f2e <adc_init+0x332>
    2f2c:	e676      	b.n	2c1c <adc_init+0x20>
			} else if (config->window.window_lower_value > 1023 ||
    2f2e:	4a15      	ldr	r2, [pc, #84]	; (2f84 <adc_init+0x388>)
				return STATUS_ERR_INVALID_ARG;
    2f30:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    2f32:	69f1      	ldr	r1, [r6, #28]
    2f34:	4291      	cmp	r1, r2
    2f36:	dd00      	ble.n	2f3a <adc_init+0x33e>
    2f38:	e670      	b.n	2c1c <adc_init+0x20>
    2f3a:	6a31      	ldr	r1, [r6, #32]
    2f3c:	4291      	cmp	r1, r2
    2f3e:	dd00      	ble.n	2f42 <adc_init+0x346>
    2f40:	e66c      	b.n	2c1c <adc_init+0x20>
    2f42:	e75c      	b.n	2dfe <adc_init+0x202>
			if (config->differential_mode &&
    2f44:	7af2      	ldrb	r2, [r6, #11]
    2f46:	2a00      	cmp	r2, #0
    2f48:	d00f      	beq.n	2f6a <adc_init+0x36e>
					(config->window.window_lower_value > 32767 ||
    2f4a:	69f2      	ldr	r2, [r6, #28]
    2f4c:	2180      	movs	r1, #128	; 0x80
    2f4e:	0209      	lsls	r1, r1, #8
    2f50:	468c      	mov	ip, r1
    2f52:	4462      	add	r2, ip
			if (config->differential_mode &&
    2f54:	490c      	ldr	r1, [pc, #48]	; (2f88 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
    2f56:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2f58:	428a      	cmp	r2, r1
    2f5a:	d900      	bls.n	2f5e <adc_init+0x362>
    2f5c:	e65e      	b.n	2c1c <adc_init+0x20>
					config->window.window_lower_value < -32768 ||
    2f5e:	6a32      	ldr	r2, [r6, #32]
    2f60:	4462      	add	r2, ip
    2f62:	4909      	ldr	r1, [pc, #36]	; (2f88 <adc_init+0x38c>)
    2f64:	428a      	cmp	r2, r1
    2f66:	d900      	bls.n	2f6a <adc_init+0x36e>
    2f68:	e658      	b.n	2c1c <adc_init+0x20>
			} else if (config->window.window_lower_value > 65535 ||
    2f6a:	4a07      	ldr	r2, [pc, #28]	; (2f88 <adc_init+0x38c>)
				return STATUS_ERR_INVALID_ARG;
    2f6c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    2f6e:	69f1      	ldr	r1, [r6, #28]
    2f70:	4291      	cmp	r1, r2
    2f72:	dd00      	ble.n	2f76 <adc_init+0x37a>
    2f74:	e652      	b.n	2c1c <adc_init+0x20>
    2f76:	6a31      	ldr	r1, [r6, #32]
    2f78:	4291      	cmp	r1, r2
    2f7a:	dd00      	ble.n	2f7e <adc_init+0x382>
    2f7c:	e64e      	b.n	2c1c <adc_init+0x20>
    2f7e:	e73e      	b.n	2dfe <adc_init+0x202>
		return STATUS_ERR_INVALID_ARG;
    2f80:	2017      	movs	r0, #23
    2f82:	e64b      	b.n	2c1c <adc_init+0x20>
    2f84:	000003ff 	.word	0x000003ff
    2f88:	0000ffff 	.word	0x0000ffff

00002f8c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2f8c:	4a06      	ldr	r2, [pc, #24]	; (2fa8 <_extint_enable+0x1c>)
    2f8e:	7813      	ldrb	r3, [r2, #0]
    2f90:	2102      	movs	r1, #2
    2f92:	430b      	orrs	r3, r1
    2f94:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2f96:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2f98:	6853      	ldr	r3, [r2, #4]
    2f9a:	4219      	tst	r1, r3
    2f9c:	d1fc      	bne.n	2f98 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2f9e:	6853      	ldr	r3, [r2, #4]
    2fa0:	4218      	tst	r0, r3
    2fa2:	d1f9      	bne.n	2f98 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2fa4:	4770      	bx	lr
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	40002400 	.word	0x40002400

00002fac <_system_extint_init>:
{
    2fac:	b500      	push	{lr}
    2fae:	b083      	sub	sp, #12
			MCLK->APBAMASK.reg |= mask;
    2fb0:	4a17      	ldr	r2, [pc, #92]	; (3010 <_system_extint_init+0x64>)
    2fb2:	6951      	ldr	r1, [r2, #20]
    2fb4:	2380      	movs	r3, #128	; 0x80
    2fb6:	009b      	lsls	r3, r3, #2
    2fb8:	430b      	orrs	r3, r1
    2fba:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2fbc:	a901      	add	r1, sp, #4
    2fbe:	2300      	movs	r3, #0
    2fc0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2fc2:	2003      	movs	r0, #3
    2fc4:	4b13      	ldr	r3, [pc, #76]	; (3014 <_system_extint_init+0x68>)
    2fc6:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2fc8:	2003      	movs	r0, #3
    2fca:	4b13      	ldr	r3, [pc, #76]	; (3018 <_system_extint_init+0x6c>)
    2fcc:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    2fce:	4a13      	ldr	r2, [pc, #76]	; (301c <_system_extint_init+0x70>)
    2fd0:	7813      	ldrb	r3, [r2, #0]
    2fd2:	2101      	movs	r1, #1
    2fd4:	430b      	orrs	r3, r1
    2fd6:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2fd8:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2fda:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    2fdc:	6853      	ldr	r3, [r2, #4]
    2fde:	4219      	tst	r1, r3
    2fe0:	d1fc      	bne.n	2fdc <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    2fe2:	6853      	ldr	r3, [r2, #4]
    2fe4:	4218      	tst	r0, r3
    2fe6:	d1f9      	bne.n	2fdc <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    2fe8:	4a0c      	ldr	r2, [pc, #48]	; (301c <_system_extint_init+0x70>)
    2fea:	7813      	ldrb	r3, [r2, #0]
    2fec:	2110      	movs	r1, #16
    2fee:	438b      	bics	r3, r1
    2ff0:	7013      	strb	r3, [r2, #0]
    2ff2:	4b0b      	ldr	r3, [pc, #44]	; (3020 <_system_extint_init+0x74>)
    2ff4:	0019      	movs	r1, r3
    2ff6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2ff8:	2200      	movs	r2, #0
    2ffa:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2ffc:	428b      	cmp	r3, r1
    2ffe:	d1fc      	bne.n	2ffa <_system_extint_init+0x4e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3000:	2208      	movs	r2, #8
    3002:	4b08      	ldr	r3, [pc, #32]	; (3024 <_system_extint_init+0x78>)
    3004:	601a      	str	r2, [r3, #0]
	_extint_enable();
    3006:	4b08      	ldr	r3, [pc, #32]	; (3028 <_system_extint_init+0x7c>)
    3008:	4798      	blx	r3
}
    300a:	b003      	add	sp, #12
    300c:	bd00      	pop	{pc}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	40000400 	.word	0x40000400
    3014:	00005975 	.word	0x00005975
    3018:	00005905 	.word	0x00005905
    301c:	40002400 	.word	0x40002400
    3020:	20000c88 	.word	0x20000c88
    3024:	e000e100 	.word	0xe000e100
    3028:	00002f8d 	.word	0x00002f8d

0000302c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    302c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    302e:	2207      	movs	r2, #7
    3030:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    3032:	421a      	tst	r2, r3
    3034:	d1fc      	bne.n	3030 <_i2c_master_wait_for_sync+0x4>
}
    3036:	4770      	bx	lr

00003038 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3038:	b5f0      	push	{r4, r5, r6, r7, lr}
    303a:	46d6      	mov	lr, sl
    303c:	464f      	mov	r7, r9
    303e:	4646      	mov	r6, r8
    3040:	b5c0      	push	{r6, r7, lr}
    3042:	b08a      	sub	sp, #40	; 0x28
    3044:	0007      	movs	r7, r0
    3046:	000e      	movs	r6, r1
    3048:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    304a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    304c:	0008      	movs	r0, r1
    304e:	4b9c      	ldr	r3, [pc, #624]	; (32c0 <i2c_master_init+0x288>)
    3050:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    3052:	2805      	cmp	r0, #5
    3054:	d100      	bne.n	3058 <i2c_master_init+0x20>
    3056:	e12b      	b.n	32b0 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3058:	0005      	movs	r5, r0
    305a:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    305c:	4a99      	ldr	r2, [pc, #612]	; (32c4 <i2c_master_init+0x28c>)
    305e:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3060:	2301      	movs	r3, #1
    3062:	4083      	lsls	r3, r0
    3064:	430b      	orrs	r3, r1
    3066:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3068:	a909      	add	r1, sp, #36	; 0x24
    306a:	7b23      	ldrb	r3, [r4, #12]
    306c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    306e:	b2ed      	uxtb	r5, r5
    3070:	0028      	movs	r0, r5
    3072:	4b95      	ldr	r3, [pc, #596]	; (32c8 <i2c_master_init+0x290>)
    3074:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3076:	0028      	movs	r0, r5
    3078:	4b94      	ldr	r3, [pc, #592]	; (32cc <i2c_master_init+0x294>)
    307a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    307c:	7b20      	ldrb	r0, [r4, #12]
    307e:	2100      	movs	r1, #0
    3080:	4b93      	ldr	r3, [pc, #588]	; (32d0 <i2c_master_init+0x298>)
    3082:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3084:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    3086:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3088:	079b      	lsls	r3, r3, #30
    308a:	d505      	bpl.n	3098 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    308c:	b00a      	add	sp, #40	; 0x28
    308e:	bc1c      	pop	{r2, r3, r4}
    3090:	4690      	mov	r8, r2
    3092:	4699      	mov	r9, r3
    3094:	46a2      	mov	sl, r4
    3096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3098:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    309a:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    309c:	07db      	lsls	r3, r3, #31
    309e:	d4f5      	bmi.n	308c <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    30a0:	2314      	movs	r3, #20
    30a2:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    30a4:	683b      	ldr	r3, [r7, #0]
    30a6:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    30a8:	0018      	movs	r0, r3
    30aa:	4b85      	ldr	r3, [pc, #532]	; (32c0 <i2c_master_init+0x288>)
    30ac:	4798      	blx	r3
    30ae:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    30b0:	2380      	movs	r3, #128	; 0x80
    30b2:	aa08      	add	r2, sp, #32
    30b4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    30b6:	2300      	movs	r3, #0
    30b8:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    30ba:	2201      	movs	r2, #1
    30bc:	a908      	add	r1, sp, #32
    30be:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    30c0:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    30c2:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    30c4:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    30c6:	2800      	cmp	r0, #0
    30c8:	d100      	bne.n	30cc <i2c_master_init+0x94>
    30ca:	e0ae      	b.n	322a <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    30cc:	ab08      	add	r3, sp, #32
    30ce:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    30d0:	2302      	movs	r3, #2
    30d2:	aa08      	add	r2, sp, #32
    30d4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    30d6:	0c00      	lsrs	r0, r0, #16
    30d8:	b2c0      	uxtb	r0, r0
    30da:	0011      	movs	r1, r2
    30dc:	4b7d      	ldr	r3, [pc, #500]	; (32d4 <i2c_master_init+0x29c>)
    30de:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    30e0:	2e00      	cmp	r6, #0
    30e2:	d100      	bne.n	30e6 <i2c_master_init+0xae>
    30e4:	e0a6      	b.n	3234 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    30e6:	ab08      	add	r3, sp, #32
    30e8:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    30ea:	2302      	movs	r3, #2
    30ec:	aa08      	add	r2, sp, #32
    30ee:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    30f0:	0c36      	lsrs	r6, r6, #16
    30f2:	b2f0      	uxtb	r0, r6
    30f4:	0011      	movs	r1, r2
    30f6:	4b77      	ldr	r3, [pc, #476]	; (32d4 <i2c_master_init+0x29c>)
    30f8:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    30fa:	8aa3      	ldrh	r3, [r4, #20]
    30fc:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    30fe:	8ae3      	ldrh	r3, [r4, #22]
    3100:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    3102:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3104:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    3106:	2b00      	cmp	r3, #0
    3108:	d104      	bne.n	3114 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    310a:	4b73      	ldr	r3, [pc, #460]	; (32d8 <i2c_master_init+0x2a0>)
    310c:	789b      	ldrb	r3, [r3, #2]
    310e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3110:	0fdb      	lsrs	r3, r3, #31
    3112:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    3114:	68a1      	ldr	r1, [r4, #8]
    3116:	6923      	ldr	r3, [r4, #16]
    3118:	430b      	orrs	r3, r1
    311a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    311c:	2224      	movs	r2, #36	; 0x24
    311e:	5ca2      	ldrb	r2, [r4, r2]
    3120:	2a00      	cmp	r2, #0
    3122:	d002      	beq.n	312a <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3124:	2280      	movs	r2, #128	; 0x80
    3126:	05d2      	lsls	r2, r2, #23
    3128:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    312a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    312c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    312e:	222c      	movs	r2, #44	; 0x2c
    3130:	5ca2      	ldrb	r2, [r4, r2]
    3132:	2a00      	cmp	r2, #0
    3134:	d103      	bne.n	313e <i2c_master_init+0x106>
    3136:	2280      	movs	r2, #128	; 0x80
    3138:	0492      	lsls	r2, r2, #18
    313a:	4291      	cmp	r1, r2
    313c:	d102      	bne.n	3144 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    313e:	2280      	movs	r2, #128	; 0x80
    3140:	0512      	lsls	r2, r2, #20
    3142:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    3144:	222d      	movs	r2, #45	; 0x2d
    3146:	5ca2      	ldrb	r2, [r4, r2]
    3148:	2a00      	cmp	r2, #0
    314a:	d002      	beq.n	3152 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    314c:	2280      	movs	r2, #128	; 0x80
    314e:	0412      	lsls	r2, r2, #16
    3150:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    3152:	222e      	movs	r2, #46	; 0x2e
    3154:	5ca2      	ldrb	r2, [r4, r2]
    3156:	2a00      	cmp	r2, #0
    3158:	d002      	beq.n	3160 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    315a:	2280      	movs	r2, #128	; 0x80
    315c:	03d2      	lsls	r2, r2, #15
    315e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3160:	4642      	mov	r2, r8
    3162:	6812      	ldr	r2, [r2, #0]
    3164:	4313      	orrs	r3, r2
    3166:	4642      	mov	r2, r8
    3168:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    316a:	2380      	movs	r3, #128	; 0x80
    316c:	005b      	lsls	r3, r3, #1
    316e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3170:	3512      	adds	r5, #18
    3172:	b2e8      	uxtb	r0, r5
    3174:	4b59      	ldr	r3, [pc, #356]	; (32dc <i2c_master_init+0x2a4>)
    3176:	4798      	blx	r3
    3178:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    317a:	23fa      	movs	r3, #250	; 0xfa
    317c:	009b      	lsls	r3, r3, #2
    317e:	6822      	ldr	r2, [r4, #0]
    3180:	435a      	muls	r2, r3
    3182:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3184:	6863      	ldr	r3, [r4, #4]
    3186:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    3188:	4d55      	ldr	r5, [pc, #340]	; (32e0 <i2c_master_init+0x2a8>)
    318a:	47a8      	blx	r5
    318c:	9000      	str	r0, [sp, #0]
    318e:	9101      	str	r1, [sp, #4]
    3190:	464b      	mov	r3, r9
    3192:	0058      	lsls	r0, r3, #1
    3194:	47a8      	blx	r5
    3196:	9002      	str	r0, [sp, #8]
    3198:	9103      	str	r1, [sp, #12]
    319a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    319c:	47a8      	blx	r5
    319e:	9004      	str	r0, [sp, #16]
    31a0:	9105      	str	r1, [sp, #20]
    31a2:	4f50      	ldr	r7, [pc, #320]	; (32e4 <i2c_master_init+0x2ac>)
    31a4:	4a50      	ldr	r2, [pc, #320]	; (32e8 <i2c_master_init+0x2b0>)
    31a6:	4b51      	ldr	r3, [pc, #324]	; (32ec <i2c_master_init+0x2b4>)
    31a8:	9800      	ldr	r0, [sp, #0]
    31aa:	9901      	ldr	r1, [sp, #4]
    31ac:	47b8      	blx	r7
    31ae:	0002      	movs	r2, r0
    31b0:	000b      	movs	r3, r1
    31b2:	9804      	ldr	r0, [sp, #16]
    31b4:	9905      	ldr	r1, [sp, #20]
    31b6:	47b8      	blx	r7
    31b8:	4e4d      	ldr	r6, [pc, #308]	; (32f0 <i2c_master_init+0x2b8>)
    31ba:	2200      	movs	r2, #0
    31bc:	4b4d      	ldr	r3, [pc, #308]	; (32f4 <i2c_master_init+0x2bc>)
    31be:	47b0      	blx	r6
    31c0:	9004      	str	r0, [sp, #16]
    31c2:	9105      	str	r1, [sp, #20]
    31c4:	4648      	mov	r0, r9
    31c6:	47a8      	blx	r5
    31c8:	0002      	movs	r2, r0
    31ca:	000b      	movs	r3, r1
    31cc:	9804      	ldr	r0, [sp, #16]
    31ce:	9905      	ldr	r1, [sp, #20]
    31d0:	47b8      	blx	r7
    31d2:	0002      	movs	r2, r0
    31d4:	000b      	movs	r3, r1
    31d6:	4d48      	ldr	r5, [pc, #288]	; (32f8 <i2c_master_init+0x2c0>)
    31d8:	9800      	ldr	r0, [sp, #0]
    31da:	9901      	ldr	r1, [sp, #4]
    31dc:	47a8      	blx	r5
    31de:	9a02      	ldr	r2, [sp, #8]
    31e0:	9b03      	ldr	r3, [sp, #12]
    31e2:	47b0      	blx	r6
    31e4:	2200      	movs	r2, #0
    31e6:	4b45      	ldr	r3, [pc, #276]	; (32fc <i2c_master_init+0x2c4>)
    31e8:	47a8      	blx	r5
    31ea:	9a02      	ldr	r2, [sp, #8]
    31ec:	9b03      	ldr	r3, [sp, #12]
    31ee:	4d44      	ldr	r5, [pc, #272]	; (3300 <i2c_master_init+0x2c8>)
    31f0:	47a8      	blx	r5
    31f2:	4b44      	ldr	r3, [pc, #272]	; (3304 <i2c_master_init+0x2cc>)
    31f4:	4798      	blx	r3
    31f6:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    31f8:	2380      	movs	r3, #128	; 0x80
    31fa:	049b      	lsls	r3, r3, #18
    31fc:	68a2      	ldr	r2, [r4, #8]
    31fe:	429a      	cmp	r2, r3
    3200:	d01e      	beq.n	3240 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3202:	0003      	movs	r3, r0
    3204:	2040      	movs	r0, #64	; 0x40
    3206:	2dff      	cmp	r5, #255	; 0xff
    3208:	d900      	bls.n	320c <i2c_master_init+0x1d4>
    320a:	e73f      	b.n	308c <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    320c:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    320e:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3210:	25ff      	movs	r5, #255	; 0xff
    3212:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3214:	0624      	lsls	r4, r4, #24
    3216:	4325      	orrs	r5, r4
    3218:	0400      	lsls	r0, r0, #16
    321a:	23ff      	movs	r3, #255	; 0xff
    321c:	041b      	lsls	r3, r3, #16
    321e:	4018      	ands	r0, r3
    3220:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3222:	4643      	mov	r3, r8
    3224:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    3226:	2000      	movs	r0, #0
    3228:	e730      	b.n	308c <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    322a:	2100      	movs	r1, #0
    322c:	4640      	mov	r0, r8
    322e:	4b36      	ldr	r3, [pc, #216]	; (3308 <i2c_master_init+0x2d0>)
    3230:	4798      	blx	r3
    3232:	e74b      	b.n	30cc <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3234:	2101      	movs	r1, #1
    3236:	4640      	mov	r0, r8
    3238:	4b33      	ldr	r3, [pc, #204]	; (3308 <i2c_master_init+0x2d0>)
    323a:	4798      	blx	r3
    323c:	0006      	movs	r6, r0
    323e:	e752      	b.n	30e6 <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3240:	26fa      	movs	r6, #250	; 0xfa
    3242:	00b6      	lsls	r6, r6, #2
    3244:	4653      	mov	r3, sl
    3246:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3248:	9800      	ldr	r0, [sp, #0]
    324a:	9901      	ldr	r1, [sp, #4]
    324c:	0002      	movs	r2, r0
    324e:	000b      	movs	r3, r1
    3250:	4c27      	ldr	r4, [pc, #156]	; (32f0 <i2c_master_init+0x2b8>)
    3252:	47a0      	blx	r4
    3254:	9000      	str	r0, [sp, #0]
    3256:	9101      	str	r1, [sp, #4]
    3258:	0030      	movs	r0, r6
    325a:	4b21      	ldr	r3, [pc, #132]	; (32e0 <i2c_master_init+0x2a8>)
    325c:	4798      	blx	r3
    325e:	2200      	movs	r2, #0
    3260:	4b2a      	ldr	r3, [pc, #168]	; (330c <i2c_master_init+0x2d4>)
    3262:	47b8      	blx	r7
    3264:	0002      	movs	r2, r0
    3266:	000b      	movs	r3, r1
    3268:	9800      	ldr	r0, [sp, #0]
    326a:	9901      	ldr	r1, [sp, #4]
    326c:	4c24      	ldr	r4, [pc, #144]	; (3300 <i2c_master_init+0x2c8>)
    326e:	47a0      	blx	r4
    3270:	2200      	movs	r2, #0
    3272:	4b22      	ldr	r3, [pc, #136]	; (32fc <i2c_master_init+0x2c4>)
    3274:	4c20      	ldr	r4, [pc, #128]	; (32f8 <i2c_master_init+0x2c0>)
    3276:	47a0      	blx	r4
    3278:	4b22      	ldr	r3, [pc, #136]	; (3304 <i2c_master_init+0x2cc>)
    327a:	4798      	blx	r3
    327c:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    327e:	d00c      	beq.n	329a <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3280:	0031      	movs	r1, r6
    3282:	9807      	ldr	r0, [sp, #28]
    3284:	4b22      	ldr	r3, [pc, #136]	; (3310 <i2c_master_init+0x2d8>)
    3286:	4798      	blx	r3
    3288:	3802      	subs	r0, #2
    328a:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    328c:	002b      	movs	r3, r5
    328e:	2dff      	cmp	r5, #255	; 0xff
    3290:	d80c      	bhi.n	32ac <i2c_master_init+0x274>
    3292:	28ff      	cmp	r0, #255	; 0xff
    3294:	d9bc      	bls.n	3210 <i2c_master_init+0x1d8>
    3296:	2040      	movs	r0, #64	; 0x40
    3298:	e6f8      	b.n	308c <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    329a:	0071      	lsls	r1, r6, #1
    329c:	1e48      	subs	r0, r1, #1
    329e:	9b07      	ldr	r3, [sp, #28]
    32a0:	469c      	mov	ip, r3
    32a2:	4460      	add	r0, ip
    32a4:	4b1a      	ldr	r3, [pc, #104]	; (3310 <i2c_master_init+0x2d8>)
    32a6:	4798      	blx	r3
    32a8:	3801      	subs	r0, #1
    32aa:	e7ef      	b.n	328c <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    32ac:	2040      	movs	r0, #64	; 0x40
    32ae:	e6ed      	b.n	308c <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    32b0:	4a04      	ldr	r2, [pc, #16]	; (32c4 <i2c_master_init+0x28c>)
    32b2:	6a13      	ldr	r3, [r2, #32]
    32b4:	2102      	movs	r1, #2
    32b6:	430b      	orrs	r3, r1
    32b8:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    32ba:	2518      	movs	r5, #24
    32bc:	e6d4      	b.n	3068 <i2c_master_init+0x30>
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	000046c5 	.word	0x000046c5
    32c4:	40000400 	.word	0x40000400
    32c8:	00005975 	.word	0x00005975
    32cc:	00005905 	.word	0x00005905
    32d0:	0000451d 	.word	0x0000451d
    32d4:	00005a71 	.word	0x00005a71
    32d8:	41002000 	.word	0x41002000
    32dc:	00005999 	.word	0x00005999
    32e0:	00008029 	.word	0x00008029
    32e4:	000073d1 	.word	0x000073d1
    32e8:	e826d695 	.word	0xe826d695
    32ec:	3e112e0b 	.word	0x3e112e0b
    32f0:	00006549 	.word	0x00006549
    32f4:	40240000 	.word	0x40240000
    32f8:	000078d1 	.word	0x000078d1
    32fc:	3ff00000 	.word	0x3ff00000
    3300:	00006b69 	.word	0x00006b69
    3304:	00007f3d 	.word	0x00007f3d
    3308:	00004569 	.word	0x00004569
    330c:	40080000 	.word	0x40080000
    3310:	000062d5 	.word	0x000062d5

00003314 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3314:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3316:	7e1a      	ldrb	r2, [r3, #24]
    3318:	0792      	lsls	r2, r2, #30
    331a:	d507      	bpl.n	332c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    331c:	2202      	movs	r2, #2
    331e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3320:	8b5b      	ldrh	r3, [r3, #26]
    3322:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3324:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    3326:	17db      	asrs	r3, r3, #31
    3328:	4018      	ands	r0, r3
}
    332a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    332c:	8b5a      	ldrh	r2, [r3, #26]
    332e:	0752      	lsls	r2, r2, #29
    3330:	d506      	bpl.n	3340 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3332:	6859      	ldr	r1, [r3, #4]
    3334:	22c0      	movs	r2, #192	; 0xc0
    3336:	0292      	lsls	r2, r2, #10
    3338:	430a      	orrs	r2, r1
    333a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    333c:	2018      	movs	r0, #24
    333e:	e7f4      	b.n	332a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    3340:	2000      	movs	r0, #0
    3342:	e7f2      	b.n	332a <_i2c_master_address_response+0x16>

00003344 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3344:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3346:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3348:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    334a:	2401      	movs	r4, #1
    334c:	2502      	movs	r5, #2
    334e:	7e11      	ldrb	r1, [r2, #24]
    3350:	4221      	tst	r1, r4
    3352:	d10b      	bne.n	336c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3354:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3356:	4229      	tst	r1, r5
    3358:	d106      	bne.n	3368 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    335a:	3301      	adds	r3, #1
    335c:	b29b      	uxth	r3, r3
    335e:	8901      	ldrh	r1, [r0, #8]
    3360:	4299      	cmp	r1, r3
    3362:	d8f4      	bhi.n	334e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    3364:	2012      	movs	r0, #18
    3366:	e002      	b.n	336e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    3368:	2000      	movs	r0, #0
    336a:	e000      	b.n	336e <_i2c_master_wait_for_bus+0x2a>
    336c:	2000      	movs	r0, #0
}
    336e:	bd30      	pop	{r4, r5, pc}

00003370 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    3370:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3372:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3374:	6862      	ldr	r2, [r4, #4]
    3376:	2380      	movs	r3, #128	; 0x80
    3378:	02db      	lsls	r3, r3, #11
    337a:	4313      	orrs	r3, r2
    337c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    337e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3380:	4b02      	ldr	r3, [pc, #8]	; (338c <_i2c_master_send_hs_master_code+0x1c>)
    3382:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3384:	2301      	movs	r3, #1
    3386:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    3388:	bd10      	pop	{r4, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	00003345 	.word	0x00003345

00003390 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3390:	b5f0      	push	{r4, r5, r6, r7, lr}
    3392:	46de      	mov	lr, fp
    3394:	4657      	mov	r7, sl
    3396:	464e      	mov	r6, r9
    3398:	4645      	mov	r5, r8
    339a:	b5e0      	push	{r5, r6, r7, lr}
    339c:	b083      	sub	sp, #12
    339e:	0006      	movs	r6, r0
    33a0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    33a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    33a4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    33a6:	682b      	ldr	r3, [r5, #0]
    33a8:	011b      	lsls	r3, r3, #4
    33aa:	0fdb      	lsrs	r3, r3, #31
    33ac:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    33ae:	7a4b      	ldrb	r3, [r1, #9]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d12b      	bne.n	340c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    33b4:	686b      	ldr	r3, [r5, #4]
    33b6:	4a58      	ldr	r2, [pc, #352]	; (3518 <_i2c_master_read_packet+0x188>)
    33b8:	4013      	ands	r3, r2
    33ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    33bc:	464b      	mov	r3, r9
    33be:	7a1b      	ldrb	r3, [r3, #8]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d127      	bne.n	3414 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    33c4:	464b      	mov	r3, r9
    33c6:	881b      	ldrh	r3, [r3, #0]
    33c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    33ca:	464a      	mov	r2, r9
    33cc:	7a52      	ldrb	r2, [r2, #9]
    33ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    33d0:	4313      	orrs	r3, r2
    33d2:	2201      	movs	r2, #1
    33d4:	4313      	orrs	r3, r2
    33d6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    33d8:	0030      	movs	r0, r6
    33da:	4b50      	ldr	r3, [pc, #320]	; (351c <_i2c_master_read_packet+0x18c>)
    33dc:	4798      	blx	r3
    33de:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    33e0:	4653      	mov	r3, sl
    33e2:	2b00      	cmp	r3, #0
    33e4:	d003      	beq.n	33ee <_i2c_master_read_packet+0x5e>
    33e6:	464b      	mov	r3, r9
    33e8:	885b      	ldrh	r3, [r3, #2]
    33ea:	2b01      	cmp	r3, #1
    33ec:	d03b      	beq.n	3466 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    33ee:	686b      	ldr	r3, [r5, #4]
    33f0:	4a49      	ldr	r2, [pc, #292]	; (3518 <_i2c_master_read_packet+0x188>)
    33f2:	4013      	ands	r3, r2
    33f4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	2b00      	cmp	r3, #0
    33fa:	d03a      	beq.n	3472 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    33fc:	9801      	ldr	r0, [sp, #4]
    33fe:	b003      	add	sp, #12
    3400:	bc3c      	pop	{r2, r3, r4, r5}
    3402:	4690      	mov	r8, r2
    3404:	4699      	mov	r9, r3
    3406:	46a2      	mov	sl, r4
    3408:	46ab      	mov	fp, r5
    340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    340c:	7a89      	ldrb	r1, [r1, #10]
    340e:	4b44      	ldr	r3, [pc, #272]	; (3520 <_i2c_master_read_packet+0x190>)
    3410:	4798      	blx	r3
    3412:	e7cf      	b.n	33b4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    3414:	464b      	mov	r3, r9
    3416:	881b      	ldrh	r3, [r3, #0]
    3418:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    341a:	464a      	mov	r2, r9
    341c:	7a52      	ldrb	r2, [r2, #9]
    341e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3420:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3422:	2280      	movs	r2, #128	; 0x80
    3424:	0212      	lsls	r2, r2, #8
    3426:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    3428:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    342a:	0030      	movs	r0, r6
    342c:	4b3b      	ldr	r3, [pc, #236]	; (351c <_i2c_master_read_packet+0x18c>)
    342e:	4798      	blx	r3
    3430:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3432:	686b      	ldr	r3, [r5, #4]
    3434:	4a38      	ldr	r2, [pc, #224]	; (3518 <_i2c_master_read_packet+0x188>)
    3436:	4013      	ands	r3, r2
    3438:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    343a:	2800      	cmp	r0, #0
    343c:	d1de      	bne.n	33fc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    343e:	0030      	movs	r0, r6
    3440:	4b38      	ldr	r3, [pc, #224]	; (3524 <_i2c_master_read_packet+0x194>)
    3442:	4798      	blx	r3
    3444:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    3446:	2800      	cmp	r0, #0
    3448:	d1d8      	bne.n	33fc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    344a:	464b      	mov	r3, r9
    344c:	881b      	ldrh	r3, [r3, #0]
    344e:	0a1b      	lsrs	r3, r3, #8
    3450:	2278      	movs	r2, #120	; 0x78
    3452:	4313      	orrs	r3, r2
    3454:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3456:	464a      	mov	r2, r9
    3458:	7a52      	ldrb	r2, [r2, #9]
    345a:	0392      	lsls	r2, r2, #14
    345c:	2101      	movs	r1, #1
    345e:	430a      	orrs	r2, r1
    3460:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3462:	626b      	str	r3, [r5, #36]	; 0x24
    3464:	e7b8      	b.n	33d8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3466:	686a      	ldr	r2, [r5, #4]
    3468:	2380      	movs	r3, #128	; 0x80
    346a:	02db      	lsls	r3, r3, #11
    346c:	4313      	orrs	r3, r2
    346e:	606b      	str	r3, [r5, #4]
    3470:	e7c1      	b.n	33f6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    3472:	0030      	movs	r0, r6
    3474:	4b2b      	ldr	r3, [pc, #172]	; (3524 <_i2c_master_read_packet+0x194>)
    3476:	4798      	blx	r3
    3478:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    347a:	2800      	cmp	r0, #0
    347c:	d1be      	bne.n	33fc <_i2c_master_read_packet+0x6c>
    347e:	3c01      	subs	r4, #1
    3480:	b2a4      	uxth	r4, r4
    3482:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    3484:	4b28      	ldr	r3, [pc, #160]	; (3528 <_i2c_master_read_packet+0x198>)
    3486:	469b      	mov	fp, r3
    3488:	e015      	b.n	34b6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    348a:	2c01      	cmp	r4, #1
    348c:	d020      	beq.n	34d0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    348e:	0030      	movs	r0, r6
    3490:	4b26      	ldr	r3, [pc, #152]	; (352c <_i2c_master_read_packet+0x19c>)
    3492:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3494:	4643      	mov	r3, r8
    3496:	1c5f      	adds	r7, r3, #1
    3498:	b2bf      	uxth	r7, r7
    349a:	2328      	movs	r3, #40	; 0x28
    349c:	5ceb      	ldrb	r3, [r5, r3]
    349e:	464a      	mov	r2, r9
    34a0:	6852      	ldr	r2, [r2, #4]
    34a2:	4641      	mov	r1, r8
    34a4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    34a6:	0030      	movs	r0, r6
    34a8:	4b1c      	ldr	r3, [pc, #112]	; (351c <_i2c_master_read_packet+0x18c>)
    34aa:	4798      	blx	r3
    34ac:	3c01      	subs	r4, #1
    34ae:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    34b0:	2800      	cmp	r0, #0
    34b2:	d115      	bne.n	34e0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    34b4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    34b6:	455c      	cmp	r4, fp
    34b8:	d014      	beq.n	34e4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    34ba:	8b6b      	ldrh	r3, [r5, #26]
    34bc:	069b      	lsls	r3, r3, #26
    34be:	d527      	bpl.n	3510 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    34c0:	7af3      	ldrb	r3, [r6, #11]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d0e3      	beq.n	348e <_i2c_master_read_packet+0xfe>
    34c6:	4653      	mov	r3, sl
    34c8:	2b00      	cmp	r3, #0
    34ca:	d1de      	bne.n	348a <_i2c_master_read_packet+0xfa>
    34cc:	2c00      	cmp	r4, #0
    34ce:	d1de      	bne.n	348e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    34d0:	686a      	ldr	r2, [r5, #4]
    34d2:	2380      	movs	r3, #128	; 0x80
    34d4:	02db      	lsls	r3, r3, #11
    34d6:	4313      	orrs	r3, r2
    34d8:	606b      	str	r3, [r5, #4]
    34da:	3c01      	subs	r4, #1
    34dc:	b2a4      	uxth	r4, r4
    34de:	e7ea      	b.n	34b6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    34e0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    34e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    34e4:	7ab3      	ldrb	r3, [r6, #10]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d109      	bne.n	34fe <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    34ea:	0030      	movs	r0, r6
    34ec:	4b0f      	ldr	r3, [pc, #60]	; (352c <_i2c_master_read_packet+0x19c>)
    34ee:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    34f0:	2328      	movs	r3, #40	; 0x28
    34f2:	5cea      	ldrb	r2, [r5, r3]
    34f4:	464b      	mov	r3, r9
    34f6:	685b      	ldr	r3, [r3, #4]
    34f8:	4641      	mov	r1, r8
    34fa:	545a      	strb	r2, [r3, r1]
    34fc:	e77e      	b.n	33fc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    34fe:	0030      	movs	r0, r6
    3500:	4b0a      	ldr	r3, [pc, #40]	; (352c <_i2c_master_read_packet+0x19c>)
    3502:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3504:	686a      	ldr	r2, [r5, #4]
    3506:	23c0      	movs	r3, #192	; 0xc0
    3508:	029b      	lsls	r3, r3, #10
    350a:	4313      	orrs	r3, r2
    350c:	606b      	str	r3, [r5, #4]
    350e:	e7ec      	b.n	34ea <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    3510:	2341      	movs	r3, #65	; 0x41
    3512:	9301      	str	r3, [sp, #4]
    3514:	e772      	b.n	33fc <_i2c_master_read_packet+0x6c>
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	fffbffff 	.word	0xfffbffff
    351c:	00003345 	.word	0x00003345
    3520:	00003371 	.word	0x00003371
    3524:	00003315 	.word	0x00003315
    3528:	0000ffff 	.word	0x0000ffff
    352c:	0000302d 	.word	0x0000302d

00003530 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3530:	b5f0      	push	{r4, r5, r6, r7, lr}
    3532:	46de      	mov	lr, fp
    3534:	4657      	mov	r7, sl
    3536:	464e      	mov	r6, r9
    3538:	4645      	mov	r5, r8
    353a:	b5e0      	push	{r5, r6, r7, lr}
    353c:	b083      	sub	sp, #12
    353e:	0006      	movs	r6, r0
    3540:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3542:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3544:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    3546:	4b32      	ldr	r3, [pc, #200]	; (3610 <_i2c_master_write_packet+0xe0>)
    3548:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    354a:	7a7b      	ldrb	r3, [r7, #9]
    354c:	2b00      	cmp	r3, #0
    354e:	d11d      	bne.n	358c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3550:	686b      	ldr	r3, [r5, #4]
    3552:	4a30      	ldr	r2, [pc, #192]	; (3614 <_i2c_master_write_packet+0xe4>)
    3554:	4013      	ands	r3, r2
    3556:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3558:	7a3b      	ldrb	r3, [r7, #8]
    355a:	2b00      	cmp	r3, #0
    355c:	d01b      	beq.n	3596 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    355e:	883b      	ldrh	r3, [r7, #0]
    3560:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3562:	7a7a      	ldrb	r2, [r7, #9]
    3564:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3566:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3568:	2280      	movs	r2, #128	; 0x80
    356a:	0212      	lsls	r2, r2, #8
    356c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    356e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3570:	0030      	movs	r0, r6
    3572:	4b29      	ldr	r3, [pc, #164]	; (3618 <_i2c_master_write_packet+0xe8>)
    3574:	4798      	blx	r3
    3576:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3578:	2800      	cmp	r0, #0
    357a:	d013      	beq.n	35a4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    357c:	9801      	ldr	r0, [sp, #4]
    357e:	b003      	add	sp, #12
    3580:	bc3c      	pop	{r2, r3, r4, r5}
    3582:	4690      	mov	r8, r2
    3584:	4699      	mov	r9, r3
    3586:	46a2      	mov	sl, r4
    3588:	46ab      	mov	fp, r5
    358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    358c:	7ab9      	ldrb	r1, [r7, #10]
    358e:	0030      	movs	r0, r6
    3590:	4b22      	ldr	r3, [pc, #136]	; (361c <_i2c_master_write_packet+0xec>)
    3592:	4798      	blx	r3
    3594:	e7dc      	b.n	3550 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3596:	883b      	ldrh	r3, [r7, #0]
    3598:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    359a:	7a7a      	ldrb	r2, [r7, #9]
    359c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    359e:	4313      	orrs	r3, r2
    35a0:	626b      	str	r3, [r5, #36]	; 0x24
    35a2:	e7e5      	b.n	3570 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    35a4:	0030      	movs	r0, r6
    35a6:	4b1e      	ldr	r3, [pc, #120]	; (3620 <_i2c_master_write_packet+0xf0>)
    35a8:	4798      	blx	r3
    35aa:	1e03      	subs	r3, r0, #0
    35ac:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    35ae:	d1e5      	bne.n	357c <_i2c_master_write_packet+0x4c>
    35b0:	46a0      	mov	r8, r4
    35b2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    35b4:	3320      	adds	r3, #32
    35b6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    35b8:	4b15      	ldr	r3, [pc, #84]	; (3610 <_i2c_master_write_packet+0xe0>)
    35ba:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    35bc:	4b16      	ldr	r3, [pc, #88]	; (3618 <_i2c_master_write_packet+0xe8>)
    35be:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    35c0:	4544      	cmp	r4, r8
    35c2:	d015      	beq.n	35f0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    35c4:	8b6b      	ldrh	r3, [r5, #26]
    35c6:	464a      	mov	r2, r9
    35c8:	4213      	tst	r3, r2
    35ca:	d01d      	beq.n	3608 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    35cc:	0030      	movs	r0, r6
    35ce:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	5d1a      	ldrb	r2, [r3, r4]
    35d4:	2328      	movs	r3, #40	; 0x28
    35d6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    35d8:	0030      	movs	r0, r6
    35da:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    35dc:	2800      	cmp	r0, #0
    35de:	d106      	bne.n	35ee <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    35e0:	8b6b      	ldrh	r3, [r5, #26]
    35e2:	3401      	adds	r4, #1
    35e4:	075b      	lsls	r3, r3, #29
    35e6:	d5eb      	bpl.n	35c0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    35e8:	231e      	movs	r3, #30
    35ea:	9301      	str	r3, [sp, #4]
    35ec:	e000      	b.n	35f0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    35ee:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    35f0:	7ab3      	ldrb	r3, [r6, #10]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d0c2      	beq.n	357c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    35f6:	0030      	movs	r0, r6
    35f8:	4b05      	ldr	r3, [pc, #20]	; (3610 <_i2c_master_write_packet+0xe0>)
    35fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    35fc:	686a      	ldr	r2, [r5, #4]
    35fe:	23c0      	movs	r3, #192	; 0xc0
    3600:	029b      	lsls	r3, r3, #10
    3602:	4313      	orrs	r3, r2
    3604:	606b      	str	r3, [r5, #4]
    3606:	e7b9      	b.n	357c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    3608:	2341      	movs	r3, #65	; 0x41
    360a:	9301      	str	r3, [sp, #4]
    360c:	e7b6      	b.n	357c <_i2c_master_write_packet+0x4c>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	0000302d 	.word	0x0000302d
    3614:	fffbffff 	.word	0xfffbffff
    3618:	00003345 	.word	0x00003345
    361c:	00003371 	.word	0x00003371
    3620:	00003315 	.word	0x00003315

00003624 <i2c_master_read_packet_wait>:
{
    3624:	b510      	push	{r4, lr}
	module->send_stop = true;
    3626:	2301      	movs	r3, #1
    3628:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    362a:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    362c:	4b01      	ldr	r3, [pc, #4]	; (3634 <i2c_master_read_packet_wait+0x10>)
    362e:	4798      	blx	r3
}
    3630:	bd10      	pop	{r4, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	00003391 	.word	0x00003391

00003638 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3638:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    363a:	2301      	movs	r3, #1
    363c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    363e:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    3640:	4b01      	ldr	r3, [pc, #4]	; (3648 <i2c_master_write_packet_wait+0x10>)
    3642:	4798      	blx	r3
}
    3644:	bd10      	pop	{r4, pc}
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	00003531 	.word	0x00003531

0000364c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    364c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    364e:	2300      	movs	r3, #0
    3650:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3652:	3301      	adds	r3, #1
    3654:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    3656:	4b01      	ldr	r3, [pc, #4]	; (365c <i2c_master_write_packet_wait_no_stop+0x10>)
    3658:	4798      	blx	r3
}
    365a:	bd10      	pop	{r4, pc}
    365c:	00003531 	.word	0x00003531

00003660 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3660:	b530      	push	{r4, r5, lr}
    3662:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3664:	aa01      	add	r2, sp, #4
    3666:	4b0b      	ldr	r3, [pc, #44]	; (3694 <_tc_get_inst_index+0x34>)
    3668:	cb32      	ldmia	r3!, {r1, r4, r5}
    366a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    366c:	9b01      	ldr	r3, [sp, #4]
    366e:	4298      	cmp	r0, r3
    3670:	d00d      	beq.n	368e <_tc_get_inst_index+0x2e>
    3672:	9b02      	ldr	r3, [sp, #8]
    3674:	4298      	cmp	r0, r3
    3676:	d008      	beq.n	368a <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    3678:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    367a:	9a03      	ldr	r2, [sp, #12]
    367c:	4282      	cmp	r2, r0
    367e:	d002      	beq.n	3686 <_tc_get_inst_index+0x26>
}
    3680:	0018      	movs	r0, r3
    3682:	b005      	add	sp, #20
    3684:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3686:	3302      	adds	r3, #2
    3688:	e002      	b.n	3690 <_tc_get_inst_index+0x30>
    368a:	2301      	movs	r3, #1
    368c:	e000      	b.n	3690 <_tc_get_inst_index+0x30>
    368e:	2300      	movs	r3, #0
			return i;
    3690:	b2db      	uxtb	r3, r3
    3692:	e7f5      	b.n	3680 <_tc_get_inst_index+0x20>
    3694:	0000dee0 	.word	0x0000dee0

00003698 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    3698:	b5f0      	push	{r4, r5, r6, r7, lr}
    369a:	46c6      	mov	lr, r8
    369c:	b500      	push	{lr}
    369e:	b08a      	sub	sp, #40	; 0x28
    36a0:	0004      	movs	r4, r0
    36a2:	000d      	movs	r5, r1
    36a4:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    36a6:	0008      	movs	r0, r1
    36a8:	4baa      	ldr	r3, [pc, #680]	; (3954 <tc_init+0x2bc>)
    36aa:	4798      	blx	r3
    36ac:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    36ae:	ab09      	add	r3, sp, #36	; 0x24
    36b0:	221b      	movs	r2, #27
    36b2:	701a      	strb	r2, [r3, #0]
    36b4:	705a      	strb	r2, [r3, #1]
    36b6:	3202      	adds	r2, #2
    36b8:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    36ba:	a903      	add	r1, sp, #12
    36bc:	4ba6      	ldr	r3, [pc, #664]	; (3958 <tc_init+0x2c0>)
    36be:	330c      	adds	r3, #12
    36c0:	000a      	movs	r2, r1
    36c2:	cb83      	ldmia	r3!, {r0, r1, r7}
    36c4:	c283      	stmia	r2!, {r0, r1, r7}
    36c6:	cb83      	ldmia	r3!, {r0, r1, r7}
    36c8:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    36ca:	2300      	movs	r3, #0
    36cc:	60a3      	str	r3, [r4, #8]
    36ce:	60e3      	str	r3, [r4, #12]
    36d0:	6123      	str	r3, [r4, #16]
    36d2:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    36d4:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    36d6:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    36d8:	4643      	mov	r3, r8
    36da:	009a      	lsls	r2, r3, #2
    36dc:	4b9f      	ldr	r3, [pc, #636]	; (395c <tc_init+0x2c4>)
    36de:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    36e0:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    36e2:	2334      	movs	r3, #52	; 0x34
    36e4:	5cf3      	ldrb	r3, [r6, r3]
    36e6:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    36e8:	78f3      	ldrb	r3, [r6, #3]
    36ea:	2b08      	cmp	r3, #8
    36ec:	d008      	beq.n	3700 <tc_init+0x68>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    36ee:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    36f0:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    36f2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    36f4:	07db      	lsls	r3, r3, #31
    36f6:	d508      	bpl.n	370a <tc_init+0x72>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    36f8:	b00a      	add	sp, #40	; 0x28
    36fa:	bc04      	pop	{r2}
    36fc:	4690      	mov	r8, r2
    36fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    3700:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3702:	4642      	mov	r2, r8
    3704:	07d2      	lsls	r2, r2, #31
    3706:	d4f7      	bmi.n	36f8 <tc_init+0x60>
    3708:	e7f1      	b.n	36ee <tc_init+0x56>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    370a:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    370c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    370e:	079b      	lsls	r3, r3, #30
    3710:	d4f2      	bmi.n	36f8 <tc_init+0x60>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3712:	682b      	ldr	r3, [r5, #0]
    3714:	079b      	lsls	r3, r3, #30
    3716:	d4ef      	bmi.n	36f8 <tc_init+0x60>
	if (config->pwm_channel[0].enabled) {
    3718:	7c33      	ldrb	r3, [r6, #16]
    371a:	2b00      	cmp	r3, #0
    371c:	d112      	bne.n	3744 <tc_init+0xac>
	if (config->pwm_channel[1].enabled) {
    371e:	7f33      	ldrb	r3, [r6, #28]
    3720:	2b00      	cmp	r3, #0
    3722:	d11b      	bne.n	375c <tc_init+0xc4>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    3724:	4643      	mov	r3, r8
    3726:	005a      	lsls	r2, r3, #1
    3728:	a903      	add	r1, sp, #12
    372a:	1c53      	adds	r3, r2, #1
    372c:	009b      	lsls	r3, r3, #2
    372e:	5858      	ldr	r0, [r3, r1]
    3730:	4643      	mov	r3, r8
    3732:	00db      	lsls	r3, r3, #3
    3734:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    3736:	b2d9      	uxtb	r1, r3
    3738:	2904      	cmp	r1, #4
    373a:	d823      	bhi.n	3784 <tc_init+0xec>
    373c:	008b      	lsls	r3, r1, #2
    373e:	4988      	ldr	r1, [pc, #544]	; (3960 <tc_init+0x2c8>)
    3740:	58cb      	ldr	r3, [r1, r3]
    3742:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3744:	a902      	add	r1, sp, #8
    3746:	2301      	movs	r3, #1
    3748:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    374a:	2200      	movs	r2, #0
    374c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    374e:	7e32      	ldrb	r2, [r6, #24]
    3750:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3752:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3754:	7d30      	ldrb	r0, [r6, #20]
    3756:	4b83      	ldr	r3, [pc, #524]	; (3964 <tc_init+0x2cc>)
    3758:	4798      	blx	r3
    375a:	e7e0      	b.n	371e <tc_init+0x86>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    375c:	a902      	add	r1, sp, #8
    375e:	2301      	movs	r3, #1
    3760:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3762:	2200      	movs	r2, #0
    3764:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3766:	3224      	adds	r2, #36	; 0x24
    3768:	18b2      	adds	r2, r6, r2
    376a:	7812      	ldrb	r2, [r2, #0]
    376c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    376e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3770:	331f      	adds	r3, #31
    3772:	18f3      	adds	r3, r6, r3
    3774:	7818      	ldrb	r0, [r3, #0]
    3776:	4b7b      	ldr	r3, [pc, #492]	; (3964 <tc_init+0x2cc>)
    3778:	4798      	blx	r3
    377a:	e7d3      	b.n	3724 <tc_init+0x8c>
			MCLK->APBAMASK.reg |= mask;
    377c:	497a      	ldr	r1, [pc, #488]	; (3968 <tc_init+0x2d0>)
    377e:	694b      	ldr	r3, [r1, #20]
    3780:	4318      	orrs	r0, r3
    3782:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    3784:	78f3      	ldrb	r3, [r6, #3]
    3786:	2b08      	cmp	r3, #8
    3788:	d100      	bne.n	378c <tc_init+0xf4>
    378a:	e085      	b.n	3898 <tc_init+0x200>
	gclk_chan_config.source_generator = config->clock_source;
    378c:	a901      	add	r1, sp, #4
    378e:	7833      	ldrb	r3, [r6, #0]
    3790:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    3792:	ab09      	add	r3, sp, #36	; 0x24
    3794:	4642      	mov	r2, r8
    3796:	5c9f      	ldrb	r7, [r3, r2]
    3798:	0038      	movs	r0, r7
    379a:	4b74      	ldr	r3, [pc, #464]	; (396c <tc_init+0x2d4>)
    379c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    379e:	0038      	movs	r0, r7
    37a0:	4b73      	ldr	r3, [pc, #460]	; (3970 <tc_init+0x2d8>)
    37a2:	4798      	blx	r3
			(uint32_t)config->counter_size |
    37a4:	78f3      	ldrb	r3, [r6, #3]
    37a6:	79f2      	ldrb	r2, [r6, #7]
    37a8:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    37aa:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    37ac:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    37ae:	7a72      	ldrb	r2, [r6, #9]
    37b0:	2a00      	cmp	r2, #0
    37b2:	d002      	beq.n	37ba <tc_init+0x122>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    37b4:	2280      	movs	r2, #128	; 0x80
    37b6:	0252      	lsls	r2, r2, #9
    37b8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    37ba:	7ab2      	ldrb	r2, [r6, #10]
    37bc:	2a00      	cmp	r2, #0
    37be:	d002      	beq.n	37c6 <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    37c0:	2280      	movs	r2, #128	; 0x80
    37c2:	0292      	lsls	r2, r2, #10
    37c4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    37c6:	7af2      	ldrb	r2, [r6, #11]
    37c8:	2a00      	cmp	r2, #0
    37ca:	d002      	beq.n	37d2 <tc_init+0x13a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    37cc:	2280      	movs	r2, #128	; 0x80
    37ce:	0352      	lsls	r2, r2, #13
    37d0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    37d2:	7b32      	ldrb	r2, [r6, #12]
    37d4:	2a00      	cmp	r2, #0
    37d6:	d002      	beq.n	37de <tc_init+0x146>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    37d8:	2280      	movs	r2, #128	; 0x80
    37da:	0392      	lsls	r2, r2, #14
    37dc:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    37de:	7871      	ldrb	r1, [r6, #1]
    37e0:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    37e2:	78b2      	ldrb	r2, [r6, #2]
    37e4:	01d2      	lsls	r2, r2, #7
    37e6:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    37e8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37ea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37ec:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    37ee:	2b00      	cmp	r3, #0
    37f0:	d1fc      	bne.n	37ec <tc_init+0x154>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    37f2:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37f4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37f6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    37f8:	2b00      	cmp	r3, #0
    37fa:	d1fc      	bne.n	37f6 <tc_init+0x15e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    37fc:	79b3      	ldrb	r3, [r6, #6]
    37fe:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    3800:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    3802:	1e4b      	subs	r3, r1, #1
    3804:	4199      	sbcs	r1, r3
    3806:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    3808:	7bb3      	ldrb	r3, [r6, #14]
    380a:	2b00      	cmp	r3, #0
    380c:	d001      	beq.n	3812 <tc_init+0x17a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    380e:	2301      	movs	r3, #1
    3810:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3812:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3814:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3816:	2b00      	cmp	r3, #0
    3818:	d1fc      	bne.n	3814 <tc_init+0x17c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    381a:	33ff      	adds	r3, #255	; 0xff
    381c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    381e:	2900      	cmp	r1, #0
    3820:	d004      	beq.n	382c <tc_init+0x194>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3822:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3824:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    3826:	2b00      	cmp	r3, #0
    3828:	d1fc      	bne.n	3824 <tc_init+0x18c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    382a:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    382c:	7a33      	ldrb	r3, [r6, #8]
    382e:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3830:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3832:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3834:	2b00      	cmp	r3, #0
    3836:	d1fc      	bne.n	3832 <tc_init+0x19a>
	switch (module_inst->counter_size) {
    3838:	7923      	ldrb	r3, [r4, #4]
    383a:	2b04      	cmp	r3, #4
    383c:	d059      	beq.n	38f2 <tc_init+0x25a>
    383e:	2b08      	cmp	r3, #8
    3840:	d074      	beq.n	392c <tc_init+0x294>
	return STATUS_ERR_INVALID_ARG;
    3842:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    3844:	2b00      	cmp	r3, #0
    3846:	d000      	beq.n	384a <tc_init+0x1b2>
    3848:	e756      	b.n	36f8 <tc_init+0x60>
    384a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    384c:	2b00      	cmp	r3, #0
    384e:	d1fc      	bne.n	384a <tc_init+0x1b2>
				= config->counter_16_bit.value;
    3850:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    3852:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3854:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3856:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3858:	2b00      	cmp	r3, #0
    385a:	d1fc      	bne.n	3856 <tc_init+0x1be>
					config->counter_16_bit.compare_capture_channel[0];
    385c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    385e:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3860:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3862:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3864:	2b00      	cmp	r3, #0
    3866:	d1fc      	bne.n	3862 <tc_init+0x1ca>
					config->counter_16_bit.compare_capture_channel[1];
    3868:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    386a:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    386c:	2000      	movs	r0, #0
    386e:	e743      	b.n	36f8 <tc_init+0x60>
			MCLK->APBBMASK.reg |= mask;
    3870:	493d      	ldr	r1, [pc, #244]	; (3968 <tc_init+0x2d0>)
    3872:	698b      	ldr	r3, [r1, #24]
    3874:	4318      	orrs	r0, r3
    3876:	6188      	str	r0, [r1, #24]
    3878:	e784      	b.n	3784 <tc_init+0xec>
			MCLK->APBCMASK.reg |= mask;
    387a:	493b      	ldr	r1, [pc, #236]	; (3968 <tc_init+0x2d0>)
    387c:	69cb      	ldr	r3, [r1, #28]
    387e:	4318      	orrs	r0, r3
    3880:	61c8      	str	r0, [r1, #28]
    3882:	e77f      	b.n	3784 <tc_init+0xec>
			MCLK->APBDMASK.reg |= mask;
    3884:	4938      	ldr	r1, [pc, #224]	; (3968 <tc_init+0x2d0>)
    3886:	6a0b      	ldr	r3, [r1, #32]
    3888:	4318      	orrs	r0, r3
    388a:	6208      	str	r0, [r1, #32]
    388c:	e77a      	b.n	3784 <tc_init+0xec>
			MCLK->APBEMASK.reg |= mask;
    388e:	4b36      	ldr	r3, [pc, #216]	; (3968 <tc_init+0x2d0>)
    3890:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3892:	4308      	orrs	r0, r1
    3894:	6258      	str	r0, [r3, #36]	; 0x24
    3896:	e775      	b.n	3784 <tc_init+0xec>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    3898:	4643      	mov	r3, r8
    389a:	3301      	adds	r3, #1
    389c:	2b02      	cmp	r3, #2
    389e:	dd00      	ble.n	38a2 <tc_init+0x20a>
    38a0:	e774      	b.n	378c <tc_init+0xf4>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    38a2:	ab03      	add	r3, sp, #12
    38a4:	1cd1      	adds	r1, r2, #3
    38a6:	0089      	lsls	r1, r1, #2
    38a8:	58c9      	ldr	r1, [r1, r3]
    38aa:	3202      	adds	r2, #2
    38ac:	0092      	lsls	r2, r2, #2
    38ae:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    38b0:	b2da      	uxtb	r2, r3
    38b2:	2a04      	cmp	r2, #4
    38b4:	d900      	bls.n	38b8 <tc_init+0x220>
    38b6:	e769      	b.n	378c <tc_init+0xf4>
    38b8:	0093      	lsls	r3, r2, #2
    38ba:	4a2e      	ldr	r2, [pc, #184]	; (3974 <tc_init+0x2dc>)
    38bc:	58d3      	ldr	r3, [r2, r3]
    38be:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    38c0:	4a29      	ldr	r2, [pc, #164]	; (3968 <tc_init+0x2d0>)
    38c2:	6953      	ldr	r3, [r2, #20]
    38c4:	4319      	orrs	r1, r3
    38c6:	6151      	str	r1, [r2, #20]
    38c8:	e760      	b.n	378c <tc_init+0xf4>
			MCLK->APBBMASK.reg |= mask;
    38ca:	4a27      	ldr	r2, [pc, #156]	; (3968 <tc_init+0x2d0>)
    38cc:	6993      	ldr	r3, [r2, #24]
    38ce:	4319      	orrs	r1, r3
    38d0:	6191      	str	r1, [r2, #24]
    38d2:	e75b      	b.n	378c <tc_init+0xf4>
			MCLK->APBCMASK.reg |= mask;
    38d4:	4a24      	ldr	r2, [pc, #144]	; (3968 <tc_init+0x2d0>)
    38d6:	69d3      	ldr	r3, [r2, #28]
    38d8:	4319      	orrs	r1, r3
    38da:	61d1      	str	r1, [r2, #28]
    38dc:	e756      	b.n	378c <tc_init+0xf4>
			MCLK->APBDMASK.reg |= mask;
    38de:	4a22      	ldr	r2, [pc, #136]	; (3968 <tc_init+0x2d0>)
    38e0:	6a13      	ldr	r3, [r2, #32]
    38e2:	4319      	orrs	r1, r3
    38e4:	6211      	str	r1, [r2, #32]
    38e6:	e751      	b.n	378c <tc_init+0xf4>
			MCLK->APBEMASK.reg |= mask;
    38e8:	4b1f      	ldr	r3, [pc, #124]	; (3968 <tc_init+0x2d0>)
    38ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    38ec:	4311      	orrs	r1, r2
    38ee:	6259      	str	r1, [r3, #36]	; 0x24
    38f0:	e74c      	b.n	378c <tc_init+0xf4>
    38f2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    38f4:	2b00      	cmp	r3, #0
    38f6:	d1fc      	bne.n	38f2 <tc_init+0x25a>
					config->counter_8_bit.value;
    38f8:	3328      	adds	r3, #40	; 0x28
    38fa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    38fc:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    38fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3900:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3902:	2b00      	cmp	r3, #0
    3904:	d1fc      	bne.n	3900 <tc_init+0x268>
					config->counter_8_bit.period;
    3906:	3329      	adds	r3, #41	; 0x29
    3908:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    390a:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    390c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    390e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3910:	2b00      	cmp	r3, #0
    3912:	d1fc      	bne.n	390e <tc_init+0x276>
					config->counter_8_bit.compare_capture_channel[0];
    3914:	332a      	adds	r3, #42	; 0x2a
    3916:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    3918:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    391a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    391c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    391e:	2b00      	cmp	r3, #0
    3920:	d1fc      	bne.n	391c <tc_init+0x284>
					config->counter_8_bit.compare_capture_channel[1];
    3922:	332b      	adds	r3, #43	; 0x2b
    3924:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    3926:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    3928:	2000      	movs	r0, #0
    392a:	e6e5      	b.n	36f8 <tc_init+0x60>
    392c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    392e:	2b00      	cmp	r3, #0
    3930:	d1fc      	bne.n	392c <tc_init+0x294>
				= config->counter_32_bit.value;
    3932:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3934:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3936:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3938:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    393a:	2b00      	cmp	r3, #0
    393c:	d1fc      	bne.n	3938 <tc_init+0x2a0>
			hw->COUNT32.CC[0].reg =
    393e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3940:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3942:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3944:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3946:	2b00      	cmp	r3, #0
    3948:	d1fc      	bne.n	3944 <tc_init+0x2ac>
					config->counter_32_bit.compare_capture_channel[1];
    394a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    394c:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    394e:	2000      	movs	r0, #0
    3950:	e6d2      	b.n	36f8 <tc_init+0x60>
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	00003661 	.word	0x00003661
    3958:	0000dee0 	.word	0x0000dee0
    395c:	20000cc8 	.word	0x20000cc8
    3960:	0000deb8 	.word	0x0000deb8
    3964:	00005a71 	.word	0x00005a71
    3968:	40000400 	.word	0x40000400
    396c:	00005975 	.word	0x00005975
    3970:	00005905 	.word	0x00005905
    3974:	0000decc 	.word	0x0000decc

00003978 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    3978:	6802      	ldr	r2, [r0, #0]
    397a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    397c:	2b00      	cmp	r3, #0
    397e:	d1fc      	bne.n	397a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    3980:	7903      	ldrb	r3, [r0, #4]
    3982:	2b04      	cmp	r3, #4
    3984:	d005      	beq.n	3992 <tc_set_count_value+0x1a>
    3986:	2b08      	cmp	r3, #8
    3988:	d00b      	beq.n	39a2 <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    398a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    398c:	2b00      	cmp	r3, #0
    398e:	d004      	beq.n	399a <tc_set_count_value+0x22>
	}
}
    3990:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    3992:	b2c9      	uxtb	r1, r1
    3994:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    3996:	2000      	movs	r0, #0
    3998:	e7fa      	b.n	3990 <tc_set_count_value+0x18>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    399a:	b289      	uxth	r1, r1
    399c:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    399e:	2000      	movs	r0, #0
    39a0:	e7f6      	b.n	3990 <tc_set_count_value+0x18>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    39a2:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    39a4:	2000      	movs	r0, #0
    39a6:	e7f3      	b.n	3990 <tc_set_count_value+0x18>

000039a8 <main>:
/****************************************************************************************
Application main function
*****************************************************************************************/

int main (void)
{
    39a8:	b510      	push	{r4, lr}
	system_init();
    39aa:	4b04      	ldr	r3, [pc, #16]	; (39bc <main+0x14>)
    39ac:	4798      	blx	r3
	
	wcm_init();
    39ae:	4b04      	ldr	r3, [pc, #16]	; (39c0 <main+0x18>)
    39b0:	4798      	blx	r3
	wcm_run();
    39b2:	4b04      	ldr	r3, [pc, #16]	; (39c4 <main+0x1c>)
    39b4:	4798      	blx	r3

}	// End of main
    39b6:	2000      	movs	r0, #0
    39b8:	bd10      	pop	{r4, pc}
    39ba:	46c0      	nop			; (mov r8, r8)
    39bc:	00005aa5 	.word	0x00005aa5
    39c0:	000001f5 	.word	0x000001f5
    39c4:	00000259 	.word	0x00000259

000039c8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    39c8:	1c93      	adds	r3, r2, #2
    39ca:	009b      	lsls	r3, r3, #2
    39cc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    39ce:	2a02      	cmp	r2, #2
    39d0:	d009      	beq.n	39e6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    39d2:	2a03      	cmp	r2, #3
    39d4:	d00c      	beq.n	39f0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    39d6:	2301      	movs	r3, #1
    39d8:	4093      	lsls	r3, r2
    39da:	001a      	movs	r2, r3
    39dc:	7e03      	ldrb	r3, [r0, #24]
    39de:	4313      	orrs	r3, r2
    39e0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    39e2:	2000      	movs	r0, #0
    39e4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    39e6:	7e03      	ldrb	r3, [r0, #24]
    39e8:	2210      	movs	r2, #16
    39ea:	4313      	orrs	r3, r2
    39ec:	7603      	strb	r3, [r0, #24]
    39ee:	e7f8      	b.n	39e2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    39f0:	7e03      	ldrb	r3, [r0, #24]
    39f2:	2220      	movs	r2, #32
    39f4:	4313      	orrs	r3, r2
    39f6:	7603      	strb	r3, [r0, #24]
    39f8:	e7f3      	b.n	39e2 <tc_register_callback+0x1a>
	...

000039fc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    39fc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    39fe:	0080      	lsls	r0, r0, #2
    3a00:	4b16      	ldr	r3, [pc, #88]	; (3a5c <_tc_interrupt_handler+0x60>)
    3a02:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3a04:	6823      	ldr	r3, [r4, #0]
    3a06:	7a9d      	ldrb	r5, [r3, #10]
    3a08:	7e22      	ldrb	r2, [r4, #24]
    3a0a:	7e63      	ldrb	r3, [r4, #25]
    3a0c:	4013      	ands	r3, r2
    3a0e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3a10:	07eb      	lsls	r3, r5, #31
    3a12:	d406      	bmi.n	3a22 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3a14:	07ab      	lsls	r3, r5, #30
    3a16:	d40b      	bmi.n	3a30 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3a18:	06eb      	lsls	r3, r5, #27
    3a1a:	d410      	bmi.n	3a3e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3a1c:	06ab      	lsls	r3, r5, #26
    3a1e:	d415      	bmi.n	3a4c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    3a20:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3a22:	0020      	movs	r0, r4
    3a24:	68a3      	ldr	r3, [r4, #8]
    3a26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3a28:	2301      	movs	r3, #1
    3a2a:	6822      	ldr	r2, [r4, #0]
    3a2c:	7293      	strb	r3, [r2, #10]
    3a2e:	e7f1      	b.n	3a14 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    3a30:	0020      	movs	r0, r4
    3a32:	68e3      	ldr	r3, [r4, #12]
    3a34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3a36:	2302      	movs	r3, #2
    3a38:	6822      	ldr	r2, [r4, #0]
    3a3a:	7293      	strb	r3, [r2, #10]
    3a3c:	e7ec      	b.n	3a18 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3a3e:	0020      	movs	r0, r4
    3a40:	6923      	ldr	r3, [r4, #16]
    3a42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3a44:	2310      	movs	r3, #16
    3a46:	6822      	ldr	r2, [r4, #0]
    3a48:	7293      	strb	r3, [r2, #10]
    3a4a:	e7e7      	b.n	3a1c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3a4c:	0020      	movs	r0, r4
    3a4e:	6963      	ldr	r3, [r4, #20]
    3a50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3a52:	6823      	ldr	r3, [r4, #0]
    3a54:	2220      	movs	r2, #32
    3a56:	729a      	strb	r2, [r3, #10]
}
    3a58:	e7e2      	b.n	3a20 <_tc_interrupt_handler+0x24>
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	20000cc8 	.word	0x20000cc8

00003a60 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    3a60:	b510      	push	{r4, lr}
    3a62:	2000      	movs	r0, #0
    3a64:	4b01      	ldr	r3, [pc, #4]	; (3a6c <TC0_Handler+0xc>)
    3a66:	4798      	blx	r3
    3a68:	bd10      	pop	{r4, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	000039fd 	.word	0x000039fd

00003a70 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    3a70:	b510      	push	{r4, lr}
    3a72:	2001      	movs	r0, #1
    3a74:	4b01      	ldr	r3, [pc, #4]	; (3a7c <TC1_Handler+0xc>)
    3a76:	4798      	blx	r3
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	000039fd 	.word	0x000039fd

00003a80 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    3a80:	b510      	push	{r4, lr}
    3a82:	2002      	movs	r0, #2
    3a84:	4b01      	ldr	r3, [pc, #4]	; (3a8c <TC4_Handler+0xc>)
    3a86:	4798      	blx	r3
    3a88:	bd10      	pop	{r4, pc}
    3a8a:	46c0      	nop			; (mov r8, r8)
    3a8c:	000039fd 	.word	0x000039fd

00003a90 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a92:	46de      	mov	lr, fp
    3a94:	4657      	mov	r7, sl
    3a96:	464e      	mov	r6, r9
    3a98:	4645      	mov	r5, r8
    3a9a:	b5e0      	push	{r5, r6, r7, lr}
    3a9c:	b091      	sub	sp, #68	; 0x44
    3a9e:	0006      	movs	r6, r0
    3aa0:	000c      	movs	r4, r1
    3aa2:	0015      	movs	r5, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3aa4:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3aa6:	0008      	movs	r0, r1
    3aa8:	4bb5      	ldr	r3, [pc, #724]	; (3d80 <usart_init+0x2f0>)
    3aaa:	4798      	blx	r3
    3aac:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    3aae:	2805      	cmp	r0, #5
    3ab0:	d00d      	beq.n	3ace <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ab2:	0007      	movs	r7, r0
    3ab4:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    3ab6:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ab8:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3aba:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3abc:	07c9      	lsls	r1, r1, #31
    3abe:	d509      	bpl.n	3ad4 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3ac0:	b011      	add	sp, #68	; 0x44
    3ac2:	bc3c      	pop	{r2, r3, r4, r5}
    3ac4:	4690      	mov	r8, r2
    3ac6:	4699      	mov	r9, r3
    3ac8:	46a2      	mov	sl, r4
    3aca:	46ab      	mov	fp, r5
    3acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3ace:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    3ad0:	2301      	movs	r3, #1
    3ad2:	e7f1      	b.n	3ab8 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ad4:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    3ad6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ad8:	0789      	lsls	r1, r1, #30
    3ada:	d4f1      	bmi.n	3ac0 <usart_init+0x30>
	if (sercom_index == 5) {
    3adc:	2a05      	cmp	r2, #5
    3ade:	d049      	beq.n	3b74 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    3ae0:	49a8      	ldr	r1, [pc, #672]	; (3d84 <usart_init+0x2f4>)
    3ae2:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    3ae4:	2201      	movs	r2, #1
    3ae6:	409a      	lsls	r2, r3
    3ae8:	0013      	movs	r3, r2
    3aea:	4303      	orrs	r3, r0
    3aec:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    3aee:	a90f      	add	r1, sp, #60	; 0x3c
    3af0:	232d      	movs	r3, #45	; 0x2d
    3af2:	4698      	mov	r8, r3
    3af4:	5ceb      	ldrb	r3, [r5, r3]
    3af6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3af8:	b2ff      	uxtb	r7, r7
    3afa:	0038      	movs	r0, r7
    3afc:	4ba2      	ldr	r3, [pc, #648]	; (3d88 <usart_init+0x2f8>)
    3afe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3b00:	0038      	movs	r0, r7
    3b02:	4ba2      	ldr	r3, [pc, #648]	; (3d8c <usart_init+0x2fc>)
    3b04:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3b06:	4643      	mov	r3, r8
    3b08:	5ce8      	ldrb	r0, [r5, r3]
    3b0a:	2100      	movs	r1, #0
    3b0c:	4ba0      	ldr	r3, [pc, #640]	; (3d90 <usart_init+0x300>)
    3b0e:	4798      	blx	r3
	module->character_size = config->character_size;
    3b10:	7aeb      	ldrb	r3, [r5, #11]
    3b12:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    3b14:	2324      	movs	r3, #36	; 0x24
    3b16:	5ceb      	ldrb	r3, [r5, r3]
    3b18:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3b1a:	2325      	movs	r3, #37	; 0x25
    3b1c:	5ceb      	ldrb	r3, [r5, r3]
    3b1e:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3b20:	7eeb      	ldrb	r3, [r5, #27]
    3b22:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3b24:	7f2b      	ldrb	r3, [r5, #28]
    3b26:	7273      	strb	r3, [r6, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b28:	6833      	ldr	r3, [r6, #0]
    3b2a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b2c:	0018      	movs	r0, r3
    3b2e:	4b94      	ldr	r3, [pc, #592]	; (3d80 <usart_init+0x2f0>)
    3b30:	4798      	blx	r3
	if (sercom_index == 5) {
    3b32:	2805      	cmp	r0, #5
    3b34:	d026      	beq.n	3b84 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b36:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    3b38:	2200      	movs	r2, #0
    3b3a:	230e      	movs	r3, #14
    3b3c:	a906      	add	r1, sp, #24
    3b3e:	468c      	mov	ip, r1
    3b40:	4463      	add	r3, ip
    3b42:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3b44:	8a2a      	ldrh	r2, [r5, #16]
    3b46:	9202      	str	r2, [sp, #8]
    3b48:	2380      	movs	r3, #128	; 0x80
    3b4a:	01db      	lsls	r3, r3, #7
    3b4c:	429a      	cmp	r2, r3
    3b4e:	d100      	bne.n	3b52 <usart_init+0xc2>
    3b50:	e0a8      	b.n	3ca4 <usart_init+0x214>
    3b52:	d919      	bls.n	3b88 <usart_init+0xf8>
    3b54:	23c0      	movs	r3, #192	; 0xc0
    3b56:	01db      	lsls	r3, r3, #7
    3b58:	9a02      	ldr	r2, [sp, #8]
    3b5a:	429a      	cmp	r2, r3
    3b5c:	d100      	bne.n	3b60 <usart_init+0xd0>
    3b5e:	e09c      	b.n	3c9a <usart_init+0x20a>
    3b60:	2380      	movs	r3, #128	; 0x80
    3b62:	021b      	lsls	r3, r3, #8
    3b64:	429a      	cmp	r2, r3
    3b66:	d000      	beq.n	3b6a <usart_init+0xda>
    3b68:	e105      	b.n	3d76 <usart_init+0x2e6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3b6a:	2303      	movs	r3, #3
    3b6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b6e:	2300      	movs	r3, #0
    3b70:	9307      	str	r3, [sp, #28]
    3b72:	e012      	b.n	3b9a <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    3b74:	4983      	ldr	r1, [pc, #524]	; (3d84 <usart_init+0x2f4>)
    3b76:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    3b78:	3a04      	subs	r2, #4
    3b7a:	409a      	lsls	r2, r3
    3b7c:	0013      	movs	r3, r2
    3b7e:	4303      	orrs	r3, r0
    3b80:	620b      	str	r3, [r1, #32]
    3b82:	e7b4      	b.n	3aee <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3b84:	2018      	movs	r0, #24
    3b86:	e7d7      	b.n	3b38 <usart_init+0xa8>
	switch (config->sample_rate) {
    3b88:	2380      	movs	r3, #128	; 0x80
    3b8a:	019b      	lsls	r3, r3, #6
    3b8c:	429a      	cmp	r2, r3
    3b8e:	d000      	beq.n	3b92 <usart_init+0x102>
    3b90:	e0f1      	b.n	3d76 <usart_init+0x2e6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3b92:	2310      	movs	r3, #16
    3b94:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3b96:	3b0f      	subs	r3, #15
    3b98:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3b9a:	682b      	ldr	r3, [r5, #0]
    3b9c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    3b9e:	68eb      	ldr	r3, [r5, #12]
    3ba0:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    3ba2:	696b      	ldr	r3, [r5, #20]
    3ba4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3ba6:	7e2b      	ldrb	r3, [r5, #24]
    3ba8:	9303      	str	r3, [sp, #12]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3baa:	2326      	movs	r3, #38	; 0x26
    3bac:	5ceb      	ldrb	r3, [r5, r3]
    3bae:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3bb0:	686b      	ldr	r3, [r5, #4]
    3bb2:	4699      	mov	r9, r3
	switch (transfer_mode)
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d100      	bne.n	3bba <usart_init+0x12a>
    3bb8:	e09c      	b.n	3cf4 <usart_init+0x264>
    3bba:	2380      	movs	r3, #128	; 0x80
    3bbc:	055b      	lsls	r3, r3, #21
    3bbe:	4599      	cmp	r9, r3
    3bc0:	d104      	bne.n	3bcc <usart_init+0x13c>
			if (!config->use_external_clock) {
    3bc2:	2327      	movs	r3, #39	; 0x27
    3bc4:	5ceb      	ldrb	r3, [r5, r3]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d100      	bne.n	3bcc <usart_init+0x13c>
    3bca:	e081      	b.n	3cd0 <usart_init+0x240>
	if(config->encoding_format_enable) {
    3bcc:	7e6b      	ldrb	r3, [r5, #25]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d002      	beq.n	3bd8 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3bd2:	7eab      	ldrb	r3, [r5, #26]
    3bd4:	4642      	mov	r2, r8
    3bd6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    3bd8:	230e      	movs	r3, #14
    3bda:	aa06      	add	r2, sp, #24
    3bdc:	4694      	mov	ip, r2
    3bde:	4463      	add	r3, ip
    3be0:	881b      	ldrh	r3, [r3, #0]
    3be2:	4642      	mov	r2, r8
    3be4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3be6:	465b      	mov	r3, fp
    3be8:	9a05      	ldr	r2, [sp, #20]
    3bea:	4313      	orrs	r3, r2
    3bec:	9a04      	ldr	r2, [sp, #16]
    3bee:	4313      	orrs	r3, r2
    3bf0:	464a      	mov	r2, r9
    3bf2:	4313      	orrs	r3, r2
    3bf4:	9f02      	ldr	r7, [sp, #8]
    3bf6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3bf8:	9b03      	ldr	r3, [sp, #12]
    3bfa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    3bfc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3bfe:	4653      	mov	r3, sl
    3c00:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    3c02:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    3c04:	2327      	movs	r3, #39	; 0x27
    3c06:	5ceb      	ldrb	r3, [r5, r3]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d101      	bne.n	3c10 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3c0c:	3304      	adds	r3, #4
    3c0e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3c10:	7e6b      	ldrb	r3, [r5, #25]
    3c12:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3c14:	7f2a      	ldrb	r2, [r5, #28]
    3c16:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3c18:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3c1a:	7f6a      	ldrb	r2, [r5, #29]
    3c1c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3c1e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3c20:	2224      	movs	r2, #36	; 0x24
    3c22:	5caa      	ldrb	r2, [r5, r2]
    3c24:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3c26:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3c28:	2225      	movs	r2, #37	; 0x25
    3c2a:	5caa      	ldrb	r2, [r5, r2]
    3c2c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3c2e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    3c30:	7aa9      	ldrb	r1, [r5, #10]
    3c32:	7aea      	ldrb	r2, [r5, #11]
    3c34:	4311      	orrs	r1, r2
    3c36:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    3c38:	892b      	ldrh	r3, [r5, #8]
    3c3a:	2bff      	cmp	r3, #255	; 0xff
    3c3c:	d07e      	beq.n	3d3c <usart_init+0x2ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3c3e:	2280      	movs	r2, #128	; 0x80
    3c40:	0452      	lsls	r2, r2, #17
    3c42:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    3c44:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    3c46:	232c      	movs	r3, #44	; 0x2c
    3c48:	5ceb      	ldrb	r3, [r5, r3]
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d103      	bne.n	3c56 <usart_init+0x1c6>
    3c4e:	4b51      	ldr	r3, [pc, #324]	; (3d94 <usart_init+0x304>)
    3c50:	789b      	ldrb	r3, [r3, #2]
    3c52:	079b      	lsls	r3, r3, #30
    3c54:	d501      	bpl.n	3c5a <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3c56:	2380      	movs	r3, #128	; 0x80
    3c58:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c5a:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c5c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d1fc      	bne.n	3c5c <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    3c62:	4643      	mov	r3, r8
    3c64:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c66:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c68:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d1fc      	bne.n	3c68 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    3c6e:	4643      	mov	r3, r8
    3c70:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3c72:	ab0e      	add	r3, sp, #56	; 0x38
    3c74:	2280      	movs	r2, #128	; 0x80
    3c76:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3c78:	2200      	movs	r2, #0
    3c7a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    3c7c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3c7e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3c80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    3c82:	930a      	str	r3, [sp, #40]	; 0x28
    3c84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    3c86:	930b      	str	r3, [sp, #44]	; 0x2c
    3c88:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3c8a:	930c      	str	r3, [sp, #48]	; 0x30
    3c8c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    3c8e:	9302      	str	r3, [sp, #8]
    3c90:	930d      	str	r3, [sp, #52]	; 0x34
    3c92:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3c94:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3c96:	4e40      	ldr	r6, [pc, #256]	; (3d98 <usart_init+0x308>)
    3c98:	e05e      	b.n	3d58 <usart_init+0x2c8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3c9a:	2308      	movs	r3, #8
    3c9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3c9e:	3b07      	subs	r3, #7
    3ca0:	9307      	str	r3, [sp, #28]
    3ca2:	e77a      	b.n	3b9a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    3ca4:	682b      	ldr	r3, [r5, #0]
    3ca6:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    3ca8:	68eb      	ldr	r3, [r5, #12]
    3caa:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
    3cac:	696b      	ldr	r3, [r5, #20]
    3cae:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3cb0:	7e2b      	ldrb	r3, [r5, #24]
    3cb2:	9303      	str	r3, [sp, #12]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3cb4:	2326      	movs	r3, #38	; 0x26
    3cb6:	5ceb      	ldrb	r3, [r5, r3]
    3cb8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3cba:	686b      	ldr	r3, [r5, #4]
    3cbc:	4699      	mov	r9, r3
	switch (transfer_mode)
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d014      	beq.n	3cec <usart_init+0x25c>
    3cc2:	2380      	movs	r3, #128	; 0x80
    3cc4:	055b      	lsls	r3, r3, #21
    3cc6:	4599      	cmp	r9, r3
    3cc8:	d100      	bne.n	3ccc <usart_init+0x23c>
    3cca:	e77a      	b.n	3bc2 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    3ccc:	2000      	movs	r0, #0
    3cce:	e020      	b.n	3d12 <usart_init+0x282>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3cd0:	6a2b      	ldr	r3, [r5, #32]
    3cd2:	001f      	movs	r7, r3
    3cd4:	b2c0      	uxtb	r0, r0
    3cd6:	4b31      	ldr	r3, [pc, #196]	; (3d9c <usart_init+0x30c>)
    3cd8:	4798      	blx	r3
    3cda:	0001      	movs	r1, r0
    3cdc:	220e      	movs	r2, #14
    3cde:	ab06      	add	r3, sp, #24
    3ce0:	469c      	mov	ip, r3
    3ce2:	4462      	add	r2, ip
    3ce4:	0038      	movs	r0, r7
    3ce6:	4b2e      	ldr	r3, [pc, #184]	; (3da0 <usart_init+0x310>)
    3ce8:	4798      	blx	r3
    3cea:	e012      	b.n	3d12 <usart_init+0x282>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3cec:	2308      	movs	r3, #8
    3cee:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3cf0:	2300      	movs	r3, #0
    3cf2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    3cf4:	2327      	movs	r3, #39	; 0x27
    3cf6:	5ceb      	ldrb	r3, [r5, r3]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d00e      	beq.n	3d1a <usart_init+0x28a>
				status_code =
    3cfc:	9b06      	ldr	r3, [sp, #24]
    3cfe:	9300      	str	r3, [sp, #0]
    3d00:	9b07      	ldr	r3, [sp, #28]
    3d02:	220e      	movs	r2, #14
    3d04:	a906      	add	r1, sp, #24
    3d06:	468c      	mov	ip, r1
    3d08:	4462      	add	r2, ip
    3d0a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    3d0c:	6a28      	ldr	r0, [r5, #32]
    3d0e:	4f25      	ldr	r7, [pc, #148]	; (3da4 <usart_init+0x314>)
    3d10:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    3d12:	2800      	cmp	r0, #0
    3d14:	d000      	beq.n	3d18 <usart_init+0x288>
    3d16:	e6d3      	b.n	3ac0 <usart_init+0x30>
    3d18:	e758      	b.n	3bcc <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    3d1a:	6a2b      	ldr	r3, [r5, #32]
    3d1c:	001f      	movs	r7, r3
    3d1e:	b2c0      	uxtb	r0, r0
    3d20:	4b1e      	ldr	r3, [pc, #120]	; (3d9c <usart_init+0x30c>)
    3d22:	4798      	blx	r3
    3d24:	0001      	movs	r1, r0
				status_code =
    3d26:	9b06      	ldr	r3, [sp, #24]
    3d28:	9300      	str	r3, [sp, #0]
    3d2a:	9b07      	ldr	r3, [sp, #28]
    3d2c:	220e      	movs	r2, #14
    3d2e:	a806      	add	r0, sp, #24
    3d30:	4684      	mov	ip, r0
    3d32:	4462      	add	r2, ip
    3d34:	0038      	movs	r0, r7
    3d36:	4f1b      	ldr	r7, [pc, #108]	; (3da4 <usart_init+0x314>)
    3d38:	47b8      	blx	r7
    3d3a:	e7ea      	b.n	3d12 <usart_init+0x282>
		if(config->lin_slave_enable) {
    3d3c:	7eeb      	ldrb	r3, [r5, #27]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d081      	beq.n	3c46 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3d42:	2380      	movs	r3, #128	; 0x80
    3d44:	04db      	lsls	r3, r3, #19
    3d46:	431f      	orrs	r7, r3
    3d48:	e77d      	b.n	3c46 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3d4a:	0020      	movs	r0, r4
    3d4c:	4b16      	ldr	r3, [pc, #88]	; (3da8 <usart_init+0x318>)
    3d4e:	4798      	blx	r3
    3d50:	e007      	b.n	3d62 <usart_init+0x2d2>
    3d52:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3d54:	2f04      	cmp	r7, #4
    3d56:	d00c      	beq.n	3d72 <usart_init+0x2e2>
    3d58:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3d5a:	00bb      	lsls	r3, r7, #2
    3d5c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    3d5e:	2800      	cmp	r0, #0
    3d60:	d0f3      	beq.n	3d4a <usart_init+0x2ba>
		if (current_pinmux != PINMUX_UNUSED) {
    3d62:	1c43      	adds	r3, r0, #1
    3d64:	d0f5      	beq.n	3d52 <usart_init+0x2c2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3d66:	a90e      	add	r1, sp, #56	; 0x38
    3d68:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3d6a:	0c00      	lsrs	r0, r0, #16
    3d6c:	b2c0      	uxtb	r0, r0
    3d6e:	47b0      	blx	r6
    3d70:	e7ef      	b.n	3d52 <usart_init+0x2c2>
	return status_code;
    3d72:	2000      	movs	r0, #0
    3d74:	e6a4      	b.n	3ac0 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3d76:	2310      	movs	r3, #16
    3d78:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3d7a:	2300      	movs	r3, #0
    3d7c:	9307      	str	r3, [sp, #28]
    3d7e:	e70c      	b.n	3b9a <usart_init+0x10a>
    3d80:	000046c5 	.word	0x000046c5
    3d84:	40000400 	.word	0x40000400
    3d88:	00005975 	.word	0x00005975
    3d8c:	00005905 	.word	0x00005905
    3d90:	0000451d 	.word	0x0000451d
    3d94:	41002000 	.word	0x41002000
    3d98:	00005a71 	.word	0x00005a71
    3d9c:	00005999 	.word	0x00005999
    3da0:	0000445f 	.word	0x0000445f
    3da4:	00004489 	.word	0x00004489
    3da8:	00004569 	.word	0x00004569

00003dac <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3dac:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    3dae:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    3db0:	2a00      	cmp	r2, #0
    3db2:	d101      	bne.n	3db8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    3db4:	0018      	movs	r0, r3
    3db6:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    3db8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    3dba:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
    3dbc:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    3dbe:	07c0      	lsls	r0, r0, #31
    3dc0:	d5f8      	bpl.n	3db4 <usart_write_wait+0x8>
	usart_hw->DATA.reg = tx_data;
    3dc2:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3dc4:	2102      	movs	r1, #2
    3dc6:	7e13      	ldrb	r3, [r2, #24]
    3dc8:	420b      	tst	r3, r1
    3dca:	d0fc      	beq.n	3dc6 <usart_write_wait+0x1a>
	return STATUS_OK;
    3dcc:	2300      	movs	r3, #0
    3dce:	e7f1      	b.n	3db4 <usart_write_wait+0x8>

00003dd0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3dd0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    3dd2:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    3dd4:	2a00      	cmp	r2, #0
    3dd6:	d101      	bne.n	3ddc <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    3dd8:	0018      	movs	r0, r3
    3dda:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ddc:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3dde:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
    3de0:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3de2:	0740      	lsls	r0, r0, #29
    3de4:	d5f8      	bpl.n	3dd8 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3de6:	8b53      	ldrh	r3, [r2, #26]
    3de8:	b2db      	uxtb	r3, r3
	if (error_code) {
    3dea:	0698      	lsls	r0, r3, #26
    3dec:	d01d      	beq.n	3e2a <usart_read_wait+0x5a>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3dee:	0798      	lsls	r0, r3, #30
    3df0:	d503      	bpl.n	3dfa <usart_read_wait+0x2a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3df2:	2302      	movs	r3, #2
    3df4:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    3df6:	3318      	adds	r3, #24
    3df8:	e7ee      	b.n	3dd8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3dfa:	0758      	lsls	r0, r3, #29
    3dfc:	d503      	bpl.n	3e06 <usart_read_wait+0x36>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3dfe:	2304      	movs	r3, #4
    3e00:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    3e02:	331a      	adds	r3, #26
    3e04:	e7e8      	b.n	3dd8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3e06:	07d8      	lsls	r0, r3, #31
    3e08:	d503      	bpl.n	3e12 <usart_read_wait+0x42>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3e0a:	2301      	movs	r3, #1
    3e0c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    3e0e:	3312      	adds	r3, #18
    3e10:	e7e2      	b.n	3dd8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3e12:	06d8      	lsls	r0, r3, #27
    3e14:	d503      	bpl.n	3e1e <usart_read_wait+0x4e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3e16:	2310      	movs	r3, #16
    3e18:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    3e1a:	3332      	adds	r3, #50	; 0x32
    3e1c:	e7dc      	b.n	3dd8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3e1e:	069b      	lsls	r3, r3, #26
    3e20:	d503      	bpl.n	3e2a <usart_read_wait+0x5a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3e22:	2320      	movs	r3, #32
    3e24:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    3e26:	3321      	adds	r3, #33	; 0x21
    3e28:	e7d6      	b.n	3dd8 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    3e2a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    3e2c:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    3e2e:	2300      	movs	r3, #0
    3e30:	e7d2      	b.n	3dd8 <usart_read_wait+0x8>
	...

00003e34 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e36:	46ce      	mov	lr, r9
    3e38:	4647      	mov	r7, r8
    3e3a:	b580      	push	{r7, lr}
    3e3c:	b083      	sub	sp, #12
    3e3e:	0005      	movs	r5, r0
    3e40:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3e42:	2017      	movs	r0, #23
	if (length == 0) {
    3e44:	2a00      	cmp	r2, #0
    3e46:	d104      	bne.n	3e52 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    3e48:	b003      	add	sp, #12
    3e4a:	bc0c      	pop	{r2, r3}
    3e4c:	4690      	mov	r8, r2
    3e4e:	4699      	mov	r9, r3
    3e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    3e52:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    3e54:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    3e56:	2b00      	cmp	r3, #0
    3e58:	d0f6      	beq.n	3e48 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e5a:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    3e5c:	3a01      	subs	r2, #1
    3e5e:	b293      	uxth	r3, r2
    3e60:	4699      	mov	r9, r3
    3e62:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    3e64:	2701      	movs	r7, #1
	while (length--) {
    3e66:	4b20      	ldr	r3, [pc, #128]	; (3ee8 <usart_write_buffer_wait+0xb4>)
    3e68:	4698      	mov	r8, r3
    3e6a:	e011      	b.n	3e90 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    3e6c:	1c73      	adds	r3, r6, #1
    3e6e:	b29b      	uxth	r3, r3
    3e70:	9a01      	ldr	r2, [sp, #4]
    3e72:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3e74:	796a      	ldrb	r2, [r5, #5]
    3e76:	2a01      	cmp	r2, #1
    3e78:	d017      	beq.n	3eaa <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    3e7a:	b289      	uxth	r1, r1
    3e7c:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    3e7e:	0028      	movs	r0, r5
    3e80:	4b1a      	ldr	r3, [pc, #104]	; (3eec <usart_write_buffer_wait+0xb8>)
    3e82:	4798      	blx	r3
	while (length--) {
    3e84:	464b      	mov	r3, r9
    3e86:	3b01      	subs	r3, #1
    3e88:	b29b      	uxth	r3, r3
    3e8a:	4699      	mov	r9, r3
    3e8c:	4543      	cmp	r3, r8
    3e8e:	d013      	beq.n	3eb8 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    3e90:	7e23      	ldrb	r3, [r4, #24]
    3e92:	423b      	tst	r3, r7
    3e94:	d1ea      	bne.n	3e6c <usart_write_buffer_wait+0x38>
    3e96:	4b14      	ldr	r3, [pc, #80]	; (3ee8 <usart_write_buffer_wait+0xb4>)
    3e98:	7e22      	ldrb	r2, [r4, #24]
    3e9a:	423a      	tst	r2, r7
    3e9c:	d1e6      	bne.n	3e6c <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    3e9e:	2b01      	cmp	r3, #1
    3ea0:	d019      	beq.n	3ed6 <usart_write_buffer_wait+0xa2>
    3ea2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d1f7      	bne.n	3e98 <usart_write_buffer_wait+0x64>
    3ea8:	e7e0      	b.n	3e6c <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    3eaa:	3602      	adds	r6, #2
    3eac:	b2b6      	uxth	r6, r6
    3eae:	9a01      	ldr	r2, [sp, #4]
    3eb0:	5cd3      	ldrb	r3, [r2, r3]
    3eb2:	021b      	lsls	r3, r3, #8
    3eb4:	4319      	orrs	r1, r3
    3eb6:	e7e2      	b.n	3e7e <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    3eb8:	7e23      	ldrb	r3, [r4, #24]
    3eba:	079b      	lsls	r3, r3, #30
    3ebc:	d40d      	bmi.n	3eda <usart_write_buffer_wait+0xa6>
    3ebe:	4b0a      	ldr	r3, [pc, #40]	; (3ee8 <usart_write_buffer_wait+0xb4>)
    3ec0:	2102      	movs	r1, #2
    3ec2:	7e22      	ldrb	r2, [r4, #24]
    3ec4:	420a      	tst	r2, r1
    3ec6:	d10a      	bne.n	3ede <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    3ec8:	2b01      	cmp	r3, #1
    3eca:	d00a      	beq.n	3ee2 <usart_write_buffer_wait+0xae>
    3ecc:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d1f7      	bne.n	3ec2 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    3ed2:	2000      	movs	r0, #0
    3ed4:	e7b8      	b.n	3e48 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    3ed6:	2012      	movs	r0, #18
    3ed8:	e7b6      	b.n	3e48 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    3eda:	2000      	movs	r0, #0
    3edc:	e7b4      	b.n	3e48 <usart_write_buffer_wait+0x14>
    3ede:	2000      	movs	r0, #0
    3ee0:	e7b2      	b.n	3e48 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    3ee2:	2012      	movs	r0, #18
    3ee4:	e7b0      	b.n	3e48 <usart_write_buffer_wait+0x14>
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	0000ffff 	.word	0x0000ffff
    3eec:	00003dad 	.word	0x00003dad

00003ef0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ef2:	46c6      	mov	lr, r8
    3ef4:	b500      	push	{lr}
    3ef6:	b088      	sub	sp, #32
    3ef8:	0005      	movs	r5, r0
    3efa:	000c      	movs	r4, r1
    3efc:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3efe:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3f00:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3f02:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3f04:	079b      	lsls	r3, r3, #30
    3f06:	d503      	bpl.n	3f10 <spi_init+0x20>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3f08:	b008      	add	sp, #32
    3f0a:	bc04      	pop	{r2}
    3f0c:	4690      	mov	r8, r2
    3f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3f10:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3f12:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3f14:	07db      	lsls	r3, r3, #31
    3f16:	d4f7      	bmi.n	3f08 <spi_init+0x18>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f18:	0008      	movs	r0, r1
    3f1a:	4b75      	ldr	r3, [pc, #468]	; (40f0 <spi_init+0x200>)
    3f1c:	4798      	blx	r3
	if (sercom_index == 5) {
    3f1e:	2805      	cmp	r0, #5
    3f20:	d100      	bne.n	3f24 <spi_init+0x34>
    3f22:	e0dd      	b.n	40e0 <spi_init+0x1f0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f24:	0007      	movs	r7, r0
    3f26:	3712      	adds	r7, #18
			MCLK->APBCMASK.reg |= mask;
    3f28:	4a72      	ldr	r2, [pc, #456]	; (40f4 <spi_init+0x204>)
    3f2a:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3f2c:	2301      	movs	r3, #1
    3f2e:	4083      	lsls	r3, r0
    3f30:	430b      	orrs	r3, r1
    3f32:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    3f34:	a907      	add	r1, sp, #28
    3f36:	2324      	movs	r3, #36	; 0x24
    3f38:	4698      	mov	r8, r3
    3f3a:	5cf3      	ldrb	r3, [r6, r3]
    3f3c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f3e:	b2ff      	uxtb	r7, r7
    3f40:	0038      	movs	r0, r7
    3f42:	4b6d      	ldr	r3, [pc, #436]	; (40f8 <spi_init+0x208>)
    3f44:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f46:	0038      	movs	r0, r7
    3f48:	4b6c      	ldr	r3, [pc, #432]	; (40fc <spi_init+0x20c>)
    3f4a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f4c:	4643      	mov	r3, r8
    3f4e:	5cf0      	ldrb	r0, [r6, r3]
    3f50:	2100      	movs	r1, #0
    3f52:	4b6b      	ldr	r3, [pc, #428]	; (4100 <spi_init+0x210>)
    3f54:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3f56:	7833      	ldrb	r3, [r6, #0]
    3f58:	2b01      	cmp	r3, #1
    3f5a:	d03f      	beq.n	3fdc <spi_init+0xec>
	if (config->mode == SPI_MODE_SLAVE) {
    3f5c:	7833      	ldrb	r3, [r6, #0]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d103      	bne.n	3f6a <spi_init+0x7a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    3f62:	6823      	ldr	r3, [r4, #0]
    3f64:	2208      	movs	r2, #8
    3f66:	4313      	orrs	r3, r2
    3f68:	6023      	str	r3, [r4, #0]
    3f6a:	002b      	movs	r3, r5
    3f6c:	330c      	adds	r3, #12
    3f6e:	0029      	movs	r1, r5
    3f70:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    3f72:	2200      	movs	r2, #0
    3f74:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3f76:	4299      	cmp	r1, r3
    3f78:	d1fc      	bne.n	3f74 <spi_init+0x84>
	module->tx_buffer_ptr              = NULL;
    3f7a:	2300      	movs	r3, #0
    3f7c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3f7e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3f80:	2400      	movs	r4, #0
    3f82:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3f84:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3f86:	3336      	adds	r3, #54	; 0x36
    3f88:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3f8a:	3301      	adds	r3, #1
    3f8c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3f8e:	3301      	adds	r3, #1
    3f90:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3f92:	3b35      	subs	r3, #53	; 0x35
    3f94:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3f96:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3f98:	6828      	ldr	r0, [r5, #0]
    3f9a:	4b55      	ldr	r3, [pc, #340]	; (40f0 <spi_init+0x200>)
    3f9c:	4798      	blx	r3
    3f9e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3fa0:	4958      	ldr	r1, [pc, #352]	; (4104 <spi_init+0x214>)
    3fa2:	4b59      	ldr	r3, [pc, #356]	; (4108 <spi_init+0x218>)
    3fa4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3fa6:	00bf      	lsls	r7, r7, #2
    3fa8:	4b58      	ldr	r3, [pc, #352]	; (410c <spi_init+0x21c>)
    3faa:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3fac:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3fae:	ab02      	add	r3, sp, #8
    3fb0:	2280      	movs	r2, #128	; 0x80
    3fb2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fb4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fb6:	3a7f      	subs	r2, #127	; 0x7f
    3fb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3fba:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3fbc:	7833      	ldrb	r3, [r6, #0]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d102      	bne.n	3fc8 <spi_init+0xd8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3fc2:	2200      	movs	r2, #0
    3fc4:	ab02      	add	r3, sp, #8
    3fc6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3fc8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3fca:	9303      	str	r3, [sp, #12]
    3fcc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3fce:	9304      	str	r3, [sp, #16]
    3fd0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3fd2:	9305      	str	r3, [sp, #20]
    3fd4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3fd6:	9306      	str	r3, [sp, #24]
    3fd8:	2400      	movs	r4, #0
    3fda:	e00b      	b.n	3ff4 <spi_init+0x104>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3fdc:	6823      	ldr	r3, [r4, #0]
    3fde:	220c      	movs	r2, #12
    3fe0:	4313      	orrs	r3, r2
    3fe2:	6023      	str	r3, [r4, #0]
    3fe4:	e7ba      	b.n	3f5c <spi_init+0x6c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3fe6:	0038      	movs	r0, r7
    3fe8:	4b49      	ldr	r3, [pc, #292]	; (4110 <spi_init+0x220>)
    3fea:	4798      	blx	r3
    3fec:	e00a      	b.n	4004 <spi_init+0x114>
    3fee:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3ff0:	2c04      	cmp	r4, #4
    3ff2:	d010      	beq.n	4016 <spi_init+0x126>
    3ff4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ff6:	00a3      	lsls	r3, r4, #2
    3ff8:	466a      	mov	r2, sp
    3ffa:	200c      	movs	r0, #12
    3ffc:	1812      	adds	r2, r2, r0
    3ffe:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4000:	2800      	cmp	r0, #0
    4002:	d0f0      	beq.n	3fe6 <spi_init+0xf6>
		if (current_pinmux != PINMUX_UNUSED) {
    4004:	1c43      	adds	r3, r0, #1
    4006:	d0f2      	beq.n	3fee <spi_init+0xfe>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4008:	a902      	add	r1, sp, #8
    400a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    400c:	0c00      	lsrs	r0, r0, #16
    400e:	b2c0      	uxtb	r0, r0
    4010:	4b40      	ldr	r3, [pc, #256]	; (4114 <spi_init+0x224>)
    4012:	4798      	blx	r3
    4014:	e7eb      	b.n	3fee <spi_init+0xfe>
	module->mode             = config->mode;
    4016:	7833      	ldrb	r3, [r6, #0]
    4018:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    401a:	7c33      	ldrb	r3, [r6, #16]
    401c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    401e:	7cb3      	ldrb	r3, [r6, #18]
    4020:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4022:	7d33      	ldrb	r3, [r6, #20]
    4024:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4026:	2200      	movs	r2, #0
    4028:	466b      	mov	r3, sp
    402a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    402c:	7833      	ldrb	r3, [r6, #0]
    402e:	2b01      	cmp	r3, #1
    4030:	d012      	beq.n	4058 <spi_init+0x168>
	if (config->mode == SPI_MODE_SLAVE) {
    4032:	7833      	ldrb	r3, [r6, #0]
    4034:	2b00      	cmp	r3, #0
    4036:	d126      	bne.n	4086 <spi_init+0x196>
		ctrla = config->mode_specific.slave.frame_format;
    4038:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    403a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    403e:	7ff1      	ldrb	r1, [r6, #31]
    4040:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4042:	7fb4      	ldrb	r4, [r6, #30]
    4044:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    4046:	4319      	orrs	r1, r3
    4048:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    404a:	2320      	movs	r3, #32
    404c:	5cf3      	ldrb	r3, [r6, r3]
    404e:	2b00      	cmp	r3, #0
    4050:	d01b      	beq.n	408a <spi_init+0x19a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4052:	2340      	movs	r3, #64	; 0x40
    4054:	431a      	orrs	r2, r3
    4056:	e018      	b.n	408a <spi_init+0x19a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4058:	6828      	ldr	r0, [r5, #0]
    405a:	4b25      	ldr	r3, [pc, #148]	; (40f0 <spi_init+0x200>)
    405c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    405e:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4060:	b2c0      	uxtb	r0, r0
    4062:	4b2d      	ldr	r3, [pc, #180]	; (4118 <spi_init+0x228>)
    4064:	4798      	blx	r3
    4066:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4068:	466b      	mov	r3, sp
    406a:	1d9a      	adds	r2, r3, #6
    406c:	69b0      	ldr	r0, [r6, #24]
    406e:	4b2b      	ldr	r3, [pc, #172]	; (411c <spi_init+0x22c>)
    4070:	4798      	blx	r3
    4072:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4074:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4076:	2b00      	cmp	r3, #0
    4078:	d000      	beq.n	407c <spi_init+0x18c>
    407a:	e745      	b.n	3f08 <spi_init+0x18>
		spi_module->BAUD.reg = (uint8_t)baud;
    407c:	466b      	mov	r3, sp
    407e:	3306      	adds	r3, #6
    4080:	781b      	ldrb	r3, [r3, #0]
    4082:	733b      	strb	r3, [r7, #12]
    4084:	e7d5      	b.n	4032 <spi_init+0x142>
	uint32_t ctrlb = 0;
    4086:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    4088:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    408a:	6873      	ldr	r3, [r6, #4]
    408c:	68b1      	ldr	r1, [r6, #8]
    408e:	430b      	orrs	r3, r1
    4090:	68f1      	ldr	r1, [r6, #12]
    4092:	430b      	orrs	r3, r1
    4094:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    4096:	7c31      	ldrb	r1, [r6, #16]
    4098:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    409a:	7c71      	ldrb	r1, [r6, #17]
    409c:	2900      	cmp	r1, #0
    409e:	d103      	bne.n	40a8 <spi_init+0x1b8>
    40a0:	491f      	ldr	r1, [pc, #124]	; (4120 <spi_init+0x230>)
    40a2:	7889      	ldrb	r1, [r1, #2]
    40a4:	0789      	lsls	r1, r1, #30
    40a6:	d501      	bpl.n	40ac <spi_init+0x1bc>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    40a8:	2180      	movs	r1, #128	; 0x80
    40aa:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    40ac:	7cb1      	ldrb	r1, [r6, #18]
    40ae:	2900      	cmp	r1, #0
    40b0:	d002      	beq.n	40b8 <spi_init+0x1c8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    40b2:	2180      	movs	r1, #128	; 0x80
    40b4:	0289      	lsls	r1, r1, #10
    40b6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    40b8:	7cf1      	ldrb	r1, [r6, #19]
    40ba:	2900      	cmp	r1, #0
    40bc:	d002      	beq.n	40c4 <spi_init+0x1d4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    40be:	2180      	movs	r1, #128	; 0x80
    40c0:	0089      	lsls	r1, r1, #2
    40c2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    40c4:	7d31      	ldrb	r1, [r6, #20]
    40c6:	2900      	cmp	r1, #0
    40c8:	d002      	beq.n	40d0 <spi_init+0x1e0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    40ca:	2180      	movs	r1, #128	; 0x80
    40cc:	0189      	lsls	r1, r1, #6
    40ce:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    40d0:	6839      	ldr	r1, [r7, #0]
    40d2:	430b      	orrs	r3, r1
    40d4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	431a      	orrs	r2, r3
    40da:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    40dc:	2000      	movs	r0, #0
    40de:	e713      	b.n	3f08 <spi_init+0x18>
			MCLK->APBDMASK.reg |= mask;
    40e0:	4a04      	ldr	r2, [pc, #16]	; (40f4 <spi_init+0x204>)
    40e2:	6a13      	ldr	r3, [r2, #32]
    40e4:	2102      	movs	r1, #2
    40e6:	430b      	orrs	r3, r1
    40e8:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    40ea:	2718      	movs	r7, #24
    40ec:	e722      	b.n	3f34 <spi_init+0x44>
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	000046c5 	.word	0x000046c5
    40f4:	40000400 	.word	0x40000400
    40f8:	00005975 	.word	0x00005975
    40fc:	00005905 	.word	0x00005905
    4100:	0000451d 	.word	0x0000451d
    4104:	00004181 	.word	0x00004181
    4108:	00004701 	.word	0x00004701
    410c:	20000cd8 	.word	0x20000cd8
    4110:	00004569 	.word	0x00004569
    4114:	00005a71 	.word	0x00005a71
    4118:	00005999 	.word	0x00005999
    411c:	0000445f 	.word	0x0000445f
    4120:	41002000 	.word	0x41002000

00004124 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4124:	1c93      	adds	r3, r2, #2
    4126:	009b      	lsls	r3, r3, #2
    4128:	18c3      	adds	r3, r0, r3
    412a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    412c:	2136      	movs	r1, #54	; 0x36
    412e:	2301      	movs	r3, #1
    4130:	4093      	lsls	r3, r2
    4132:	001a      	movs	r2, r3
    4134:	5c43      	ldrb	r3, [r0, r1]
    4136:	4313      	orrs	r3, r2
    4138:	5443      	strb	r3, [r0, r1]
}
    413a:	4770      	bx	lr

0000413c <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    413c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    413e:	2417      	movs	r4, #23
	if (length == 0) {
    4140:	2b00      	cmp	r3, #0
    4142:	d101      	bne.n	4148 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
    4144:	0020      	movs	r0, r4
    4146:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    4148:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    414a:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    414c:	2d00      	cmp	r5, #0
    414e:	d0f9      	beq.n	4144 <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    4150:	341c      	adds	r4, #28
    4152:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    4154:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4156:	2d05      	cmp	r5, #5
    4158:	d0f4      	beq.n	4144 <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    415a:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    415c:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    415e:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    4160:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    4162:	2205      	movs	r2, #5
    4164:	2338      	movs	r3, #56	; 0x38
    4166:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
    4168:	3b36      	subs	r3, #54	; 0x36
    416a:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    416c:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    416e:	759a      	strb	r2, [r3, #22]
	if (module->mode == SPI_MODE_SLAVE) {
    4170:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    4172:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
    4174:	2a00      	cmp	r2, #0
    4176:	d1e5      	bne.n	4144 <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4178:	3202      	adds	r2, #2
    417a:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    417c:	759a      	strb	r2, [r3, #22]
    417e:	e7e1      	b.n	4144 <spi_transceive_buffer_job+0x8>

00004180 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4182:	0080      	lsls	r0, r0, #2
    4184:	4b85      	ldr	r3, [pc, #532]	; (439c <_spi_interrupt_handler+0x21c>)
    4186:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4188:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    418a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    418c:	5ce3      	ldrb	r3, [r4, r3]
    418e:	2236      	movs	r2, #54	; 0x36
    4190:	5ca7      	ldrb	r7, [r4, r2]
    4192:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4194:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4196:	7db5      	ldrb	r5, [r6, #22]
    4198:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    419a:	07eb      	lsls	r3, r5, #31
    419c:	d52e      	bpl.n	41fc <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    419e:	7963      	ldrb	r3, [r4, #5]
    41a0:	2b01      	cmp	r3, #1
    41a2:	d025      	beq.n	41f0 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    41a4:	2b00      	cmp	r3, #0
    41a6:	d129      	bne.n	41fc <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    41a8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    41aa:	2b00      	cmp	r3, #0
    41ac:	d026      	beq.n	41fc <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    41ae:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    41b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    41b2:	7813      	ldrb	r3, [r2, #0]
    41b4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    41b6:	1c50      	adds	r0, r2, #1
    41b8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    41ba:	79a0      	ldrb	r0, [r4, #6]
    41bc:	2801      	cmp	r0, #1
    41be:	d100      	bne.n	41c2 <_spi_interrupt_handler+0x42>
    41c0:	e069      	b.n	4296 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    41c2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    41c4:	05db      	lsls	r3, r3, #23
    41c6:	0ddb      	lsrs	r3, r3, #23
    41c8:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    41ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    41cc:	3b01      	subs	r3, #1
    41ce:	b29b      	uxth	r3, r3
    41d0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    41d2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    41d4:	b29b      	uxth	r3, r3
    41d6:	2b00      	cmp	r3, #0
    41d8:	d110      	bne.n	41fc <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    41da:	3301      	adds	r3, #1
    41dc:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    41de:	7a63      	ldrb	r3, [r4, #9]
    41e0:	2b01      	cmp	r3, #1
    41e2:	d10b      	bne.n	41fc <_spi_interrupt_handler+0x7c>
    41e4:	79e3      	ldrb	r3, [r4, #7]
    41e6:	2b00      	cmp	r3, #0
    41e8:	d108      	bne.n	41fc <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    41ea:	3302      	adds	r3, #2
    41ec:	75b3      	strb	r3, [r6, #22]
    41ee:	e005      	b.n	41fc <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    41f0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    41f2:	2b00      	cmp	r3, #0
    41f4:	d03e      	beq.n	4274 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    41f6:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    41f8:	2b00      	cmp	r3, #0
    41fa:	d1d8      	bne.n	41ae <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    41fc:	076b      	lsls	r3, r5, #29
    41fe:	d511      	bpl.n	4224 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4200:	8b73      	ldrh	r3, [r6, #26]
    4202:	075b      	lsls	r3, r3, #29
    4204:	d551      	bpl.n	42aa <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4206:	7a63      	ldrb	r3, [r4, #9]
    4208:	2b01      	cmp	r3, #1
    420a:	d008      	beq.n	421e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    420c:	221e      	movs	r2, #30
    420e:	2338      	movs	r3, #56	; 0x38
    4210:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4212:	3b35      	subs	r3, #53	; 0x35
    4214:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4216:	3302      	adds	r3, #2
    4218:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    421a:	073b      	lsls	r3, r7, #28
    421c:	d441      	bmi.n	42a2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    421e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4220:	2304      	movs	r3, #4
    4222:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4224:	07ab      	lsls	r3, r5, #30
    4226:	d515      	bpl.n	4254 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    4228:	7963      	ldrb	r3, [r4, #5]
    422a:	2b00      	cmp	r3, #0
    422c:	d10e      	bne.n	424c <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    422e:	3307      	adds	r3, #7
    4230:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4232:	3b05      	subs	r3, #5
    4234:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    4236:	3301      	adds	r3, #1
    4238:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    423a:	2300      	movs	r3, #0
    423c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    423e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    4240:	3338      	adds	r3, #56	; 0x38
    4242:	2200      	movs	r2, #0
    4244:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    4246:	06fb      	lsls	r3, r7, #27
    4248:	d500      	bpl.n	424c <_spi_interrupt_handler+0xcc>
    424a:	e07f      	b.n	434c <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    424c:	7963      	ldrb	r3, [r4, #5]
    424e:	2b01      	cmp	r3, #1
    4250:	d100      	bne.n	4254 <_spi_interrupt_handler+0xd4>
    4252:	e07f      	b.n	4354 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    4254:	072b      	lsls	r3, r5, #28
    4256:	d508      	bpl.n	426a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    4258:	7963      	ldrb	r3, [r4, #5]
    425a:	2b00      	cmp	r3, #0
    425c:	d105      	bne.n	426a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    425e:	3308      	adds	r3, #8
    4260:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4262:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    4264:	06bb      	lsls	r3, r7, #26
    4266:	d500      	bpl.n	426a <_spi_interrupt_handler+0xea>
    4268:	e08a      	b.n	4380 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    426a:	b26d      	sxtb	r5, r5
    426c:	2d00      	cmp	r5, #0
    426e:	da00      	bge.n	4272 <_spi_interrupt_handler+0xf2>
    4270:	e08a      	b.n	4388 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    4274:	4b4a      	ldr	r3, [pc, #296]	; (43a0 <_spi_interrupt_handler+0x220>)
    4276:	881b      	ldrh	r3, [r3, #0]
    4278:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    427a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    427c:	3b01      	subs	r3, #1
    427e:	b29b      	uxth	r3, r3
    4280:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4282:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4284:	b29b      	uxth	r3, r3
    4286:	2b00      	cmp	r3, #0
    4288:	d101      	bne.n	428e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    428a:	3301      	adds	r3, #1
    428c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    428e:	7963      	ldrb	r3, [r4, #5]
		if (0
    4290:	2b01      	cmp	r3, #1
    4292:	d0b0      	beq.n	41f6 <_spi_interrupt_handler+0x76>
    4294:	e786      	b.n	41a4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4296:	7850      	ldrb	r0, [r2, #1]
    4298:	0200      	lsls	r0, r0, #8
    429a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    429c:	3202      	adds	r2, #2
    429e:	62e2      	str	r2, [r4, #44]	; 0x2c
    42a0:	e790      	b.n	41c4 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    42a2:	0020      	movs	r0, r4
    42a4:	69a3      	ldr	r3, [r4, #24]
    42a6:	4798      	blx	r3
    42a8:	e7b9      	b.n	421e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    42aa:	7a63      	ldrb	r3, [r4, #9]
    42ac:	2b01      	cmp	r3, #1
    42ae:	d027      	beq.n	4300 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    42b0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    42b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42b4:	05db      	lsls	r3, r3, #23
    42b6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    42b8:	b2da      	uxtb	r2, r3
    42ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    42bc:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    42be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    42c0:	1c51      	adds	r1, r2, #1
    42c2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42c4:	79a1      	ldrb	r1, [r4, #6]
    42c6:	2901      	cmp	r1, #1
    42c8:	d033      	beq.n	4332 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    42ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    42cc:	3b01      	subs	r3, #1
    42ce:	b29b      	uxth	r3, r3
    42d0:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    42d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    42d4:	b29b      	uxth	r3, r3
    42d6:	2b00      	cmp	r3, #0
    42d8:	d1a4      	bne.n	4224 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    42da:	2200      	movs	r2, #0
    42dc:	3338      	adds	r3, #56	; 0x38
    42de:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    42e0:	3b34      	subs	r3, #52	; 0x34
    42e2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    42e4:	7a63      	ldrb	r3, [r4, #9]
    42e6:	2b02      	cmp	r3, #2
    42e8:	d029      	beq.n	433e <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    42ea:	7a63      	ldrb	r3, [r4, #9]
    42ec:	2b00      	cmp	r3, #0
    42ee:	d000      	beq.n	42f2 <_spi_interrupt_handler+0x172>
    42f0:	e798      	b.n	4224 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    42f2:	07bb      	lsls	r3, r7, #30
    42f4:	d400      	bmi.n	42f8 <_spi_interrupt_handler+0x178>
    42f6:	e795      	b.n	4224 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    42f8:	0020      	movs	r0, r4
    42fa:	6923      	ldr	r3, [r4, #16]
    42fc:	4798      	blx	r3
    42fe:	e791      	b.n	4224 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4300:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4304:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4306:	3b01      	subs	r3, #1
    4308:	b29b      	uxth	r3, r3
    430a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    430c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    430e:	b29b      	uxth	r3, r3
    4310:	2b00      	cmp	r3, #0
    4312:	d000      	beq.n	4316 <_spi_interrupt_handler+0x196>
    4314:	e786      	b.n	4224 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4316:	3304      	adds	r3, #4
    4318:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    431a:	2200      	movs	r2, #0
    431c:	3334      	adds	r3, #52	; 0x34
    431e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4320:	3b35      	subs	r3, #53	; 0x35
    4322:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4324:	07fb      	lsls	r3, r7, #31
    4326:	d400      	bmi.n	432a <_spi_interrupt_handler+0x1aa>
    4328:	e77c      	b.n	4224 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    432a:	0020      	movs	r0, r4
    432c:	68e3      	ldr	r3, [r4, #12]
    432e:	4798      	blx	r3
    4330:	e778      	b.n	4224 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4332:	0a1b      	lsrs	r3, r3, #8
    4334:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4338:	3301      	adds	r3, #1
    433a:	62a3      	str	r3, [r4, #40]	; 0x28
    433c:	e7c5      	b.n	42ca <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    433e:	077b      	lsls	r3, r7, #29
    4340:	d400      	bmi.n	4344 <_spi_interrupt_handler+0x1c4>
    4342:	e76f      	b.n	4224 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4344:	0020      	movs	r0, r4
    4346:	6963      	ldr	r3, [r4, #20]
    4348:	4798      	blx	r3
    434a:	e76b      	b.n	4224 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    434c:	0020      	movs	r0, r4
    434e:	69e3      	ldr	r3, [r4, #28]
    4350:	4798      	blx	r3
    4352:	e77b      	b.n	424c <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4354:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4356:	2b01      	cmp	r3, #1
    4358:	d000      	beq.n	435c <_spi_interrupt_handler+0x1dc>
    435a:	e786      	b.n	426a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    435c:	79e3      	ldrb	r3, [r4, #7]
    435e:	2b00      	cmp	r3, #0
    4360:	d000      	beq.n	4364 <_spi_interrupt_handler+0x1e4>
    4362:	e782      	b.n	426a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4364:	3302      	adds	r3, #2
    4366:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4368:	3301      	adds	r3, #1
    436a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    436c:	2200      	movs	r2, #0
    436e:	3335      	adds	r3, #53	; 0x35
    4370:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4372:	07fb      	lsls	r3, r7, #31
    4374:	d400      	bmi.n	4378 <_spi_interrupt_handler+0x1f8>
    4376:	e76d      	b.n	4254 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4378:	0020      	movs	r0, r4
    437a:	68e3      	ldr	r3, [r4, #12]
    437c:	4798      	blx	r3
    437e:	e769      	b.n	4254 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    4380:	0020      	movs	r0, r4
    4382:	6a23      	ldr	r3, [r4, #32]
    4384:	4798      	blx	r3
    4386:	e770      	b.n	426a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4388:	2380      	movs	r3, #128	; 0x80
    438a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    438c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    438e:	067b      	lsls	r3, r7, #25
    4390:	d400      	bmi.n	4394 <_spi_interrupt_handler+0x214>
    4392:	e76e      	b.n	4272 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4394:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4396:	0020      	movs	r0, r4
    4398:	4798      	blx	r3
}
    439a:	e76a      	b.n	4272 <_spi_interrupt_handler+0xf2>
    439c:	20000cd8 	.word	0x20000cd8
    43a0:	20000cd4 	.word	0x20000cd4

000043a4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    43a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43a6:	46de      	mov	lr, fp
    43a8:	4657      	mov	r7, sl
    43aa:	464e      	mov	r6, r9
    43ac:	4645      	mov	r5, r8
    43ae:	b5e0      	push	{r5, r6, r7, lr}
    43b0:	b087      	sub	sp, #28
    43b2:	4680      	mov	r8, r0
    43b4:	9104      	str	r1, [sp, #16]
    43b6:	0016      	movs	r6, r2
    43b8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    43ba:	2200      	movs	r2, #0
    43bc:	2300      	movs	r3, #0
    43be:	2100      	movs	r1, #0
    43c0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    43c2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    43c4:	2001      	movs	r0, #1
    43c6:	0021      	movs	r1, r4
    43c8:	9600      	str	r6, [sp, #0]
    43ca:	9701      	str	r7, [sp, #4]
    43cc:	465c      	mov	r4, fp
    43ce:	9403      	str	r4, [sp, #12]
    43d0:	4644      	mov	r4, r8
    43d2:	9405      	str	r4, [sp, #20]
    43d4:	e013      	b.n	43fe <long_division+0x5a>
    43d6:	2420      	movs	r4, #32
    43d8:	1a64      	subs	r4, r4, r1
    43da:	0005      	movs	r5, r0
    43dc:	40e5      	lsrs	r5, r4
    43de:	46a8      	mov	r8, r5
    43e0:	e014      	b.n	440c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    43e2:	9c00      	ldr	r4, [sp, #0]
    43e4:	9d01      	ldr	r5, [sp, #4]
    43e6:	1b12      	subs	r2, r2, r4
    43e8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    43ea:	465c      	mov	r4, fp
    43ec:	464d      	mov	r5, r9
    43ee:	432c      	orrs	r4, r5
    43f0:	46a3      	mov	fp, r4
    43f2:	9c03      	ldr	r4, [sp, #12]
    43f4:	4645      	mov	r5, r8
    43f6:	432c      	orrs	r4, r5
    43f8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    43fa:	3901      	subs	r1, #1
    43fc:	d325      	bcc.n	444a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    43fe:	2420      	movs	r4, #32
    4400:	4264      	negs	r4, r4
    4402:	190c      	adds	r4, r1, r4
    4404:	d4e7      	bmi.n	43d6 <long_division+0x32>
    4406:	0005      	movs	r5, r0
    4408:	40a5      	lsls	r5, r4
    440a:	46a8      	mov	r8, r5
    440c:	0004      	movs	r4, r0
    440e:	408c      	lsls	r4, r1
    4410:	46a1      	mov	r9, r4
		r = r << 1;
    4412:	1892      	adds	r2, r2, r2
    4414:	415b      	adcs	r3, r3
    4416:	0014      	movs	r4, r2
    4418:	001d      	movs	r5, r3
		if (n & bit_shift) {
    441a:	9e05      	ldr	r6, [sp, #20]
    441c:	464f      	mov	r7, r9
    441e:	403e      	ands	r6, r7
    4420:	46b4      	mov	ip, r6
    4422:	9e04      	ldr	r6, [sp, #16]
    4424:	4647      	mov	r7, r8
    4426:	403e      	ands	r6, r7
    4428:	46b2      	mov	sl, r6
    442a:	4666      	mov	r6, ip
    442c:	4657      	mov	r7, sl
    442e:	433e      	orrs	r6, r7
    4430:	d003      	beq.n	443a <long_division+0x96>
			r |= 0x01;
    4432:	0006      	movs	r6, r0
    4434:	4326      	orrs	r6, r4
    4436:	0032      	movs	r2, r6
    4438:	002b      	movs	r3, r5
		if (r >= d) {
    443a:	9c00      	ldr	r4, [sp, #0]
    443c:	9d01      	ldr	r5, [sp, #4]
    443e:	429d      	cmp	r5, r3
    4440:	d8db      	bhi.n	43fa <long_division+0x56>
    4442:	d1ce      	bne.n	43e2 <long_division+0x3e>
    4444:	4294      	cmp	r4, r2
    4446:	d8d8      	bhi.n	43fa <long_division+0x56>
    4448:	e7cb      	b.n	43e2 <long_division+0x3e>
    444a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    444c:	4658      	mov	r0, fp
    444e:	0019      	movs	r1, r3
    4450:	b007      	add	sp, #28
    4452:	bc3c      	pop	{r2, r3, r4, r5}
    4454:	4690      	mov	r8, r2
    4456:	4699      	mov	r9, r3
    4458:	46a2      	mov	sl, r4
    445a:	46ab      	mov	fp, r5
    445c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000445e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    445e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4460:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4462:	2340      	movs	r3, #64	; 0x40
    4464:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4466:	4281      	cmp	r1, r0
    4468:	d202      	bcs.n	4470 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    446a:	0018      	movs	r0, r3
    446c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    446e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4470:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4472:	1c63      	adds	r3, r4, #1
    4474:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4476:	4288      	cmp	r0, r1
    4478:	d9f9      	bls.n	446e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    447a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    447c:	2cff      	cmp	r4, #255	; 0xff
    447e:	d8f4      	bhi.n	446a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4480:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4482:	2300      	movs	r3, #0
    4484:	e7f1      	b.n	446a <_sercom_get_sync_baud_val+0xc>
	...

00004488 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4488:	b5f0      	push	{r4, r5, r6, r7, lr}
    448a:	b083      	sub	sp, #12
    448c:	000f      	movs	r7, r1
    448e:	0016      	movs	r6, r2
    4490:	aa08      	add	r2, sp, #32
    4492:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4494:	0004      	movs	r4, r0
    4496:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4498:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    449a:	42bc      	cmp	r4, r7
    449c:	d902      	bls.n	44a4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    449e:	0010      	movs	r0, r2
    44a0:	b003      	add	sp, #12
    44a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    44a4:	2b00      	cmp	r3, #0
    44a6:	d114      	bne.n	44d2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    44a8:	0002      	movs	r2, r0
    44aa:	0008      	movs	r0, r1
    44ac:	2100      	movs	r1, #0
    44ae:	4c19      	ldr	r4, [pc, #100]	; (4514 <_sercom_get_async_baud_val+0x8c>)
    44b0:	47a0      	blx	r4
    44b2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    44b4:	003a      	movs	r2, r7
    44b6:	2300      	movs	r3, #0
    44b8:	2000      	movs	r0, #0
    44ba:	4c17      	ldr	r4, [pc, #92]	; (4518 <_sercom_get_async_baud_val+0x90>)
    44bc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    44be:	2200      	movs	r2, #0
    44c0:	2301      	movs	r3, #1
    44c2:	1a12      	subs	r2, r2, r0
    44c4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    44c6:	0c12      	lsrs	r2, r2, #16
    44c8:	041b      	lsls	r3, r3, #16
    44ca:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    44cc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    44ce:	2200      	movs	r2, #0
    44d0:	e7e5      	b.n	449e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    44d2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    44d4:	2b01      	cmp	r3, #1
    44d6:	d1f9      	bne.n	44cc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    44d8:	000a      	movs	r2, r1
    44da:	2300      	movs	r3, #0
    44dc:	2100      	movs	r1, #0
    44de:	4c0d      	ldr	r4, [pc, #52]	; (4514 <_sercom_get_async_baud_val+0x8c>)
    44e0:	47a0      	blx	r4
    44e2:	0002      	movs	r2, r0
    44e4:	000b      	movs	r3, r1
    44e6:	9200      	str	r2, [sp, #0]
    44e8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    44ea:	0038      	movs	r0, r7
    44ec:	2100      	movs	r1, #0
    44ee:	4c0a      	ldr	r4, [pc, #40]	; (4518 <_sercom_get_async_baud_val+0x90>)
    44f0:	47a0      	blx	r4
    44f2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    44f4:	2380      	movs	r3, #128	; 0x80
    44f6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    44f8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    44fa:	4298      	cmp	r0, r3
    44fc:	d8cf      	bhi.n	449e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    44fe:	0f79      	lsrs	r1, r7, #29
    4500:	00f8      	lsls	r0, r7, #3
    4502:	9a00      	ldr	r2, [sp, #0]
    4504:	9b01      	ldr	r3, [sp, #4]
    4506:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4508:	00ea      	lsls	r2, r5, #3
    450a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    450c:	b2d2      	uxtb	r2, r2
    450e:	0352      	lsls	r2, r2, #13
    4510:	432a      	orrs	r2, r5
    4512:	e7db      	b.n	44cc <_sercom_get_async_baud_val+0x44>
    4514:	00006469 	.word	0x00006469
    4518:	000043a5 	.word	0x000043a5

0000451c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    451c:	b510      	push	{r4, lr}
    451e:	b082      	sub	sp, #8
    4520:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4522:	4b0e      	ldr	r3, [pc, #56]	; (455c <sercom_set_gclk_generator+0x40>)
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	2b00      	cmp	r3, #0
    4528:	d007      	beq.n	453a <sercom_set_gclk_generator+0x1e>
    452a:	2900      	cmp	r1, #0
    452c:	d105      	bne.n	453a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    452e:	4b0b      	ldr	r3, [pc, #44]	; (455c <sercom_set_gclk_generator+0x40>)
    4530:	785b      	ldrb	r3, [r3, #1]
    4532:	4283      	cmp	r3, r0
    4534:	d010      	beq.n	4558 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4536:	201d      	movs	r0, #29
    4538:	e00c      	b.n	4554 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    453a:	a901      	add	r1, sp, #4
    453c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    453e:	2011      	movs	r0, #17
    4540:	4b07      	ldr	r3, [pc, #28]	; (4560 <sercom_set_gclk_generator+0x44>)
    4542:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4544:	2011      	movs	r0, #17
    4546:	4b07      	ldr	r3, [pc, #28]	; (4564 <sercom_set_gclk_generator+0x48>)
    4548:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <sercom_set_gclk_generator+0x40>)
    454c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    454e:	2201      	movs	r2, #1
    4550:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4552:	2000      	movs	r0, #0
}
    4554:	b002      	add	sp, #8
    4556:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4558:	2000      	movs	r0, #0
    455a:	e7fb      	b.n	4554 <sercom_set_gclk_generator+0x38>
    455c:	20000b24 	.word	0x20000b24
    4560:	00005975 	.word	0x00005975
    4564:	00005905 	.word	0x00005905

00004568 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4568:	4b3c      	ldr	r3, [pc, #240]	; (465c <_sercom_get_default_pad+0xf4>)
    456a:	4298      	cmp	r0, r3
    456c:	d032      	beq.n	45d4 <_sercom_get_default_pad+0x6c>
    456e:	d90a      	bls.n	4586 <_sercom_get_default_pad+0x1e>
    4570:	4b3b      	ldr	r3, [pc, #236]	; (4660 <_sercom_get_default_pad+0xf8>)
    4572:	4298      	cmp	r0, r3
    4574:	d04e      	beq.n	4614 <_sercom_get_default_pad+0xac>
    4576:	4b3b      	ldr	r3, [pc, #236]	; (4664 <_sercom_get_default_pad+0xfc>)
    4578:	4298      	cmp	r0, r3
    457a:	d055      	beq.n	4628 <_sercom_get_default_pad+0xc0>
    457c:	4b3a      	ldr	r3, [pc, #232]	; (4668 <_sercom_get_default_pad+0x100>)
    457e:	4298      	cmp	r0, r3
    4580:	d038      	beq.n	45f4 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4582:	2000      	movs	r0, #0
}
    4584:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4586:	2384      	movs	r3, #132	; 0x84
    4588:	05db      	lsls	r3, r3, #23
    458a:	4298      	cmp	r0, r3
    458c:	d00c      	beq.n	45a8 <_sercom_get_default_pad+0x40>
    458e:	4b37      	ldr	r3, [pc, #220]	; (466c <_sercom_get_default_pad+0x104>)
    4590:	4298      	cmp	r0, r3
    4592:	d1f6      	bne.n	4582 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4594:	2901      	cmp	r1, #1
    4596:	d017      	beq.n	45c8 <_sercom_get_default_pad+0x60>
    4598:	2900      	cmp	r1, #0
    459a:	d057      	beq.n	464c <_sercom_get_default_pad+0xe4>
    459c:	2902      	cmp	r1, #2
    459e:	d015      	beq.n	45cc <_sercom_get_default_pad+0x64>
    45a0:	2903      	cmp	r1, #3
    45a2:	d015      	beq.n	45d0 <_sercom_get_default_pad+0x68>
	return 0;
    45a4:	2000      	movs	r0, #0
    45a6:	e7ed      	b.n	4584 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    45a8:	2901      	cmp	r1, #1
    45aa:	d007      	beq.n	45bc <_sercom_get_default_pad+0x54>
    45ac:	2900      	cmp	r1, #0
    45ae:	d04b      	beq.n	4648 <_sercom_get_default_pad+0xe0>
    45b0:	2902      	cmp	r1, #2
    45b2:	d005      	beq.n	45c0 <_sercom_get_default_pad+0x58>
    45b4:	2903      	cmp	r1, #3
    45b6:	d005      	beq.n	45c4 <_sercom_get_default_pad+0x5c>
	return 0;
    45b8:	2000      	movs	r0, #0
    45ba:	e7e3      	b.n	4584 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    45bc:	482c      	ldr	r0, [pc, #176]	; (4670 <_sercom_get_default_pad+0x108>)
    45be:	e7e1      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45c0:	482c      	ldr	r0, [pc, #176]	; (4674 <_sercom_get_default_pad+0x10c>)
    45c2:	e7df      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45c4:	482c      	ldr	r0, [pc, #176]	; (4678 <_sercom_get_default_pad+0x110>)
    45c6:	e7dd      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45c8:	482c      	ldr	r0, [pc, #176]	; (467c <_sercom_get_default_pad+0x114>)
    45ca:	e7db      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45cc:	482c      	ldr	r0, [pc, #176]	; (4680 <_sercom_get_default_pad+0x118>)
    45ce:	e7d9      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45d0:	482c      	ldr	r0, [pc, #176]	; (4684 <_sercom_get_default_pad+0x11c>)
    45d2:	e7d7      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45d4:	2901      	cmp	r1, #1
    45d6:	d007      	beq.n	45e8 <_sercom_get_default_pad+0x80>
    45d8:	2900      	cmp	r1, #0
    45da:	d039      	beq.n	4650 <_sercom_get_default_pad+0xe8>
    45dc:	2902      	cmp	r1, #2
    45de:	d005      	beq.n	45ec <_sercom_get_default_pad+0x84>
    45e0:	2903      	cmp	r1, #3
    45e2:	d005      	beq.n	45f0 <_sercom_get_default_pad+0x88>
	return 0;
    45e4:	2000      	movs	r0, #0
    45e6:	e7cd      	b.n	4584 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    45e8:	4827      	ldr	r0, [pc, #156]	; (4688 <_sercom_get_default_pad+0x120>)
    45ea:	e7cb      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45ec:	4827      	ldr	r0, [pc, #156]	; (468c <_sercom_get_default_pad+0x124>)
    45ee:	e7c9      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45f0:	4827      	ldr	r0, [pc, #156]	; (4690 <_sercom_get_default_pad+0x128>)
    45f2:	e7c7      	b.n	4584 <_sercom_get_default_pad+0x1c>
    45f4:	2901      	cmp	r1, #1
    45f6:	d007      	beq.n	4608 <_sercom_get_default_pad+0xa0>
    45f8:	2900      	cmp	r1, #0
    45fa:	d02b      	beq.n	4654 <_sercom_get_default_pad+0xec>
    45fc:	2902      	cmp	r1, #2
    45fe:	d005      	beq.n	460c <_sercom_get_default_pad+0xa4>
    4600:	2903      	cmp	r1, #3
    4602:	d005      	beq.n	4610 <_sercom_get_default_pad+0xa8>
	return 0;
    4604:	2000      	movs	r0, #0
    4606:	e7bd      	b.n	4584 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4608:	4822      	ldr	r0, [pc, #136]	; (4694 <_sercom_get_default_pad+0x12c>)
    460a:	e7bb      	b.n	4584 <_sercom_get_default_pad+0x1c>
    460c:	4822      	ldr	r0, [pc, #136]	; (4698 <_sercom_get_default_pad+0x130>)
    460e:	e7b9      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4610:	4822      	ldr	r0, [pc, #136]	; (469c <_sercom_get_default_pad+0x134>)
    4612:	e7b7      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4614:	2902      	cmp	r1, #2
    4616:	d003      	beq.n	4620 <_sercom_get_default_pad+0xb8>
    4618:	2903      	cmp	r1, #3
    461a:	d003      	beq.n	4624 <_sercom_get_default_pad+0xbc>
    461c:	2000      	movs	r0, #0
    461e:	e7b1      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4620:	481f      	ldr	r0, [pc, #124]	; (46a0 <_sercom_get_default_pad+0x138>)
    4622:	e7af      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4624:	481f      	ldr	r0, [pc, #124]	; (46a4 <_sercom_get_default_pad+0x13c>)
    4626:	e7ad      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4628:	2901      	cmp	r1, #1
    462a:	d007      	beq.n	463c <_sercom_get_default_pad+0xd4>
    462c:	2900      	cmp	r1, #0
    462e:	d013      	beq.n	4658 <_sercom_get_default_pad+0xf0>
    4630:	2902      	cmp	r1, #2
    4632:	d005      	beq.n	4640 <_sercom_get_default_pad+0xd8>
    4634:	2903      	cmp	r1, #3
    4636:	d005      	beq.n	4644 <_sercom_get_default_pad+0xdc>
	return 0;
    4638:	2000      	movs	r0, #0
    463a:	e7a3      	b.n	4584 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    463c:	481a      	ldr	r0, [pc, #104]	; (46a8 <_sercom_get_default_pad+0x140>)
    463e:	e7a1      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4640:	481a      	ldr	r0, [pc, #104]	; (46ac <_sercom_get_default_pad+0x144>)
    4642:	e79f      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4644:	481a      	ldr	r0, [pc, #104]	; (46b0 <_sercom_get_default_pad+0x148>)
    4646:	e79d      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4648:	481a      	ldr	r0, [pc, #104]	; (46b4 <_sercom_get_default_pad+0x14c>)
    464a:	e79b      	b.n	4584 <_sercom_get_default_pad+0x1c>
    464c:	2003      	movs	r0, #3
    464e:	e799      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4650:	4819      	ldr	r0, [pc, #100]	; (46b8 <_sercom_get_default_pad+0x150>)
    4652:	e797      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4654:	4819      	ldr	r0, [pc, #100]	; (46bc <_sercom_get_default_pad+0x154>)
    4656:	e795      	b.n	4584 <_sercom_get_default_pad+0x1c>
    4658:	4819      	ldr	r0, [pc, #100]	; (46c0 <_sercom_get_default_pad+0x158>)
    465a:	e793      	b.n	4584 <_sercom_get_default_pad+0x1c>
    465c:	42000800 	.word	0x42000800
    4660:	42001000 	.word	0x42001000
    4664:	43000400 	.word	0x43000400
    4668:	42000c00 	.word	0x42000c00
    466c:	42000400 	.word	0x42000400
    4670:	00050003 	.word	0x00050003
    4674:	00060003 	.word	0x00060003
    4678:	00070003 	.word	0x00070003
    467c:	00010003 	.word	0x00010003
    4680:	001e0003 	.word	0x001e0003
    4684:	001f0003 	.word	0x001f0003
    4688:	00090003 	.word	0x00090003
    468c:	000a0003 	.word	0x000a0003
    4690:	000b0003 	.word	0x000b0003
    4694:	00110003 	.word	0x00110003
    4698:	00120003 	.word	0x00120003
    469c:	00130003 	.word	0x00130003
    46a0:	000e0003 	.word	0x000e0003
    46a4:	000f0003 	.word	0x000f0003
    46a8:	00170003 	.word	0x00170003
    46ac:	00180003 	.word	0x00180003
    46b0:	00190003 	.word	0x00190003
    46b4:	00040003 	.word	0x00040003
    46b8:	00080003 	.word	0x00080003
    46bc:	00100003 	.word	0x00100003
    46c0:	00160003 	.word	0x00160003

000046c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    46c4:	b530      	push	{r4, r5, lr}
    46c6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    46c8:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <_sercom_get_sercom_inst_index+0x34>)
    46ca:	466a      	mov	r2, sp
    46cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    46ce:	c232      	stmia	r2!, {r1, r4, r5}
    46d0:	cb32      	ldmia	r3!, {r1, r4, r5}
    46d2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    46d4:	9b00      	ldr	r3, [sp, #0]
    46d6:	4283      	cmp	r3, r0
    46d8:	d00b      	beq.n	46f2 <_sercom_get_sercom_inst_index+0x2e>
    46da:	2301      	movs	r3, #1
    46dc:	009a      	lsls	r2, r3, #2
    46de:	4669      	mov	r1, sp
    46e0:	5852      	ldr	r2, [r2, r1]
    46e2:	4282      	cmp	r2, r0
    46e4:	d006      	beq.n	46f4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    46e6:	3301      	adds	r3, #1
    46e8:	2b06      	cmp	r3, #6
    46ea:	d1f7      	bne.n	46dc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    46ec:	2000      	movs	r0, #0
}
    46ee:	b007      	add	sp, #28
    46f0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    46f2:	2300      	movs	r3, #0
			return i;
    46f4:	b2d8      	uxtb	r0, r3
    46f6:	e7fa      	b.n	46ee <_sercom_get_sercom_inst_index+0x2a>
    46f8:	0000df04 	.word	0x0000df04

000046fc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    46fc:	4770      	bx	lr
	...

00004700 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4700:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4702:	4b0a      	ldr	r3, [pc, #40]	; (472c <_sercom_set_handler+0x2c>)
    4704:	781b      	ldrb	r3, [r3, #0]
    4706:	2b00      	cmp	r3, #0
    4708:	d10c      	bne.n	4724 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    470a:	4f09      	ldr	r7, [pc, #36]	; (4730 <_sercom_set_handler+0x30>)
    470c:	4e09      	ldr	r6, [pc, #36]	; (4734 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    470e:	4d0a      	ldr	r5, [pc, #40]	; (4738 <_sercom_set_handler+0x38>)
    4710:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4712:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4714:	195a      	adds	r2, r3, r5
    4716:	6014      	str	r4, [r2, #0]
    4718:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    471a:	2b18      	cmp	r3, #24
    471c:	d1f9      	bne.n	4712 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    471e:	2201      	movs	r2, #1
    4720:	4b02      	ldr	r3, [pc, #8]	; (472c <_sercom_set_handler+0x2c>)
    4722:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4724:	0080      	lsls	r0, r0, #2
    4726:	4b02      	ldr	r3, [pc, #8]	; (4730 <_sercom_set_handler+0x30>)
    4728:	50c1      	str	r1, [r0, r3]
}
    472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    472c:	20000b26 	.word	0x20000b26
    4730:	20000b28 	.word	0x20000b28
    4734:	000046fd 	.word	0x000046fd
    4738:	20000cd8 	.word	0x20000cd8

0000473c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    473c:	b500      	push	{lr}
    473e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4740:	2308      	movs	r3, #8
    4742:	466a      	mov	r2, sp
    4744:	7013      	strb	r3, [r2, #0]
    4746:	3301      	adds	r3, #1
    4748:	7053      	strb	r3, [r2, #1]
    474a:	3301      	adds	r3, #1
    474c:	7093      	strb	r3, [r2, #2]
    474e:	3301      	adds	r3, #1
    4750:	70d3      	strb	r3, [r2, #3]
    4752:	3301      	adds	r3, #1
    4754:	7113      	strb	r3, [r2, #4]
    4756:	3301      	adds	r3, #1
    4758:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    475a:	4b03      	ldr	r3, [pc, #12]	; (4768 <_sercom_get_interrupt_vector+0x2c>)
    475c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    475e:	466b      	mov	r3, sp
    4760:	5618      	ldrsb	r0, [r3, r0]
}
    4762:	b003      	add	sp, #12
    4764:	bd00      	pop	{pc}
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	000046c5 	.word	0x000046c5

0000476c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    476c:	b510      	push	{r4, lr}
    476e:	4b02      	ldr	r3, [pc, #8]	; (4778 <SERCOM0_Handler+0xc>)
    4770:	681b      	ldr	r3, [r3, #0]
    4772:	2000      	movs	r0, #0
    4774:	4798      	blx	r3
    4776:	bd10      	pop	{r4, pc}
    4778:	20000b28 	.word	0x20000b28

0000477c <SERCOM1_Handler>:
    477c:	b510      	push	{r4, lr}
    477e:	4b02      	ldr	r3, [pc, #8]	; (4788 <SERCOM1_Handler+0xc>)
    4780:	685b      	ldr	r3, [r3, #4]
    4782:	2001      	movs	r0, #1
    4784:	4798      	blx	r3
    4786:	bd10      	pop	{r4, pc}
    4788:	20000b28 	.word	0x20000b28

0000478c <SERCOM2_Handler>:
    478c:	b510      	push	{r4, lr}
    478e:	4b02      	ldr	r3, [pc, #8]	; (4798 <SERCOM2_Handler+0xc>)
    4790:	689b      	ldr	r3, [r3, #8]
    4792:	2002      	movs	r0, #2
    4794:	4798      	blx	r3
    4796:	bd10      	pop	{r4, pc}
    4798:	20000b28 	.word	0x20000b28

0000479c <SERCOM3_Handler>:
    479c:	b510      	push	{r4, lr}
    479e:	4b02      	ldr	r3, [pc, #8]	; (47a8 <SERCOM3_Handler+0xc>)
    47a0:	68db      	ldr	r3, [r3, #12]
    47a2:	2003      	movs	r0, #3
    47a4:	4798      	blx	r3
    47a6:	bd10      	pop	{r4, pc}
    47a8:	20000b28 	.word	0x20000b28

000047ac <SERCOM4_Handler>:
    47ac:	b510      	push	{r4, lr}
    47ae:	4b02      	ldr	r3, [pc, #8]	; (47b8 <SERCOM4_Handler+0xc>)
    47b0:	691b      	ldr	r3, [r3, #16]
    47b2:	2004      	movs	r0, #4
    47b4:	4798      	blx	r3
    47b6:	bd10      	pop	{r4, pc}
    47b8:	20000b28 	.word	0x20000b28

000047bc <SERCOM5_Handler>:
    47bc:	b510      	push	{r4, lr}
    47be:	4b02      	ldr	r3, [pc, #8]	; (47c8 <SERCOM5_Handler+0xc>)
    47c0:	695b      	ldr	r3, [r3, #20]
    47c2:	2005      	movs	r0, #5
    47c4:	4798      	blx	r3
    47c6:	bd10      	pop	{r4, pc}
    47c8:	20000b28 	.word	0x20000b28

000047cc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    47cc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    47ce:	2200      	movs	r2, #0
    47d0:	4b10      	ldr	r3, [pc, #64]	; (4814 <EIC_Handler+0x48>)
    47d2:	701a      	strb	r2, [r3, #0]
    47d4:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    47d6:	4910      	ldr	r1, [pc, #64]	; (4818 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    47d8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    47da:	4e10      	ldr	r6, [pc, #64]	; (481c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    47dc:	4c0d      	ldr	r4, [pc, #52]	; (4814 <EIC_Handler+0x48>)
    47de:	e00a      	b.n	47f6 <EIC_Handler+0x2a>
		return eics[eic_index];
    47e0:	490d      	ldr	r1, [pc, #52]	; (4818 <EIC_Handler+0x4c>)
    47e2:	e008      	b.n	47f6 <EIC_Handler+0x2a>
    47e4:	7823      	ldrb	r3, [r4, #0]
    47e6:	3301      	adds	r3, #1
    47e8:	b2db      	uxtb	r3, r3
    47ea:	7023      	strb	r3, [r4, #0]
    47ec:	2b0f      	cmp	r3, #15
    47ee:	d810      	bhi.n	4812 <EIC_Handler+0x46>
		return NULL;
    47f0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    47f2:	2b1f      	cmp	r3, #31
    47f4:	d9f4      	bls.n	47e0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    47f6:	0028      	movs	r0, r5
    47f8:	4018      	ands	r0, r3
    47fa:	2201      	movs	r2, #1
    47fc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    47fe:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4800:	4210      	tst	r0, r2
    4802:	d0ef      	beq.n	47e4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4804:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4806:	009b      	lsls	r3, r3, #2
    4808:	599b      	ldr	r3, [r3, r6]
    480a:	2b00      	cmp	r3, #0
    480c:	d0ea      	beq.n	47e4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    480e:	4798      	blx	r3
    4810:	e7e8      	b.n	47e4 <EIC_Handler+0x18>
			}
		}
	}
}
    4812:	bd70      	pop	{r4, r5, r6, pc}
    4814:	20000cf0 	.word	0x20000cf0
    4818:	40002400 	.word	0x40002400
    481c:	20000c88 	.word	0x20000c88

00004820 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4820:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4822:	2000      	movs	r0, #0
    4824:	4b08      	ldr	r3, [pc, #32]	; (4848 <delay_init+0x28>)
    4826:	4798      	blx	r3
    4828:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    482a:	4c08      	ldr	r4, [pc, #32]	; (484c <delay_init+0x2c>)
    482c:	21fa      	movs	r1, #250	; 0xfa
    482e:	0089      	lsls	r1, r1, #2
    4830:	47a0      	blx	r4
    4832:	4b07      	ldr	r3, [pc, #28]	; (4850 <delay_init+0x30>)
    4834:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4836:	4907      	ldr	r1, [pc, #28]	; (4854 <delay_init+0x34>)
    4838:	0028      	movs	r0, r5
    483a:	47a0      	blx	r4
    483c:	4b06      	ldr	r3, [pc, #24]	; (4858 <delay_init+0x38>)
    483e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4840:	2205      	movs	r2, #5
    4842:	4b06      	ldr	r3, [pc, #24]	; (485c <delay_init+0x3c>)
    4844:	601a      	str	r2, [r3, #0]
}
    4846:	bd70      	pop	{r4, r5, r6, pc}
    4848:	00005899 	.word	0x00005899
    484c:	000062d5 	.word	0x000062d5
    4850:	20000008 	.word	0x20000008
    4854:	000f4240 	.word	0x000f4240
    4858:	2000000c 	.word	0x2000000c
    485c:	e000e010 	.word	0xe000e010

00004860 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4860:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4862:	4b08      	ldr	r3, [pc, #32]	; (4884 <delay_cycles_us+0x24>)
    4864:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    4866:	4a08      	ldr	r2, [pc, #32]	; (4888 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4868:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    486a:	2180      	movs	r1, #128	; 0x80
    486c:	0249      	lsls	r1, r1, #9
	while (n--) {
    486e:	3801      	subs	r0, #1
    4870:	d307      	bcc.n	4882 <delay_cycles_us+0x22>
	if (n > 0) {
    4872:	2c00      	cmp	r4, #0
    4874:	d0fb      	beq.n	486e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4876:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4878:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    487a:	6813      	ldr	r3, [r2, #0]
    487c:	420b      	tst	r3, r1
    487e:	d0fc      	beq.n	487a <delay_cycles_us+0x1a>
    4880:	e7f5      	b.n	486e <delay_cycles_us+0xe>
	}
}
    4882:	bd30      	pop	{r4, r5, pc}
    4884:	2000000c 	.word	0x2000000c
    4888:	e000e010 	.word	0xe000e010

0000488c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    488c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    488e:	4b08      	ldr	r3, [pc, #32]	; (48b0 <delay_cycles_ms+0x24>)
    4890:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4892:	4a08      	ldr	r2, [pc, #32]	; (48b4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4894:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4896:	2180      	movs	r1, #128	; 0x80
    4898:	0249      	lsls	r1, r1, #9
	while (n--) {
    489a:	3801      	subs	r0, #1
    489c:	d307      	bcc.n	48ae <delay_cycles_ms+0x22>
	if (n > 0) {
    489e:	2c00      	cmp	r4, #0
    48a0:	d0fb      	beq.n	489a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    48a2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    48a4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    48a6:	6813      	ldr	r3, [r2, #0]
    48a8:	420b      	tst	r3, r1
    48aa:	d0fc      	beq.n	48a6 <delay_cycles_ms+0x1a>
    48ac:	e7f5      	b.n	489a <delay_cycles_ms+0xe>
	}
}
    48ae:	bd30      	pop	{r4, r5, pc}
    48b0:	20000008 	.word	0x20000008
    48b4:	e000e010 	.word	0xe000e010

000048b8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    48b8:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    48ba:	4a1e      	ldr	r2, [pc, #120]	; (4934 <nvm_set_config+0x7c>)
    48bc:	6993      	ldr	r3, [r2, #24]
    48be:	2104      	movs	r1, #4
    48c0:	430b      	orrs	r3, r1
    48c2:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    48c4:	4b1c      	ldr	r3, [pc, #112]	; (4938 <nvm_set_config+0x80>)
    48c6:	2220      	movs	r2, #32
    48c8:	32ff      	adds	r2, #255	; 0xff
    48ca:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    48cc:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    48ce:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    48d0:	07d2      	lsls	r2, r2, #31
    48d2:	d401      	bmi.n	48d8 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    48d4:	0018      	movs	r0, r3
    48d6:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    48d8:	7803      	ldrb	r3, [r0, #0]
    48da:	021b      	lsls	r3, r3, #8
    48dc:	22c0      	movs	r2, #192	; 0xc0
    48de:	0092      	lsls	r2, r2, #2
    48e0:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    48e2:	7841      	ldrb	r1, [r0, #1]
    48e4:	01c9      	lsls	r1, r1, #7
    48e6:	22ff      	movs	r2, #255	; 0xff
    48e8:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    48ea:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    48ec:	7881      	ldrb	r1, [r0, #2]
    48ee:	0049      	lsls	r1, r1, #1
    48f0:	221e      	movs	r2, #30
    48f2:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    48f4:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    48f6:	78c2      	ldrb	r2, [r0, #3]
    48f8:	0492      	lsls	r2, r2, #18
    48fa:	2180      	movs	r1, #128	; 0x80
    48fc:	02c9      	lsls	r1, r1, #11
    48fe:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4900:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4902:	7902      	ldrb	r2, [r0, #4]
    4904:	0412      	lsls	r2, r2, #16
    4906:	21c0      	movs	r1, #192	; 0xc0
    4908:	0289      	lsls	r1, r1, #10
    490a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    490c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    490e:	4a0a      	ldr	r2, [pc, #40]	; (4938 <nvm_set_config+0x80>)
    4910:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4912:	6893      	ldr	r3, [r2, #8]
    4914:	035b      	lsls	r3, r3, #13
    4916:	0f5b      	lsrs	r3, r3, #29
    4918:	4908      	ldr	r1, [pc, #32]	; (493c <nvm_set_config+0x84>)
    491a:	2408      	movs	r4, #8
    491c:	409c      	lsls	r4, r3
    491e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4920:	6893      	ldr	r3, [r2, #8]
    4922:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4924:	7843      	ldrb	r3, [r0, #1]
    4926:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4928:	8b13      	ldrh	r3, [r2, #24]
    492a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    492c:	0fdb      	lsrs	r3, r3, #31
    492e:	011b      	lsls	r3, r3, #4
    4930:	e7d0      	b.n	48d4 <nvm_set_config+0x1c>
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	40000400 	.word	0x40000400
    4938:	41004000 	.word	0x41004000
    493c:	20000b40 	.word	0x20000b40

00004940 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4940:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4942:	4a30      	ldr	r2, [pc, #192]	; (4a04 <nvm_execute_command+0xc4>)
    4944:	8814      	ldrh	r4, [r2, #0]
    4946:	8853      	ldrh	r3, [r2, #2]
    4948:	4363      	muls	r3, r4
    494a:	428b      	cmp	r3, r1
    494c:	d20b      	bcs.n	4966 <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    494e:	2280      	movs	r2, #128	; 0x80
    4950:	0192      	lsls	r2, r2, #6
    4952:	4b2d      	ldr	r3, [pc, #180]	; (4a08 <nvm_execute_command+0xc8>)
    4954:	18cb      	adds	r3, r1, r3
    4956:	4293      	cmp	r3, r2
    4958:	d905      	bls.n	4966 <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    495a:	4c2c      	ldr	r4, [pc, #176]	; (4a0c <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    495c:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    495e:	4a2c      	ldr	r2, [pc, #176]	; (4a10 <nvm_execute_command+0xd0>)
    4960:	188a      	adds	r2, r1, r2
    4962:	42a2      	cmp	r2, r4
    4964:	d80e      	bhi.n	4984 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4966:	4b2b      	ldr	r3, [pc, #172]	; (4a14 <nvm_execute_command+0xd4>)
    4968:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    496a:	2280      	movs	r2, #128	; 0x80
    496c:	02d2      	lsls	r2, r2, #11
    496e:	4322      	orrs	r2, r4
    4970:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4972:	2220      	movs	r2, #32
    4974:	32ff      	adds	r2, #255	; 0xff
    4976:	831a      	strh	r2, [r3, #24]
    4978:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    497a:	07db      	lsls	r3, r3, #31
    497c:	d404      	bmi.n	4988 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    497e:	4b25      	ldr	r3, [pc, #148]	; (4a14 <nvm_execute_command+0xd4>)
    4980:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    4982:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4984:	0018      	movs	r0, r3
    4986:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4988:	2845      	cmp	r0, #69	; 0x45
    498a:	d829      	bhi.n	49e0 <nvm_execute_command+0xa0>
    498c:	0083      	lsls	r3, r0, #2
    498e:	4a22      	ldr	r2, [pc, #136]	; (4a18 <nvm_execute_command+0xd8>)
    4990:	58d3      	ldr	r3, [r2, r3]
    4992:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4994:	4b1f      	ldr	r3, [pc, #124]	; (4a14 <nvm_execute_command+0xd4>)
    4996:	8b1b      	ldrh	r3, [r3, #24]
    4998:	05db      	lsls	r3, r3, #23
    499a:	d503      	bpl.n	49a4 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    499c:	4b1d      	ldr	r3, [pc, #116]	; (4a14 <nvm_execute_command+0xd4>)
    499e:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    49a0:	2310      	movs	r3, #16
    49a2:	e7ef      	b.n	4984 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    49a4:	0889      	lsrs	r1, r1, #2
    49a6:	0049      	lsls	r1, r1, #1
    49a8:	4b1a      	ldr	r3, [pc, #104]	; (4a14 <nvm_execute_command+0xd4>)
    49aa:	61d9      	str	r1, [r3, #28]
			break;
    49ac:	e003      	b.n	49b6 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    49ae:	0889      	lsrs	r1, r1, #2
    49b0:	0049      	lsls	r1, r1, #1
    49b2:	4b18      	ldr	r3, [pc, #96]	; (4a14 <nvm_execute_command+0xd4>)
    49b4:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    49b6:	23fd      	movs	r3, #253	; 0xfd
    49b8:	0005      	movs	r5, r0
    49ba:	3d1a      	subs	r5, #26
    49bc:	401d      	ands	r5, r3
    49be:	d013      	beq.n	49e8 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    49c0:	23a5      	movs	r3, #165	; 0xa5
    49c2:	021b      	lsls	r3, r3, #8
    49c4:	4318      	orrs	r0, r3
    49c6:	4b13      	ldr	r3, [pc, #76]	; (4a14 <nvm_execute_command+0xd4>)
    49c8:	8018      	strh	r0, [r3, #0]
    49ca:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    49cc:	2201      	movs	r2, #1
    49ce:	7d0b      	ldrb	r3, [r1, #20]
    49d0:	4213      	tst	r3, r2
    49d2:	d0fc      	beq.n	49ce <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    49d4:	2d00      	cmp	r5, #0
    49d6:	d00f      	beq.n	49f8 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    49d8:	4b0e      	ldr	r3, [pc, #56]	; (4a14 <nvm_execute_command+0xd4>)
    49da:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    49dc:	2300      	movs	r3, #0
    49de:	e7d1      	b.n	4984 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    49e0:	4b0c      	ldr	r3, [pc, #48]	; (4a14 <nvm_execute_command+0xd4>)
    49e2:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    49e4:	2317      	movs	r3, #23
    49e6:	e7cd      	b.n	4984 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    49e8:	4b0a      	ldr	r3, [pc, #40]	; (4a14 <nvm_execute_command+0xd4>)
    49ea:	6859      	ldr	r1, [r3, #4]
    49ec:	2280      	movs	r2, #128	; 0x80
    49ee:	02d2      	lsls	r2, r2, #11
    49f0:	430a      	orrs	r2, r1
    49f2:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    49f4:	685b      	ldr	r3, [r3, #4]
    49f6:	e7e3      	b.n	49c0 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    49f8:	4a06      	ldr	r2, [pc, #24]	; (4a14 <nvm_execute_command+0xd4>)
    49fa:	6853      	ldr	r3, [r2, #4]
    49fc:	4907      	ldr	r1, [pc, #28]	; (4a1c <nvm_execute_command+0xdc>)
    49fe:	400b      	ands	r3, r1
    4a00:	6053      	str	r3, [r2, #4]
    4a02:	e7e9      	b.n	49d8 <nvm_execute_command+0x98>
    4a04:	20000b40 	.word	0x20000b40
    4a08:	ff7fc000 	.word	0xff7fc000
    4a0c:	00000fff 	.word	0x00000fff
    4a10:	ffc00000 	.word	0xffc00000
    4a14:	41004000 	.word	0x41004000
    4a18:	0000df1c 	.word	0x0000df1c
    4a1c:	fffbffff 	.word	0xfffbffff

00004a20 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4a22:	4b2f      	ldr	r3, [pc, #188]	; (4ae0 <nvm_write_buffer+0xc0>)
    4a24:	881c      	ldrh	r4, [r3, #0]
    4a26:	885b      	ldrh	r3, [r3, #2]
    4a28:	4363      	muls	r3, r4
	if (destination_address >
    4a2a:	4283      	cmp	r3, r0
    4a2c:	d207      	bcs.n	4a3e <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4a2e:	4e2d      	ldr	r6, [pc, #180]	; (4ae4 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4a30:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4a32:	4b2d      	ldr	r3, [pc, #180]	; (4ae8 <nvm_write_buffer+0xc8>)
    4a34:	18c3      	adds	r3, r0, r3
    4a36:	42b3      	cmp	r3, r6
    4a38:	d806      	bhi.n	4a48 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4a3a:	2601      	movs	r6, #1
    4a3c:	e000      	b.n	4a40 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4a3e:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4a40:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4a42:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4a44:	4218      	tst	r0, r3
    4a46:	d001      	beq.n	4a4c <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4a48:	0028      	movs	r0, r5
    4a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4a4c:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4a4e:	4294      	cmp	r4, r2
    4a50:	d3fa      	bcc.n	4a48 <nvm_write_buffer+0x28>
    4a52:	4b26      	ldr	r3, [pc, #152]	; (4aec <nvm_write_buffer+0xcc>)
    4a54:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4a56:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4a58:	07db      	lsls	r3, r3, #31
    4a5a:	d5f5      	bpl.n	4a48 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4a5c:	4c24      	ldr	r4, [pc, #144]	; (4af0 <nvm_write_buffer+0xd0>)
    4a5e:	4b23      	ldr	r3, [pc, #140]	; (4aec <nvm_write_buffer+0xcc>)
    4a60:	801c      	strh	r4, [r3, #0]
    4a62:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4a64:	2401      	movs	r4, #1
    4a66:	7d2b      	ldrb	r3, [r5, #20]
    4a68:	4223      	tst	r3, r4
    4a6a:	d0fc      	beq.n	4a66 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a6c:	2420      	movs	r4, #32
    4a6e:	34ff      	adds	r4, #255	; 0xff
    4a70:	4b1e      	ldr	r3, [pc, #120]	; (4aec <nvm_write_buffer+0xcc>)
    4a72:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4a74:	2a00      	cmp	r2, #0
    4a76:	d02c      	beq.n	4ad2 <nvm_write_buffer+0xb2>
    4a78:	2301      	movs	r3, #1
    4a7a:	0005      	movs	r5, r0
    4a7c:	439d      	bics	r5, r3
    4a7e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4a80:	1e54      	subs	r4, r2, #1
    4a82:	46a4      	mov	ip, r4
    4a84:	e009      	b.n	4a9a <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4a86:	18cf      	adds	r7, r1, r3
    4a88:	787f      	ldrb	r7, [r7, #1]
    4a8a:	023f      	lsls	r7, r7, #8
    4a8c:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4a8e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4a90:	3302      	adds	r3, #2
    4a92:	b29b      	uxth	r3, r3
    4a94:	3502      	adds	r5, #2
    4a96:	429a      	cmp	r2, r3
    4a98:	d904      	bls.n	4aa4 <nvm_write_buffer+0x84>
		data = buffer[i];
    4a9a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4a9c:	4563      	cmp	r3, ip
    4a9e:	dbf2      	blt.n	4a86 <nvm_write_buffer+0x66>
		data = buffer[i];
    4aa0:	b2a4      	uxth	r4, r4
    4aa2:	e7f4      	b.n	4a8e <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4aa4:	4b0e      	ldr	r3, [pc, #56]	; (4ae0 <nvm_write_buffer+0xc0>)
    4aa6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4aa8:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d1cc      	bne.n	4a48 <nvm_write_buffer+0x28>
    4aae:	2a3f      	cmp	r2, #63	; 0x3f
    4ab0:	d8ca      	bhi.n	4a48 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4ab2:	2e00      	cmp	r6, #0
    4ab4:	d106      	bne.n	4ac4 <nvm_write_buffer+0xa4>
    4ab6:	2200      	movs	r2, #0
    4ab8:	0001      	movs	r1, r0
    4aba:	2004      	movs	r0, #4
    4abc:	4b0d      	ldr	r3, [pc, #52]	; (4af4 <nvm_write_buffer+0xd4>)
    4abe:	4798      	blx	r3
    4ac0:	0005      	movs	r5, r0
    4ac2:	e7c1      	b.n	4a48 <nvm_write_buffer+0x28>
    4ac4:	2200      	movs	r2, #0
    4ac6:	0001      	movs	r1, r0
    4ac8:	201c      	movs	r0, #28
    4aca:	4b0a      	ldr	r3, [pc, #40]	; (4af4 <nvm_write_buffer+0xd4>)
    4acc:	4798      	blx	r3
    4ace:	0005      	movs	r5, r0
    4ad0:	e7ba      	b.n	4a48 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4ad2:	4b03      	ldr	r3, [pc, #12]	; (4ae0 <nvm_write_buffer+0xc0>)
    4ad4:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4ad6:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d0ea      	beq.n	4ab2 <nvm_write_buffer+0x92>
    4adc:	e7b4      	b.n	4a48 <nvm_write_buffer+0x28>
    4ade:	46c0      	nop			; (mov r8, r8)
    4ae0:	20000b40 	.word	0x20000b40
    4ae4:	00000fff 	.word	0x00000fff
    4ae8:	ffc00000 	.word	0xffc00000
    4aec:	41004000 	.word	0x41004000
    4af0:	ffffa544 	.word	0xffffa544
    4af4:	00004941 	.word	0x00004941

00004af8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4af8:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4afa:	4b1b      	ldr	r3, [pc, #108]	; (4b68 <nvm_read_buffer+0x70>)
    4afc:	881c      	ldrh	r4, [r3, #0]
    4afe:	885b      	ldrh	r3, [r3, #2]
    4b00:	4363      	muls	r3, r4
	if (source_address >
    4b02:	4283      	cmp	r3, r0
    4b04:	d205      	bcs.n	4b12 <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b06:	4e19      	ldr	r6, [pc, #100]	; (4b6c <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b08:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b0a:	4b19      	ldr	r3, [pc, #100]	; (4b70 <nvm_read_buffer+0x78>)
    4b0c:	18c3      	adds	r3, r0, r3
    4b0e:	42b3      	cmp	r3, r6
    4b10:	d803      	bhi.n	4b1a <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    4b12:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b14:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    4b16:	4218      	tst	r0, r3
    4b18:	d001      	beq.n	4b1e <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4b1a:	0028      	movs	r0, r5
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    4b1e:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4b20:	4294      	cmp	r4, r2
    4b22:	d3fa      	bcc.n	4b1a <nvm_read_buffer+0x22>
    4b24:	4b13      	ldr	r3, [pc, #76]	; (4b74 <nvm_read_buffer+0x7c>)
    4b26:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4b28:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4b2a:	07db      	lsls	r3, r3, #31
    4b2c:	d5f5      	bpl.n	4b1a <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b2e:	2420      	movs	r4, #32
    4b30:	34ff      	adds	r4, #255	; 0xff
    4b32:	4b10      	ldr	r3, [pc, #64]	; (4b74 <nvm_read_buffer+0x7c>)
    4b34:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4b36:	2a00      	cmp	r2, #0
    4b38:	d014      	beq.n	4b64 <nvm_read_buffer+0x6c>
    4b3a:	2301      	movs	r3, #1
    4b3c:	4398      	bics	r0, r3
    4b3e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4b40:	1e56      	subs	r6, r2, #1
    4b42:	e004      	b.n	4b4e <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    4b44:	3302      	adds	r3, #2
    4b46:	b29b      	uxth	r3, r3
    4b48:	3002      	adds	r0, #2
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d908      	bls.n	4b60 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    4b4e:	8804      	ldrh	r4, [r0, #0]
    4b50:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    4b52:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    4b54:	42b3      	cmp	r3, r6
    4b56:	daf5      	bge.n	4b44 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    4b58:	18cd      	adds	r5, r1, r3
    4b5a:	0a24      	lsrs	r4, r4, #8
    4b5c:	706c      	strb	r4, [r5, #1]
    4b5e:	e7f1      	b.n	4b44 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    4b60:	2500      	movs	r5, #0
    4b62:	e7da      	b.n	4b1a <nvm_read_buffer+0x22>
    4b64:	2500      	movs	r5, #0
    4b66:	e7d8      	b.n	4b1a <nvm_read_buffer+0x22>
    4b68:	20000b40 	.word	0x20000b40
    4b6c:	00000fff 	.word	0x00000fff
    4b70:	ffc00000 	.word	0xffc00000
    4b74:	41004000 	.word	0x41004000

00004b78 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4b78:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4b7a:	4a22      	ldr	r2, [pc, #136]	; (4c04 <nvm_erase_row+0x8c>)
    4b7c:	8813      	ldrh	r3, [r2, #0]
    4b7e:	8852      	ldrh	r2, [r2, #2]
    4b80:	435a      	muls	r2, r3
	if (row_address >
    4b82:	4282      	cmp	r2, r0
    4b84:	d207      	bcs.n	4b96 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b86:	4c20      	ldr	r4, [pc, #128]	; (4c08 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b88:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b8a:	4920      	ldr	r1, [pc, #128]	; (4c0c <nvm_erase_row+0x94>)
    4b8c:	1841      	adds	r1, r0, r1
    4b8e:	42a1      	cmp	r1, r4
    4b90:	d807      	bhi.n	4ba2 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4b92:	2401      	movs	r4, #1
    4b94:	e000      	b.n	4b98 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4b96:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4b98:	009b      	lsls	r3, r3, #2
    4b9a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4b9c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4b9e:	4218      	tst	r0, r3
    4ba0:	d001      	beq.n	4ba6 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4ba2:	0010      	movs	r0, r2
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	4b1a      	ldr	r3, [pc, #104]	; (4c10 <nvm_erase_row+0x98>)
    4ba8:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4baa:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4bac:	07db      	lsls	r3, r3, #31
    4bae:	d5f8      	bpl.n	4ba2 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4bb0:	4b17      	ldr	r3, [pc, #92]	; (4c10 <nvm_erase_row+0x98>)
    4bb2:	2220      	movs	r2, #32
    4bb4:	32ff      	adds	r2, #255	; 0xff
    4bb6:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4bb8:	0880      	lsrs	r0, r0, #2
    4bba:	0040      	lsls	r0, r0, #1
    4bbc:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    4bbe:	2c00      	cmp	r4, #0
    4bc0:	d01b      	beq.n	4bfa <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4bc2:	6859      	ldr	r1, [r3, #4]
    4bc4:	2280      	movs	r2, #128	; 0x80
    4bc6:	02d2      	lsls	r2, r2, #11
    4bc8:	430a      	orrs	r2, r1
    4bca:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4bcc:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4bce:	4a11      	ldr	r2, [pc, #68]	; (4c14 <nvm_erase_row+0x9c>)
    4bd0:	801a      	strh	r2, [r3, #0]
    4bd2:	490f      	ldr	r1, [pc, #60]	; (4c10 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    4bd4:	2201      	movs	r2, #1
    4bd6:	7d0b      	ldrb	r3, [r1, #20]
    4bd8:	4213      	tst	r3, r2
    4bda:	d0fc      	beq.n	4bd6 <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    4bdc:	2c00      	cmp	r4, #0
    4bde:	d004      	beq.n	4bea <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4be0:	4a0b      	ldr	r2, [pc, #44]	; (4c10 <nvm_erase_row+0x98>)
    4be2:	6853      	ldr	r3, [r2, #4]
    4be4:	490c      	ldr	r1, [pc, #48]	; (4c18 <nvm_erase_row+0xa0>)
    4be6:	400b      	ands	r3, r1
    4be8:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4bea:	4b09      	ldr	r3, [pc, #36]	; (4c10 <nvm_erase_row+0x98>)
    4bec:	8b1a      	ldrh	r2, [r3, #24]
    4bee:	201c      	movs	r0, #28
    4bf0:	4002      	ands	r2, r0
	return STATUS_OK;
    4bf2:	1e50      	subs	r0, r2, #1
    4bf4:	4182      	sbcs	r2, r0
    4bf6:	0092      	lsls	r2, r2, #2
    4bf8:	e7d3      	b.n	4ba2 <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4bfa:	4a08      	ldr	r2, [pc, #32]	; (4c1c <nvm_erase_row+0xa4>)
    4bfc:	4b04      	ldr	r3, [pc, #16]	; (4c10 <nvm_erase_row+0x98>)
    4bfe:	801a      	strh	r2, [r3, #0]
    4c00:	e7e7      	b.n	4bd2 <nvm_erase_row+0x5a>
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	20000b40 	.word	0x20000b40
    4c08:	00000fff 	.word	0x00000fff
    4c0c:	ffc00000 	.word	0xffc00000
    4c10:	41004000 	.word	0x41004000
    4c14:	ffffa51a 	.word	0xffffa51a
    4c18:	fffbffff 	.word	0xfffbffff
    4c1c:	ffffa502 	.word	0xffffa502

00004c20 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c20:	4b15      	ldr	r3, [pc, #84]	; (4c78 <nvm_get_parameters+0x58>)
    4c22:	2220      	movs	r2, #32
    4c24:	32ff      	adds	r2, #255	; 0xff
    4c26:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    4c28:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    4c2a:	0359      	lsls	r1, r3, #13
    4c2c:	0f49      	lsrs	r1, r1, #29
    4c2e:	3a18      	subs	r2, #24
    4c30:	3aff      	subs	r2, #255	; 0xff
    4c32:	408a      	lsls	r2, r1
	parameters->page_size =
    4c34:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    4c36:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    4c38:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    4c3a:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    4c3c:	4b0f      	ldr	r3, [pc, #60]	; (4c7c <nvm_get_parameters+0x5c>)
    4c3e:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    4c40:	065b      	lsls	r3, r3, #25
    4c42:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    4c44:	2b07      	cmp	r3, #7
    4c46:	d010      	beq.n	4c6a <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    4c48:	2206      	movs	r2, #6
    4c4a:	1ad2      	subs	r2, r2, r3
    4c4c:	2304      	movs	r3, #4
    4c4e:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    4c50:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    4c52:	4b0a      	ldr	r3, [pc, #40]	; (4c7c <nvm_get_parameters+0x5c>)
    4c54:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    4c56:	2207      	movs	r2, #7
    4c58:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    4c5a:	2b07      	cmp	r3, #7
    4c5c:	d008      	beq.n	4c70 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    4c5e:	2207      	movs	r2, #7
    4c60:	1ad2      	subs	r2, r2, r3
    4c62:	2304      	movs	r3, #4
    4c64:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    4c66:	6083      	str	r3, [r0, #8]
	}
}
    4c68:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    4c6a:	2300      	movs	r3, #0
    4c6c:	6043      	str	r3, [r0, #4]
    4c6e:	e7f0      	b.n	4c52 <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    4c70:	2300      	movs	r3, #0
    4c72:	6083      	str	r3, [r0, #8]
    4c74:	e7f8      	b.n	4c68 <nvm_get_parameters+0x48>
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	41004000 	.word	0x41004000
    4c7c:	00804000 	.word	0x00804000

00004c80 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4c80:	b500      	push	{lr}
    4c82:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4c84:	ab01      	add	r3, sp, #4
    4c86:	2280      	movs	r2, #128	; 0x80
    4c88:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4c8a:	780a      	ldrb	r2, [r1, #0]
    4c8c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4c8e:	784a      	ldrb	r2, [r1, #1]
    4c90:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4c92:	788a      	ldrb	r2, [r1, #2]
    4c94:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4c96:	0019      	movs	r1, r3
    4c98:	4b01      	ldr	r3, [pc, #4]	; (4ca0 <port_pin_set_config+0x20>)
    4c9a:	4798      	blx	r3
}
    4c9c:	b003      	add	sp, #12
    4c9e:	bd00      	pop	{pc}
    4ca0:	00005a71 	.word	0x00005a71

00004ca4 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    4ca4:	b570      	push	{r4, r5, r6, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    4ca6:	0204      	lsls	r4, r0, #8
    4ca8:	4e03      	ldr	r6, [pc, #12]	; (4cb8 <_eeprom_emulator_nvm_erase_row+0x14>)
		error_code = nvm_erase_row(
    4caa:	4d04      	ldr	r5, [pc, #16]	; (4cbc <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    4cac:	6873      	ldr	r3, [r6, #4]
    4cae:	1918      	adds	r0, r3, r4
		error_code = nvm_erase_row(
    4cb0:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    4cb2:	2805      	cmp	r0, #5
    4cb4:	d0fa      	beq.n	4cac <_eeprom_emulator_nvm_erase_row+0x8>
}
    4cb6:	bd70      	pop	{r4, r5, r6, pc}
    4cb8:	20000b48 	.word	0x20000b48
    4cbc:	00004b79 	.word	0x00004b79

00004cc0 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    4cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cc2:	46de      	mov	lr, fp
    4cc4:	4657      	mov	r7, sl
    4cc6:	464e      	mov	r6, r9
    4cc8:	4645      	mov	r5, r8
    4cca:	b5e0      	push	{r5, r6, r7, lr}
    4ccc:	b083      	sub	sp, #12
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    4cce:	4b4d      	ldr	r3, [pc, #308]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4cd0:	891b      	ldrh	r3, [r3, #8]
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d100      	bne.n	4cd8 <_eeprom_emulator_update_page_mapping+0x18>
    4cd6:	e08f      	b.n	4df8 <_eeprom_emulator_update_page_mapping+0x138>
    4cd8:	2500      	movs	r5, #0
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    4cda:	4b4a      	ldr	r3, [pc, #296]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4cdc:	469a      	mov	sl, r3
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    4cde:	001f      	movs	r7, r3
    4ce0:	e027      	b.n	4d32 <_eeprom_emulator_update_page_mapping+0x72>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    4ce2:	9801      	ldr	r0, [sp, #4]
    4ce4:	4b48      	ldr	r3, [pc, #288]	; (4e08 <_eeprom_emulator_update_page_mapping+0x148>)
    4ce6:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    4ce8:	3404      	adds	r4, #4
    4cea:	b2a4      	uxth	r4, r4
    4cec:	4b45      	ldr	r3, [pc, #276]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4cee:	891b      	ldrh	r3, [r3, #8]
    4cf0:	42a3      	cmp	r3, r4
    4cf2:	d918      	bls.n	4d26 <_eeprom_emulator_update_page_mapping+0x66>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    4cf4:	3b01      	subs	r3, #1
    4cf6:	429c      	cmp	r4, r3
    4cf8:	d0f6      	beq.n	4ce8 <_eeprom_emulator_update_page_mapping+0x28>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    4cfa:	687a      	ldr	r2, [r7, #4]
    4cfc:	01a3      	lsls	r3, r4, #6
    4cfe:	5cd3      	ldrb	r3, [r2, r3]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    4d00:	2bff      	cmp	r3, #255	; 0xff
    4d02:	d0f1      	beq.n	4ce8 <_eeprom_emulator_update_page_mapping+0x28>
			if(pre_logical_page == next_logical_page) {
    4d04:	429e      	cmp	r6, r3
    4d06:	d1ef      	bne.n	4ce8 <_eeprom_emulator_update_page_mapping+0x28>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    4d08:	464b      	mov	r3, r9
    4d0a:	5cd3      	ldrb	r3, [r2, r3]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    4d0c:	4641      	mov	r1, r8
    4d0e:	5c51      	ldrb	r1, [r2, r1]
    4d10:	4299      	cmp	r1, r3
    4d12:	d0e6      	beq.n	4ce2 <_eeprom_emulator_update_page_mapping+0x22>
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
    4d14:	4659      	mov	r1, fp
    4d16:	5c52      	ldrb	r2, [r2, r1]
    4d18:	429a      	cmp	r2, r3
    4d1a:	d0e2      	beq.n	4ce2 <_eeprom_emulator_update_page_mapping+0x22>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    4d1c:	08a0      	lsrs	r0, r4, #2
    4d1e:	b2c0      	uxtb	r0, r0
    4d20:	4b39      	ldr	r3, [pc, #228]	; (4e08 <_eeprom_emulator_update_page_mapping+0x148>)
    4d22:	4798      	blx	r3
    4d24:	e7e0      	b.n	4ce8 <_eeprom_emulator_update_page_mapping+0x28>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    4d26:	3504      	adds	r5, #4
    4d28:	b2ad      	uxth	r5, r5
    4d2a:	4b36      	ldr	r3, [pc, #216]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4d2c:	891b      	ldrh	r3, [r3, #8]
    4d2e:	429d      	cmp	r5, r3
    4d30:	d217      	bcs.n	4d62 <_eeprom_emulator_update_page_mapping+0xa2>
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    4d32:	01ab      	lsls	r3, r5, #6
    4d34:	4698      	mov	r8, r3
    4d36:	4653      	mov	r3, sl
    4d38:	685b      	ldr	r3, [r3, #4]
    4d3a:	4642      	mov	r2, r8
    4d3c:	5c9e      	ldrb	r6, [r3, r2]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    4d3e:	2eff      	cmp	r6, #255	; 0xff
    4d40:	d0f1      	beq.n	4d26 <_eeprom_emulator_update_page_mapping+0x66>
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    4d42:	1d2c      	adds	r4, r5, #4
    4d44:	b2a4      	uxth	r4, r4
    4d46:	4b2f      	ldr	r3, [pc, #188]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4d48:	891b      	ldrh	r3, [r3, #8]
    4d4a:	429c      	cmp	r4, r3
    4d4c:	d209      	bcs.n	4d62 <_eeprom_emulator_update_page_mapping+0xa2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    4d4e:	2280      	movs	r2, #128	; 0x80
    4d50:	4442      	add	r2, r8
    4d52:	4691      	mov	r9, r2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    4d54:	2240      	movs	r2, #64	; 0x40
    4d56:	4442      	add	r2, r8
    4d58:	4693      	mov	fp, r2
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    4d5a:	08aa      	lsrs	r2, r5, #2
    4d5c:	b2d2      	uxtb	r2, r2
    4d5e:	9201      	str	r2, [sp, #4]
    4d60:	e7c8      	b.n	4cf4 <_eeprom_emulator_update_page_mapping+0x34>
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    4d62:	2b00      	cmp	r3, #0
    4d64:	d043      	beq.n	4dee <_eeprom_emulator_update_page_mapping+0x12e>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    4d66:	4a27      	ldr	r2, [pc, #156]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4d68:	7a97      	ldrb	r7, [r2, #10]
    4d6a:	6851      	ldr	r1, [r2, #4]
    4d6c:	2200      	movs	r2, #0
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    4d6e:	1e5e      	subs	r6, r3, #1
			_eeprom_instance.page_map[logical_page] = c;
    4d70:	4d24      	ldr	r5, [pc, #144]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4d72:	e004      	b.n	4d7e <_eeprom_emulator_update_page_mapping+0xbe>
    4d74:	3201      	adds	r2, #1
    4d76:	3140      	adds	r1, #64	; 0x40
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    4d78:	b290      	uxth	r0, r2
    4d7a:	4298      	cmp	r0, r3
    4d7c:	d20a      	bcs.n	4d94 <_eeprom_emulator_update_page_mapping+0xd4>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    4d7e:	4296      	cmp	r6, r2
    4d80:	d0f8      	beq.n	4d74 <_eeprom_emulator_update_page_mapping+0xb4>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    4d82:	7808      	ldrb	r0, [r1, #0]
    4d84:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    4d86:	2cff      	cmp	r4, #255	; 0xff
    4d88:	d0f4      	beq.n	4d74 <_eeprom_emulator_update_page_mapping+0xb4>
    4d8a:	42bc      	cmp	r4, r7
    4d8c:	d2f2      	bcs.n	4d74 <_eeprom_emulator_update_page_mapping+0xb4>
			_eeprom_instance.page_map[logical_page] = c;
    4d8e:	1828      	adds	r0, r5, r0
    4d90:	72c2      	strb	r2, [r0, #11]
    4d92:	e7ef      	b.n	4d74 <_eeprom_emulator_update_page_mapping+0xb4>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    4d94:	203f      	movs	r0, #63	; 0x3f
    4d96:	2287      	movs	r2, #135	; 0x87
    4d98:	491a      	ldr	r1, [pc, #104]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4d9a:	5488      	strb	r0, [r1, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    4d9c:	089d      	lsrs	r5, r3, #2
    4d9e:	d01f      	beq.n	4de0 <_eeprom_emulator_update_page_mapping+0x120>

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    4da0:	684c      	ldr	r4, [r1, #4]
    4da2:	2104      	movs	r1, #4
    4da4:	2700      	movs	r7, #0
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    4da6:	3b01      	subs	r3, #1
    4da8:	e013      	b.n	4dd2 <_eeprom_emulator_update_page_mapping+0x112>
    4daa:	3201      	adds	r2, #1
    4dac:	b292      	uxth	r2, r2
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    4dae:	4291      	cmp	r1, r2
    4db0:	d007      	beq.n	4dc2 <_eeprom_emulator_update_page_mapping+0x102>
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    4db2:	429a      	cmp	r2, r3
    4db4:	d0f9      	beq.n	4daa <_eeprom_emulator_update_page_mapping+0xea>
			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    4db6:	0190      	lsls	r0, r2, #6
    4db8:	5d00      	ldrb	r0, [r0, r4]
    4dba:	28ff      	cmp	r0, #255	; 0xff
    4dbc:	d0f5      	beq.n	4daa <_eeprom_emulator_update_page_mapping+0xea>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    4dbe:	2600      	movs	r6, #0
    4dc0:	e7f3      	b.n	4daa <_eeprom_emulator_update_page_mapping+0xea>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    4dc2:	2e00      	cmp	r6, #0
    4dc4:	d109      	bne.n	4dda <_eeprom_emulator_update_page_mapping+0x11a>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    4dc6:	3701      	adds	r7, #1
    4dc8:	b2bf      	uxth	r7, r7
    4dca:	3104      	adds	r1, #4
    4dcc:	b289      	uxth	r1, r1
    4dce:	42bd      	cmp	r5, r7
    4dd0:	d006      	beq.n	4de0 <_eeprom_emulator_update_page_mapping+0x120>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    4dd2:	1f0a      	subs	r2, r1, #4
    4dd4:	b292      	uxth	r2, r2
    4dd6:	2601      	movs	r6, #1
    4dd8:	e7eb      	b.n	4db2 <_eeprom_emulator_update_page_mapping+0xf2>
			_eeprom_instance.spare_row = c;
    4dda:	2387      	movs	r3, #135	; 0x87
    4ddc:	4a09      	ldr	r2, [pc, #36]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4dde:	54d7      	strb	r7, [r2, r3]
			break;
		}
	}
}
    4de0:	b003      	add	sp, #12
    4de2:	bc3c      	pop	{r2, r3, r4, r5}
    4de4:	4690      	mov	r8, r2
    4de6:	4699      	mov	r9, r3
    4de8:	46a2      	mov	sl, r4
    4dea:	46ab      	mov	fp, r5
    4dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    4dee:	213f      	movs	r1, #63	; 0x3f
    4df0:	2387      	movs	r3, #135	; 0x87
    4df2:	4a04      	ldr	r2, [pc, #16]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4df4:	54d1      	strb	r1, [r2, r3]
    4df6:	e7f3      	b.n	4de0 <_eeprom_emulator_update_page_mapping+0x120>
    4df8:	213f      	movs	r1, #63	; 0x3f
    4dfa:	2387      	movs	r3, #135	; 0x87
    4dfc:	4a01      	ldr	r2, [pc, #4]	; (4e04 <_eeprom_emulator_update_page_mapping+0x144>)
    4dfe:	54d1      	strb	r1, [r2, r3]
    4e00:	e7ee      	b.n	4de0 <_eeprom_emulator_update_page_mapping+0x120>
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	20000b48 	.word	0x20000b48
    4e08:	00004ca5 	.word	0x00004ca5

00004e0c <_eeprom_emulator_nvm_read_page>:
{
    4e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e0e:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    4e10:	0184      	lsls	r4, r0, #6
    4e12:	4f05      	ldr	r7, [pc, #20]	; (4e28 <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    4e14:	4e05      	ldr	r6, [pc, #20]	; (4e2c <_eeprom_emulator_nvm_read_page+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	1918      	adds	r0, r3, r4
		error_code = nvm_read_buffer(
    4e1a:	2240      	movs	r2, #64	; 0x40
    4e1c:	0029      	movs	r1, r5
    4e1e:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    4e20:	2805      	cmp	r0, #5
    4e22:	d0f8      	beq.n	4e16 <_eeprom_emulator_nvm_read_page+0xa>
}
    4e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	20000b48 	.word	0x20000b48
    4e2c:	00004af9 	.word	0x00004af9

00004e30 <_eeprom_emulator_nvm_fill_cache>:
{
    4e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e32:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    4e34:	0184      	lsls	r4, r0, #6
    4e36:	4f05      	ldr	r7, [pc, #20]	; (4e4c <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    4e38:	4e05      	ldr	r6, [pc, #20]	; (4e50 <_eeprom_emulator_nvm_fill_cache+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	1918      	adds	r0, r3, r4
		error_code = nvm_write_buffer(
    4e3e:	2240      	movs	r2, #64	; 0x40
    4e40:	0029      	movs	r1, r5
    4e42:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    4e44:	2805      	cmp	r0, #5
    4e46:	d0f8      	beq.n	4e3a <_eeprom_emulator_nvm_fill_cache+0xa>
}
    4e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e4a:	46c0      	nop			; (mov r8, r8)
    4e4c:	20000b48 	.word	0x20000b48
    4e50:	00004a21 	.word	0x00004a21

00004e54 <_eeprom_emulator_nvm_commit_cache>:
{
    4e54:	b570      	push	{r4, r5, r6, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    4e56:	0184      	lsls	r4, r0, #6
    4e58:	4e04      	ldr	r6, [pc, #16]	; (4e6c <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    4e5a:	4d05      	ldr	r5, [pc, #20]	; (4e70 <_eeprom_emulator_nvm_commit_cache+0x1c>)
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    4e5c:	6873      	ldr	r3, [r6, #4]
    4e5e:	1919      	adds	r1, r3, r4
		error_code = nvm_execute_command(
    4e60:	2200      	movs	r2, #0
    4e62:	2004      	movs	r0, #4
    4e64:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    4e66:	2805      	cmp	r0, #5
    4e68:	d0f8      	beq.n	4e5c <_eeprom_emulator_nvm_commit_cache+0x8>
}
    4e6a:	bd70      	pop	{r4, r5, r6, pc}
    4e6c:	20000b48 	.word	0x20000b48
    4e70:	00004941 	.word	0x00004941

00004e74 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    4e74:	b510      	push	{r4, lr}
    4e76:	b09a      	sub	sp, #104	; 0x68
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4e78:	ab18      	add	r3, sp, #96	; 0x60
    4e7a:	2100      	movs	r1, #0
    4e7c:	7019      	strb	r1, [r3, #0]
	config->manual_page_write = true;
    4e7e:	2201      	movs	r2, #1
    4e80:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4e82:	4a2e      	ldr	r2, [pc, #184]	; (4f3c <eeprom_emulator_init+0xc8>)
    4e84:	6852      	ldr	r2, [r2, #4]
    4e86:	06d2      	lsls	r2, r2, #27
    4e88:	0f12      	lsrs	r2, r2, #28
    4e8a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4e8c:	70d9      	strb	r1, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    4e8e:	7119      	strb	r1, [r3, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    4e90:	4c2b      	ldr	r4, [pc, #172]	; (4f40 <eeprom_emulator_init+0xcc>)
    4e92:	a818      	add	r0, sp, #96	; 0x60
    4e94:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    4e96:	2805      	cmp	r0, #5
    4e98:	d0fb      	beq.n	4e92 <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    4e9a:	a814      	add	r0, sp, #80	; 0x50
    4e9c:	4b29      	ldr	r3, [pc, #164]	; (4f44 <eeprom_emulator_init+0xd0>)
    4e9e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    4ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return STATUS_ERR_NO_MEMORY;
    4ea2:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    4ea4:	2b0b      	cmp	r3, #11
    4ea6:	d801      	bhi.n	4eac <eeprom_emulator_init+0x38>

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
}
    4ea8:	b01a      	add	sp, #104	; 0x68
    4eaa:	bd10      	pop	{r4, pc}
	_eeprom_instance.physical_pages =
    4eac:	4c26      	ldr	r4, [pc, #152]	; (4f48 <eeprom_emulator_init+0xd4>)
    4eae:	8123      	strh	r3, [r4, #8]
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    4eb0:	001a      	movs	r2, r3
    4eb2:	3a08      	subs	r2, #8
    4eb4:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    4eb6:	72a2      	strb	r2, [r4, #10]
			(void*)(FLASH_SIZE -
    4eb8:	041b      	lsls	r3, r3, #16
    4eba:	0a9b      	lsrs	r3, r3, #10
    4ebc:	425b      	negs	r3, r3
    4ebe:	2280      	movs	r2, #128	; 0x80
    4ec0:	0292      	lsls	r2, r2, #10
    4ec2:	4694      	mov	ip, r2
    4ec4:	4463      	add	r3, ip
	_eeprom_instance.flash =
    4ec6:	6063      	str	r3, [r4, #4]
	_eeprom_instance.cache_active = false;
    4ec8:	2200      	movs	r2, #0
    4eca:	23c8      	movs	r3, #200	; 0xc8
    4ecc:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_update_page_mapping();
    4ece:	4b1f      	ldr	r3, [pc, #124]	; (4f4c <eeprom_emulator_init+0xd8>)
    4ed0:	4798      	blx	r3
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    4ed2:	2387      	movs	r3, #135	; 0x87
    4ed4:	5ce3      	ldrb	r3, [r4, r3]
		return STATUS_ERR_BAD_FORMAT;
    4ed6:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    4ed8:	2b3f      	cmp	r3, #63	; 0x3f
    4eda:	d0e5      	beq.n	4ea8 <eeprom_emulator_init+0x34>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    4edc:	aa01      	add	r2, sp, #4
    4ede:	4b1c      	ldr	r3, [pc, #112]	; (4f50 <eeprom_emulator_init+0xdc>)
    4ee0:	cb13      	ldmia	r3!, {r0, r1, r4}
    4ee2:	c213      	stmia	r2!, {r0, r1, r4}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    4ee4:	4b18      	ldr	r3, [pc, #96]	; (4f48 <eeprom_emulator_init+0xd4>)
    4ee6:	8918      	ldrh	r0, [r3, #8]
    4ee8:	3801      	subs	r0, #1
    4eea:	b280      	uxth	r0, r0
    4eec:	a904      	add	r1, sp, #16
    4eee:	4b19      	ldr	r3, [pc, #100]	; (4f54 <eeprom_emulator_init+0xe0>)
    4ef0:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    4ef2:	9b04      	ldr	r3, [sp, #16]
    4ef4:	9a01      	ldr	r2, [sp, #4]
    4ef6:	4293      	cmp	r3, r2
    4ef8:	d119      	bne.n	4f2e <eeprom_emulator_init+0xba>
    4efa:	9b05      	ldr	r3, [sp, #20]
    4efc:	9a02      	ldr	r2, [sp, #8]
    4efe:	4293      	cmp	r3, r2
    4f00:	d117      	bne.n	4f32 <eeprom_emulator_init+0xbe>
    4f02:	9b06      	ldr	r3, [sp, #24]
    4f04:	9a03      	ldr	r2, [sp, #12]
    4f06:	4293      	cmp	r3, r2
    4f08:	d115      	bne.n	4f36 <eeprom_emulator_init+0xc2>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    4f0a:	ab04      	add	r3, sp, #16
    4f0c:	7bdb      	ldrb	r3, [r3, #15]
		return STATUS_ERR_IO;
    4f0e:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    4f10:	2b01      	cmp	r3, #1
    4f12:	d1c9      	bne.n	4ea8 <eeprom_emulator_init+0x34>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    4f14:	ab04      	add	r3, sp, #16
    4f16:	7b1b      	ldrb	r3, [r3, #12]
    4f18:	2b01      	cmp	r3, #1
    4f1a:	d1c5      	bne.n	4ea8 <eeprom_emulator_init+0x34>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    4f1c:	ab04      	add	r3, sp, #16
    4f1e:	7b5b      	ldrb	r3, [r3, #13]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d1c1      	bne.n	4ea8 <eeprom_emulator_init+0x34>
	_eeprom_instance.initialized = true;
    4f24:	2201      	movs	r2, #1
    4f26:	4b08      	ldr	r3, [pc, #32]	; (4f48 <eeprom_emulator_init+0xd4>)
    4f28:	701a      	strb	r2, [r3, #0]
	return error_code;
    4f2a:	2000      	movs	r0, #0
    4f2c:	e7bc      	b.n	4ea8 <eeprom_emulator_init+0x34>
			return STATUS_ERR_BAD_FORMAT;
    4f2e:	201a      	movs	r0, #26
    4f30:	e7ba      	b.n	4ea8 <eeprom_emulator_init+0x34>
    4f32:	201a      	movs	r0, #26
    4f34:	e7b8      	b.n	4ea8 <eeprom_emulator_init+0x34>
    4f36:	201a      	movs	r0, #26
    4f38:	e7b6      	b.n	4ea8 <eeprom_emulator_init+0x34>
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	41004000 	.word	0x41004000
    4f40:	000048b9 	.word	0x000048b9
    4f44:	00004c21 	.word	0x00004c21
    4f48:	20000b48 	.word	0x20000b48
    4f4c:	00004cc1 	.word	0x00004cc1
    4f50:	0000e034 	.word	0x0000e034
    4f54:	00004e0d 	.word	0x00004e0d

00004f58 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    4f58:	b570      	push	{r4, r5, r6, lr}
    4f5a:	b094      	sub	sp, #80	; 0x50
	_eeprom_instance.spare_row = 0;
    4f5c:	4c2f      	ldr	r4, [pc, #188]	; (501c <eeprom_emulator_erase_memory+0xc4>)
    4f5e:	2200      	movs	r2, #0
    4f60:	2387      	movs	r3, #135	; 0x87
    4f62:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    4f64:	2000      	movs	r0, #0
    4f66:	4b2e      	ldr	r3, [pc, #184]	; (5020 <eeprom_emulator_erase_memory+0xc8>)
    4f68:	4798      	blx	r3
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    4f6a:	8925      	ldrh	r5, [r4, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    4f6c:	2d04      	cmp	r5, #4
    4f6e:	d925      	bls.n	4fbc <eeprom_emulator_erase_memory+0x64>
    4f70:	2600      	movs	r6, #0
    4f72:	2404      	movs	r4, #4
    4f74:	e019      	b.n	4faa <eeprom_emulator_erase_memory+0x52>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    4f76:	08a0      	lsrs	r0, r4, #2
    4f78:	b2c0      	uxtb	r0, r0
    4f7a:	4b29      	ldr	r3, [pc, #164]	; (5020 <eeprom_emulator_erase_memory+0xc8>)
    4f7c:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    4f7e:	ad04      	add	r5, sp, #16
    4f80:	2240      	movs	r2, #64	; 0x40
    4f82:	21ff      	movs	r1, #255	; 0xff
    4f84:	0028      	movs	r0, r5
    4f86:	4b27      	ldr	r3, [pc, #156]	; (5024 <eeprom_emulator_erase_memory+0xcc>)
    4f88:	4798      	blx	r3
			data.header.logical_page = logical_page;
    4f8a:	702e      	strb	r6, [r5, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    4f8c:	0029      	movs	r1, r5
    4f8e:	0020      	movs	r0, r4
    4f90:	4b25      	ldr	r3, [pc, #148]	; (5028 <eeprom_emulator_erase_memory+0xd0>)
    4f92:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    4f94:	0020      	movs	r0, r4
    4f96:	4b25      	ldr	r3, [pc, #148]	; (502c <eeprom_emulator_erase_memory+0xd4>)
    4f98:	4798      	blx	r3
			logical_page++;
    4f9a:	3601      	adds	r6, #1
    4f9c:	b2b6      	uxth	r6, r6
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    4f9e:	3401      	adds	r4, #1
    4fa0:	b2a4      	uxth	r4, r4
    4fa2:	4b1e      	ldr	r3, [pc, #120]	; (501c <eeprom_emulator_erase_memory+0xc4>)
    4fa4:	891d      	ldrh	r5, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    4fa6:	42a5      	cmp	r5, r4
    4fa8:	d908      	bls.n	4fbc <eeprom_emulator_erase_memory+0x64>
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    4faa:	3d01      	subs	r5, #1
    4fac:	42ac      	cmp	r4, r5
    4fae:	d0f6      	beq.n	4f9e <eeprom_emulator_erase_memory+0x46>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    4fb0:	2303      	movs	r3, #3
    4fb2:	4023      	ands	r3, r4
    4fb4:	d0df      	beq.n	4f76 <eeprom_emulator_erase_memory+0x1e>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    4fb6:	2b01      	cmp	r3, #1
    4fb8:	d8f1      	bhi.n	4f9e <eeprom_emulator_erase_memory+0x46>
    4fba:	e7e0      	b.n	4f7e <eeprom_emulator_erase_memory+0x26>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    4fbc:	ae01      	add	r6, sp, #4
    4fbe:	4b1c      	ldr	r3, [pc, #112]	; (5030 <eeprom_emulator_erase_memory+0xd8>)
    4fc0:	0032      	movs	r2, r6
    4fc2:	cb13      	ldmia	r3!, {r0, r1, r4}
    4fc4:	c213      	stmia	r2!, {r0, r1, r4}
	memset(&master_page, 0xFF, sizeof(master_page));
    4fc6:	ac04      	add	r4, sp, #16
    4fc8:	2240      	movs	r2, #64	; 0x40
    4fca:	21ff      	movs	r1, #255	; 0xff
    4fcc:	0020      	movs	r0, r4
    4fce:	4b15      	ldr	r3, [pc, #84]	; (5024 <eeprom_emulator_erase_memory+0xcc>)
    4fd0:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	9304      	str	r3, [sp, #16]
    4fd6:	6873      	ldr	r3, [r6, #4]
    4fd8:	6063      	str	r3, [r4, #4]
    4fda:	68b3      	ldr	r3, [r6, #8]
    4fdc:	60a3      	str	r3, [r4, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    4fde:	2301      	movs	r3, #1
    4fe0:	73e3      	strb	r3, [r4, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    4fe2:	7323      	strb	r3, [r4, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    4fe4:	2300      	movs	r3, #0
    4fe6:	7363      	strb	r3, [r4, #13]
	master_page.revision      = EEPROM_REVISION;
    4fe8:	73a3      	strb	r3, [r4, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    4fea:	3d01      	subs	r5, #1
    4fec:	17eb      	asrs	r3, r5, #31
    4fee:	2003      	movs	r0, #3
    4ff0:	4018      	ands	r0, r3
    4ff2:	1945      	adds	r5, r0, r5
    4ff4:	10ad      	asrs	r5, r5, #2
	_eeprom_emulator_nvm_erase_row(
    4ff6:	b2e8      	uxtb	r0, r5
    4ff8:	4b09      	ldr	r3, [pc, #36]	; (5020 <eeprom_emulator_erase_memory+0xc8>)
    4ffa:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    4ffc:	4d07      	ldr	r5, [pc, #28]	; (501c <eeprom_emulator_erase_memory+0xc4>)
    4ffe:	8928      	ldrh	r0, [r5, #8]
    5000:	3801      	subs	r0, #1
    5002:	b280      	uxth	r0, r0
    5004:	0021      	movs	r1, r4
    5006:	4b08      	ldr	r3, [pc, #32]	; (5028 <eeprom_emulator_erase_memory+0xd0>)
    5008:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    500a:	8928      	ldrh	r0, [r5, #8]
    500c:	3801      	subs	r0, #1
    500e:	b280      	uxth	r0, r0
    5010:	4b06      	ldr	r3, [pc, #24]	; (502c <eeprom_emulator_erase_memory+0xd4>)
    5012:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    5014:	4b07      	ldr	r3, [pc, #28]	; (5034 <eeprom_emulator_erase_memory+0xdc>)
    5016:	4798      	blx	r3
}
    5018:	b014      	add	sp, #80	; 0x50
    501a:	bd70      	pop	{r4, r5, r6, pc}
    501c:	20000b48 	.word	0x20000b48
    5020:	00004ca5 	.word	0x00004ca5
    5024:	00008371 	.word	0x00008371
    5028:	00004e31 	.word	0x00004e31
    502c:	00004e55 	.word	0x00004e55
    5030:	0000e034 	.word	0x0000e034
    5034:	00004cc1 	.word	0x00004cc1

00005038 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    5038:	b510      	push	{r4, lr}
    503a:	b090      	sub	sp, #64	; 0x40
    503c:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    503e:	4b15      	ldr	r3, [pc, #84]	; (5094 <eeprom_emulator_read_page+0x5c>)
    5040:	781a      	ldrb	r2, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    5042:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    5044:	2a00      	cmp	r2, #0
    5046:	d102      	bne.n	504e <eeprom_emulator_read_page+0x16>
		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
	}

	return STATUS_OK;
}
    5048:	0018      	movs	r0, r3
    504a:	b010      	add	sp, #64	; 0x40
    504c:	bd10      	pop	{r4, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    504e:	4b11      	ldr	r3, [pc, #68]	; (5094 <eeprom_emulator_read_page+0x5c>)
    5050:	7a9a      	ldrb	r2, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    5052:	2318      	movs	r3, #24
	if (logical_page >= _eeprom_instance.logical_pages) {
    5054:	4282      	cmp	r2, r0
    5056:	d9f7      	bls.n	5048 <eeprom_emulator_read_page+0x10>
	if ((_eeprom_instance.cache_active == true) &&
    5058:	33b0      	adds	r3, #176	; 0xb0
    505a:	4a0e      	ldr	r2, [pc, #56]	; (5094 <eeprom_emulator_read_page+0x5c>)
    505c:	5cd3      	ldrb	r3, [r2, r3]
    505e:	2b00      	cmp	r3, #0
    5060:	d003      	beq.n	506a <eeprom_emulator_read_page+0x32>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    5062:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    5064:	5cd3      	ldrb	r3, [r2, r3]
    5066:	4283      	cmp	r3, r0
    5068:	d00c      	beq.n	5084 <eeprom_emulator_read_page+0x4c>
				_eeprom_instance.page_map[logical_page], &temp);
    506a:	4b0a      	ldr	r3, [pc, #40]	; (5094 <eeprom_emulator_read_page+0x5c>)
    506c:	1818      	adds	r0, r3, r0
		_eeprom_emulator_nvm_read_page(
    506e:	7ac0      	ldrb	r0, [r0, #11]
    5070:	4669      	mov	r1, sp
    5072:	4b09      	ldr	r3, [pc, #36]	; (5098 <eeprom_emulator_read_page+0x60>)
    5074:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    5076:	223c      	movs	r2, #60	; 0x3c
    5078:	a901      	add	r1, sp, #4
    507a:	0020      	movs	r0, r4
    507c:	4b07      	ldr	r3, [pc, #28]	; (509c <eeprom_emulator_read_page+0x64>)
    507e:	4798      	blx	r3
	return STATUS_OK;
    5080:	2300      	movs	r3, #0
    5082:	e7e1      	b.n	5048 <eeprom_emulator_read_page+0x10>
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    5084:	223c      	movs	r2, #60	; 0x3c
    5086:	4903      	ldr	r1, [pc, #12]	; (5094 <eeprom_emulator_read_page+0x5c>)
    5088:	318c      	adds	r1, #140	; 0x8c
    508a:	0020      	movs	r0, r4
    508c:	4b03      	ldr	r3, [pc, #12]	; (509c <eeprom_emulator_read_page+0x64>)
    508e:	4798      	blx	r3
	return STATUS_OK;
    5090:	2300      	movs	r3, #0
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    5092:	e7d9      	b.n	5048 <eeprom_emulator_read_page+0x10>
    5094:	20000b48 	.word	0x20000b48
    5098:	00004e0d 	.word	0x00004e0d
    509c:	000082ed 	.word	0x000082ed

000050a0 <eeprom_emulator_read_buffer>:
 */
enum status_code eeprom_emulator_read_buffer(
		const uint16_t offset,
		uint8_t *const data,
		const uint16_t length)
{
    50a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a2:	46de      	mov	lr, fp
    50a4:	4657      	mov	r7, sl
    50a6:	464e      	mov	r6, r9
    50a8:	4645      	mov	r5, r8
    50aa:	b5e0      	push	{r5, r6, r7, lr}
    50ac:	b093      	sub	sp, #76	; 0x4c
    50ae:	0005      	movs	r5, r0
    50b0:	4689      	mov	r9, r1
    50b2:	0017      	movs	r7, r2
	enum status_code error_code;
	uint8_t buffer[EEPROM_PAGE_SIZE];
	uint8_t logical_page = offset / EEPROM_PAGE_SIZE;
    50b4:	213c      	movs	r1, #60	; 0x3c
    50b6:	4b23      	ldr	r3, [pc, #140]	; (5144 <eeprom_emulator_read_buffer+0xa4>)
    50b8:	4798      	blx	r3
    50ba:	b2c3      	uxtb	r3, r0
    50bc:	9300      	str	r3, [sp, #0]
	uint16_t c = offset;

	/** Perform the initial page read  */
	error_code = eeprom_emulator_read_page(logical_page, buffer);
    50be:	a903      	add	r1, sp, #12
    50c0:	0018      	movs	r0, r3
    50c2:	4b21      	ldr	r3, [pc, #132]	; (5148 <eeprom_emulator_read_buffer+0xa8>)
    50c4:	4798      	blx	r3
    50c6:	9001      	str	r0, [sp, #4]
	if (error_code != STATUS_OK) {
    50c8:	2800      	cmp	r0, #0
    50ca:	d132      	bne.n	5132 <eeprom_emulator_read_buffer+0x92>
		return error_code;
	}

	/* To avoid entering into the initial if in the loop the first time */
	if ((offset % EEPROM_PAGE_SIZE) == 0) {
    50cc:	213c      	movs	r1, #60	; 0x3c
    50ce:	0028      	movs	r0, r5
    50d0:	4b1e      	ldr	r3, [pc, #120]	; (514c <eeprom_emulator_read_buffer+0xac>)
    50d2:	4798      	blx	r3
    50d4:	b289      	uxth	r1, r1
	uint16_t c = offset;
    50d6:	002c      	movs	r4, r5
	if ((offset % EEPROM_PAGE_SIZE) == 0) {
    50d8:	2900      	cmp	r1, #0
    50da:	d105      	bne.n	50e8 <eeprom_emulator_read_buffer+0x48>
		data[0] = buffer[0];
    50dc:	ab03      	add	r3, sp, #12
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	464a      	mov	r2, r9
    50e2:	7013      	strb	r3, [r2, #0]
		c=c+1;
    50e4:	1c6c      	adds	r4, r5, #1
    50e6:	b2a4      	uxth	r4, r4
	}

	/* Read in the specified data from the emulated EEPROM memory space */
	for (; c < (length + offset); c++) {
    50e8:	0026      	movs	r6, r4
    50ea:	46ab      	mov	fp, r5
    50ec:	46b8      	mov	r8, r7
    50ee:	44a8      	add	r8, r5
    50f0:	4544      	cmp	r4, r8
    50f2:	da1e      	bge.n	5132 <eeprom_emulator_read_buffer+0x92>
		/* Check if we have read up to a new EEPROM page boundary */
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    50f4:	4b15      	ldr	r3, [pc, #84]	; (514c <eeprom_emulator_read_buffer+0xac>)
    50f6:	469a      	mov	sl, r3
			/* Increment the page number we are looking at */
			logical_page++;

			/* Read the next page from non-volatile memory into the temporary
			 * buffer */
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    50f8:	af03      	add	r7, sp, #12
    50fa:	e009      	b.n	5110 <eeprom_emulator_read_buffer+0x70>
			}
		}

		/* Copy the next byte of data from the temporary buffer to the user's
		 * buffer */
		data[c - offset] = buffer[c % EEPROM_PAGE_SIZE];
    50fc:	465b      	mov	r3, fp
    50fe:	1af6      	subs	r6, r6, r3
    5100:	5d7b      	ldrb	r3, [r7, r5]
    5102:	464a      	mov	r2, r9
    5104:	5593      	strb	r3, [r2, r6]
	for (; c < (length + offset); c++) {
    5106:	3401      	adds	r4, #1
    5108:	b2a4      	uxth	r4, r4
    510a:	0026      	movs	r6, r4
    510c:	4544      	cmp	r4, r8
    510e:	da10      	bge.n	5132 <eeprom_emulator_read_buffer+0x92>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    5110:	213c      	movs	r1, #60	; 0x3c
    5112:	0020      	movs	r0, r4
    5114:	47d0      	blx	sl
    5116:	b28d      	uxth	r5, r1
    5118:	2d00      	cmp	r5, #0
    511a:	d1ef      	bne.n	50fc <eeprom_emulator_read_buffer+0x5c>
			logical_page++;
    511c:	9b00      	ldr	r3, [sp, #0]
    511e:	3301      	adds	r3, #1
    5120:	b2db      	uxtb	r3, r3
    5122:	9300      	str	r3, [sp, #0]
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    5124:	0039      	movs	r1, r7
    5126:	0018      	movs	r0, r3
    5128:	4b07      	ldr	r3, [pc, #28]	; (5148 <eeprom_emulator_read_buffer+0xa8>)
    512a:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    512c:	2800      	cmp	r0, #0
    512e:	d0e5      	beq.n	50fc <eeprom_emulator_read_buffer+0x5c>
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    5130:	9001      	str	r0, [sp, #4]
	}

	return error_code;
}
    5132:	9801      	ldr	r0, [sp, #4]
    5134:	b013      	add	sp, #76	; 0x4c
    5136:	bc3c      	pop	{r2, r3, r4, r5}
    5138:	4690      	mov	r8, r2
    513a:	4699      	mov	r9, r3
    513c:	46a2      	mov	sl, r4
    513e:	46ab      	mov	fp, r5
    5140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	000062d5 	.word	0x000062d5
    5148:	00005039 	.word	0x00005039
    514c:	000063e1 	.word	0x000063e1

00005150 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    5150:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    5152:	23c8      	movs	r3, #200	; 0xc8
    5154:	4a08      	ldr	r2, [pc, #32]	; (5178 <eeprom_emulator_commit_page_buffer+0x28>)
    5156:	5cd3      	ldrb	r3, [r2, r3]
    5158:	2b00      	cmp	r3, #0
    515a:	d101      	bne.n	5160 <eeprom_emulator_commit_page_buffer+0x10>

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;

	return error_code;
}
    515c:	2000      	movs	r0, #0
    515e:	bd10      	pop	{r4, pc}
			_eeprom_instance.page_map[cached_logical_page]);
    5160:	0014      	movs	r4, r2
	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    5162:	2388      	movs	r3, #136	; 0x88
			_eeprom_instance.page_map[cached_logical_page]);
    5164:	5cd3      	ldrb	r3, [r2, r3]
    5166:	18d3      	adds	r3, r2, r3
	_eeprom_emulator_nvm_commit_cache(
    5168:	7ad8      	ldrb	r0, [r3, #11]
    516a:	4b04      	ldr	r3, [pc, #16]	; (517c <eeprom_emulator_commit_page_buffer+0x2c>)
    516c:	4798      	blx	r3
	_eeprom_instance.cache_active = false;
    516e:	2200      	movs	r2, #0
    5170:	23c8      	movs	r3, #200	; 0xc8
    5172:	54e2      	strb	r2, [r4, r3]
	return error_code;
    5174:	e7f2      	b.n	515c <eeprom_emulator_commit_page_buffer+0xc>
    5176:	46c0      	nop			; (mov r8, r8)
    5178:	20000b48 	.word	0x20000b48
    517c:	00004e55 	.word	0x00004e55

00005180 <eeprom_emulator_write_page>:
{
    5180:	b5f0      	push	{r4, r5, r6, r7, lr}
    5182:	46de      	mov	lr, fp
    5184:	4657      	mov	r7, sl
    5186:	464e      	mov	r6, r9
    5188:	4645      	mov	r5, r8
    518a:	b5e0      	push	{r5, r6, r7, lr}
    518c:	b087      	sub	sp, #28
    518e:	0004      	movs	r4, r0
    5190:	9100      	str	r1, [sp, #0]
	if (_eeprom_instance.initialized == false) {
    5192:	4b5a      	ldr	r3, [pc, #360]	; (52fc <eeprom_emulator_write_page+0x17c>)
    5194:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    5196:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    5198:	2b00      	cmp	r3, #0
    519a:	d106      	bne.n	51aa <eeprom_emulator_write_page+0x2a>
}
    519c:	b007      	add	sp, #28
    519e:	bc3c      	pop	{r2, r3, r4, r5}
    51a0:	4690      	mov	r8, r2
    51a2:	4699      	mov	r9, r3
    51a4:	46a2      	mov	sl, r4
    51a6:	46ab      	mov	fp, r5
    51a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    51aa:	4b54      	ldr	r3, [pc, #336]	; (52fc <eeprom_emulator_write_page+0x17c>)
    51ac:	7a9b      	ldrb	r3, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    51ae:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    51b0:	42a3      	cmp	r3, r4
    51b2:	d9f3      	bls.n	519c <eeprom_emulator_write_page+0x1c>
	if ((_eeprom_instance.cache_active == true) &&
    51b4:	23c8      	movs	r3, #200	; 0xc8
    51b6:	4a51      	ldr	r2, [pc, #324]	; (52fc <eeprom_emulator_write_page+0x17c>)
    51b8:	5cd3      	ldrb	r3, [r2, r3]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d005      	beq.n	51ca <eeprom_emulator_write_page+0x4a>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    51be:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    51c0:	5cd3      	ldrb	r3, [r2, r3]
    51c2:	42a3      	cmp	r3, r4
    51c4:	d001      	beq.n	51ca <eeprom_emulator_write_page+0x4a>
		eeprom_emulator_commit_page_buffer();
    51c6:	4b4e      	ldr	r3, [pc, #312]	; (5300 <eeprom_emulator_write_page+0x180>)
    51c8:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    51ca:	4b4c      	ldr	r3, [pc, #304]	; (52fc <eeprom_emulator_write_page+0x17c>)
    51cc:	191b      	adds	r3, r3, r4
    51ce:	7ade      	ldrb	r6, [r3, #11]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    51d0:	2303      	movs	r3, #3
    51d2:	0031      	movs	r1, r6
    51d4:	4399      	bics	r1, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    51d6:	4b49      	ldr	r3, [pc, #292]	; (52fc <eeprom_emulator_write_page+0x17c>)
    51d8:	6858      	ldr	r0, [r3, #4]
    51da:	01b3      	lsls	r3, r6, #6
    51dc:	5c1b      	ldrb	r3, [r3, r0]
    51de:	2bff      	cmp	r3, #255	; 0xff
    51e0:	d047      	beq.n	5272 <eeprom_emulator_write_page+0xf2>
    51e2:	1c75      	adds	r5, r6, #1
    51e4:	b2ed      	uxtb	r5, r5
    51e6:	3104      	adds	r1, #4
    51e8:	b2c9      	uxtb	r1, r1
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    51ea:	42a9      	cmp	r1, r5
    51ec:	d057      	beq.n	529e <eeprom_emulator_write_page+0x11e>
    51ee:	1c6b      	adds	r3, r5, #1
    51f0:	b2db      	uxtb	r3, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    51f2:	01aa      	lsls	r2, r5, #6
    51f4:	5c12      	ldrb	r2, [r2, r0]
    51f6:	2aff      	cmp	r2, #255	; 0xff
    51f8:	d03c      	beq.n	5274 <eeprom_emulator_write_page+0xf4>
    51fa:	001d      	movs	r5, r3
    51fc:	e7f5      	b.n	51ea <eeprom_emulator_write_page+0x6a>
				page_trans[c].physical_page =
    51fe:	aa05      	add	r2, sp, #20
    5200:	18d2      	adds	r2, r2, r3
    5202:	7056      	strb	r6, [r2, #1]
    5204:	e069      	b.n	52da <eeprom_emulator_write_page+0x15a>
    5206:	af05      	add	r7, sp, #20
    5208:	18ff      	adds	r7, r7, r3
    520a:	707d      	strb	r5, [r7, #1]
    520c:	e063      	b.n	52d6 <eeprom_emulator_write_page+0x156>
			_eeprom_emulator_nvm_read_page(
    520e:	7870      	ldrb	r0, [r6, #1]
    5210:	9902      	ldr	r1, [sp, #8]
    5212:	4b3c      	ldr	r3, [pc, #240]	; (5304 <eeprom_emulator_write_page+0x184>)
    5214:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    5216:	4c39      	ldr	r4, [pc, #228]	; (52fc <eeprom_emulator_write_page+0x17c>)
    5218:	0021      	movs	r1, r4
    521a:	3188      	adds	r1, #136	; 0x88
    521c:	b2a8      	uxth	r0, r5
    521e:	4b3a      	ldr	r3, [pc, #232]	; (5308 <eeprom_emulator_write_page+0x188>)
    5220:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    5222:	464b      	mov	r3, r9
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	18e3      	adds	r3, r4, r3
    5228:	72dd      	strb	r5, [r3, #11]
		_eeprom_instance.cache_active = true;
    522a:	2201      	movs	r2, #1
    522c:	23c8      	movs	r3, #200	; 0xc8
    522e:	54e2      	strb	r2, [r4, r3]
    5230:	3701      	adds	r7, #1
    5232:	3602      	adds	r6, #2
	for (uint8_t c = 0; c < 2; c++) {
    5234:	2f02      	cmp	r7, #2
    5236:	d013      	beq.n	5260 <eeprom_emulator_write_page+0xe0>
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    5238:	2387      	movs	r3, #135	; 0x87
    523a:	465a      	mov	r2, fp
    523c:	5cd5      	ldrb	r5, [r2, r3]
    523e:	00ad      	lsls	r5, r5, #2
    5240:	19ed      	adds	r5, r5, r7
		eeprom_emulator_commit_page_buffer();
    5242:	47d0      	blx	sl
    5244:	46b1      	mov	r9, r6
		if (logical_page == page_trans[c].logical_page) {
    5246:	7833      	ldrb	r3, [r6, #0]
    5248:	9901      	ldr	r1, [sp, #4]
    524a:	428b      	cmp	r3, r1
    524c:	d1df      	bne.n	520e <eeprom_emulator_write_page+0x8e>
			_eeprom_instance.cache.header.logical_page = logical_page;
    524e:	2388      	movs	r3, #136	; 0x88
    5250:	4a2a      	ldr	r2, [pc, #168]	; (52fc <eeprom_emulator_write_page+0x17c>)
    5252:	54d1      	strb	r1, [r2, r3]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    5254:	223c      	movs	r2, #60	; 0x3c
    5256:	9900      	ldr	r1, [sp, #0]
    5258:	9803      	ldr	r0, [sp, #12]
    525a:	4b2c      	ldr	r3, [pc, #176]	; (530c <eeprom_emulator_write_page+0x18c>)
    525c:	4798      	blx	r3
    525e:	e7da      	b.n	5216 <eeprom_emulator_write_page+0x96>
	_eeprom_emulator_nvm_erase_row(row_number);
    5260:	4644      	mov	r4, r8
    5262:	4640      	mov	r0, r8
    5264:	4b2a      	ldr	r3, [pc, #168]	; (5310 <eeprom_emulator_write_page+0x190>)
    5266:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    5268:	2387      	movs	r3, #135	; 0x87
    526a:	4a24      	ldr	r2, [pc, #144]	; (52fc <eeprom_emulator_write_page+0x17c>)
    526c:	54d4      	strb	r4, [r2, r3]
		return STATUS_OK;
    526e:	2000      	movs	r0, #0
    5270:	e794      	b.n	519c <eeprom_emulator_write_page+0x1c>
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    5272:	0035      	movs	r5, r6
	_eeprom_instance.cache.header.logical_page = logical_page;
    5274:	4e21      	ldr	r6, [pc, #132]	; (52fc <eeprom_emulator_write_page+0x17c>)
    5276:	2388      	movs	r3, #136	; 0x88
    5278:	54f4      	strb	r4, [r6, r3]
	memcpy(&_eeprom_instance.cache.data,
    527a:	0030      	movs	r0, r6
    527c:	308c      	adds	r0, #140	; 0x8c
    527e:	223c      	movs	r2, #60	; 0x3c
    5280:	9900      	ldr	r1, [sp, #0]
    5282:	4b22      	ldr	r3, [pc, #136]	; (530c <eeprom_emulator_write_page+0x18c>)
    5284:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    5286:	0031      	movs	r1, r6
    5288:	3188      	adds	r1, #136	; 0x88
    528a:	b2a8      	uxth	r0, r5
    528c:	4b1e      	ldr	r3, [pc, #120]	; (5308 <eeprom_emulator_write_page+0x188>)
    528e:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    5290:	1934      	adds	r4, r6, r4
    5292:	72e5      	strb	r5, [r4, #11]
	_eeprom_instance.cache_active           = true;
    5294:	2201      	movs	r2, #1
    5296:	23c8      	movs	r3, #200	; 0xc8
    5298:	54f2      	strb	r2, [r6, r3]
	return STATUS_OK;
    529a:	2000      	movs	r0, #0
    529c:	e77e      	b.n	519c <eeprom_emulator_write_page+0x1c>
		_eeprom_emulator_move_data_to_spare(
    529e:	08b3      	lsrs	r3, r6, #2
    52a0:	4698      	mov	r8, r3
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    52a2:	021b      	lsls	r3, r3, #8
	const struct _eeprom_page *row_data =
    52a4:	4a15      	ldr	r2, [pc, #84]	; (52fc <eeprom_emulator_write_page+0x17c>)
    52a6:	6852      	ldr	r2, [r2, #4]
    52a8:	18d3      	adds	r3, r2, r3
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    52aa:	aa05      	add	r2, sp, #20
    52ac:	7819      	ldrb	r1, [r3, #0]
    52ae:	7011      	strb	r1, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    52b0:	2103      	movs	r1, #3
    52b2:	438e      	bics	r6, r1
    52b4:	7056      	strb	r6, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    52b6:	313d      	adds	r1, #61	; 0x3d
    52b8:	5c59      	ldrb	r1, [r3, r1]
    52ba:	7091      	strb	r1, [r2, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    52bc:	1c71      	adds	r1, r6, #1
    52be:	70d1      	strb	r1, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    52c0:	2280      	movs	r2, #128	; 0x80
    52c2:	5c98      	ldrb	r0, [r3, r2]
    52c4:	3240      	adds	r2, #64	; 0x40
    52c6:	5c99      	ldrb	r1, [r3, r2]
    52c8:	2300      	movs	r3, #0
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    52ca:	1cb5      	adds	r5, r6, #2
    52cc:	3603      	adds	r6, #3
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    52ce:	aa05      	add	r2, sp, #20
    52d0:	5cd2      	ldrb	r2, [r2, r3]
    52d2:	4290      	cmp	r0, r2
    52d4:	d097      	beq.n	5206 <eeprom_emulator_write_page+0x86>
    52d6:	428a      	cmp	r2, r1
    52d8:	d091      	beq.n	51fe <eeprom_emulator_write_page+0x7e>
    52da:	3302      	adds	r3, #2
	for (uint8_t c = 0; c < 2; c++) {
    52dc:	2b04      	cmp	r3, #4
    52de:	d1f6      	bne.n	52ce <eeprom_emulator_write_page+0x14e>
    52e0:	ae05      	add	r6, sp, #20
    52e2:	2700      	movs	r7, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    52e4:	4b05      	ldr	r3, [pc, #20]	; (52fc <eeprom_emulator_write_page+0x17c>)
    52e6:	469b      	mov	fp, r3
		eeprom_emulator_commit_page_buffer();
    52e8:	4b05      	ldr	r3, [pc, #20]	; (5300 <eeprom_emulator_write_page+0x180>)
    52ea:	469a      	mov	sl, r3
			_eeprom_emulator_nvm_read_page(
    52ec:	465b      	mov	r3, fp
    52ee:	3388      	adds	r3, #136	; 0x88
    52f0:	9302      	str	r3, [sp, #8]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    52f2:	3304      	adds	r3, #4
    52f4:	9303      	str	r3, [sp, #12]
    52f6:	9401      	str	r4, [sp, #4]
    52f8:	e79e      	b.n	5238 <eeprom_emulator_write_page+0xb8>
    52fa:	46c0      	nop			; (mov r8, r8)
    52fc:	20000b48 	.word	0x20000b48
    5300:	00005151 	.word	0x00005151
    5304:	00004e0d 	.word	0x00004e0d
    5308:	00004e31 	.word	0x00004e31
    530c:	000082ed 	.word	0x000082ed
    5310:	00004ca5 	.word	0x00004ca5

00005314 <eeprom_emulator_write_buffer>:
{
    5314:	b5f0      	push	{r4, r5, r6, r7, lr}
    5316:	46de      	mov	lr, fp
    5318:	4657      	mov	r7, sl
    531a:	464e      	mov	r6, r9
    531c:	4645      	mov	r5, r8
    531e:	b5e0      	push	{r5, r6, r7, lr}
    5320:	b091      	sub	sp, #68	; 0x44
    5322:	0005      	movs	r5, r0
    5324:	4689      	mov	r9, r1
    5326:	4690      	mov	r8, r2
	uint8_t logical_page = offset / EEPROM_PAGE_SIZE;
    5328:	213c      	movs	r1, #60	; 0x3c
    532a:	4b2d      	ldr	r3, [pc, #180]	; (53e0 <eeprom_emulator_write_buffer+0xcc>)
    532c:	4798      	blx	r3
    532e:	b2c7      	uxtb	r7, r0
	if ((offset % EEPROM_PAGE_SIZE) || length < EEPROM_PAGE_SIZE) {
    5330:	213c      	movs	r1, #60	; 0x3c
    5332:	0028      	movs	r0, r5
    5334:	4b2b      	ldr	r3, [pc, #172]	; (53e4 <eeprom_emulator_write_buffer+0xd0>)
    5336:	4798      	blx	r3
    5338:	b289      	uxth	r1, r1
    533a:	2900      	cmp	r1, #0
    533c:	d135      	bne.n	53aa <eeprom_emulator_write_buffer+0x96>
    533e:	4643      	mov	r3, r8
    5340:	2b3b      	cmp	r3, #59	; 0x3b
    5342:	d93f      	bls.n	53c4 <eeprom_emulator_write_buffer+0xb0>
		buffer[c % EEPROM_PAGE_SIZE] = data[c - offset];
    5344:	464b      	mov	r3, r9
    5346:	781a      	ldrb	r2, [r3, #0]
    5348:	ab01      	add	r3, sp, #4
    534a:	701a      	strb	r2, [r3, #0]
		c=c+1;
    534c:	1c6c      	adds	r4, r5, #1
    534e:	b2a4      	uxth	r4, r4
	for (; c < (length + offset); c++) {
    5350:	0026      	movs	r6, r4
    5352:	46ab      	mov	fp, r5
    5354:	44a8      	add	r8, r5
    5356:	45a0      	cmp	r8, r4
    5358:	dd22      	ble.n	53a0 <eeprom_emulator_write_buffer+0x8c>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    535a:	4b22      	ldr	r3, [pc, #136]	; (53e4 <eeprom_emulator_write_buffer+0xd0>)
    535c:	469a      	mov	sl, r3
    535e:	e00a      	b.n	5376 <eeprom_emulator_write_buffer+0x62>
		buffer[c % EEPROM_PAGE_SIZE] = data[c - offset];
    5360:	465b      	mov	r3, fp
    5362:	1af6      	subs	r6, r6, r3
    5364:	464b      	mov	r3, r9
    5366:	5d9a      	ldrb	r2, [r3, r6]
    5368:	ab01      	add	r3, sp, #4
    536a:	555a      	strb	r2, [r3, r5]
	for (; c < (length + offset); c++) {
    536c:	3401      	adds	r4, #1
    536e:	b2a4      	uxth	r4, r4
    5370:	0026      	movs	r6, r4
    5372:	4544      	cmp	r4, r8
    5374:	da14      	bge.n	53a0 <eeprom_emulator_write_buffer+0x8c>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    5376:	213c      	movs	r1, #60	; 0x3c
    5378:	0020      	movs	r0, r4
    537a:	47d0      	blx	sl
    537c:	b28d      	uxth	r5, r1
    537e:	2d00      	cmp	r5, #0
    5380:	d1ee      	bne.n	5360 <eeprom_emulator_write_buffer+0x4c>
			error_code = eeprom_emulator_write_page(logical_page, buffer);
    5382:	a901      	add	r1, sp, #4
    5384:	0038      	movs	r0, r7
    5386:	4b18      	ldr	r3, [pc, #96]	; (53e8 <eeprom_emulator_write_buffer+0xd4>)
    5388:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    538a:	2800      	cmp	r0, #0
    538c:	d113      	bne.n	53b6 <eeprom_emulator_write_buffer+0xa2>
			logical_page++;
    538e:	3701      	adds	r7, #1
    5390:	b2ff      	uxtb	r7, r7
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    5392:	a901      	add	r1, sp, #4
    5394:	0038      	movs	r0, r7
    5396:	4b15      	ldr	r3, [pc, #84]	; (53ec <eeprom_emulator_write_buffer+0xd8>)
    5398:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    539a:	2800      	cmp	r0, #0
    539c:	d0e0      	beq.n	5360 <eeprom_emulator_write_buffer+0x4c>
    539e:	e00a      	b.n	53b6 <eeprom_emulator_write_buffer+0xa2>
		error_code = eeprom_emulator_write_page(logical_page, buffer);
    53a0:	a901      	add	r1, sp, #4
    53a2:	0038      	movs	r0, r7
    53a4:	4b10      	ldr	r3, [pc, #64]	; (53e8 <eeprom_emulator_write_buffer+0xd4>)
    53a6:	4798      	blx	r3
    53a8:	e005      	b.n	53b6 <eeprom_emulator_write_buffer+0xa2>
		error_code = eeprom_emulator_read_page(logical_page, buffer);
    53aa:	a901      	add	r1, sp, #4
    53ac:	0038      	movs	r0, r7
    53ae:	4b0f      	ldr	r3, [pc, #60]	; (53ec <eeprom_emulator_write_buffer+0xd8>)
    53b0:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    53b2:	2800      	cmp	r0, #0
    53b4:	d00d      	beq.n	53d2 <eeprom_emulator_write_buffer+0xbe>
}
    53b6:	b011      	add	sp, #68	; 0x44
    53b8:	bc3c      	pop	{r2, r3, r4, r5}
    53ba:	4690      	mov	r8, r2
    53bc:	4699      	mov	r9, r3
    53be:	46a2      	mov	sl, r4
    53c0:	46ab      	mov	fp, r5
    53c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		error_code = eeprom_emulator_read_page(logical_page, buffer);
    53c4:	a901      	add	r1, sp, #4
    53c6:	0038      	movs	r0, r7
    53c8:	4b08      	ldr	r3, [pc, #32]	; (53ec <eeprom_emulator_write_buffer+0xd8>)
    53ca:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    53cc:	2800      	cmp	r0, #0
    53ce:	d0b9      	beq.n	5344 <eeprom_emulator_write_buffer+0x30>
    53d0:	e7f1      	b.n	53b6 <eeprom_emulator_write_buffer+0xa2>
	for (; c < (length + offset); c++) {
    53d2:	002e      	movs	r6, r5
    53d4:	46ab      	mov	fp, r5
    53d6:	44a8      	add	r8, r5
    53d8:	45a8      	cmp	r8, r5
    53da:	ddec      	ble.n	53b6 <eeprom_emulator_write_buffer+0xa2>
	uint16_t c = offset;
    53dc:	002c      	movs	r4, r5
    53de:	e7bc      	b.n	535a <eeprom_emulator_write_buffer+0x46>
    53e0:	000062d5 	.word	0x000062d5
    53e4:	000063e1 	.word	0x000063e1
    53e8:	00005181 	.word	0x00005181
    53ec:	00005039 	.word	0x00005039

000053f0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    53f0:	4770      	bx	lr
	...

000053f4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    53f4:	4b0c      	ldr	r3, [pc, #48]	; (5428 <cpu_irq_enter_critical+0x34>)
    53f6:	681b      	ldr	r3, [r3, #0]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d106      	bne.n	540a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    53fc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5400:	2b00      	cmp	r3, #0
    5402:	d007      	beq.n	5414 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5404:	2200      	movs	r2, #0
    5406:	4b09      	ldr	r3, [pc, #36]	; (542c <cpu_irq_enter_critical+0x38>)
    5408:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    540a:	4a07      	ldr	r2, [pc, #28]	; (5428 <cpu_irq_enter_critical+0x34>)
    540c:	6813      	ldr	r3, [r2, #0]
    540e:	3301      	adds	r3, #1
    5410:	6013      	str	r3, [r2, #0]
}
    5412:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    5414:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5416:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    541a:	2200      	movs	r2, #0
    541c:	4b04      	ldr	r3, [pc, #16]	; (5430 <cpu_irq_enter_critical+0x3c>)
    541e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5420:	3201      	adds	r2, #1
    5422:	4b02      	ldr	r3, [pc, #8]	; (542c <cpu_irq_enter_critical+0x38>)
    5424:	701a      	strb	r2, [r3, #0]
    5426:	e7f0      	b.n	540a <cpu_irq_enter_critical+0x16>
    5428:	20000c14 	.word	0x20000c14
    542c:	20000c18 	.word	0x20000c18
    5430:	20000010 	.word	0x20000010

00005434 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5434:	4b08      	ldr	r3, [pc, #32]	; (5458 <cpu_irq_leave_critical+0x24>)
    5436:	681a      	ldr	r2, [r3, #0]
    5438:	3a01      	subs	r2, #1
    543a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	2b00      	cmp	r3, #0
    5440:	d109      	bne.n	5456 <cpu_irq_leave_critical+0x22>
    5442:	4b06      	ldr	r3, [pc, #24]	; (545c <cpu_irq_leave_critical+0x28>)
    5444:	781b      	ldrb	r3, [r3, #0]
    5446:	2b00      	cmp	r3, #0
    5448:	d005      	beq.n	5456 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    544a:	2201      	movs	r2, #1
    544c:	4b04      	ldr	r3, [pc, #16]	; (5460 <cpu_irq_leave_critical+0x2c>)
    544e:	701a      	strb	r2, [r3, #0]
    5450:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5454:	b662      	cpsie	i
	}
}
    5456:	4770      	bx	lr
    5458:	20000c14 	.word	0x20000c14
    545c:	20000c18 	.word	0x20000c18
    5460:	20000010 	.word	0x20000010

00005464 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5464:	b510      	push	{r4, lr}
	switch (clock_source) {
    5466:	2808      	cmp	r0, #8
    5468:	d803      	bhi.n	5472 <system_clock_source_get_hz+0xe>
    546a:	0080      	lsls	r0, r0, #2
    546c:	4b1d      	ldr	r3, [pc, #116]	; (54e4 <system_clock_source_get_hz+0x80>)
    546e:	581b      	ldr	r3, [r3, r0]
    5470:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    5472:	2000      	movs	r0, #0
    5474:	e034      	b.n	54e0 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    5476:	4b1c      	ldr	r3, [pc, #112]	; (54e8 <system_clock_source_get_hz+0x84>)
    5478:	6918      	ldr	r0, [r3, #16]
    547a:	e031      	b.n	54e0 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    547c:	4b1b      	ldr	r3, [pc, #108]	; (54ec <system_clock_source_get_hz+0x88>)
    547e:	7d18      	ldrb	r0, [r3, #20]
    5480:	0700      	lsls	r0, r0, #28
    5482:	0f80      	lsrs	r0, r0, #30
    5484:	1c43      	adds	r3, r0, #1
    5486:	481a      	ldr	r0, [pc, #104]	; (54f0 <system_clock_source_get_hz+0x8c>)
    5488:	4358      	muls	r0, r3
    548a:	e029      	b.n	54e0 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    548c:	4b16      	ldr	r3, [pc, #88]	; (54e8 <system_clock_source_get_hz+0x84>)
    548e:	6958      	ldr	r0, [r3, #20]
    5490:	e026      	b.n	54e0 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5492:	4b15      	ldr	r3, [pc, #84]	; (54e8 <system_clock_source_get_hz+0x84>)
    5494:	681b      	ldr	r3, [r3, #0]
			return 0;
    5496:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5498:	079b      	lsls	r3, r3, #30
    549a:	d521      	bpl.n	54e0 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    549c:	4913      	ldr	r1, [pc, #76]	; (54ec <system_clock_source_get_hz+0x88>)
    549e:	2280      	movs	r2, #128	; 0x80
    54a0:	0052      	lsls	r2, r2, #1
    54a2:	68cb      	ldr	r3, [r1, #12]
    54a4:	4213      	tst	r3, r2
    54a6:	d0fc      	beq.n	54a2 <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    54a8:	4b0f      	ldr	r3, [pc, #60]	; (54e8 <system_clock_source_get_hz+0x84>)
    54aa:	681a      	ldr	r2, [r3, #0]
    54ac:	2324      	movs	r3, #36	; 0x24
    54ae:	4013      	ands	r3, r2
    54b0:	2b04      	cmp	r3, #4
    54b2:	d001      	beq.n	54b8 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    54b4:	480f      	ldr	r0, [pc, #60]	; (54f4 <system_clock_source_get_hz+0x90>)
    54b6:	e013      	b.n	54e0 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    54b8:	2000      	movs	r0, #0
    54ba:	4b0f      	ldr	r3, [pc, #60]	; (54f8 <system_clock_source_get_hz+0x94>)
    54bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    54be:	4b0a      	ldr	r3, [pc, #40]	; (54e8 <system_clock_source_get_hz+0x84>)
    54c0:	689b      	ldr	r3, [r3, #8]
    54c2:	041b      	lsls	r3, r3, #16
    54c4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    54c6:	4358      	muls	r0, r3
    54c8:	e00a      	b.n	54e0 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    54ca:	2328      	movs	r3, #40	; 0x28
    54cc:	4a07      	ldr	r2, [pc, #28]	; (54ec <system_clock_source_get_hz+0x88>)
    54ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    54d0:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    54d2:	079b      	lsls	r3, r3, #30
    54d4:	d504      	bpl.n	54e0 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    54d6:	4b04      	ldr	r3, [pc, #16]	; (54e8 <system_clock_source_get_hz+0x84>)
    54d8:	68d8      	ldr	r0, [r3, #12]
    54da:	e001      	b.n	54e0 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    54dc:	2080      	movs	r0, #128	; 0x80
    54de:	0200      	lsls	r0, r0, #8
	}
}
    54e0:	bd10      	pop	{r4, pc}
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	0000e040 	.word	0x0000e040
    54e8:	20000c1c 	.word	0x20000c1c
    54ec:	40000c00 	.word	0x40000c00
    54f0:	003d0900 	.word	0x003d0900
    54f4:	02dc6c00 	.word	0x02dc6c00
    54f8:	00005999 	.word	0x00005999

000054fc <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    54fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    54fe:	4b26      	ldr	r3, [pc, #152]	; (5598 <system_clock_source_xosc_set_config+0x9c>)
    5500:	8a1b      	ldrh	r3, [r3, #16]
    5502:	055d      	lsls	r5, r3, #21
    5504:	0f6d      	lsrs	r5, r5, #29

	temp.bit.STARTUP = config->startup_time;
    5506:	7842      	ldrb	r2, [r0, #1]
    5508:	240f      	movs	r4, #15
    550a:	4014      	ands	r4, r2

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    550c:	7802      	ldrb	r2, [r0, #0]
    550e:	4251      	negs	r1, r2
    5510:	414a      	adcs	r2, r1
    5512:	b2d2      	uxtb	r2, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    5514:	7886      	ldrb	r6, [r0, #2]

	/* Set gain */
	if (config->frequency <= 2000000) {
    5516:	6841      	ldr	r1, [r0, #4]
    5518:	4f20      	ldr	r7, [pc, #128]	; (559c <system_clock_source_xosc_set_config+0xa0>)
    551a:	42b9      	cmp	r1, r7
    551c:	d90d      	bls.n	553a <system_clock_source_xosc_set_config+0x3e>
		temp.bit.GAIN = 0;
	} else if (config->frequency <= 4000000) {
    551e:	4f20      	ldr	r7, [pc, #128]	; (55a0 <system_clock_source_xosc_set_config+0xa4>)
    5520:	42b9      	cmp	r1, r7
    5522:	d933      	bls.n	558c <system_clock_source_xosc_set_config+0x90>
		temp.bit.GAIN = 1;
	} else if (config->frequency <= 8000000) {
    5524:	4f1f      	ldr	r7, [pc, #124]	; (55a4 <system_clock_source_xosc_set_config+0xa8>)
    5526:	42b9      	cmp	r1, r7
    5528:	d932      	bls.n	5590 <system_clock_source_xosc_set_config+0x94>
		temp.bit.GAIN = 2;
	} else if (config->frequency <= 16000000) {
    552a:	4f1f      	ldr	r7, [pc, #124]	; (55a8 <system_clock_source_xosc_set_config+0xac>)
    552c:	42b9      	cmp	r1, r7
    552e:	d931      	bls.n	5594 <system_clock_source_xosc_set_config+0x98>
		temp.bit.GAIN = 3;
	} else if (config->frequency <= 32000000) {
    5530:	4f1e      	ldr	r7, [pc, #120]	; (55ac <system_clock_source_xosc_set_config+0xb0>)
    5532:	42b9      	cmp	r1, r7
    5534:	d802      	bhi.n	553c <system_clock_source_xosc_set_config+0x40>
		temp.bit.GAIN = 4;
    5536:	2504      	movs	r5, #4
    5538:	e000      	b.n	553c <system_clock_source_xosc_set_config+0x40>
		temp.bit.GAIN = 0;
    553a:	2500      	movs	r5, #0
	}

	temp.bit.ONDEMAND = config->on_demand;
    553c:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    553e:	7a00      	ldrb	r0, [r0, #8]
    5540:	4684      	mov	ip, r0

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    5542:	481b      	ldr	r0, [pc, #108]	; (55b0 <system_clock_source_xosc_set_config+0xb4>)
    5544:	6101      	str	r1, [r0, #16]

	OSCCTRL->XOSCCTRL = temp;
    5546:	2101      	movs	r1, #1
    5548:	0090      	lsls	r0, r2, #2
    554a:	2204      	movs	r2, #4
    554c:	4393      	bics	r3, r2
    554e:	001a      	movs	r2, r3
    5550:	4302      	orrs	r2, r0
    5552:	4663      	mov	r3, ip
    5554:	400b      	ands	r3, r1
    5556:	019b      	lsls	r3, r3, #6
    5558:	2040      	movs	r0, #64	; 0x40
    555a:	4382      	bics	r2, r0
    555c:	431a      	orrs	r2, r3
    555e:	0038      	movs	r0, r7
    5560:	4008      	ands	r0, r1
    5562:	01c0      	lsls	r0, r0, #7
    5564:	2380      	movs	r3, #128	; 0x80
    5566:	439a      	bics	r2, r3
    5568:	0013      	movs	r3, r2
    556a:	4303      	orrs	r3, r0
    556c:	022d      	lsls	r5, r5, #8
    556e:	4a11      	ldr	r2, [pc, #68]	; (55b4 <system_clock_source_xosc_set_config+0xb8>)
    5570:	4013      	ands	r3, r2
    5572:	432b      	orrs	r3, r5
    5574:	4031      	ands	r1, r6
    5576:	02c9      	lsls	r1, r1, #11
    5578:	4a0f      	ldr	r2, [pc, #60]	; (55b8 <system_clock_source_xosc_set_config+0xbc>)
    557a:	4013      	ands	r3, r2
    557c:	430b      	orrs	r3, r1
    557e:	0324      	lsls	r4, r4, #12
    5580:	051b      	lsls	r3, r3, #20
    5582:	0d1b      	lsrs	r3, r3, #20
    5584:	4323      	orrs	r3, r4
    5586:	4a04      	ldr	r2, [pc, #16]	; (5598 <system_clock_source_xosc_set_config+0x9c>)
    5588:	8213      	strh	r3, [r2, #16]
}
    558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp.bit.GAIN = 1;
    558c:	2501      	movs	r5, #1
    558e:	e7d5      	b.n	553c <system_clock_source_xosc_set_config+0x40>
		temp.bit.GAIN = 2;
    5590:	2502      	movs	r5, #2
    5592:	e7d3      	b.n	553c <system_clock_source_xosc_set_config+0x40>
		temp.bit.GAIN = 3;
    5594:	2503      	movs	r5, #3
    5596:	e7d1      	b.n	553c <system_clock_source_xosc_set_config+0x40>
    5598:	40000c00 	.word	0x40000c00
    559c:	001e8480 	.word	0x001e8480
    55a0:	003d0900 	.word	0x003d0900
    55a4:	007a1200 	.word	0x007a1200
    55a8:	00f42400 	.word	0x00f42400
    55ac:	01e84800 	.word	0x01e84800
    55b0:	20000c1c 	.word	0x20000c1c
    55b4:	fffff8ff 	.word	0xfffff8ff
    55b8:	fffff7ff 	.word	0xfffff7ff

000055bc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    55bc:	2808      	cmp	r0, #8
    55be:	d803      	bhi.n	55c8 <system_clock_source_enable+0xc>
    55c0:	0080      	lsls	r0, r0, #2
    55c2:	4b2d      	ldr	r3, [pc, #180]	; (5678 <system_clock_source_enable+0xbc>)
    55c4:	581b      	ldr	r3, [r3, r0]
    55c6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    55c8:	2017      	movs	r0, #23
    55ca:	e054      	b.n	5676 <system_clock_source_enable+0xba>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    55cc:	4a2b      	ldr	r2, [pc, #172]	; (567c <system_clock_source_enable+0xc0>)
    55ce:	7d13      	ldrb	r3, [r2, #20]
    55d0:	2102      	movs	r1, #2
    55d2:	430b      	orrs	r3, r1
    55d4:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    55d6:	2000      	movs	r0, #0
    55d8:	e04d      	b.n	5676 <system_clock_source_enable+0xba>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    55da:	4a29      	ldr	r2, [pc, #164]	; (5680 <system_clock_source_enable+0xc4>)
    55dc:	6993      	ldr	r3, [r2, #24]
    55de:	2102      	movs	r1, #2
    55e0:	430b      	orrs	r3, r1
    55e2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    55e4:	2000      	movs	r0, #0
		break;
    55e6:	e046      	b.n	5676 <system_clock_source_enable+0xba>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    55e8:	4a24      	ldr	r2, [pc, #144]	; (567c <system_clock_source_enable+0xc0>)
    55ea:	8a13      	ldrh	r3, [r2, #16]
    55ec:	2102      	movs	r1, #2
    55ee:	430b      	orrs	r3, r1
    55f0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    55f2:	2000      	movs	r0, #0
		break;
    55f4:	e03f      	b.n	5676 <system_clock_source_enable+0xba>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    55f6:	4a22      	ldr	r2, [pc, #136]	; (5680 <system_clock_source_enable+0xc4>)
    55f8:	6953      	ldr	r3, [r2, #20]
    55fa:	2102      	movs	r1, #2
    55fc:	430b      	orrs	r3, r1
    55fe:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    5600:	2000      	movs	r0, #0
		break;
    5602:	e038      	b.n	5676 <system_clock_source_enable+0xba>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    5604:	491f      	ldr	r1, [pc, #124]	; (5684 <system_clock_source_enable+0xc8>)
    5606:	680b      	ldr	r3, [r1, #0]
    5608:	2202      	movs	r2, #2
    560a:	4313      	orrs	r3, r2
    560c:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    560e:	4b1b      	ldr	r3, [pc, #108]	; (567c <system_clock_source_enable+0xc0>)
    5610:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5612:	0019      	movs	r1, r3
    5614:	32fe      	adds	r2, #254	; 0xfe
    5616:	68cb      	ldr	r3, [r1, #12]
    5618:	4213      	tst	r3, r2
    561a:	d0fc      	beq.n	5616 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    561c:	4b19      	ldr	r3, [pc, #100]	; (5684 <system_clock_source_enable+0xc8>)
    561e:	689a      	ldr	r2, [r3, #8]
    5620:	4b16      	ldr	r3, [pc, #88]	; (567c <system_clock_source_enable+0xc0>)
    5622:	621a      	str	r2, [r3, #32]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    5624:	2202      	movs	r2, #2
    5626:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5628:	0019      	movs	r1, r3
    562a:	32fe      	adds	r2, #254	; 0xfe
    562c:	68cb      	ldr	r3, [r1, #12]
    562e:	4213      	tst	r3, r2
    5630:	d0fc      	beq.n	562c <system_clock_source_enable+0x70>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5632:	4b14      	ldr	r3, [pc, #80]	; (5684 <system_clock_source_enable+0xc8>)
    5634:	685a      	ldr	r2, [r3, #4]
    5636:	4b11      	ldr	r3, [pc, #68]	; (567c <system_clock_source_enable+0xc0>)
    5638:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    563a:	2200      	movs	r2, #0
    563c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    563e:	0019      	movs	r1, r3
    5640:	3201      	adds	r2, #1
    5642:	32ff      	adds	r2, #255	; 0xff
    5644:	68cb      	ldr	r3, [r1, #12]
    5646:	4213      	tst	r3, r2
    5648:	d0fc      	beq.n	5644 <system_clock_source_enable+0x88>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    564a:	4b0e      	ldr	r3, [pc, #56]	; (5684 <system_clock_source_enable+0xc8>)
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	b29b      	uxth	r3, r3
    5650:	4a0a      	ldr	r2, [pc, #40]	; (567c <system_clock_source_enable+0xc0>)
    5652:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    5654:	2000      	movs	r0, #0
    5656:	e00e      	b.n	5676 <system_clock_source_enable+0xba>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    5658:	4908      	ldr	r1, [pc, #32]	; (567c <system_clock_source_enable+0xc0>)
    565a:	2228      	movs	r2, #40	; 0x28
    565c:	5c8b      	ldrb	r3, [r1, r2]
    565e:	2002      	movs	r0, #2
    5660:	4303      	orrs	r3, r0
    5662:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    5664:	0008      	movs	r0, r1
    5666:	2138      	movs	r1, #56	; 0x38
    5668:	3a26      	subs	r2, #38	; 0x26
    566a:	5c43      	ldrb	r3, [r0, r1]
    566c:	4213      	tst	r3, r2
    566e:	d1fc      	bne.n	566a <system_clock_source_enable+0xae>
	return STATUS_OK;
    5670:	2000      	movs	r0, #0
    5672:	e000      	b.n	5676 <system_clock_source_enable+0xba>
		return STATUS_OK;
    5674:	2000      	movs	r0, #0
}
    5676:	4770      	bx	lr
    5678:	0000e064 	.word	0x0000e064
    567c:	40000c00 	.word	0x40000c00
    5680:	40001000 	.word	0x40001000
    5684:	20000c1c 	.word	0x20000c1c

00005688 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5688:	b510      	push	{r4, lr}
    568a:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    568c:	2280      	movs	r2, #128	; 0x80
    568e:	0052      	lsls	r2, r2, #1
    5690:	4b32      	ldr	r3, [pc, #200]	; (575c <system_clock_init+0xd4>)
    5692:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    5694:	3afd      	subs	r2, #253	; 0xfd
    5696:	4b32      	ldr	r3, [pc, #200]	; (5760 <system_clock_init+0xd8>)
    5698:	609a      	str	r2, [r3, #8]
	NVMCTRL->CTRLB.bit.RWS = wait_states;
    569a:	4a32      	ldr	r2, [pc, #200]	; (5764 <system_clock_init+0xdc>)
    569c:	6853      	ldr	r3, [r2, #4]
    569e:	211e      	movs	r1, #30
    56a0:	438b      	bics	r3, r1
    56a2:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    56a4:	2380      	movs	r3, #128	; 0x80
    56a6:	05db      	lsls	r3, r3, #23
    56a8:	789b      	ldrb	r3, [r3, #2]
    56aa:	2b02      	cmp	r3, #2
    56ac:	d00f      	beq.n	56ce <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    56ae:	2380      	movs	r3, #128	; 0x80
    56b0:	05db      	lsls	r3, r3, #23
    56b2:	789b      	ldrb	r3, [r3, #2]
    56b4:	b25b      	sxtb	r3, r3
    56b6:	2b00      	cmp	r3, #0
    56b8:	db09      	blt.n	56ce <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    56ba:	2380      	movs	r3, #128	; 0x80
    56bc:	05db      	lsls	r3, r3, #23
    56be:	2201      	movs	r2, #1
    56c0:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    56c2:	3201      	adds	r2, #1
    56c4:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    56c6:	001a      	movs	r2, r3
    56c8:	7993      	ldrb	r3, [r2, #6]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d0fc      	beq.n	56c8 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    56ce:	4b23      	ldr	r3, [pc, #140]	; (575c <system_clock_init+0xd4>)
    56d0:	7d19      	ldrb	r1, [r3, #20]
    56d2:	2280      	movs	r2, #128	; 0x80
    56d4:	4252      	negs	r2, r2
    56d6:	430a      	orrs	r2, r1
    56d8:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    56da:	7d1a      	ldrb	r2, [r3, #20]
    56dc:	2140      	movs	r1, #64	; 0x40
    56de:	438a      	bics	r2, r1
    56e0:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    56e2:	4b21      	ldr	r3, [pc, #132]	; (5768 <system_clock_init+0xe0>)
    56e4:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    56e6:	4c21      	ldr	r4, [pc, #132]	; (576c <system_clock_init+0xe4>)
    56e8:	2301      	movs	r3, #1
    56ea:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    56ec:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    56ee:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    56f0:	a901      	add	r1, sp, #4
    56f2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    56f4:	2300      	movs	r3, #0
    56f6:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    56f8:	2206      	movs	r2, #6
    56fa:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    56fc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    56fe:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5700:	2000      	movs	r0, #0
    5702:	4b1b      	ldr	r3, [pc, #108]	; (5770 <system_clock_init+0xe8>)
    5704:	4798      	blx	r3
    5706:	2000      	movs	r0, #0
    5708:	4b1a      	ldr	r3, [pc, #104]	; (5774 <system_clock_init+0xec>)
    570a:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    570c:	2000      	movs	r0, #0
    570e:	4b1a      	ldr	r3, [pc, #104]	; (5778 <system_clock_init+0xf0>)
    5710:	4798      	blx	r3
    5712:	7921      	ldrb	r1, [r4, #4]
    5714:	b2c9      	uxtb	r1, r1
    5716:	4b19      	ldr	r3, [pc, #100]	; (577c <system_clock_init+0xf4>)
    5718:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
    571a:	4b19      	ldr	r3, [pc, #100]	; (5780 <system_clock_init+0xf8>)
    571c:	4298      	cmp	r0, r3
    571e:	d902      	bls.n	5726 <system_clock_init+0x9e>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    5720:	2208      	movs	r2, #8
    5722:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    5724:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
    5726:	4b17      	ldr	r3, [pc, #92]	; (5784 <system_clock_init+0xfc>)
    5728:	4298      	cmp	r0, r3
    572a:	d814      	bhi.n	5756 <system_clock_init+0xce>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    572c:	2380      	movs	r3, #128	; 0x80
    572e:	05db      	lsls	r3, r3, #23
    5730:	789b      	ldrb	r3, [r3, #2]
    5732:	2b00      	cmp	r3, #0
    5734:	d00f      	beq.n	5756 <system_clock_init+0xce>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    5736:	2380      	movs	r3, #128	; 0x80
    5738:	05db      	lsls	r3, r3, #23
    573a:	789b      	ldrb	r3, [r3, #2]
    573c:	b25b      	sxtb	r3, r3
    573e:	2b00      	cmp	r3, #0
    5740:	db09      	blt.n	5756 <system_clock_init+0xce>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5742:	2380      	movs	r3, #128	; 0x80
    5744:	05db      	lsls	r3, r3, #23
    5746:	2201      	movs	r2, #1
    5748:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    574a:	2200      	movs	r2, #0
    574c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    574e:	001a      	movs	r2, r3
    5750:	7993      	ldrb	r3, [r2, #6]
    5752:	2b00      	cmp	r3, #0
    5754:	d0fc      	beq.n	5750 <system_clock_init+0xc8>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    5756:	b004      	add	sp, #16
    5758:	bd10      	pop	{r4, pc}
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	40000c00 	.word	0x40000c00
    5760:	40001400 	.word	0x40001400
    5764:	41004000 	.word	0x41004000
    5768:	00005789 	.word	0x00005789
    576c:	40000400 	.word	0x40000400
    5770:	000057ad 	.word	0x000057ad
    5774:	00005859 	.word	0x00005859
    5778:	00005899 	.word	0x00005899
    577c:	000062d5 	.word	0x000062d5
    5780:	005b8d80 	.word	0x005b8d80
    5784:	00b71b00 	.word	0x00b71b00

00005788 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    5788:	4a06      	ldr	r2, [pc, #24]	; (57a4 <system_gclk_init+0x1c>)
    578a:	6953      	ldr	r3, [r2, #20]
    578c:	2140      	movs	r1, #64	; 0x40
    578e:	430b      	orrs	r3, r1
    5790:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    5792:	2201      	movs	r2, #1
    5794:	4b04      	ldr	r3, [pc, #16]	; (57a8 <system_gclk_init+0x20>)
    5796:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    5798:	0019      	movs	r1, r3
    579a:	780b      	ldrb	r3, [r1, #0]
    579c:	4213      	tst	r3, r2
    579e:	d1fc      	bne.n	579a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    57a0:	4770      	bx	lr
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	40000400 	.word	0x40000400
    57a8:	40001800 	.word	0x40001800

000057ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    57ac:	b570      	push	{r4, r5, r6, lr}
    57ae:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57b0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    57b2:	784b      	ldrb	r3, [r1, #1]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d002      	beq.n	57be <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    57b8:	2380      	movs	r3, #128	; 0x80
    57ba:	00db      	lsls	r3, r3, #3
    57bc:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    57be:	7a4b      	ldrb	r3, [r1, #9]
    57c0:	2b00      	cmp	r3, #0
    57c2:	d002      	beq.n	57ca <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    57c4:	2380      	movs	r3, #128	; 0x80
    57c6:	011b      	lsls	r3, r3, #4
    57c8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    57ca:	6848      	ldr	r0, [r1, #4]
    57cc:	2801      	cmp	r0, #1
    57ce:	d90f      	bls.n	57f0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    57d0:	1e43      	subs	r3, r0, #1
    57d2:	4218      	tst	r0, r3
    57d4:	d131      	bne.n	583a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    57d6:	2802      	cmp	r0, #2
    57d8:	d92d      	bls.n	5836 <system_gclk_gen_set_config+0x8a>
    57da:	2302      	movs	r3, #2
    57dc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    57de:	3201      	adds	r2, #1
						mask <<= 1) {
    57e0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    57e2:	4298      	cmp	r0, r3
    57e4:	d8fb      	bhi.n	57de <system_gclk_gen_set_config+0x32>
    57e6:	2380      	movs	r3, #128	; 0x80
    57e8:	015b      	lsls	r3, r3, #5
    57ea:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    57ec:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    57ee:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    57f0:	7a0b      	ldrb	r3, [r1, #8]
    57f2:	2b00      	cmp	r3, #0
    57f4:	d002      	beq.n	57fc <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    57f6:	2380      	movs	r3, #128	; 0x80
    57f8:	019b      	lsls	r3, r3, #6
    57fa:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    57fc:	2604      	movs	r6, #4
    57fe:	40a6      	lsls	r6, r4
    5800:	4911      	ldr	r1, [pc, #68]	; (5848 <system_gclk_gen_set_config+0x9c>)
    5802:	4a12      	ldr	r2, [pc, #72]	; (584c <system_gclk_gen_set_config+0xa0>)
    5804:	684b      	ldr	r3, [r1, #4]
    5806:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    5808:	421e      	tst	r6, r3
    580a:	d1fb      	bne.n	5804 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    580c:	4b10      	ldr	r3, [pc, #64]	; (5850 <system_gclk_gen_set_config+0xa4>)
    580e:	4798      	blx	r3
    5810:	00a4      	lsls	r4, r4, #2
    5812:	4b0d      	ldr	r3, [pc, #52]	; (5848 <system_gclk_gen_set_config+0x9c>)
    5814:	469c      	mov	ip, r3
    5816:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    5818:	6a22      	ldr	r2, [r4, #32]
    581a:	2380      	movs	r3, #128	; 0x80
    581c:	005b      	lsls	r3, r3, #1
    581e:	401a      	ands	r2, r3
    5820:	432a      	orrs	r2, r5
    5822:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5824:	4661      	mov	r1, ip
    5826:	4a09      	ldr	r2, [pc, #36]	; (584c <system_gclk_gen_set_config+0xa0>)
    5828:	684b      	ldr	r3, [r1, #4]
    582a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    582c:	421e      	tst	r6, r3
    582e:	d1fb      	bne.n	5828 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    5830:	4b08      	ldr	r3, [pc, #32]	; (5854 <system_gclk_gen_set_config+0xa8>)
    5832:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    5834:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5836:	2200      	movs	r2, #0
    5838:	e7d5      	b.n	57e6 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    583a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    583c:	2380      	movs	r3, #128	; 0x80
    583e:	009b      	lsls	r3, r3, #2
    5840:	4318      	orrs	r0, r3
    5842:	4305      	orrs	r5, r0
    5844:	e7d4      	b.n	57f0 <system_gclk_gen_set_config+0x44>
    5846:	46c0      	nop			; (mov r8, r8)
    5848:	40001800 	.word	0x40001800
    584c:	000007fc 	.word	0x000007fc
    5850:	000053f5 	.word	0x000053f5
    5854:	00005435 	.word	0x00005435

00005858 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5858:	b510      	push	{r4, lr}
    585a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    585c:	2204      	movs	r2, #4
    585e:	4082      	lsls	r2, r0
    5860:	4809      	ldr	r0, [pc, #36]	; (5888 <system_gclk_gen_enable+0x30>)
    5862:	490a      	ldr	r1, [pc, #40]	; (588c <system_gclk_gen_enable+0x34>)
    5864:	6843      	ldr	r3, [r0, #4]
    5866:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    5868:	421a      	tst	r2, r3
    586a:	d1fb      	bne.n	5864 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    586c:	4b08      	ldr	r3, [pc, #32]	; (5890 <system_gclk_gen_enable+0x38>)
    586e:	4798      	blx	r3
    5870:	00a4      	lsls	r4, r4, #2
    5872:	4b05      	ldr	r3, [pc, #20]	; (5888 <system_gclk_gen_enable+0x30>)
    5874:	469c      	mov	ip, r3
    5876:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    5878:	6a22      	ldr	r2, [r4, #32]
    587a:	2380      	movs	r3, #128	; 0x80
    587c:	005b      	lsls	r3, r3, #1
    587e:	4313      	orrs	r3, r2
    5880:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    5882:	4b04      	ldr	r3, [pc, #16]	; (5894 <system_gclk_gen_enable+0x3c>)
    5884:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5886:	bd10      	pop	{r4, pc}
    5888:	40001800 	.word	0x40001800
    588c:	000007fc 	.word	0x000007fc
    5890:	000053f5 	.word	0x000053f5
    5894:	00005435 	.word	0x00005435

00005898 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    589a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    589c:	2204      	movs	r2, #4
    589e:	4082      	lsls	r2, r0
    58a0:	4812      	ldr	r0, [pc, #72]	; (58ec <system_gclk_gen_get_hz+0x54>)
    58a2:	4913      	ldr	r1, [pc, #76]	; (58f0 <system_gclk_gen_get_hz+0x58>)
    58a4:	6843      	ldr	r3, [r0, #4]
    58a6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    58a8:	421a      	tst	r2, r3
    58aa:	d1fb      	bne.n	58a4 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    58ac:	4b11      	ldr	r3, [pc, #68]	; (58f4 <system_gclk_gen_get_hz+0x5c>)
    58ae:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    58b0:	4f0e      	ldr	r7, [pc, #56]	; (58ec <system_gclk_gen_get_hz+0x54>)
    58b2:	3408      	adds	r4, #8
    58b4:	00a4      	lsls	r4, r4, #2
    58b6:	59e0      	ldr	r0, [r4, r7]
    58b8:	0700      	lsls	r0, r0, #28
    58ba:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    58bc:	4b0e      	ldr	r3, [pc, #56]	; (58f8 <system_gclk_gen_get_hz+0x60>)
    58be:	4798      	blx	r3
    58c0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    58c2:	59e5      	ldr	r5, [r4, r7]
    58c4:	04ed      	lsls	r5, r5, #19
    58c6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    58c8:	59e4      	ldr	r4, [r4, r7]
    58ca:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    58cc:	4b0b      	ldr	r3, [pc, #44]	; (58fc <system_gclk_gen_get_hz+0x64>)
    58ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    58d0:	2d00      	cmp	r5, #0
    58d2:	d107      	bne.n	58e4 <system_gclk_gen_get_hz+0x4c>
    58d4:	2c01      	cmp	r4, #1
    58d6:	d907      	bls.n	58e8 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    58d8:	0021      	movs	r1, r4
    58da:	0030      	movs	r0, r6
    58dc:	4b08      	ldr	r3, [pc, #32]	; (5900 <system_gclk_gen_get_hz+0x68>)
    58de:	4798      	blx	r3
    58e0:	0006      	movs	r6, r0
    58e2:	e001      	b.n	58e8 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    58e4:	3401      	adds	r4, #1
    58e6:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    58e8:	0030      	movs	r0, r6
    58ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58ec:	40001800 	.word	0x40001800
    58f0:	000007fc 	.word	0x000007fc
    58f4:	000053f5 	.word	0x000053f5
    58f8:	00005465 	.word	0x00005465
    58fc:	00005435 	.word	0x00005435
    5900:	000062d5 	.word	0x000062d5

00005904 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5904:	b510      	push	{r4, lr}
    5906:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5908:	4b09      	ldr	r3, [pc, #36]	; (5930 <system_gclk_chan_enable+0x2c>)
    590a:	4798      	blx	r3
    590c:	00a0      	lsls	r0, r4, #2
    590e:	4b09      	ldr	r3, [pc, #36]	; (5934 <system_gclk_chan_enable+0x30>)
    5910:	469c      	mov	ip, r3
    5912:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    5914:	2280      	movs	r2, #128	; 0x80
    5916:	5883      	ldr	r3, [r0, r2]
    5918:	2140      	movs	r1, #64	; 0x40
    591a:	430b      	orrs	r3, r1
    591c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    591e:	3140      	adds	r1, #64	; 0x40
    5920:	3a40      	subs	r2, #64	; 0x40
    5922:	5843      	ldr	r3, [r0, r1]
    5924:	421a      	tst	r2, r3
    5926:	d0fc      	beq.n	5922 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    5928:	4b03      	ldr	r3, [pc, #12]	; (5938 <system_gclk_chan_enable+0x34>)
    592a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    592c:	bd10      	pop	{r4, pc}
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	000053f5 	.word	0x000053f5
    5934:	40001800 	.word	0x40001800
    5938:	00005435 	.word	0x00005435

0000593c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    593c:	b510      	push	{r4, lr}
    593e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5940:	4b09      	ldr	r3, [pc, #36]	; (5968 <system_gclk_chan_disable+0x2c>)
    5942:	4798      	blx	r3
    5944:	00a0      	lsls	r0, r4, #2
    5946:	4b09      	ldr	r3, [pc, #36]	; (596c <system_gclk_chan_disable+0x30>)
    5948:	469c      	mov	ip, r3
    594a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    594c:	2280      	movs	r2, #128	; 0x80
    594e:	5883      	ldr	r3, [r0, r2]
    5950:	2140      	movs	r1, #64	; 0x40
    5952:	438b      	bics	r3, r1
    5954:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    5956:	3140      	adds	r1, #64	; 0x40
    5958:	3a40      	subs	r2, #64	; 0x40
    595a:	5843      	ldr	r3, [r0, r1]
    595c:	421a      	tst	r2, r3
    595e:	d1fc      	bne.n	595a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    5960:	4b03      	ldr	r3, [pc, #12]	; (5970 <system_gclk_chan_disable+0x34>)
    5962:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    5964:	bd10      	pop	{r4, pc}
    5966:	46c0      	nop			; (mov r8, r8)
    5968:	000053f5 	.word	0x000053f5
    596c:	40001800 	.word	0x40001800
    5970:	00005435 	.word	0x00005435

00005974 <system_gclk_chan_set_config>:
{
    5974:	b570      	push	{r4, r5, r6, lr}
    5976:	0004      	movs	r4, r0
    5978:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    597a:	4b05      	ldr	r3, [pc, #20]	; (5990 <system_gclk_chan_set_config+0x1c>)
    597c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    597e:	782a      	ldrb	r2, [r5, #0]
    5980:	230f      	movs	r3, #15
    5982:	4013      	ands	r3, r2
    5984:	3420      	adds	r4, #32
    5986:	00a4      	lsls	r4, r4, #2
    5988:	4a02      	ldr	r2, [pc, #8]	; (5994 <system_gclk_chan_set_config+0x20>)
    598a:	50a3      	str	r3, [r4, r2]
}
    598c:	bd70      	pop	{r4, r5, r6, pc}
    598e:	46c0      	nop			; (mov r8, r8)
    5990:	0000593d 	.word	0x0000593d
    5994:	40001800 	.word	0x40001800

00005998 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5998:	b510      	push	{r4, lr}
    599a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    599c:	4b06      	ldr	r3, [pc, #24]	; (59b8 <system_gclk_chan_get_hz+0x20>)
    599e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    59a0:	3420      	adds	r4, #32
    59a2:	00a4      	lsls	r4, r4, #2
    59a4:	4b05      	ldr	r3, [pc, #20]	; (59bc <system_gclk_chan_get_hz+0x24>)
    59a6:	58e4      	ldr	r4, [r4, r3]
    59a8:	0724      	lsls	r4, r4, #28
    59aa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    59ac:	4b04      	ldr	r3, [pc, #16]	; (59c0 <system_gclk_chan_get_hz+0x28>)
    59ae:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    59b0:	0020      	movs	r0, r4
    59b2:	4b04      	ldr	r3, [pc, #16]	; (59c4 <system_gclk_chan_get_hz+0x2c>)
    59b4:	4798      	blx	r3
}
    59b6:	bd10      	pop	{r4, pc}
    59b8:	000053f5 	.word	0x000053f5
    59bc:	40001800 	.word	0x40001800
    59c0:	00005435 	.word	0x00005435
    59c4:	00005899 	.word	0x00005899

000059c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    59c8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    59ca:	78d3      	ldrb	r3, [r2, #3]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d135      	bne.n	5a3c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    59d0:	7813      	ldrb	r3, [r2, #0]
    59d2:	2b80      	cmp	r3, #128	; 0x80
    59d4:	d029      	beq.n	5a2a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    59d6:	061b      	lsls	r3, r3, #24
    59d8:	2480      	movs	r4, #128	; 0x80
    59da:	0264      	lsls	r4, r4, #9
    59dc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    59de:	7854      	ldrb	r4, [r2, #1]
    59e0:	2502      	movs	r5, #2
    59e2:	43ac      	bics	r4, r5
    59e4:	d106      	bne.n	59f4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    59e6:	7894      	ldrb	r4, [r2, #2]
    59e8:	2c00      	cmp	r4, #0
    59ea:	d120      	bne.n	5a2e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    59ec:	2480      	movs	r4, #128	; 0x80
    59ee:	02a4      	lsls	r4, r4, #10
    59f0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    59f2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    59f4:	7854      	ldrb	r4, [r2, #1]
    59f6:	3c01      	subs	r4, #1
    59f8:	2c01      	cmp	r4, #1
    59fa:	d91c      	bls.n	5a36 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    59fc:	040d      	lsls	r5, r1, #16
    59fe:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a00:	24a0      	movs	r4, #160	; 0xa0
    5a02:	05e4      	lsls	r4, r4, #23
    5a04:	432c      	orrs	r4, r5
    5a06:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a08:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a0a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a0c:	24d0      	movs	r4, #208	; 0xd0
    5a0e:	0624      	lsls	r4, r4, #24
    5a10:	432c      	orrs	r4, r5
    5a12:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a14:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5a16:	78d4      	ldrb	r4, [r2, #3]
    5a18:	2c00      	cmp	r4, #0
    5a1a:	d122      	bne.n	5a62 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5a1c:	035b      	lsls	r3, r3, #13
    5a1e:	d51c      	bpl.n	5a5a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5a20:	7893      	ldrb	r3, [r2, #2]
    5a22:	2b01      	cmp	r3, #1
    5a24:	d01e      	beq.n	5a64 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5a26:	6141      	str	r1, [r0, #20]
    5a28:	e017      	b.n	5a5a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5a2a:	2300      	movs	r3, #0
    5a2c:	e7d7      	b.n	59de <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5a2e:	24c0      	movs	r4, #192	; 0xc0
    5a30:	02e4      	lsls	r4, r4, #11
    5a32:	4323      	orrs	r3, r4
    5a34:	e7dd      	b.n	59f2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5a36:	4c0d      	ldr	r4, [pc, #52]	; (5a6c <_system_pinmux_config+0xa4>)
    5a38:	4023      	ands	r3, r4
    5a3a:	e7df      	b.n	59fc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5a3c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5a3e:	040c      	lsls	r4, r1, #16
    5a40:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a42:	23a0      	movs	r3, #160	; 0xa0
    5a44:	05db      	lsls	r3, r3, #23
    5a46:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a48:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a4a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a4c:	23d0      	movs	r3, #208	; 0xd0
    5a4e:	061b      	lsls	r3, r3, #24
    5a50:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a52:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5a54:	78d3      	ldrb	r3, [r2, #3]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d103      	bne.n	5a62 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a5a:	7853      	ldrb	r3, [r2, #1]
    5a5c:	3b01      	subs	r3, #1
    5a5e:	2b01      	cmp	r3, #1
    5a60:	d902      	bls.n	5a68 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5a62:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5a64:	6181      	str	r1, [r0, #24]
    5a66:	e7f8      	b.n	5a5a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5a68:	6081      	str	r1, [r0, #8]
}
    5a6a:	e7fa      	b.n	5a62 <_system_pinmux_config+0x9a>
    5a6c:	fffbffff 	.word	0xfffbffff

00005a70 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5a70:	b510      	push	{r4, lr}
    5a72:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5a74:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5a76:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a78:	2900      	cmp	r1, #0
    5a7a:	d104      	bne.n	5a86 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5a7c:	0943      	lsrs	r3, r0, #5
    5a7e:	01db      	lsls	r3, r3, #7
    5a80:	4905      	ldr	r1, [pc, #20]	; (5a98 <system_pinmux_pin_set_config+0x28>)
    5a82:	468c      	mov	ip, r1
    5a84:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5a86:	241f      	movs	r4, #31
    5a88:	4020      	ands	r0, r4
    5a8a:	2101      	movs	r1, #1
    5a8c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5a8e:	0018      	movs	r0, r3
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <system_pinmux_pin_set_config+0x2c>)
    5a92:	4798      	blx	r3
}
    5a94:	bd10      	pop	{r4, pc}
    5a96:	46c0      	nop			; (mov r8, r8)
    5a98:	40002800 	.word	0x40002800
    5a9c:	000059c9 	.word	0x000059c9

00005aa0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5aa0:	4770      	bx	lr
	...

00005aa4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5aa4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5aa6:	4b05      	ldr	r3, [pc, #20]	; (5abc <system_init+0x18>)
    5aa8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5aaa:	4b05      	ldr	r3, [pc, #20]	; (5ac0 <system_init+0x1c>)
    5aac:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5aae:	4b05      	ldr	r3, [pc, #20]	; (5ac4 <system_init+0x20>)
    5ab0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5ab2:	4b05      	ldr	r3, [pc, #20]	; (5ac8 <system_init+0x24>)
    5ab4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5ab6:	4b05      	ldr	r3, [pc, #20]	; (5acc <system_init+0x28>)
    5ab8:	4798      	blx	r3
}
    5aba:	bd10      	pop	{r4, pc}
    5abc:	00005689 	.word	0x00005689
    5ac0:	000053f1 	.word	0x000053f1
    5ac4:	00005aa1 	.word	0x00005aa1
    5ac8:	00002fad 	.word	0x00002fad
    5acc:	00005aa1 	.word	0x00005aa1

00005ad0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5ad0:	e7fe      	b.n	5ad0 <Dummy_Handler>
	...

00005ad4 <Reset_Handler>:
{
    5ad4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    5ad6:	4a1a      	ldr	r2, [pc, #104]	; (5b40 <Reset_Handler+0x6c>)
    5ad8:	4b1a      	ldr	r3, [pc, #104]	; (5b44 <Reset_Handler+0x70>)
    5ada:	429a      	cmp	r2, r3
    5adc:	d011      	beq.n	5b02 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5ade:	001a      	movs	r2, r3
    5ae0:	4b19      	ldr	r3, [pc, #100]	; (5b48 <Reset_Handler+0x74>)
    5ae2:	429a      	cmp	r2, r3
    5ae4:	d20d      	bcs.n	5b02 <Reset_Handler+0x2e>
    5ae6:	4a19      	ldr	r2, [pc, #100]	; (5b4c <Reset_Handler+0x78>)
    5ae8:	3303      	adds	r3, #3
    5aea:	1a9b      	subs	r3, r3, r2
    5aec:	089b      	lsrs	r3, r3, #2
    5aee:	3301      	adds	r3, #1
    5af0:	009b      	lsls	r3, r3, #2
    5af2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5af4:	4813      	ldr	r0, [pc, #76]	; (5b44 <Reset_Handler+0x70>)
    5af6:	4912      	ldr	r1, [pc, #72]	; (5b40 <Reset_Handler+0x6c>)
    5af8:	588c      	ldr	r4, [r1, r2]
    5afa:	5084      	str	r4, [r0, r2]
    5afc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5afe:	429a      	cmp	r2, r3
    5b00:	d1fa      	bne.n	5af8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5b02:	4a13      	ldr	r2, [pc, #76]	; (5b50 <Reset_Handler+0x7c>)
    5b04:	4b13      	ldr	r3, [pc, #76]	; (5b54 <Reset_Handler+0x80>)
    5b06:	429a      	cmp	r2, r3
    5b08:	d20a      	bcs.n	5b20 <Reset_Handler+0x4c>
    5b0a:	43d3      	mvns	r3, r2
    5b0c:	4911      	ldr	r1, [pc, #68]	; (5b54 <Reset_Handler+0x80>)
    5b0e:	185b      	adds	r3, r3, r1
    5b10:	2103      	movs	r1, #3
    5b12:	438b      	bics	r3, r1
    5b14:	3304      	adds	r3, #4
    5b16:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5b18:	2100      	movs	r1, #0
    5b1a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5b1c:	4293      	cmp	r3, r2
    5b1e:	d1fc      	bne.n	5b1a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5b20:	4a0d      	ldr	r2, [pc, #52]	; (5b58 <Reset_Handler+0x84>)
    5b22:	21ff      	movs	r1, #255	; 0xff
    5b24:	4b0d      	ldr	r3, [pc, #52]	; (5b5c <Reset_Handler+0x88>)
    5b26:	438b      	bics	r3, r1
    5b28:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5b2a:	4a0d      	ldr	r2, [pc, #52]	; (5b60 <Reset_Handler+0x8c>)
    5b2c:	6853      	ldr	r3, [r2, #4]
    5b2e:	397f      	subs	r1, #127	; 0x7f
    5b30:	430b      	orrs	r3, r1
    5b32:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5b34:	4b0b      	ldr	r3, [pc, #44]	; (5b64 <Reset_Handler+0x90>)
    5b36:	4798      	blx	r3
        main();
    5b38:	4b0b      	ldr	r3, [pc, #44]	; (5b68 <Reset_Handler+0x94>)
    5b3a:	4798      	blx	r3
    5b3c:	e7fe      	b.n	5b3c <Reset_Handler+0x68>
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	0000e534 	.word	0x0000e534
    5b44:	20000000 	.word	0x20000000
    5b48:	200009c0 	.word	0x200009c0
    5b4c:	20000004 	.word	0x20000004
    5b50:	200009c0 	.word	0x200009c0
    5b54:	20000d1c 	.word	0x20000d1c
    5b58:	e000ed00 	.word	0xe000ed00
    5b5c:	00000000 	.word	0x00000000
    5b60:	41004000 	.word	0x41004000
    5b64:	000082a5 	.word	0x000082a5
    5b68:	000039a9 	.word	0x000039a9

00005b6c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5b6c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5b6e:	4a06      	ldr	r2, [pc, #24]	; (5b88 <_sbrk+0x1c>)
    5b70:	6812      	ldr	r2, [r2, #0]
    5b72:	2a00      	cmp	r2, #0
    5b74:	d004      	beq.n	5b80 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5b76:	4a04      	ldr	r2, [pc, #16]	; (5b88 <_sbrk+0x1c>)
    5b78:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5b7a:	18c3      	adds	r3, r0, r3
    5b7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5b7e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5b80:	4902      	ldr	r1, [pc, #8]	; (5b8c <_sbrk+0x20>)
    5b82:	4a01      	ldr	r2, [pc, #4]	; (5b88 <_sbrk+0x1c>)
    5b84:	6011      	str	r1, [r2, #0]
    5b86:	e7f6      	b.n	5b76 <_sbrk+0xa>
    5b88:	20000c34 	.word	0x20000c34
    5b8c:	20001d20 	.word	0x20001d20

00005b90 <acos>:
    5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b92:	4647      	mov	r7, r8
    5b94:	46ce      	mov	lr, r9
    5b96:	b580      	push	{r7, lr}
    5b98:	b08d      	sub	sp, #52	; 0x34
    5b9a:	0004      	movs	r4, r0
    5b9c:	000d      	movs	r5, r1
    5b9e:	f000 f8b7 	bl	5d10 <__ieee754_acos>
    5ba2:	4b27      	ldr	r3, [pc, #156]	; (5c40 <acos+0xb0>)
    5ba4:	0006      	movs	r6, r0
    5ba6:	4698      	mov	r8, r3
    5ba8:	781b      	ldrb	r3, [r3, #0]
    5baa:	000f      	movs	r7, r1
    5bac:	b25b      	sxtb	r3, r3
    5bae:	3301      	adds	r3, #1
    5bb0:	d031      	beq.n	5c16 <acos+0x86>
    5bb2:	0022      	movs	r2, r4
    5bb4:	002b      	movs	r3, r5
    5bb6:	0020      	movs	r0, r4
    5bb8:	0029      	movs	r1, r5
    5bba:	f002 f99f 	bl	7efc <__aeabi_dcmpun>
    5bbe:	4681      	mov	r9, r0
    5bc0:	2800      	cmp	r0, #0
    5bc2:	d128      	bne.n	5c16 <acos+0x86>
    5bc4:	0020      	movs	r0, r4
    5bc6:	0029      	movs	r1, r5
    5bc8:	f000 fb78 	bl	62bc <fabs>
    5bcc:	2200      	movs	r2, #0
    5bce:	4b1d      	ldr	r3, [pc, #116]	; (5c44 <acos+0xb4>)
    5bd0:	f000 fc36 	bl	6440 <__aeabi_dcmpgt>
    5bd4:	2800      	cmp	r0, #0
    5bd6:	d01e      	beq.n	5c16 <acos+0x86>
    5bd8:	2301      	movs	r3, #1
    5bda:	9302      	str	r3, [sp, #8]
    5bdc:	4b1a      	ldr	r3, [pc, #104]	; (5c48 <acos+0xb8>)
    5bde:	481b      	ldr	r0, [pc, #108]	; (5c4c <acos+0xbc>)
    5be0:	9303      	str	r3, [sp, #12]
    5be2:	464b      	mov	r3, r9
    5be4:	9406      	str	r4, [sp, #24]
    5be6:	9507      	str	r5, [sp, #28]
    5be8:	930a      	str	r3, [sp, #40]	; 0x28
    5bea:	9404      	str	r4, [sp, #16]
    5bec:	9505      	str	r5, [sp, #20]
    5bee:	f000 fb6b 	bl	62c8 <nan>
    5bf2:	4643      	mov	r3, r8
    5bf4:	781b      	ldrb	r3, [r3, #0]
    5bf6:	9008      	str	r0, [sp, #32]
    5bf8:	9109      	str	r1, [sp, #36]	; 0x24
    5bfa:	b25b      	sxtb	r3, r3
    5bfc:	2b02      	cmp	r3, #2
    5bfe:	d011      	beq.n	5c24 <acos+0x94>
    5c00:	a802      	add	r0, sp, #8
    5c02:	f000 fb5f 	bl	62c4 <matherr>
    5c06:	2800      	cmp	r0, #0
    5c08:	d00c      	beq.n	5c24 <acos+0x94>
    5c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c0c:	9301      	str	r3, [sp, #4]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d110      	bne.n	5c34 <acos+0xa4>
    5c12:	9e08      	ldr	r6, [sp, #32]
    5c14:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5c16:	0030      	movs	r0, r6
    5c18:	0039      	movs	r1, r7
    5c1a:	b00d      	add	sp, #52	; 0x34
    5c1c:	bc0c      	pop	{r2, r3}
    5c1e:	4690      	mov	r8, r2
    5c20:	4699      	mov	r9, r3
    5c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c24:	f002 fb38 	bl	8298 <__errno>
    5c28:	2321      	movs	r3, #33	; 0x21
    5c2a:	6003      	str	r3, [r0, #0]
    5c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c2e:	9301      	str	r3, [sp, #4]
    5c30:	2b00      	cmp	r3, #0
    5c32:	d0ee      	beq.n	5c12 <acos+0x82>
    5c34:	f002 fb30 	bl	8298 <__errno>
    5c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c3a:	9301      	str	r3, [sp, #4]
    5c3c:	6003      	str	r3, [r0, #0]
    5c3e:	e7e8      	b.n	5c12 <acos+0x82>
    5c40:	20000011 	.word	0x20000011
    5c44:	3ff00000 	.word	0x3ff00000
    5c48:	0000e088 	.word	0x0000e088
    5c4c:	0000dbb4 	.word	0x0000dbb4

00005c50 <sqrt>:
    5c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c52:	4647      	mov	r7, r8
    5c54:	46ce      	mov	lr, r9
    5c56:	b580      	push	{r7, lr}
    5c58:	b08d      	sub	sp, #52	; 0x34
    5c5a:	0004      	movs	r4, r0
    5c5c:	000d      	movs	r5, r1
    5c5e:	f000 fa4d 	bl	60fc <__ieee754_sqrt>
    5c62:	4b29      	ldr	r3, [pc, #164]	; (5d08 <sqrt+0xb8>)
    5c64:	0006      	movs	r6, r0
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	000f      	movs	r7, r1
    5c6a:	b25b      	sxtb	r3, r3
    5c6c:	4698      	mov	r8, r3
    5c6e:	3301      	adds	r3, #1
    5c70:	d010      	beq.n	5c94 <sqrt+0x44>
    5c72:	0022      	movs	r2, r4
    5c74:	002b      	movs	r3, r5
    5c76:	0020      	movs	r0, r4
    5c78:	0029      	movs	r1, r5
    5c7a:	f002 f93f 	bl	7efc <__aeabi_dcmpun>
    5c7e:	4681      	mov	r9, r0
    5c80:	2800      	cmp	r0, #0
    5c82:	d107      	bne.n	5c94 <sqrt+0x44>
    5c84:	2200      	movs	r2, #0
    5c86:	2300      	movs	r3, #0
    5c88:	0020      	movs	r0, r4
    5c8a:	0029      	movs	r1, r5
    5c8c:	f000 fbc4 	bl	6418 <__aeabi_dcmplt>
    5c90:	2800      	cmp	r0, #0
    5c92:	d106      	bne.n	5ca2 <sqrt+0x52>
    5c94:	0030      	movs	r0, r6
    5c96:	0039      	movs	r1, r7
    5c98:	b00d      	add	sp, #52	; 0x34
    5c9a:	bc0c      	pop	{r2, r3}
    5c9c:	4690      	mov	r8, r2
    5c9e:	4699      	mov	r9, r3
    5ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ca2:	2301      	movs	r3, #1
    5ca4:	9302      	str	r3, [sp, #8]
    5ca6:	4b19      	ldr	r3, [pc, #100]	; (5d0c <sqrt+0xbc>)
    5ca8:	9406      	str	r4, [sp, #24]
    5caa:	9507      	str	r5, [sp, #28]
    5cac:	9303      	str	r3, [sp, #12]
    5cae:	464b      	mov	r3, r9
    5cb0:	930a      	str	r3, [sp, #40]	; 0x28
    5cb2:	4643      	mov	r3, r8
    5cb4:	9404      	str	r4, [sp, #16]
    5cb6:	9505      	str	r5, [sp, #20]
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d015      	beq.n	5ce8 <sqrt+0x98>
    5cbc:	2300      	movs	r3, #0
    5cbe:	2200      	movs	r2, #0
    5cc0:	0019      	movs	r1, r3
    5cc2:	0010      	movs	r0, r2
    5cc4:	f000 ff50 	bl	6b68 <__aeabi_ddiv>
    5cc8:	4643      	mov	r3, r8
    5cca:	9008      	str	r0, [sp, #32]
    5ccc:	9109      	str	r1, [sp, #36]	; 0x24
    5cce:	2b02      	cmp	r3, #2
    5cd0:	d10e      	bne.n	5cf0 <sqrt+0xa0>
    5cd2:	f002 fae1 	bl	8298 <__errno>
    5cd6:	2321      	movs	r3, #33	; 0x21
    5cd8:	6003      	str	r3, [r0, #0]
    5cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cdc:	9301      	str	r3, [sp, #4]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d10c      	bne.n	5cfc <sqrt+0xac>
    5ce2:	9e08      	ldr	r6, [sp, #32]
    5ce4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5ce6:	e7d5      	b.n	5c94 <sqrt+0x44>
    5ce8:	2300      	movs	r3, #0
    5cea:	2400      	movs	r4, #0
    5cec:	9308      	str	r3, [sp, #32]
    5cee:	9409      	str	r4, [sp, #36]	; 0x24
    5cf0:	a802      	add	r0, sp, #8
    5cf2:	f000 fae7 	bl	62c4 <matherr>
    5cf6:	2800      	cmp	r0, #0
    5cf8:	d1ef      	bne.n	5cda <sqrt+0x8a>
    5cfa:	e7ea      	b.n	5cd2 <sqrt+0x82>
    5cfc:	f002 facc 	bl	8298 <__errno>
    5d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5d02:	9301      	str	r3, [sp, #4]
    5d04:	6003      	str	r3, [r0, #0]
    5d06:	e7ec      	b.n	5ce2 <sqrt+0x92>
    5d08:	20000011 	.word	0x20000011
    5d0c:	0000e090 	.word	0x0000e090

00005d10 <__ieee754_acos>:
    5d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d12:	4adb      	ldr	r2, [pc, #876]	; (6080 <__ieee754_acos+0x370>)
    5d14:	004b      	lsls	r3, r1, #1
    5d16:	b085      	sub	sp, #20
    5d18:	0007      	movs	r7, r0
    5d1a:	000e      	movs	r6, r1
    5d1c:	085b      	lsrs	r3, r3, #1
    5d1e:	4293      	cmp	r3, r2
    5d20:	dd0c      	ble.n	5d3c <__ieee754_acos+0x2c>
    5d22:	4ad8      	ldr	r2, [pc, #864]	; (6084 <__ieee754_acos+0x374>)
    5d24:	4694      	mov	ip, r2
    5d26:	4463      	add	r3, ip
    5d28:	4303      	orrs	r3, r0
    5d2a:	d000      	beq.n	5d2e <__ieee754_acos+0x1e>
    5d2c:	e0ac      	b.n	5e88 <__ieee754_acos+0x178>
    5d2e:	2900      	cmp	r1, #0
    5d30:	dc00      	bgt.n	5d34 <__ieee754_acos+0x24>
    5d32:	e125      	b.n	5f80 <__ieee754_acos+0x270>
    5d34:	2000      	movs	r0, #0
    5d36:	2100      	movs	r1, #0
    5d38:	b005      	add	sp, #20
    5d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d3c:	4ad2      	ldr	r2, [pc, #840]	; (6088 <__ieee754_acos+0x378>)
    5d3e:	4293      	cmp	r3, r2
    5d40:	dc00      	bgt.n	5d44 <__ieee754_acos+0x34>
    5d42:	e09b      	b.n	5e7c <__ieee754_acos+0x16c>
    5d44:	2900      	cmp	r1, #0
    5d46:	da00      	bge.n	5d4a <__ieee754_acos+0x3a>
    5d48:	e11d      	b.n	5f86 <__ieee754_acos+0x276>
    5d4a:	0002      	movs	r2, r0
    5d4c:	000b      	movs	r3, r1
    5d4e:	2000      	movs	r0, #0
    5d50:	49ce      	ldr	r1, [pc, #824]	; (608c <__ieee754_acos+0x37c>)
    5d52:	f001 fdbd 	bl	78d0 <__aeabi_dsub>
    5d56:	2200      	movs	r2, #0
    5d58:	4bcd      	ldr	r3, [pc, #820]	; (6090 <__ieee754_acos+0x380>)
    5d5a:	f001 fb39 	bl	73d0 <__aeabi_dmul>
    5d5e:	0004      	movs	r4, r0
    5d60:	000d      	movs	r5, r1
    5d62:	f000 f9cb 	bl	60fc <__ieee754_sqrt>
    5d66:	4acb      	ldr	r2, [pc, #812]	; (6094 <__ieee754_acos+0x384>)
    5d68:	000f      	movs	r7, r1
    5d6a:	9000      	str	r0, [sp, #0]
    5d6c:	9101      	str	r1, [sp, #4]
    5d6e:	4bca      	ldr	r3, [pc, #808]	; (6098 <__ieee754_acos+0x388>)
    5d70:	0020      	movs	r0, r4
    5d72:	0029      	movs	r1, r5
    5d74:	f001 fb2c 	bl	73d0 <__aeabi_dmul>
    5d78:	4ac8      	ldr	r2, [pc, #800]	; (609c <__ieee754_acos+0x38c>)
    5d7a:	4bc9      	ldr	r3, [pc, #804]	; (60a0 <__ieee754_acos+0x390>)
    5d7c:	f000 fbe4 	bl	6548 <__aeabi_dadd>
    5d80:	0022      	movs	r2, r4
    5d82:	002b      	movs	r3, r5
    5d84:	f001 fb24 	bl	73d0 <__aeabi_dmul>
    5d88:	4ac6      	ldr	r2, [pc, #792]	; (60a4 <__ieee754_acos+0x394>)
    5d8a:	4bc7      	ldr	r3, [pc, #796]	; (60a8 <__ieee754_acos+0x398>)
    5d8c:	f001 fda0 	bl	78d0 <__aeabi_dsub>
    5d90:	0022      	movs	r2, r4
    5d92:	002b      	movs	r3, r5
    5d94:	f001 fb1c 	bl	73d0 <__aeabi_dmul>
    5d98:	4ac4      	ldr	r2, [pc, #784]	; (60ac <__ieee754_acos+0x39c>)
    5d9a:	4bc5      	ldr	r3, [pc, #788]	; (60b0 <__ieee754_acos+0x3a0>)
    5d9c:	f000 fbd4 	bl	6548 <__aeabi_dadd>
    5da0:	0022      	movs	r2, r4
    5da2:	002b      	movs	r3, r5
    5da4:	f001 fb14 	bl	73d0 <__aeabi_dmul>
    5da8:	4ac2      	ldr	r2, [pc, #776]	; (60b4 <__ieee754_acos+0x3a4>)
    5daa:	4bc3      	ldr	r3, [pc, #780]	; (60b8 <__ieee754_acos+0x3a8>)
    5dac:	f001 fd90 	bl	78d0 <__aeabi_dsub>
    5db0:	0022      	movs	r2, r4
    5db2:	002b      	movs	r3, r5
    5db4:	f001 fb0c 	bl	73d0 <__aeabi_dmul>
    5db8:	4ac0      	ldr	r2, [pc, #768]	; (60bc <__ieee754_acos+0x3ac>)
    5dba:	4bc1      	ldr	r3, [pc, #772]	; (60c0 <__ieee754_acos+0x3b0>)
    5dbc:	f000 fbc4 	bl	6548 <__aeabi_dadd>
    5dc0:	0022      	movs	r2, r4
    5dc2:	002b      	movs	r3, r5
    5dc4:	f001 fb04 	bl	73d0 <__aeabi_dmul>
    5dc8:	4abe      	ldr	r2, [pc, #760]	; (60c4 <__ieee754_acos+0x3b4>)
    5dca:	9002      	str	r0, [sp, #8]
    5dcc:	9103      	str	r1, [sp, #12]
    5dce:	4bbe      	ldr	r3, [pc, #760]	; (60c8 <__ieee754_acos+0x3b8>)
    5dd0:	0020      	movs	r0, r4
    5dd2:	0029      	movs	r1, r5
    5dd4:	f001 fafc 	bl	73d0 <__aeabi_dmul>
    5dd8:	4abc      	ldr	r2, [pc, #752]	; (60cc <__ieee754_acos+0x3bc>)
    5dda:	4bbd      	ldr	r3, [pc, #756]	; (60d0 <__ieee754_acos+0x3c0>)
    5ddc:	f001 fd78 	bl	78d0 <__aeabi_dsub>
    5de0:	0022      	movs	r2, r4
    5de2:	002b      	movs	r3, r5
    5de4:	f001 faf4 	bl	73d0 <__aeabi_dmul>
    5de8:	4aba      	ldr	r2, [pc, #744]	; (60d4 <__ieee754_acos+0x3c4>)
    5dea:	4bbb      	ldr	r3, [pc, #748]	; (60d8 <__ieee754_acos+0x3c8>)
    5dec:	f000 fbac 	bl	6548 <__aeabi_dadd>
    5df0:	0022      	movs	r2, r4
    5df2:	002b      	movs	r3, r5
    5df4:	f001 faec 	bl	73d0 <__aeabi_dmul>
    5df8:	4ab8      	ldr	r2, [pc, #736]	; (60dc <__ieee754_acos+0x3cc>)
    5dfa:	4bb9      	ldr	r3, [pc, #740]	; (60e0 <__ieee754_acos+0x3d0>)
    5dfc:	f001 fd68 	bl	78d0 <__aeabi_dsub>
    5e00:	0022      	movs	r2, r4
    5e02:	002b      	movs	r3, r5
    5e04:	f001 fae4 	bl	73d0 <__aeabi_dmul>
    5e08:	2200      	movs	r2, #0
    5e0a:	4ba0      	ldr	r3, [pc, #640]	; (608c <__ieee754_acos+0x37c>)
    5e0c:	f000 fb9c 	bl	6548 <__aeabi_dadd>
    5e10:	0002      	movs	r2, r0
    5e12:	000b      	movs	r3, r1
    5e14:	9802      	ldr	r0, [sp, #8]
    5e16:	9903      	ldr	r1, [sp, #12]
    5e18:	f000 fea6 	bl	6b68 <__aeabi_ddiv>
    5e1c:	9a00      	ldr	r2, [sp, #0]
    5e1e:	9b01      	ldr	r3, [sp, #4]
    5e20:	f001 fad6 	bl	73d0 <__aeabi_dmul>
    5e24:	2600      	movs	r6, #0
    5e26:	9002      	str	r0, [sp, #8]
    5e28:	9103      	str	r1, [sp, #12]
    5e2a:	0032      	movs	r2, r6
    5e2c:	003b      	movs	r3, r7
    5e2e:	0030      	movs	r0, r6
    5e30:	0039      	movs	r1, r7
    5e32:	f001 facd 	bl	73d0 <__aeabi_dmul>
    5e36:	0002      	movs	r2, r0
    5e38:	000b      	movs	r3, r1
    5e3a:	0020      	movs	r0, r4
    5e3c:	0029      	movs	r1, r5
    5e3e:	f001 fd47 	bl	78d0 <__aeabi_dsub>
    5e42:	0032      	movs	r2, r6
    5e44:	0004      	movs	r4, r0
    5e46:	000d      	movs	r5, r1
    5e48:	9800      	ldr	r0, [sp, #0]
    5e4a:	9901      	ldr	r1, [sp, #4]
    5e4c:	003b      	movs	r3, r7
    5e4e:	f000 fb7b 	bl	6548 <__aeabi_dadd>
    5e52:	0002      	movs	r2, r0
    5e54:	000b      	movs	r3, r1
    5e56:	0020      	movs	r0, r4
    5e58:	0029      	movs	r1, r5
    5e5a:	f000 fe85 	bl	6b68 <__aeabi_ddiv>
    5e5e:	0002      	movs	r2, r0
    5e60:	000b      	movs	r3, r1
    5e62:	9802      	ldr	r0, [sp, #8]
    5e64:	9903      	ldr	r1, [sp, #12]
    5e66:	f000 fb6f 	bl	6548 <__aeabi_dadd>
    5e6a:	0032      	movs	r2, r6
    5e6c:	003b      	movs	r3, r7
    5e6e:	f000 fb6b 	bl	6548 <__aeabi_dadd>
    5e72:	0002      	movs	r2, r0
    5e74:	000b      	movs	r3, r1
    5e76:	f000 fb67 	bl	6548 <__aeabi_dadd>
    5e7a:	e75d      	b.n	5d38 <__ieee754_acos+0x28>
    5e7c:	4a99      	ldr	r2, [pc, #612]	; (60e4 <__ieee754_acos+0x3d4>)
    5e7e:	4293      	cmp	r3, r2
    5e80:	dc0b      	bgt.n	5e9a <__ieee754_acos+0x18a>
    5e82:	4899      	ldr	r0, [pc, #612]	; (60e8 <__ieee754_acos+0x3d8>)
    5e84:	4999      	ldr	r1, [pc, #612]	; (60ec <__ieee754_acos+0x3dc>)
    5e86:	e757      	b.n	5d38 <__ieee754_acos+0x28>
    5e88:	0002      	movs	r2, r0
    5e8a:	000b      	movs	r3, r1
    5e8c:	f001 fd20 	bl	78d0 <__aeabi_dsub>
    5e90:	0002      	movs	r2, r0
    5e92:	000b      	movs	r3, r1
    5e94:	f000 fe68 	bl	6b68 <__aeabi_ddiv>
    5e98:	e74e      	b.n	5d38 <__ieee754_acos+0x28>
    5e9a:	0002      	movs	r2, r0
    5e9c:	000b      	movs	r3, r1
    5e9e:	f001 fa97 	bl	73d0 <__aeabi_dmul>
    5ea2:	0004      	movs	r4, r0
    5ea4:	000d      	movs	r5, r1
    5ea6:	4a7b      	ldr	r2, [pc, #492]	; (6094 <__ieee754_acos+0x384>)
    5ea8:	4b7b      	ldr	r3, [pc, #492]	; (6098 <__ieee754_acos+0x388>)
    5eaa:	f001 fa91 	bl	73d0 <__aeabi_dmul>
    5eae:	4a7b      	ldr	r2, [pc, #492]	; (609c <__ieee754_acos+0x38c>)
    5eb0:	4b7b      	ldr	r3, [pc, #492]	; (60a0 <__ieee754_acos+0x390>)
    5eb2:	f000 fb49 	bl	6548 <__aeabi_dadd>
    5eb6:	0022      	movs	r2, r4
    5eb8:	002b      	movs	r3, r5
    5eba:	f001 fa89 	bl	73d0 <__aeabi_dmul>
    5ebe:	4a79      	ldr	r2, [pc, #484]	; (60a4 <__ieee754_acos+0x394>)
    5ec0:	4b79      	ldr	r3, [pc, #484]	; (60a8 <__ieee754_acos+0x398>)
    5ec2:	f001 fd05 	bl	78d0 <__aeabi_dsub>
    5ec6:	0022      	movs	r2, r4
    5ec8:	002b      	movs	r3, r5
    5eca:	f001 fa81 	bl	73d0 <__aeabi_dmul>
    5ece:	4a77      	ldr	r2, [pc, #476]	; (60ac <__ieee754_acos+0x39c>)
    5ed0:	4b77      	ldr	r3, [pc, #476]	; (60b0 <__ieee754_acos+0x3a0>)
    5ed2:	f000 fb39 	bl	6548 <__aeabi_dadd>
    5ed6:	0022      	movs	r2, r4
    5ed8:	002b      	movs	r3, r5
    5eda:	f001 fa79 	bl	73d0 <__aeabi_dmul>
    5ede:	4a75      	ldr	r2, [pc, #468]	; (60b4 <__ieee754_acos+0x3a4>)
    5ee0:	4b75      	ldr	r3, [pc, #468]	; (60b8 <__ieee754_acos+0x3a8>)
    5ee2:	f001 fcf5 	bl	78d0 <__aeabi_dsub>
    5ee6:	0022      	movs	r2, r4
    5ee8:	002b      	movs	r3, r5
    5eea:	f001 fa71 	bl	73d0 <__aeabi_dmul>
    5eee:	4a73      	ldr	r2, [pc, #460]	; (60bc <__ieee754_acos+0x3ac>)
    5ef0:	4b73      	ldr	r3, [pc, #460]	; (60c0 <__ieee754_acos+0x3b0>)
    5ef2:	f000 fb29 	bl	6548 <__aeabi_dadd>
    5ef6:	0022      	movs	r2, r4
    5ef8:	002b      	movs	r3, r5
    5efa:	f001 fa69 	bl	73d0 <__aeabi_dmul>
    5efe:	4a71      	ldr	r2, [pc, #452]	; (60c4 <__ieee754_acos+0x3b4>)
    5f00:	9000      	str	r0, [sp, #0]
    5f02:	9101      	str	r1, [sp, #4]
    5f04:	4b70      	ldr	r3, [pc, #448]	; (60c8 <__ieee754_acos+0x3b8>)
    5f06:	0020      	movs	r0, r4
    5f08:	0029      	movs	r1, r5
    5f0a:	f001 fa61 	bl	73d0 <__aeabi_dmul>
    5f0e:	4a6f      	ldr	r2, [pc, #444]	; (60cc <__ieee754_acos+0x3bc>)
    5f10:	4b6f      	ldr	r3, [pc, #444]	; (60d0 <__ieee754_acos+0x3c0>)
    5f12:	f001 fcdd 	bl	78d0 <__aeabi_dsub>
    5f16:	0022      	movs	r2, r4
    5f18:	002b      	movs	r3, r5
    5f1a:	f001 fa59 	bl	73d0 <__aeabi_dmul>
    5f1e:	4a6d      	ldr	r2, [pc, #436]	; (60d4 <__ieee754_acos+0x3c4>)
    5f20:	4b6d      	ldr	r3, [pc, #436]	; (60d8 <__ieee754_acos+0x3c8>)
    5f22:	f000 fb11 	bl	6548 <__aeabi_dadd>
    5f26:	0022      	movs	r2, r4
    5f28:	002b      	movs	r3, r5
    5f2a:	f001 fa51 	bl	73d0 <__aeabi_dmul>
    5f2e:	4a6b      	ldr	r2, [pc, #428]	; (60dc <__ieee754_acos+0x3cc>)
    5f30:	4b6b      	ldr	r3, [pc, #428]	; (60e0 <__ieee754_acos+0x3d0>)
    5f32:	f001 fccd 	bl	78d0 <__aeabi_dsub>
    5f36:	0022      	movs	r2, r4
    5f38:	002b      	movs	r3, r5
    5f3a:	f001 fa49 	bl	73d0 <__aeabi_dmul>
    5f3e:	2200      	movs	r2, #0
    5f40:	4b52      	ldr	r3, [pc, #328]	; (608c <__ieee754_acos+0x37c>)
    5f42:	f000 fb01 	bl	6548 <__aeabi_dadd>
    5f46:	0002      	movs	r2, r0
    5f48:	000b      	movs	r3, r1
    5f4a:	9800      	ldr	r0, [sp, #0]
    5f4c:	9901      	ldr	r1, [sp, #4]
    5f4e:	f000 fe0b 	bl	6b68 <__aeabi_ddiv>
    5f52:	003a      	movs	r2, r7
    5f54:	0033      	movs	r3, r6
    5f56:	f001 fa3b 	bl	73d0 <__aeabi_dmul>
    5f5a:	0002      	movs	r2, r0
    5f5c:	000b      	movs	r3, r1
    5f5e:	4864      	ldr	r0, [pc, #400]	; (60f0 <__ieee754_acos+0x3e0>)
    5f60:	4964      	ldr	r1, [pc, #400]	; (60f4 <__ieee754_acos+0x3e4>)
    5f62:	f001 fcb5 	bl	78d0 <__aeabi_dsub>
    5f66:	0002      	movs	r2, r0
    5f68:	000b      	movs	r3, r1
    5f6a:	0038      	movs	r0, r7
    5f6c:	0031      	movs	r1, r6
    5f6e:	f001 fcaf 	bl	78d0 <__aeabi_dsub>
    5f72:	0002      	movs	r2, r0
    5f74:	000b      	movs	r3, r1
    5f76:	485c      	ldr	r0, [pc, #368]	; (60e8 <__ieee754_acos+0x3d8>)
    5f78:	495c      	ldr	r1, [pc, #368]	; (60ec <__ieee754_acos+0x3dc>)
    5f7a:	f001 fca9 	bl	78d0 <__aeabi_dsub>
    5f7e:	e6db      	b.n	5d38 <__ieee754_acos+0x28>
    5f80:	4859      	ldr	r0, [pc, #356]	; (60e8 <__ieee754_acos+0x3d8>)
    5f82:	495d      	ldr	r1, [pc, #372]	; (60f8 <__ieee754_acos+0x3e8>)
    5f84:	e6d8      	b.n	5d38 <__ieee754_acos+0x28>
    5f86:	2200      	movs	r2, #0
    5f88:	4b40      	ldr	r3, [pc, #256]	; (608c <__ieee754_acos+0x37c>)
    5f8a:	f000 fadd 	bl	6548 <__aeabi_dadd>
    5f8e:	2200      	movs	r2, #0
    5f90:	4b3f      	ldr	r3, [pc, #252]	; (6090 <__ieee754_acos+0x380>)
    5f92:	f001 fa1d 	bl	73d0 <__aeabi_dmul>
    5f96:	0004      	movs	r4, r0
    5f98:	000d      	movs	r5, r1
    5f9a:	4a3e      	ldr	r2, [pc, #248]	; (6094 <__ieee754_acos+0x384>)
    5f9c:	4b3e      	ldr	r3, [pc, #248]	; (6098 <__ieee754_acos+0x388>)
    5f9e:	f001 fa17 	bl	73d0 <__aeabi_dmul>
    5fa2:	4a3e      	ldr	r2, [pc, #248]	; (609c <__ieee754_acos+0x38c>)
    5fa4:	4b3e      	ldr	r3, [pc, #248]	; (60a0 <__ieee754_acos+0x390>)
    5fa6:	f000 facf 	bl	6548 <__aeabi_dadd>
    5faa:	0022      	movs	r2, r4
    5fac:	002b      	movs	r3, r5
    5fae:	f001 fa0f 	bl	73d0 <__aeabi_dmul>
    5fb2:	4a3c      	ldr	r2, [pc, #240]	; (60a4 <__ieee754_acos+0x394>)
    5fb4:	4b3c      	ldr	r3, [pc, #240]	; (60a8 <__ieee754_acos+0x398>)
    5fb6:	f001 fc8b 	bl	78d0 <__aeabi_dsub>
    5fba:	0022      	movs	r2, r4
    5fbc:	002b      	movs	r3, r5
    5fbe:	f001 fa07 	bl	73d0 <__aeabi_dmul>
    5fc2:	4a3a      	ldr	r2, [pc, #232]	; (60ac <__ieee754_acos+0x39c>)
    5fc4:	4b3a      	ldr	r3, [pc, #232]	; (60b0 <__ieee754_acos+0x3a0>)
    5fc6:	f000 fabf 	bl	6548 <__aeabi_dadd>
    5fca:	0022      	movs	r2, r4
    5fcc:	002b      	movs	r3, r5
    5fce:	f001 f9ff 	bl	73d0 <__aeabi_dmul>
    5fd2:	4a38      	ldr	r2, [pc, #224]	; (60b4 <__ieee754_acos+0x3a4>)
    5fd4:	4b38      	ldr	r3, [pc, #224]	; (60b8 <__ieee754_acos+0x3a8>)
    5fd6:	f001 fc7b 	bl	78d0 <__aeabi_dsub>
    5fda:	0022      	movs	r2, r4
    5fdc:	002b      	movs	r3, r5
    5fde:	f001 f9f7 	bl	73d0 <__aeabi_dmul>
    5fe2:	4a36      	ldr	r2, [pc, #216]	; (60bc <__ieee754_acos+0x3ac>)
    5fe4:	4b36      	ldr	r3, [pc, #216]	; (60c0 <__ieee754_acos+0x3b0>)
    5fe6:	f000 faaf 	bl	6548 <__aeabi_dadd>
    5fea:	0022      	movs	r2, r4
    5fec:	002b      	movs	r3, r5
    5fee:	f001 f9ef 	bl	73d0 <__aeabi_dmul>
    5ff2:	9000      	str	r0, [sp, #0]
    5ff4:	9101      	str	r1, [sp, #4]
    5ff6:	0020      	movs	r0, r4
    5ff8:	0029      	movs	r1, r5
    5ffa:	f000 f87f 	bl	60fc <__ieee754_sqrt>
    5ffe:	4a31      	ldr	r2, [pc, #196]	; (60c4 <__ieee754_acos+0x3b4>)
    6000:	0006      	movs	r6, r0
    6002:	000f      	movs	r7, r1
    6004:	4b30      	ldr	r3, [pc, #192]	; (60c8 <__ieee754_acos+0x3b8>)
    6006:	0020      	movs	r0, r4
    6008:	0029      	movs	r1, r5
    600a:	f001 f9e1 	bl	73d0 <__aeabi_dmul>
    600e:	4a2f      	ldr	r2, [pc, #188]	; (60cc <__ieee754_acos+0x3bc>)
    6010:	4b2f      	ldr	r3, [pc, #188]	; (60d0 <__ieee754_acos+0x3c0>)
    6012:	f001 fc5d 	bl	78d0 <__aeabi_dsub>
    6016:	0022      	movs	r2, r4
    6018:	002b      	movs	r3, r5
    601a:	f001 f9d9 	bl	73d0 <__aeabi_dmul>
    601e:	4a2d      	ldr	r2, [pc, #180]	; (60d4 <__ieee754_acos+0x3c4>)
    6020:	4b2d      	ldr	r3, [pc, #180]	; (60d8 <__ieee754_acos+0x3c8>)
    6022:	f000 fa91 	bl	6548 <__aeabi_dadd>
    6026:	0022      	movs	r2, r4
    6028:	002b      	movs	r3, r5
    602a:	f001 f9d1 	bl	73d0 <__aeabi_dmul>
    602e:	4a2b      	ldr	r2, [pc, #172]	; (60dc <__ieee754_acos+0x3cc>)
    6030:	4b2b      	ldr	r3, [pc, #172]	; (60e0 <__ieee754_acos+0x3d0>)
    6032:	f001 fc4d 	bl	78d0 <__aeabi_dsub>
    6036:	0022      	movs	r2, r4
    6038:	002b      	movs	r3, r5
    603a:	f001 f9c9 	bl	73d0 <__aeabi_dmul>
    603e:	2200      	movs	r2, #0
    6040:	4b12      	ldr	r3, [pc, #72]	; (608c <__ieee754_acos+0x37c>)
    6042:	f000 fa81 	bl	6548 <__aeabi_dadd>
    6046:	0002      	movs	r2, r0
    6048:	000b      	movs	r3, r1
    604a:	9800      	ldr	r0, [sp, #0]
    604c:	9901      	ldr	r1, [sp, #4]
    604e:	f000 fd8b 	bl	6b68 <__aeabi_ddiv>
    6052:	0032      	movs	r2, r6
    6054:	003b      	movs	r3, r7
    6056:	f001 f9bb 	bl	73d0 <__aeabi_dmul>
    605a:	4a25      	ldr	r2, [pc, #148]	; (60f0 <__ieee754_acos+0x3e0>)
    605c:	4b25      	ldr	r3, [pc, #148]	; (60f4 <__ieee754_acos+0x3e4>)
    605e:	f001 fc37 	bl	78d0 <__aeabi_dsub>
    6062:	0032      	movs	r2, r6
    6064:	003b      	movs	r3, r7
    6066:	f000 fa6f 	bl	6548 <__aeabi_dadd>
    606a:	0002      	movs	r2, r0
    606c:	000b      	movs	r3, r1
    606e:	f000 fa6b 	bl	6548 <__aeabi_dadd>
    6072:	0002      	movs	r2, r0
    6074:	000b      	movs	r3, r1
    6076:	481c      	ldr	r0, [pc, #112]	; (60e8 <__ieee754_acos+0x3d8>)
    6078:	491f      	ldr	r1, [pc, #124]	; (60f8 <__ieee754_acos+0x3e8>)
    607a:	f001 fc29 	bl	78d0 <__aeabi_dsub>
    607e:	e65b      	b.n	5d38 <__ieee754_acos+0x28>
    6080:	3fefffff 	.word	0x3fefffff
    6084:	c0100000 	.word	0xc0100000
    6088:	3fdfffff 	.word	0x3fdfffff
    608c:	3ff00000 	.word	0x3ff00000
    6090:	3fe00000 	.word	0x3fe00000
    6094:	0dfdf709 	.word	0x0dfdf709
    6098:	3f023de1 	.word	0x3f023de1
    609c:	7501b288 	.word	0x7501b288
    60a0:	3f49efe0 	.word	0x3f49efe0
    60a4:	b5688f3b 	.word	0xb5688f3b
    60a8:	3fa48228 	.word	0x3fa48228
    60ac:	0e884455 	.word	0x0e884455
    60b0:	3fc9c155 	.word	0x3fc9c155
    60b4:	03eb6f7d 	.word	0x03eb6f7d
    60b8:	3fd4d612 	.word	0x3fd4d612
    60bc:	55555555 	.word	0x55555555
    60c0:	3fc55555 	.word	0x3fc55555
    60c4:	b12e9282 	.word	0xb12e9282
    60c8:	3fb3b8c5 	.word	0x3fb3b8c5
    60cc:	1b8d0159 	.word	0x1b8d0159
    60d0:	3fe6066c 	.word	0x3fe6066c
    60d4:	9c598ac8 	.word	0x9c598ac8
    60d8:	40002ae5 	.word	0x40002ae5
    60dc:	1c8a2d4b 	.word	0x1c8a2d4b
    60e0:	40033a27 	.word	0x40033a27
    60e4:	3c600000 	.word	0x3c600000
    60e8:	54442d18 	.word	0x54442d18
    60ec:	3ff921fb 	.word	0x3ff921fb
    60f0:	33145c07 	.word	0x33145c07
    60f4:	3c91a626 	.word	0x3c91a626
    60f8:	400921fb 	.word	0x400921fb

000060fc <__ieee754_sqrt>:
    60fc:	4b6c      	ldr	r3, [pc, #432]	; (62b0 <__ieee754_sqrt+0x1b4>)
    60fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    6100:	000a      	movs	r2, r1
    6102:	4646      	mov	r6, r8
    6104:	000d      	movs	r5, r1
    6106:	46d6      	mov	lr, sl
    6108:	464f      	mov	r7, r9
    610a:	0019      	movs	r1, r3
    610c:	b5c0      	push	{r6, r7, lr}
    610e:	0004      	movs	r4, r0
    6110:	0006      	movs	r6, r0
    6112:	4029      	ands	r1, r5
    6114:	4299      	cmp	r1, r3
    6116:	d100      	bne.n	611a <__ieee754_sqrt+0x1e>
    6118:	e0a7      	b.n	626a <__ieee754_sqrt+0x16e>
    611a:	2d00      	cmp	r5, #0
    611c:	dc00      	bgt.n	6120 <__ieee754_sqrt+0x24>
    611e:	e081      	b.n	6224 <__ieee754_sqrt+0x128>
    6120:	152f      	asrs	r7, r5, #20
    6122:	d100      	bne.n	6126 <__ieee754_sqrt+0x2a>
    6124:	e08e      	b.n	6244 <__ieee754_sqrt+0x148>
    6126:	4b63      	ldr	r3, [pc, #396]	; (62b4 <__ieee754_sqrt+0x1b8>)
    6128:	0312      	lsls	r2, r2, #12
    612a:	469c      	mov	ip, r3
    612c:	2380      	movs	r3, #128	; 0x80
    612e:	0b12      	lsrs	r2, r2, #12
    6130:	035b      	lsls	r3, r3, #13
    6132:	4467      	add	r7, ip
    6134:	431a      	orrs	r2, r3
    6136:	07fb      	lsls	r3, r7, #31
    6138:	d468      	bmi.n	620c <__ieee754_sqrt+0x110>
    613a:	107b      	asrs	r3, r7, #1
    613c:	469c      	mov	ip, r3
    613e:	0fe3      	lsrs	r3, r4, #31
    6140:	189b      	adds	r3, r3, r2
    6142:	189b      	adds	r3, r3, r2
    6144:	2280      	movs	r2, #128	; 0x80
    6146:	2116      	movs	r1, #22
    6148:	2600      	movs	r6, #0
    614a:	2500      	movs	r5, #0
    614c:	0064      	lsls	r4, r4, #1
    614e:	0392      	lsls	r2, r2, #14
    6150:	18a8      	adds	r0, r5, r2
    6152:	4298      	cmp	r0, r3
    6154:	dc02      	bgt.n	615c <__ieee754_sqrt+0x60>
    6156:	1885      	adds	r5, r0, r2
    6158:	1a1b      	subs	r3, r3, r0
    615a:	18b6      	adds	r6, r6, r2
    615c:	0fe0      	lsrs	r0, r4, #31
    615e:	005b      	lsls	r3, r3, #1
    6160:	3901      	subs	r1, #1
    6162:	181b      	adds	r3, r3, r0
    6164:	0064      	lsls	r4, r4, #1
    6166:	0852      	lsrs	r2, r2, #1
    6168:	2900      	cmp	r1, #0
    616a:	d1f1      	bne.n	6150 <__ieee754_sqrt+0x54>
    616c:	2200      	movs	r2, #0
    616e:	4692      	mov	sl, r2
    6170:	4690      	mov	r8, r2
    6172:	2280      	movs	r2, #128	; 0x80
    6174:	2020      	movs	r0, #32
    6176:	0612      	lsls	r2, r2, #24
    6178:	e009      	b.n	618e <__ieee754_sqrt+0x92>
    617a:	42ab      	cmp	r3, r5
    617c:	d038      	beq.n	61f0 <__ieee754_sqrt+0xf4>
    617e:	0fe1      	lsrs	r1, r4, #31
    6180:	18c9      	adds	r1, r1, r3
    6182:	3801      	subs	r0, #1
    6184:	18cb      	adds	r3, r1, r3
    6186:	0064      	lsls	r4, r4, #1
    6188:	0852      	lsrs	r2, r2, #1
    618a:	2800      	cmp	r0, #0
    618c:	d018      	beq.n	61c0 <__ieee754_sqrt+0xc4>
    618e:	4641      	mov	r1, r8
    6190:	1851      	adds	r1, r2, r1
    6192:	42ab      	cmp	r3, r5
    6194:	ddf1      	ble.n	617a <__ieee754_sqrt+0x7e>
    6196:	188f      	adds	r7, r1, r2
    6198:	46b8      	mov	r8, r7
    619a:	46a9      	mov	r9, r5
    619c:	2900      	cmp	r1, #0
    619e:	db30      	blt.n	6202 <__ieee754_sqrt+0x106>
    61a0:	1b5b      	subs	r3, r3, r5
    61a2:	428c      	cmp	r4, r1
    61a4:	41ad      	sbcs	r5, r5
    61a6:	426d      	negs	r5, r5
    61a8:	1b5b      	subs	r3, r3, r5
    61aa:	1a64      	subs	r4, r4, r1
    61ac:	0fe1      	lsrs	r1, r4, #31
    61ae:	18c9      	adds	r1, r1, r3
    61b0:	3801      	subs	r0, #1
    61b2:	4492      	add	sl, r2
    61b4:	464d      	mov	r5, r9
    61b6:	18cb      	adds	r3, r1, r3
    61b8:	0064      	lsls	r4, r4, #1
    61ba:	0852      	lsrs	r2, r2, #1
    61bc:	2800      	cmp	r0, #0
    61be:	d1e6      	bne.n	618e <__ieee754_sqrt+0x92>
    61c0:	4323      	orrs	r3, r4
    61c2:	d128      	bne.n	6216 <__ieee754_sqrt+0x11a>
    61c4:	4653      	mov	r3, sl
    61c6:	085b      	lsrs	r3, r3, #1
    61c8:	493b      	ldr	r1, [pc, #236]	; (62b8 <__ieee754_sqrt+0x1bc>)
    61ca:	1072      	asrs	r2, r6, #1
    61cc:	4688      	mov	r8, r1
    61ce:	4442      	add	r2, r8
    61d0:	07f1      	lsls	r1, r6, #31
    61d2:	d502      	bpl.n	61da <__ieee754_sqrt+0xde>
    61d4:	2180      	movs	r1, #128	; 0x80
    61d6:	0609      	lsls	r1, r1, #24
    61d8:	430b      	orrs	r3, r1
    61da:	4661      	mov	r1, ip
    61dc:	001e      	movs	r6, r3
    61de:	050f      	lsls	r7, r1, #20
    61e0:	18bd      	adds	r5, r7, r2
    61e2:	0030      	movs	r0, r6
    61e4:	0029      	movs	r1, r5
    61e6:	bc1c      	pop	{r2, r3, r4}
    61e8:	4690      	mov	r8, r2
    61ea:	4699      	mov	r9, r3
    61ec:	46a2      	mov	sl, r4
    61ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61f0:	42a1      	cmp	r1, r4
    61f2:	d8c4      	bhi.n	617e <__ieee754_sqrt+0x82>
    61f4:	188f      	adds	r7, r1, r2
    61f6:	46b8      	mov	r8, r7
    61f8:	2900      	cmp	r1, #0
    61fa:	db42      	blt.n	6282 <__ieee754_sqrt+0x186>
    61fc:	4699      	mov	r9, r3
    61fe:	2300      	movs	r3, #0
    6200:	e7d3      	b.n	61aa <__ieee754_sqrt+0xae>
    6202:	2f00      	cmp	r7, #0
    6204:	db2f      	blt.n	6266 <__ieee754_sqrt+0x16a>
    6206:	1c6f      	adds	r7, r5, #1
    6208:	46b9      	mov	r9, r7
    620a:	e7c9      	b.n	61a0 <__ieee754_sqrt+0xa4>
    620c:	0fe1      	lsrs	r1, r4, #31
    620e:	0052      	lsls	r2, r2, #1
    6210:	188a      	adds	r2, r1, r2
    6212:	0064      	lsls	r4, r4, #1
    6214:	e791      	b.n	613a <__ieee754_sqrt+0x3e>
    6216:	4653      	mov	r3, sl
    6218:	3301      	adds	r3, #1
    621a:	d035      	beq.n	6288 <__ieee754_sqrt+0x18c>
    621c:	4653      	mov	r3, sl
    621e:	3301      	adds	r3, #1
    6220:	085b      	lsrs	r3, r3, #1
    6222:	e7d1      	b.n	61c8 <__ieee754_sqrt+0xcc>
    6224:	006b      	lsls	r3, r5, #1
    6226:	085b      	lsrs	r3, r3, #1
    6228:	4303      	orrs	r3, r0
    622a:	d0da      	beq.n	61e2 <__ieee754_sqrt+0xe6>
    622c:	2700      	movs	r7, #0
    622e:	2d00      	cmp	r5, #0
    6230:	d132      	bne.n	6298 <__ieee754_sqrt+0x19c>
    6232:	0ae2      	lsrs	r2, r4, #11
    6234:	3f15      	subs	r7, #21
    6236:	0564      	lsls	r4, r4, #21
    6238:	2a00      	cmp	r2, #0
    623a:	d0fa      	beq.n	6232 <__ieee754_sqrt+0x136>
    623c:	2380      	movs	r3, #128	; 0x80
    623e:	035b      	lsls	r3, r3, #13
    6240:	421a      	tst	r2, r3
    6242:	d124      	bne.n	628e <__ieee754_sqrt+0x192>
    6244:	2080      	movs	r0, #128	; 0x80
    6246:	2300      	movs	r3, #0
    6248:	0340      	lsls	r0, r0, #13
    624a:	e000      	b.n	624e <__ieee754_sqrt+0x152>
    624c:	000b      	movs	r3, r1
    624e:	0052      	lsls	r2, r2, #1
    6250:	1c59      	adds	r1, r3, #1
    6252:	4202      	tst	r2, r0
    6254:	d0fa      	beq.n	624c <__ieee754_sqrt+0x150>
    6256:	2020      	movs	r0, #32
    6258:	1a40      	subs	r0, r0, r1
    625a:	1aff      	subs	r7, r7, r3
    625c:	0023      	movs	r3, r4
    625e:	40c3      	lsrs	r3, r0
    6260:	408c      	lsls	r4, r1
    6262:	431a      	orrs	r2, r3
    6264:	e75f      	b.n	6126 <__ieee754_sqrt+0x2a>
    6266:	46a9      	mov	r9, r5
    6268:	e79a      	b.n	61a0 <__ieee754_sqrt+0xa4>
    626a:	002b      	movs	r3, r5
    626c:	0002      	movs	r2, r0
    626e:	0029      	movs	r1, r5
    6270:	f001 f8ae 	bl	73d0 <__aeabi_dmul>
    6274:	0032      	movs	r2, r6
    6276:	002b      	movs	r3, r5
    6278:	f000 f966 	bl	6548 <__aeabi_dadd>
    627c:	0006      	movs	r6, r0
    627e:	000d      	movs	r5, r1
    6280:	e7af      	b.n	61e2 <__ieee754_sqrt+0xe6>
    6282:	2f00      	cmp	r7, #0
    6284:	dabf      	bge.n	6206 <__ieee754_sqrt+0x10a>
    6286:	e7b9      	b.n	61fc <__ieee754_sqrt+0x100>
    6288:	3601      	adds	r6, #1
    628a:	2300      	movs	r3, #0
    628c:	e79c      	b.n	61c8 <__ieee754_sqrt+0xcc>
    628e:	2301      	movs	r3, #1
    6290:	2100      	movs	r1, #0
    6292:	2020      	movs	r0, #32
    6294:	425b      	negs	r3, r3
    6296:	e7e0      	b.n	625a <__ieee754_sqrt+0x15e>
    6298:	002b      	movs	r3, r5
    629a:	0002      	movs	r2, r0
    629c:	0029      	movs	r1, r5
    629e:	f001 fb17 	bl	78d0 <__aeabi_dsub>
    62a2:	0002      	movs	r2, r0
    62a4:	000b      	movs	r3, r1
    62a6:	f000 fc5f 	bl	6b68 <__aeabi_ddiv>
    62aa:	0006      	movs	r6, r0
    62ac:	000d      	movs	r5, r1
    62ae:	e798      	b.n	61e2 <__ieee754_sqrt+0xe6>
    62b0:	7ff00000 	.word	0x7ff00000
    62b4:	fffffc01 	.word	0xfffffc01
    62b8:	3fe00000 	.word	0x3fe00000

000062bc <fabs>:
    62bc:	0049      	lsls	r1, r1, #1
    62be:	084b      	lsrs	r3, r1, #1
    62c0:	0019      	movs	r1, r3
    62c2:	4770      	bx	lr

000062c4 <matherr>:
    62c4:	2000      	movs	r0, #0
    62c6:	4770      	bx	lr

000062c8 <nan>:
    62c8:	2000      	movs	r0, #0
    62ca:	4901      	ldr	r1, [pc, #4]	; (62d0 <nan+0x8>)
    62cc:	4770      	bx	lr
    62ce:	46c0      	nop			; (mov r8, r8)
    62d0:	7ff80000 	.word	0x7ff80000

000062d4 <__udivsi3>:
    62d4:	2200      	movs	r2, #0
    62d6:	0843      	lsrs	r3, r0, #1
    62d8:	428b      	cmp	r3, r1
    62da:	d374      	bcc.n	63c6 <__udivsi3+0xf2>
    62dc:	0903      	lsrs	r3, r0, #4
    62de:	428b      	cmp	r3, r1
    62e0:	d35f      	bcc.n	63a2 <__udivsi3+0xce>
    62e2:	0a03      	lsrs	r3, r0, #8
    62e4:	428b      	cmp	r3, r1
    62e6:	d344      	bcc.n	6372 <__udivsi3+0x9e>
    62e8:	0b03      	lsrs	r3, r0, #12
    62ea:	428b      	cmp	r3, r1
    62ec:	d328      	bcc.n	6340 <__udivsi3+0x6c>
    62ee:	0c03      	lsrs	r3, r0, #16
    62f0:	428b      	cmp	r3, r1
    62f2:	d30d      	bcc.n	6310 <__udivsi3+0x3c>
    62f4:	22ff      	movs	r2, #255	; 0xff
    62f6:	0209      	lsls	r1, r1, #8
    62f8:	ba12      	rev	r2, r2
    62fa:	0c03      	lsrs	r3, r0, #16
    62fc:	428b      	cmp	r3, r1
    62fe:	d302      	bcc.n	6306 <__udivsi3+0x32>
    6300:	1212      	asrs	r2, r2, #8
    6302:	0209      	lsls	r1, r1, #8
    6304:	d065      	beq.n	63d2 <__udivsi3+0xfe>
    6306:	0b03      	lsrs	r3, r0, #12
    6308:	428b      	cmp	r3, r1
    630a:	d319      	bcc.n	6340 <__udivsi3+0x6c>
    630c:	e000      	b.n	6310 <__udivsi3+0x3c>
    630e:	0a09      	lsrs	r1, r1, #8
    6310:	0bc3      	lsrs	r3, r0, #15
    6312:	428b      	cmp	r3, r1
    6314:	d301      	bcc.n	631a <__udivsi3+0x46>
    6316:	03cb      	lsls	r3, r1, #15
    6318:	1ac0      	subs	r0, r0, r3
    631a:	4152      	adcs	r2, r2
    631c:	0b83      	lsrs	r3, r0, #14
    631e:	428b      	cmp	r3, r1
    6320:	d301      	bcc.n	6326 <__udivsi3+0x52>
    6322:	038b      	lsls	r3, r1, #14
    6324:	1ac0      	subs	r0, r0, r3
    6326:	4152      	adcs	r2, r2
    6328:	0b43      	lsrs	r3, r0, #13
    632a:	428b      	cmp	r3, r1
    632c:	d301      	bcc.n	6332 <__udivsi3+0x5e>
    632e:	034b      	lsls	r3, r1, #13
    6330:	1ac0      	subs	r0, r0, r3
    6332:	4152      	adcs	r2, r2
    6334:	0b03      	lsrs	r3, r0, #12
    6336:	428b      	cmp	r3, r1
    6338:	d301      	bcc.n	633e <__udivsi3+0x6a>
    633a:	030b      	lsls	r3, r1, #12
    633c:	1ac0      	subs	r0, r0, r3
    633e:	4152      	adcs	r2, r2
    6340:	0ac3      	lsrs	r3, r0, #11
    6342:	428b      	cmp	r3, r1
    6344:	d301      	bcc.n	634a <__udivsi3+0x76>
    6346:	02cb      	lsls	r3, r1, #11
    6348:	1ac0      	subs	r0, r0, r3
    634a:	4152      	adcs	r2, r2
    634c:	0a83      	lsrs	r3, r0, #10
    634e:	428b      	cmp	r3, r1
    6350:	d301      	bcc.n	6356 <__udivsi3+0x82>
    6352:	028b      	lsls	r3, r1, #10
    6354:	1ac0      	subs	r0, r0, r3
    6356:	4152      	adcs	r2, r2
    6358:	0a43      	lsrs	r3, r0, #9
    635a:	428b      	cmp	r3, r1
    635c:	d301      	bcc.n	6362 <__udivsi3+0x8e>
    635e:	024b      	lsls	r3, r1, #9
    6360:	1ac0      	subs	r0, r0, r3
    6362:	4152      	adcs	r2, r2
    6364:	0a03      	lsrs	r3, r0, #8
    6366:	428b      	cmp	r3, r1
    6368:	d301      	bcc.n	636e <__udivsi3+0x9a>
    636a:	020b      	lsls	r3, r1, #8
    636c:	1ac0      	subs	r0, r0, r3
    636e:	4152      	adcs	r2, r2
    6370:	d2cd      	bcs.n	630e <__udivsi3+0x3a>
    6372:	09c3      	lsrs	r3, r0, #7
    6374:	428b      	cmp	r3, r1
    6376:	d301      	bcc.n	637c <__udivsi3+0xa8>
    6378:	01cb      	lsls	r3, r1, #7
    637a:	1ac0      	subs	r0, r0, r3
    637c:	4152      	adcs	r2, r2
    637e:	0983      	lsrs	r3, r0, #6
    6380:	428b      	cmp	r3, r1
    6382:	d301      	bcc.n	6388 <__udivsi3+0xb4>
    6384:	018b      	lsls	r3, r1, #6
    6386:	1ac0      	subs	r0, r0, r3
    6388:	4152      	adcs	r2, r2
    638a:	0943      	lsrs	r3, r0, #5
    638c:	428b      	cmp	r3, r1
    638e:	d301      	bcc.n	6394 <__udivsi3+0xc0>
    6390:	014b      	lsls	r3, r1, #5
    6392:	1ac0      	subs	r0, r0, r3
    6394:	4152      	adcs	r2, r2
    6396:	0903      	lsrs	r3, r0, #4
    6398:	428b      	cmp	r3, r1
    639a:	d301      	bcc.n	63a0 <__udivsi3+0xcc>
    639c:	010b      	lsls	r3, r1, #4
    639e:	1ac0      	subs	r0, r0, r3
    63a0:	4152      	adcs	r2, r2
    63a2:	08c3      	lsrs	r3, r0, #3
    63a4:	428b      	cmp	r3, r1
    63a6:	d301      	bcc.n	63ac <__udivsi3+0xd8>
    63a8:	00cb      	lsls	r3, r1, #3
    63aa:	1ac0      	subs	r0, r0, r3
    63ac:	4152      	adcs	r2, r2
    63ae:	0883      	lsrs	r3, r0, #2
    63b0:	428b      	cmp	r3, r1
    63b2:	d301      	bcc.n	63b8 <__udivsi3+0xe4>
    63b4:	008b      	lsls	r3, r1, #2
    63b6:	1ac0      	subs	r0, r0, r3
    63b8:	4152      	adcs	r2, r2
    63ba:	0843      	lsrs	r3, r0, #1
    63bc:	428b      	cmp	r3, r1
    63be:	d301      	bcc.n	63c4 <__udivsi3+0xf0>
    63c0:	004b      	lsls	r3, r1, #1
    63c2:	1ac0      	subs	r0, r0, r3
    63c4:	4152      	adcs	r2, r2
    63c6:	1a41      	subs	r1, r0, r1
    63c8:	d200      	bcs.n	63cc <__udivsi3+0xf8>
    63ca:	4601      	mov	r1, r0
    63cc:	4152      	adcs	r2, r2
    63ce:	4610      	mov	r0, r2
    63d0:	4770      	bx	lr
    63d2:	e7ff      	b.n	63d4 <__udivsi3+0x100>
    63d4:	b501      	push	{r0, lr}
    63d6:	2000      	movs	r0, #0
    63d8:	f000 f806 	bl	63e8 <__aeabi_idiv0>
    63dc:	bd02      	pop	{r1, pc}
    63de:	46c0      	nop			; (mov r8, r8)

000063e0 <__aeabi_uidivmod>:
    63e0:	2900      	cmp	r1, #0
    63e2:	d0f7      	beq.n	63d4 <__udivsi3+0x100>
    63e4:	e776      	b.n	62d4 <__udivsi3>
    63e6:	4770      	bx	lr

000063e8 <__aeabi_idiv0>:
    63e8:	4770      	bx	lr
    63ea:	46c0      	nop			; (mov r8, r8)

000063ec <__aeabi_cdrcmple>:
    63ec:	4684      	mov	ip, r0
    63ee:	1c10      	adds	r0, r2, #0
    63f0:	4662      	mov	r2, ip
    63f2:	468c      	mov	ip, r1
    63f4:	1c19      	adds	r1, r3, #0
    63f6:	4663      	mov	r3, ip
    63f8:	e000      	b.n	63fc <__aeabi_cdcmpeq>
    63fa:	46c0      	nop			; (mov r8, r8)

000063fc <__aeabi_cdcmpeq>:
    63fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    63fe:	f000 ff85 	bl	730c <__ledf2>
    6402:	2800      	cmp	r0, #0
    6404:	d401      	bmi.n	640a <__aeabi_cdcmpeq+0xe>
    6406:	2100      	movs	r1, #0
    6408:	42c8      	cmn	r0, r1
    640a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000640c <__aeabi_dcmpeq>:
    640c:	b510      	push	{r4, lr}
    640e:	f000 fedf 	bl	71d0 <__eqdf2>
    6412:	4240      	negs	r0, r0
    6414:	3001      	adds	r0, #1
    6416:	bd10      	pop	{r4, pc}

00006418 <__aeabi_dcmplt>:
    6418:	b510      	push	{r4, lr}
    641a:	f000 ff77 	bl	730c <__ledf2>
    641e:	2800      	cmp	r0, #0
    6420:	db01      	blt.n	6426 <__aeabi_dcmplt+0xe>
    6422:	2000      	movs	r0, #0
    6424:	bd10      	pop	{r4, pc}
    6426:	2001      	movs	r0, #1
    6428:	bd10      	pop	{r4, pc}
    642a:	46c0      	nop			; (mov r8, r8)

0000642c <__aeabi_dcmple>:
    642c:	b510      	push	{r4, lr}
    642e:	f000 ff6d 	bl	730c <__ledf2>
    6432:	2800      	cmp	r0, #0
    6434:	dd01      	ble.n	643a <__aeabi_dcmple+0xe>
    6436:	2000      	movs	r0, #0
    6438:	bd10      	pop	{r4, pc}
    643a:	2001      	movs	r0, #1
    643c:	bd10      	pop	{r4, pc}
    643e:	46c0      	nop			; (mov r8, r8)

00006440 <__aeabi_dcmpgt>:
    6440:	b510      	push	{r4, lr}
    6442:	f000 feff 	bl	7244 <__gedf2>
    6446:	2800      	cmp	r0, #0
    6448:	dc01      	bgt.n	644e <__aeabi_dcmpgt+0xe>
    644a:	2000      	movs	r0, #0
    644c:	bd10      	pop	{r4, pc}
    644e:	2001      	movs	r0, #1
    6450:	bd10      	pop	{r4, pc}
    6452:	46c0      	nop			; (mov r8, r8)

00006454 <__aeabi_dcmpge>:
    6454:	b510      	push	{r4, lr}
    6456:	f000 fef5 	bl	7244 <__gedf2>
    645a:	2800      	cmp	r0, #0
    645c:	da01      	bge.n	6462 <__aeabi_dcmpge+0xe>
    645e:	2000      	movs	r0, #0
    6460:	bd10      	pop	{r4, pc}
    6462:	2001      	movs	r0, #1
    6464:	bd10      	pop	{r4, pc}
    6466:	46c0      	nop			; (mov r8, r8)

00006468 <__aeabi_lmul>:
    6468:	b5f0      	push	{r4, r5, r6, r7, lr}
    646a:	46ce      	mov	lr, r9
    646c:	4647      	mov	r7, r8
    646e:	0415      	lsls	r5, r2, #16
    6470:	0c2d      	lsrs	r5, r5, #16
    6472:	002e      	movs	r6, r5
    6474:	b580      	push	{r7, lr}
    6476:	0407      	lsls	r7, r0, #16
    6478:	0c14      	lsrs	r4, r2, #16
    647a:	0c3f      	lsrs	r7, r7, #16
    647c:	4699      	mov	r9, r3
    647e:	0c03      	lsrs	r3, r0, #16
    6480:	437e      	muls	r6, r7
    6482:	435d      	muls	r5, r3
    6484:	4367      	muls	r7, r4
    6486:	4363      	muls	r3, r4
    6488:	197f      	adds	r7, r7, r5
    648a:	0c34      	lsrs	r4, r6, #16
    648c:	19e4      	adds	r4, r4, r7
    648e:	469c      	mov	ip, r3
    6490:	42a5      	cmp	r5, r4
    6492:	d903      	bls.n	649c <__aeabi_lmul+0x34>
    6494:	2380      	movs	r3, #128	; 0x80
    6496:	025b      	lsls	r3, r3, #9
    6498:	4698      	mov	r8, r3
    649a:	44c4      	add	ip, r8
    649c:	464b      	mov	r3, r9
    649e:	4351      	muls	r1, r2
    64a0:	4343      	muls	r3, r0
    64a2:	0436      	lsls	r6, r6, #16
    64a4:	0c36      	lsrs	r6, r6, #16
    64a6:	0c25      	lsrs	r5, r4, #16
    64a8:	0424      	lsls	r4, r4, #16
    64aa:	4465      	add	r5, ip
    64ac:	19a4      	adds	r4, r4, r6
    64ae:	1859      	adds	r1, r3, r1
    64b0:	1949      	adds	r1, r1, r5
    64b2:	0020      	movs	r0, r4
    64b4:	bc0c      	pop	{r2, r3}
    64b6:	4690      	mov	r8, r2
    64b8:	4699      	mov	r9, r3
    64ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000064bc <__aeabi_ui2f>:
    64bc:	b510      	push	{r4, lr}
    64be:	1e04      	subs	r4, r0, #0
    64c0:	d027      	beq.n	6512 <__aeabi_ui2f+0x56>
    64c2:	f001 fec5 	bl	8250 <__clzsi2>
    64c6:	239e      	movs	r3, #158	; 0x9e
    64c8:	1a1b      	subs	r3, r3, r0
    64ca:	2b96      	cmp	r3, #150	; 0x96
    64cc:	dc0a      	bgt.n	64e4 <__aeabi_ui2f+0x28>
    64ce:	2296      	movs	r2, #150	; 0x96
    64d0:	1ad2      	subs	r2, r2, r3
    64d2:	4094      	lsls	r4, r2
    64d4:	0264      	lsls	r4, r4, #9
    64d6:	0a64      	lsrs	r4, r4, #9
    64d8:	b2db      	uxtb	r3, r3
    64da:	0264      	lsls	r4, r4, #9
    64dc:	05db      	lsls	r3, r3, #23
    64de:	0a60      	lsrs	r0, r4, #9
    64e0:	4318      	orrs	r0, r3
    64e2:	bd10      	pop	{r4, pc}
    64e4:	2b99      	cmp	r3, #153	; 0x99
    64e6:	dc17      	bgt.n	6518 <__aeabi_ui2f+0x5c>
    64e8:	2299      	movs	r2, #153	; 0x99
    64ea:	1ad2      	subs	r2, r2, r3
    64ec:	2a00      	cmp	r2, #0
    64ee:	dd27      	ble.n	6540 <__aeabi_ui2f+0x84>
    64f0:	4094      	lsls	r4, r2
    64f2:	0022      	movs	r2, r4
    64f4:	4c13      	ldr	r4, [pc, #76]	; (6544 <__aeabi_ui2f+0x88>)
    64f6:	4014      	ands	r4, r2
    64f8:	0751      	lsls	r1, r2, #29
    64fa:	d004      	beq.n	6506 <__aeabi_ui2f+0x4a>
    64fc:	210f      	movs	r1, #15
    64fe:	400a      	ands	r2, r1
    6500:	2a04      	cmp	r2, #4
    6502:	d000      	beq.n	6506 <__aeabi_ui2f+0x4a>
    6504:	3404      	adds	r4, #4
    6506:	0162      	lsls	r2, r4, #5
    6508:	d412      	bmi.n	6530 <__aeabi_ui2f+0x74>
    650a:	01a4      	lsls	r4, r4, #6
    650c:	0a64      	lsrs	r4, r4, #9
    650e:	b2db      	uxtb	r3, r3
    6510:	e7e3      	b.n	64da <__aeabi_ui2f+0x1e>
    6512:	2300      	movs	r3, #0
    6514:	2400      	movs	r4, #0
    6516:	e7e0      	b.n	64da <__aeabi_ui2f+0x1e>
    6518:	22b9      	movs	r2, #185	; 0xb9
    651a:	0021      	movs	r1, r4
    651c:	1ad2      	subs	r2, r2, r3
    651e:	4091      	lsls	r1, r2
    6520:	000a      	movs	r2, r1
    6522:	1e51      	subs	r1, r2, #1
    6524:	418a      	sbcs	r2, r1
    6526:	2105      	movs	r1, #5
    6528:	1a09      	subs	r1, r1, r0
    652a:	40cc      	lsrs	r4, r1
    652c:	4314      	orrs	r4, r2
    652e:	e7db      	b.n	64e8 <__aeabi_ui2f+0x2c>
    6530:	4b04      	ldr	r3, [pc, #16]	; (6544 <__aeabi_ui2f+0x88>)
    6532:	401c      	ands	r4, r3
    6534:	239f      	movs	r3, #159	; 0x9f
    6536:	01a4      	lsls	r4, r4, #6
    6538:	1a1b      	subs	r3, r3, r0
    653a:	0a64      	lsrs	r4, r4, #9
    653c:	b2db      	uxtb	r3, r3
    653e:	e7cc      	b.n	64da <__aeabi_ui2f+0x1e>
    6540:	0022      	movs	r2, r4
    6542:	e7d7      	b.n	64f4 <__aeabi_ui2f+0x38>
    6544:	fbffffff 	.word	0xfbffffff

00006548 <__aeabi_dadd>:
    6548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    654a:	4645      	mov	r5, r8
    654c:	46de      	mov	lr, fp
    654e:	4657      	mov	r7, sl
    6550:	464e      	mov	r6, r9
    6552:	030c      	lsls	r4, r1, #12
    6554:	b5e0      	push	{r5, r6, r7, lr}
    6556:	004e      	lsls	r6, r1, #1
    6558:	0fc9      	lsrs	r1, r1, #31
    655a:	4688      	mov	r8, r1
    655c:	000d      	movs	r5, r1
    655e:	0a61      	lsrs	r1, r4, #9
    6560:	0f44      	lsrs	r4, r0, #29
    6562:	430c      	orrs	r4, r1
    6564:	00c7      	lsls	r7, r0, #3
    6566:	0319      	lsls	r1, r3, #12
    6568:	0058      	lsls	r0, r3, #1
    656a:	0fdb      	lsrs	r3, r3, #31
    656c:	469b      	mov	fp, r3
    656e:	0a4b      	lsrs	r3, r1, #9
    6570:	0f51      	lsrs	r1, r2, #29
    6572:	430b      	orrs	r3, r1
    6574:	0d76      	lsrs	r6, r6, #21
    6576:	0d40      	lsrs	r0, r0, #21
    6578:	0019      	movs	r1, r3
    657a:	00d2      	lsls	r2, r2, #3
    657c:	45d8      	cmp	r8, fp
    657e:	d100      	bne.n	6582 <__aeabi_dadd+0x3a>
    6580:	e0ae      	b.n	66e0 <__aeabi_dadd+0x198>
    6582:	1a35      	subs	r5, r6, r0
    6584:	2d00      	cmp	r5, #0
    6586:	dc00      	bgt.n	658a <__aeabi_dadd+0x42>
    6588:	e0f6      	b.n	6778 <__aeabi_dadd+0x230>
    658a:	2800      	cmp	r0, #0
    658c:	d10f      	bne.n	65ae <__aeabi_dadd+0x66>
    658e:	4313      	orrs	r3, r2
    6590:	d100      	bne.n	6594 <__aeabi_dadd+0x4c>
    6592:	e0db      	b.n	674c <__aeabi_dadd+0x204>
    6594:	1e6b      	subs	r3, r5, #1
    6596:	2b00      	cmp	r3, #0
    6598:	d000      	beq.n	659c <__aeabi_dadd+0x54>
    659a:	e137      	b.n	680c <__aeabi_dadd+0x2c4>
    659c:	1aba      	subs	r2, r7, r2
    659e:	4297      	cmp	r7, r2
    65a0:	41bf      	sbcs	r7, r7
    65a2:	1a64      	subs	r4, r4, r1
    65a4:	427f      	negs	r7, r7
    65a6:	1be4      	subs	r4, r4, r7
    65a8:	2601      	movs	r6, #1
    65aa:	0017      	movs	r7, r2
    65ac:	e024      	b.n	65f8 <__aeabi_dadd+0xb0>
    65ae:	4bc6      	ldr	r3, [pc, #792]	; (68c8 <__aeabi_dadd+0x380>)
    65b0:	429e      	cmp	r6, r3
    65b2:	d04d      	beq.n	6650 <__aeabi_dadd+0x108>
    65b4:	2380      	movs	r3, #128	; 0x80
    65b6:	041b      	lsls	r3, r3, #16
    65b8:	4319      	orrs	r1, r3
    65ba:	2d38      	cmp	r5, #56	; 0x38
    65bc:	dd00      	ble.n	65c0 <__aeabi_dadd+0x78>
    65be:	e107      	b.n	67d0 <__aeabi_dadd+0x288>
    65c0:	2d1f      	cmp	r5, #31
    65c2:	dd00      	ble.n	65c6 <__aeabi_dadd+0x7e>
    65c4:	e138      	b.n	6838 <__aeabi_dadd+0x2f0>
    65c6:	2020      	movs	r0, #32
    65c8:	1b43      	subs	r3, r0, r5
    65ca:	469a      	mov	sl, r3
    65cc:	000b      	movs	r3, r1
    65ce:	4650      	mov	r0, sl
    65d0:	4083      	lsls	r3, r0
    65d2:	4699      	mov	r9, r3
    65d4:	0013      	movs	r3, r2
    65d6:	4648      	mov	r0, r9
    65d8:	40eb      	lsrs	r3, r5
    65da:	4318      	orrs	r0, r3
    65dc:	0003      	movs	r3, r0
    65de:	4650      	mov	r0, sl
    65e0:	4082      	lsls	r2, r0
    65e2:	1e50      	subs	r0, r2, #1
    65e4:	4182      	sbcs	r2, r0
    65e6:	40e9      	lsrs	r1, r5
    65e8:	431a      	orrs	r2, r3
    65ea:	1aba      	subs	r2, r7, r2
    65ec:	1a61      	subs	r1, r4, r1
    65ee:	4297      	cmp	r7, r2
    65f0:	41a4      	sbcs	r4, r4
    65f2:	0017      	movs	r7, r2
    65f4:	4264      	negs	r4, r4
    65f6:	1b0c      	subs	r4, r1, r4
    65f8:	0223      	lsls	r3, r4, #8
    65fa:	d562      	bpl.n	66c2 <__aeabi_dadd+0x17a>
    65fc:	0264      	lsls	r4, r4, #9
    65fe:	0a65      	lsrs	r5, r4, #9
    6600:	2d00      	cmp	r5, #0
    6602:	d100      	bne.n	6606 <__aeabi_dadd+0xbe>
    6604:	e0df      	b.n	67c6 <__aeabi_dadd+0x27e>
    6606:	0028      	movs	r0, r5
    6608:	f001 fe22 	bl	8250 <__clzsi2>
    660c:	0003      	movs	r3, r0
    660e:	3b08      	subs	r3, #8
    6610:	2b1f      	cmp	r3, #31
    6612:	dd00      	ble.n	6616 <__aeabi_dadd+0xce>
    6614:	e0d2      	b.n	67bc <__aeabi_dadd+0x274>
    6616:	2220      	movs	r2, #32
    6618:	003c      	movs	r4, r7
    661a:	1ad2      	subs	r2, r2, r3
    661c:	409d      	lsls	r5, r3
    661e:	40d4      	lsrs	r4, r2
    6620:	409f      	lsls	r7, r3
    6622:	4325      	orrs	r5, r4
    6624:	429e      	cmp	r6, r3
    6626:	dd00      	ble.n	662a <__aeabi_dadd+0xe2>
    6628:	e0c4      	b.n	67b4 <__aeabi_dadd+0x26c>
    662a:	1b9e      	subs	r6, r3, r6
    662c:	1c73      	adds	r3, r6, #1
    662e:	2b1f      	cmp	r3, #31
    6630:	dd00      	ble.n	6634 <__aeabi_dadd+0xec>
    6632:	e0f1      	b.n	6818 <__aeabi_dadd+0x2d0>
    6634:	2220      	movs	r2, #32
    6636:	0038      	movs	r0, r7
    6638:	0029      	movs	r1, r5
    663a:	1ad2      	subs	r2, r2, r3
    663c:	40d8      	lsrs	r0, r3
    663e:	4091      	lsls	r1, r2
    6640:	4097      	lsls	r7, r2
    6642:	002c      	movs	r4, r5
    6644:	4301      	orrs	r1, r0
    6646:	1e78      	subs	r0, r7, #1
    6648:	4187      	sbcs	r7, r0
    664a:	40dc      	lsrs	r4, r3
    664c:	2600      	movs	r6, #0
    664e:	430f      	orrs	r7, r1
    6650:	077b      	lsls	r3, r7, #29
    6652:	d009      	beq.n	6668 <__aeabi_dadd+0x120>
    6654:	230f      	movs	r3, #15
    6656:	403b      	ands	r3, r7
    6658:	2b04      	cmp	r3, #4
    665a:	d005      	beq.n	6668 <__aeabi_dadd+0x120>
    665c:	1d3b      	adds	r3, r7, #4
    665e:	42bb      	cmp	r3, r7
    6660:	41bf      	sbcs	r7, r7
    6662:	427f      	negs	r7, r7
    6664:	19e4      	adds	r4, r4, r7
    6666:	001f      	movs	r7, r3
    6668:	0223      	lsls	r3, r4, #8
    666a:	d52c      	bpl.n	66c6 <__aeabi_dadd+0x17e>
    666c:	4b96      	ldr	r3, [pc, #600]	; (68c8 <__aeabi_dadd+0x380>)
    666e:	3601      	adds	r6, #1
    6670:	429e      	cmp	r6, r3
    6672:	d100      	bne.n	6676 <__aeabi_dadd+0x12e>
    6674:	e09a      	b.n	67ac <__aeabi_dadd+0x264>
    6676:	4645      	mov	r5, r8
    6678:	4b94      	ldr	r3, [pc, #592]	; (68cc <__aeabi_dadd+0x384>)
    667a:	08ff      	lsrs	r7, r7, #3
    667c:	401c      	ands	r4, r3
    667e:	0760      	lsls	r0, r4, #29
    6680:	0576      	lsls	r6, r6, #21
    6682:	0264      	lsls	r4, r4, #9
    6684:	4307      	orrs	r7, r0
    6686:	0b24      	lsrs	r4, r4, #12
    6688:	0d76      	lsrs	r6, r6, #21
    668a:	2100      	movs	r1, #0
    668c:	0324      	lsls	r4, r4, #12
    668e:	0b23      	lsrs	r3, r4, #12
    6690:	0d0c      	lsrs	r4, r1, #20
    6692:	4a8f      	ldr	r2, [pc, #572]	; (68d0 <__aeabi_dadd+0x388>)
    6694:	0524      	lsls	r4, r4, #20
    6696:	431c      	orrs	r4, r3
    6698:	4014      	ands	r4, r2
    669a:	0533      	lsls	r3, r6, #20
    669c:	4323      	orrs	r3, r4
    669e:	005b      	lsls	r3, r3, #1
    66a0:	07ed      	lsls	r5, r5, #31
    66a2:	085b      	lsrs	r3, r3, #1
    66a4:	432b      	orrs	r3, r5
    66a6:	0038      	movs	r0, r7
    66a8:	0019      	movs	r1, r3
    66aa:	bc3c      	pop	{r2, r3, r4, r5}
    66ac:	4690      	mov	r8, r2
    66ae:	4699      	mov	r9, r3
    66b0:	46a2      	mov	sl, r4
    66b2:	46ab      	mov	fp, r5
    66b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66b6:	4664      	mov	r4, ip
    66b8:	4304      	orrs	r4, r0
    66ba:	d100      	bne.n	66be <__aeabi_dadd+0x176>
    66bc:	e211      	b.n	6ae2 <__aeabi_dadd+0x59a>
    66be:	0004      	movs	r4, r0
    66c0:	4667      	mov	r7, ip
    66c2:	077b      	lsls	r3, r7, #29
    66c4:	d1c6      	bne.n	6654 <__aeabi_dadd+0x10c>
    66c6:	4645      	mov	r5, r8
    66c8:	0760      	lsls	r0, r4, #29
    66ca:	08ff      	lsrs	r7, r7, #3
    66cc:	4307      	orrs	r7, r0
    66ce:	08e4      	lsrs	r4, r4, #3
    66d0:	4b7d      	ldr	r3, [pc, #500]	; (68c8 <__aeabi_dadd+0x380>)
    66d2:	429e      	cmp	r6, r3
    66d4:	d030      	beq.n	6738 <__aeabi_dadd+0x1f0>
    66d6:	0324      	lsls	r4, r4, #12
    66d8:	0576      	lsls	r6, r6, #21
    66da:	0b24      	lsrs	r4, r4, #12
    66dc:	0d76      	lsrs	r6, r6, #21
    66de:	e7d4      	b.n	668a <__aeabi_dadd+0x142>
    66e0:	1a33      	subs	r3, r6, r0
    66e2:	469a      	mov	sl, r3
    66e4:	2b00      	cmp	r3, #0
    66e6:	dd78      	ble.n	67da <__aeabi_dadd+0x292>
    66e8:	2800      	cmp	r0, #0
    66ea:	d031      	beq.n	6750 <__aeabi_dadd+0x208>
    66ec:	4876      	ldr	r0, [pc, #472]	; (68c8 <__aeabi_dadd+0x380>)
    66ee:	4286      	cmp	r6, r0
    66f0:	d0ae      	beq.n	6650 <__aeabi_dadd+0x108>
    66f2:	2080      	movs	r0, #128	; 0x80
    66f4:	0400      	lsls	r0, r0, #16
    66f6:	4301      	orrs	r1, r0
    66f8:	4653      	mov	r3, sl
    66fa:	2b38      	cmp	r3, #56	; 0x38
    66fc:	dc00      	bgt.n	6700 <__aeabi_dadd+0x1b8>
    66fe:	e0e9      	b.n	68d4 <__aeabi_dadd+0x38c>
    6700:	430a      	orrs	r2, r1
    6702:	1e51      	subs	r1, r2, #1
    6704:	418a      	sbcs	r2, r1
    6706:	2100      	movs	r1, #0
    6708:	19d2      	adds	r2, r2, r7
    670a:	42ba      	cmp	r2, r7
    670c:	41bf      	sbcs	r7, r7
    670e:	1909      	adds	r1, r1, r4
    6710:	427c      	negs	r4, r7
    6712:	0017      	movs	r7, r2
    6714:	190c      	adds	r4, r1, r4
    6716:	0223      	lsls	r3, r4, #8
    6718:	d5d3      	bpl.n	66c2 <__aeabi_dadd+0x17a>
    671a:	4b6b      	ldr	r3, [pc, #428]	; (68c8 <__aeabi_dadd+0x380>)
    671c:	3601      	adds	r6, #1
    671e:	429e      	cmp	r6, r3
    6720:	d100      	bne.n	6724 <__aeabi_dadd+0x1dc>
    6722:	e13a      	b.n	699a <__aeabi_dadd+0x452>
    6724:	2001      	movs	r0, #1
    6726:	4b69      	ldr	r3, [pc, #420]	; (68cc <__aeabi_dadd+0x384>)
    6728:	401c      	ands	r4, r3
    672a:	087b      	lsrs	r3, r7, #1
    672c:	4007      	ands	r7, r0
    672e:	431f      	orrs	r7, r3
    6730:	07e0      	lsls	r0, r4, #31
    6732:	4307      	orrs	r7, r0
    6734:	0864      	lsrs	r4, r4, #1
    6736:	e78b      	b.n	6650 <__aeabi_dadd+0x108>
    6738:	0023      	movs	r3, r4
    673a:	433b      	orrs	r3, r7
    673c:	d100      	bne.n	6740 <__aeabi_dadd+0x1f8>
    673e:	e1cb      	b.n	6ad8 <__aeabi_dadd+0x590>
    6740:	2280      	movs	r2, #128	; 0x80
    6742:	0312      	lsls	r2, r2, #12
    6744:	4314      	orrs	r4, r2
    6746:	0324      	lsls	r4, r4, #12
    6748:	0b24      	lsrs	r4, r4, #12
    674a:	e79e      	b.n	668a <__aeabi_dadd+0x142>
    674c:	002e      	movs	r6, r5
    674e:	e77f      	b.n	6650 <__aeabi_dadd+0x108>
    6750:	0008      	movs	r0, r1
    6752:	4310      	orrs	r0, r2
    6754:	d100      	bne.n	6758 <__aeabi_dadd+0x210>
    6756:	e0b4      	b.n	68c2 <__aeabi_dadd+0x37a>
    6758:	1e58      	subs	r0, r3, #1
    675a:	2800      	cmp	r0, #0
    675c:	d000      	beq.n	6760 <__aeabi_dadd+0x218>
    675e:	e0de      	b.n	691e <__aeabi_dadd+0x3d6>
    6760:	18ba      	adds	r2, r7, r2
    6762:	42ba      	cmp	r2, r7
    6764:	419b      	sbcs	r3, r3
    6766:	1864      	adds	r4, r4, r1
    6768:	425b      	negs	r3, r3
    676a:	18e4      	adds	r4, r4, r3
    676c:	0017      	movs	r7, r2
    676e:	2601      	movs	r6, #1
    6770:	0223      	lsls	r3, r4, #8
    6772:	d5a6      	bpl.n	66c2 <__aeabi_dadd+0x17a>
    6774:	2602      	movs	r6, #2
    6776:	e7d5      	b.n	6724 <__aeabi_dadd+0x1dc>
    6778:	2d00      	cmp	r5, #0
    677a:	d16e      	bne.n	685a <__aeabi_dadd+0x312>
    677c:	1c70      	adds	r0, r6, #1
    677e:	0540      	lsls	r0, r0, #21
    6780:	0d40      	lsrs	r0, r0, #21
    6782:	2801      	cmp	r0, #1
    6784:	dc00      	bgt.n	6788 <__aeabi_dadd+0x240>
    6786:	e0f9      	b.n	697c <__aeabi_dadd+0x434>
    6788:	1ab8      	subs	r0, r7, r2
    678a:	4684      	mov	ip, r0
    678c:	4287      	cmp	r7, r0
    678e:	4180      	sbcs	r0, r0
    6790:	1ae5      	subs	r5, r4, r3
    6792:	4240      	negs	r0, r0
    6794:	1a2d      	subs	r5, r5, r0
    6796:	0228      	lsls	r0, r5, #8
    6798:	d400      	bmi.n	679c <__aeabi_dadd+0x254>
    679a:	e089      	b.n	68b0 <__aeabi_dadd+0x368>
    679c:	1bd7      	subs	r7, r2, r7
    679e:	42ba      	cmp	r2, r7
    67a0:	4192      	sbcs	r2, r2
    67a2:	1b1c      	subs	r4, r3, r4
    67a4:	4252      	negs	r2, r2
    67a6:	1aa5      	subs	r5, r4, r2
    67a8:	46d8      	mov	r8, fp
    67aa:	e729      	b.n	6600 <__aeabi_dadd+0xb8>
    67ac:	4645      	mov	r5, r8
    67ae:	2400      	movs	r4, #0
    67b0:	2700      	movs	r7, #0
    67b2:	e76a      	b.n	668a <__aeabi_dadd+0x142>
    67b4:	4c45      	ldr	r4, [pc, #276]	; (68cc <__aeabi_dadd+0x384>)
    67b6:	1af6      	subs	r6, r6, r3
    67b8:	402c      	ands	r4, r5
    67ba:	e749      	b.n	6650 <__aeabi_dadd+0x108>
    67bc:	003d      	movs	r5, r7
    67be:	3828      	subs	r0, #40	; 0x28
    67c0:	4085      	lsls	r5, r0
    67c2:	2700      	movs	r7, #0
    67c4:	e72e      	b.n	6624 <__aeabi_dadd+0xdc>
    67c6:	0038      	movs	r0, r7
    67c8:	f001 fd42 	bl	8250 <__clzsi2>
    67cc:	3020      	adds	r0, #32
    67ce:	e71d      	b.n	660c <__aeabi_dadd+0xc4>
    67d0:	430a      	orrs	r2, r1
    67d2:	1e51      	subs	r1, r2, #1
    67d4:	418a      	sbcs	r2, r1
    67d6:	2100      	movs	r1, #0
    67d8:	e707      	b.n	65ea <__aeabi_dadd+0xa2>
    67da:	2b00      	cmp	r3, #0
    67dc:	d000      	beq.n	67e0 <__aeabi_dadd+0x298>
    67de:	e0f3      	b.n	69c8 <__aeabi_dadd+0x480>
    67e0:	1c70      	adds	r0, r6, #1
    67e2:	0543      	lsls	r3, r0, #21
    67e4:	0d5b      	lsrs	r3, r3, #21
    67e6:	2b01      	cmp	r3, #1
    67e8:	dc00      	bgt.n	67ec <__aeabi_dadd+0x2a4>
    67ea:	e0ad      	b.n	6948 <__aeabi_dadd+0x400>
    67ec:	4b36      	ldr	r3, [pc, #216]	; (68c8 <__aeabi_dadd+0x380>)
    67ee:	4298      	cmp	r0, r3
    67f0:	d100      	bne.n	67f4 <__aeabi_dadd+0x2ac>
    67f2:	e0d1      	b.n	6998 <__aeabi_dadd+0x450>
    67f4:	18ba      	adds	r2, r7, r2
    67f6:	42ba      	cmp	r2, r7
    67f8:	41bf      	sbcs	r7, r7
    67fa:	1864      	adds	r4, r4, r1
    67fc:	427f      	negs	r7, r7
    67fe:	19e4      	adds	r4, r4, r7
    6800:	07e7      	lsls	r7, r4, #31
    6802:	0852      	lsrs	r2, r2, #1
    6804:	4317      	orrs	r7, r2
    6806:	0864      	lsrs	r4, r4, #1
    6808:	0006      	movs	r6, r0
    680a:	e721      	b.n	6650 <__aeabi_dadd+0x108>
    680c:	482e      	ldr	r0, [pc, #184]	; (68c8 <__aeabi_dadd+0x380>)
    680e:	4285      	cmp	r5, r0
    6810:	d100      	bne.n	6814 <__aeabi_dadd+0x2cc>
    6812:	e093      	b.n	693c <__aeabi_dadd+0x3f4>
    6814:	001d      	movs	r5, r3
    6816:	e6d0      	b.n	65ba <__aeabi_dadd+0x72>
    6818:	0029      	movs	r1, r5
    681a:	3e1f      	subs	r6, #31
    681c:	40f1      	lsrs	r1, r6
    681e:	2b20      	cmp	r3, #32
    6820:	d100      	bne.n	6824 <__aeabi_dadd+0x2dc>
    6822:	e08d      	b.n	6940 <__aeabi_dadd+0x3f8>
    6824:	2240      	movs	r2, #64	; 0x40
    6826:	1ad3      	subs	r3, r2, r3
    6828:	409d      	lsls	r5, r3
    682a:	432f      	orrs	r7, r5
    682c:	1e7d      	subs	r5, r7, #1
    682e:	41af      	sbcs	r7, r5
    6830:	2400      	movs	r4, #0
    6832:	430f      	orrs	r7, r1
    6834:	2600      	movs	r6, #0
    6836:	e744      	b.n	66c2 <__aeabi_dadd+0x17a>
    6838:	002b      	movs	r3, r5
    683a:	0008      	movs	r0, r1
    683c:	3b20      	subs	r3, #32
    683e:	40d8      	lsrs	r0, r3
    6840:	0003      	movs	r3, r0
    6842:	2d20      	cmp	r5, #32
    6844:	d100      	bne.n	6848 <__aeabi_dadd+0x300>
    6846:	e07d      	b.n	6944 <__aeabi_dadd+0x3fc>
    6848:	2040      	movs	r0, #64	; 0x40
    684a:	1b45      	subs	r5, r0, r5
    684c:	40a9      	lsls	r1, r5
    684e:	430a      	orrs	r2, r1
    6850:	1e51      	subs	r1, r2, #1
    6852:	418a      	sbcs	r2, r1
    6854:	2100      	movs	r1, #0
    6856:	431a      	orrs	r2, r3
    6858:	e6c7      	b.n	65ea <__aeabi_dadd+0xa2>
    685a:	2e00      	cmp	r6, #0
    685c:	d050      	beq.n	6900 <__aeabi_dadd+0x3b8>
    685e:	4e1a      	ldr	r6, [pc, #104]	; (68c8 <__aeabi_dadd+0x380>)
    6860:	42b0      	cmp	r0, r6
    6862:	d057      	beq.n	6914 <__aeabi_dadd+0x3cc>
    6864:	2680      	movs	r6, #128	; 0x80
    6866:	426b      	negs	r3, r5
    6868:	4699      	mov	r9, r3
    686a:	0436      	lsls	r6, r6, #16
    686c:	4334      	orrs	r4, r6
    686e:	464b      	mov	r3, r9
    6870:	2b38      	cmp	r3, #56	; 0x38
    6872:	dd00      	ble.n	6876 <__aeabi_dadd+0x32e>
    6874:	e0d6      	b.n	6a24 <__aeabi_dadd+0x4dc>
    6876:	2b1f      	cmp	r3, #31
    6878:	dd00      	ble.n	687c <__aeabi_dadd+0x334>
    687a:	e135      	b.n	6ae8 <__aeabi_dadd+0x5a0>
    687c:	2620      	movs	r6, #32
    687e:	1af5      	subs	r5, r6, r3
    6880:	0026      	movs	r6, r4
    6882:	40ae      	lsls	r6, r5
    6884:	46b2      	mov	sl, r6
    6886:	003e      	movs	r6, r7
    6888:	40de      	lsrs	r6, r3
    688a:	46ac      	mov	ip, r5
    688c:	0035      	movs	r5, r6
    688e:	4656      	mov	r6, sl
    6890:	432e      	orrs	r6, r5
    6892:	4665      	mov	r5, ip
    6894:	40af      	lsls	r7, r5
    6896:	1e7d      	subs	r5, r7, #1
    6898:	41af      	sbcs	r7, r5
    689a:	40dc      	lsrs	r4, r3
    689c:	4337      	orrs	r7, r6
    689e:	1bd7      	subs	r7, r2, r7
    68a0:	42ba      	cmp	r2, r7
    68a2:	4192      	sbcs	r2, r2
    68a4:	1b0c      	subs	r4, r1, r4
    68a6:	4252      	negs	r2, r2
    68a8:	1aa4      	subs	r4, r4, r2
    68aa:	0006      	movs	r6, r0
    68ac:	46d8      	mov	r8, fp
    68ae:	e6a3      	b.n	65f8 <__aeabi_dadd+0xb0>
    68b0:	4664      	mov	r4, ip
    68b2:	4667      	mov	r7, ip
    68b4:	432c      	orrs	r4, r5
    68b6:	d000      	beq.n	68ba <__aeabi_dadd+0x372>
    68b8:	e6a2      	b.n	6600 <__aeabi_dadd+0xb8>
    68ba:	2500      	movs	r5, #0
    68bc:	2600      	movs	r6, #0
    68be:	2700      	movs	r7, #0
    68c0:	e706      	b.n	66d0 <__aeabi_dadd+0x188>
    68c2:	001e      	movs	r6, r3
    68c4:	e6c4      	b.n	6650 <__aeabi_dadd+0x108>
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	000007ff 	.word	0x000007ff
    68cc:	ff7fffff 	.word	0xff7fffff
    68d0:	800fffff 	.word	0x800fffff
    68d4:	2b1f      	cmp	r3, #31
    68d6:	dc63      	bgt.n	69a0 <__aeabi_dadd+0x458>
    68d8:	2020      	movs	r0, #32
    68da:	1ac3      	subs	r3, r0, r3
    68dc:	0008      	movs	r0, r1
    68de:	4098      	lsls	r0, r3
    68e0:	469c      	mov	ip, r3
    68e2:	4683      	mov	fp, r0
    68e4:	4653      	mov	r3, sl
    68e6:	0010      	movs	r0, r2
    68e8:	40d8      	lsrs	r0, r3
    68ea:	0003      	movs	r3, r0
    68ec:	4658      	mov	r0, fp
    68ee:	4318      	orrs	r0, r3
    68f0:	4663      	mov	r3, ip
    68f2:	409a      	lsls	r2, r3
    68f4:	1e53      	subs	r3, r2, #1
    68f6:	419a      	sbcs	r2, r3
    68f8:	4653      	mov	r3, sl
    68fa:	4302      	orrs	r2, r0
    68fc:	40d9      	lsrs	r1, r3
    68fe:	e703      	b.n	6708 <__aeabi_dadd+0x1c0>
    6900:	0026      	movs	r6, r4
    6902:	433e      	orrs	r6, r7
    6904:	d006      	beq.n	6914 <__aeabi_dadd+0x3cc>
    6906:	43eb      	mvns	r3, r5
    6908:	4699      	mov	r9, r3
    690a:	2b00      	cmp	r3, #0
    690c:	d0c7      	beq.n	689e <__aeabi_dadd+0x356>
    690e:	4e94      	ldr	r6, [pc, #592]	; (6b60 <__aeabi_dadd+0x618>)
    6910:	42b0      	cmp	r0, r6
    6912:	d1ac      	bne.n	686e <__aeabi_dadd+0x326>
    6914:	000c      	movs	r4, r1
    6916:	0017      	movs	r7, r2
    6918:	0006      	movs	r6, r0
    691a:	46d8      	mov	r8, fp
    691c:	e698      	b.n	6650 <__aeabi_dadd+0x108>
    691e:	4b90      	ldr	r3, [pc, #576]	; (6b60 <__aeabi_dadd+0x618>)
    6920:	459a      	cmp	sl, r3
    6922:	d00b      	beq.n	693c <__aeabi_dadd+0x3f4>
    6924:	4682      	mov	sl, r0
    6926:	e6e7      	b.n	66f8 <__aeabi_dadd+0x1b0>
    6928:	2800      	cmp	r0, #0
    692a:	d000      	beq.n	692e <__aeabi_dadd+0x3e6>
    692c:	e09e      	b.n	6a6c <__aeabi_dadd+0x524>
    692e:	0018      	movs	r0, r3
    6930:	4310      	orrs	r0, r2
    6932:	d100      	bne.n	6936 <__aeabi_dadd+0x3ee>
    6934:	e0e9      	b.n	6b0a <__aeabi_dadd+0x5c2>
    6936:	001c      	movs	r4, r3
    6938:	0017      	movs	r7, r2
    693a:	46d8      	mov	r8, fp
    693c:	4e88      	ldr	r6, [pc, #544]	; (6b60 <__aeabi_dadd+0x618>)
    693e:	e687      	b.n	6650 <__aeabi_dadd+0x108>
    6940:	2500      	movs	r5, #0
    6942:	e772      	b.n	682a <__aeabi_dadd+0x2e2>
    6944:	2100      	movs	r1, #0
    6946:	e782      	b.n	684e <__aeabi_dadd+0x306>
    6948:	0023      	movs	r3, r4
    694a:	433b      	orrs	r3, r7
    694c:	2e00      	cmp	r6, #0
    694e:	d000      	beq.n	6952 <__aeabi_dadd+0x40a>
    6950:	e0ab      	b.n	6aaa <__aeabi_dadd+0x562>
    6952:	2b00      	cmp	r3, #0
    6954:	d100      	bne.n	6958 <__aeabi_dadd+0x410>
    6956:	e0e7      	b.n	6b28 <__aeabi_dadd+0x5e0>
    6958:	000b      	movs	r3, r1
    695a:	4313      	orrs	r3, r2
    695c:	d100      	bne.n	6960 <__aeabi_dadd+0x418>
    695e:	e677      	b.n	6650 <__aeabi_dadd+0x108>
    6960:	18ba      	adds	r2, r7, r2
    6962:	42ba      	cmp	r2, r7
    6964:	41bf      	sbcs	r7, r7
    6966:	1864      	adds	r4, r4, r1
    6968:	427f      	negs	r7, r7
    696a:	19e4      	adds	r4, r4, r7
    696c:	0223      	lsls	r3, r4, #8
    696e:	d400      	bmi.n	6972 <__aeabi_dadd+0x42a>
    6970:	e0f2      	b.n	6b58 <__aeabi_dadd+0x610>
    6972:	4b7c      	ldr	r3, [pc, #496]	; (6b64 <__aeabi_dadd+0x61c>)
    6974:	0017      	movs	r7, r2
    6976:	401c      	ands	r4, r3
    6978:	0006      	movs	r6, r0
    697a:	e669      	b.n	6650 <__aeabi_dadd+0x108>
    697c:	0020      	movs	r0, r4
    697e:	4338      	orrs	r0, r7
    6980:	2e00      	cmp	r6, #0
    6982:	d1d1      	bne.n	6928 <__aeabi_dadd+0x3e0>
    6984:	2800      	cmp	r0, #0
    6986:	d15b      	bne.n	6a40 <__aeabi_dadd+0x4f8>
    6988:	001c      	movs	r4, r3
    698a:	4314      	orrs	r4, r2
    698c:	d100      	bne.n	6990 <__aeabi_dadd+0x448>
    698e:	e0a8      	b.n	6ae2 <__aeabi_dadd+0x59a>
    6990:	001c      	movs	r4, r3
    6992:	0017      	movs	r7, r2
    6994:	46d8      	mov	r8, fp
    6996:	e65b      	b.n	6650 <__aeabi_dadd+0x108>
    6998:	0006      	movs	r6, r0
    699a:	2400      	movs	r4, #0
    699c:	2700      	movs	r7, #0
    699e:	e697      	b.n	66d0 <__aeabi_dadd+0x188>
    69a0:	4650      	mov	r0, sl
    69a2:	000b      	movs	r3, r1
    69a4:	3820      	subs	r0, #32
    69a6:	40c3      	lsrs	r3, r0
    69a8:	4699      	mov	r9, r3
    69aa:	4653      	mov	r3, sl
    69ac:	2b20      	cmp	r3, #32
    69ae:	d100      	bne.n	69b2 <__aeabi_dadd+0x46a>
    69b0:	e095      	b.n	6ade <__aeabi_dadd+0x596>
    69b2:	2340      	movs	r3, #64	; 0x40
    69b4:	4650      	mov	r0, sl
    69b6:	1a1b      	subs	r3, r3, r0
    69b8:	4099      	lsls	r1, r3
    69ba:	430a      	orrs	r2, r1
    69bc:	1e51      	subs	r1, r2, #1
    69be:	418a      	sbcs	r2, r1
    69c0:	464b      	mov	r3, r9
    69c2:	2100      	movs	r1, #0
    69c4:	431a      	orrs	r2, r3
    69c6:	e69f      	b.n	6708 <__aeabi_dadd+0x1c0>
    69c8:	2e00      	cmp	r6, #0
    69ca:	d130      	bne.n	6a2e <__aeabi_dadd+0x4e6>
    69cc:	0026      	movs	r6, r4
    69ce:	433e      	orrs	r6, r7
    69d0:	d067      	beq.n	6aa2 <__aeabi_dadd+0x55a>
    69d2:	43db      	mvns	r3, r3
    69d4:	469a      	mov	sl, r3
    69d6:	2b00      	cmp	r3, #0
    69d8:	d01c      	beq.n	6a14 <__aeabi_dadd+0x4cc>
    69da:	4e61      	ldr	r6, [pc, #388]	; (6b60 <__aeabi_dadd+0x618>)
    69dc:	42b0      	cmp	r0, r6
    69de:	d060      	beq.n	6aa2 <__aeabi_dadd+0x55a>
    69e0:	4653      	mov	r3, sl
    69e2:	2b38      	cmp	r3, #56	; 0x38
    69e4:	dd00      	ble.n	69e8 <__aeabi_dadd+0x4a0>
    69e6:	e096      	b.n	6b16 <__aeabi_dadd+0x5ce>
    69e8:	2b1f      	cmp	r3, #31
    69ea:	dd00      	ble.n	69ee <__aeabi_dadd+0x4a6>
    69ec:	e09f      	b.n	6b2e <__aeabi_dadd+0x5e6>
    69ee:	2620      	movs	r6, #32
    69f0:	1af3      	subs	r3, r6, r3
    69f2:	0026      	movs	r6, r4
    69f4:	409e      	lsls	r6, r3
    69f6:	469c      	mov	ip, r3
    69f8:	46b3      	mov	fp, r6
    69fa:	4653      	mov	r3, sl
    69fc:	003e      	movs	r6, r7
    69fe:	40de      	lsrs	r6, r3
    6a00:	0033      	movs	r3, r6
    6a02:	465e      	mov	r6, fp
    6a04:	431e      	orrs	r6, r3
    6a06:	4663      	mov	r3, ip
    6a08:	409f      	lsls	r7, r3
    6a0a:	1e7b      	subs	r3, r7, #1
    6a0c:	419f      	sbcs	r7, r3
    6a0e:	4653      	mov	r3, sl
    6a10:	40dc      	lsrs	r4, r3
    6a12:	4337      	orrs	r7, r6
    6a14:	18bf      	adds	r7, r7, r2
    6a16:	4297      	cmp	r7, r2
    6a18:	4192      	sbcs	r2, r2
    6a1a:	1864      	adds	r4, r4, r1
    6a1c:	4252      	negs	r2, r2
    6a1e:	18a4      	adds	r4, r4, r2
    6a20:	0006      	movs	r6, r0
    6a22:	e678      	b.n	6716 <__aeabi_dadd+0x1ce>
    6a24:	4327      	orrs	r7, r4
    6a26:	1e7c      	subs	r4, r7, #1
    6a28:	41a7      	sbcs	r7, r4
    6a2a:	2400      	movs	r4, #0
    6a2c:	e737      	b.n	689e <__aeabi_dadd+0x356>
    6a2e:	4e4c      	ldr	r6, [pc, #304]	; (6b60 <__aeabi_dadd+0x618>)
    6a30:	42b0      	cmp	r0, r6
    6a32:	d036      	beq.n	6aa2 <__aeabi_dadd+0x55a>
    6a34:	2680      	movs	r6, #128	; 0x80
    6a36:	425b      	negs	r3, r3
    6a38:	0436      	lsls	r6, r6, #16
    6a3a:	469a      	mov	sl, r3
    6a3c:	4334      	orrs	r4, r6
    6a3e:	e7cf      	b.n	69e0 <__aeabi_dadd+0x498>
    6a40:	0018      	movs	r0, r3
    6a42:	4310      	orrs	r0, r2
    6a44:	d100      	bne.n	6a48 <__aeabi_dadd+0x500>
    6a46:	e603      	b.n	6650 <__aeabi_dadd+0x108>
    6a48:	1ab8      	subs	r0, r7, r2
    6a4a:	4684      	mov	ip, r0
    6a4c:	4567      	cmp	r7, ip
    6a4e:	41ad      	sbcs	r5, r5
    6a50:	1ae0      	subs	r0, r4, r3
    6a52:	426d      	negs	r5, r5
    6a54:	1b40      	subs	r0, r0, r5
    6a56:	0205      	lsls	r5, r0, #8
    6a58:	d400      	bmi.n	6a5c <__aeabi_dadd+0x514>
    6a5a:	e62c      	b.n	66b6 <__aeabi_dadd+0x16e>
    6a5c:	1bd7      	subs	r7, r2, r7
    6a5e:	42ba      	cmp	r2, r7
    6a60:	4192      	sbcs	r2, r2
    6a62:	1b1c      	subs	r4, r3, r4
    6a64:	4252      	negs	r2, r2
    6a66:	1aa4      	subs	r4, r4, r2
    6a68:	46d8      	mov	r8, fp
    6a6a:	e5f1      	b.n	6650 <__aeabi_dadd+0x108>
    6a6c:	0018      	movs	r0, r3
    6a6e:	4310      	orrs	r0, r2
    6a70:	d100      	bne.n	6a74 <__aeabi_dadd+0x52c>
    6a72:	e763      	b.n	693c <__aeabi_dadd+0x3f4>
    6a74:	08f8      	lsrs	r0, r7, #3
    6a76:	0767      	lsls	r7, r4, #29
    6a78:	4307      	orrs	r7, r0
    6a7a:	2080      	movs	r0, #128	; 0x80
    6a7c:	08e4      	lsrs	r4, r4, #3
    6a7e:	0300      	lsls	r0, r0, #12
    6a80:	4204      	tst	r4, r0
    6a82:	d008      	beq.n	6a96 <__aeabi_dadd+0x54e>
    6a84:	08dd      	lsrs	r5, r3, #3
    6a86:	4205      	tst	r5, r0
    6a88:	d105      	bne.n	6a96 <__aeabi_dadd+0x54e>
    6a8a:	08d2      	lsrs	r2, r2, #3
    6a8c:	0759      	lsls	r1, r3, #29
    6a8e:	4311      	orrs	r1, r2
    6a90:	000f      	movs	r7, r1
    6a92:	002c      	movs	r4, r5
    6a94:	46d8      	mov	r8, fp
    6a96:	0f7b      	lsrs	r3, r7, #29
    6a98:	00e4      	lsls	r4, r4, #3
    6a9a:	431c      	orrs	r4, r3
    6a9c:	00ff      	lsls	r7, r7, #3
    6a9e:	4e30      	ldr	r6, [pc, #192]	; (6b60 <__aeabi_dadd+0x618>)
    6aa0:	e5d6      	b.n	6650 <__aeabi_dadd+0x108>
    6aa2:	000c      	movs	r4, r1
    6aa4:	0017      	movs	r7, r2
    6aa6:	0006      	movs	r6, r0
    6aa8:	e5d2      	b.n	6650 <__aeabi_dadd+0x108>
    6aaa:	2b00      	cmp	r3, #0
    6aac:	d038      	beq.n	6b20 <__aeabi_dadd+0x5d8>
    6aae:	000b      	movs	r3, r1
    6ab0:	4313      	orrs	r3, r2
    6ab2:	d100      	bne.n	6ab6 <__aeabi_dadd+0x56e>
    6ab4:	e742      	b.n	693c <__aeabi_dadd+0x3f4>
    6ab6:	08f8      	lsrs	r0, r7, #3
    6ab8:	0767      	lsls	r7, r4, #29
    6aba:	4307      	orrs	r7, r0
    6abc:	2080      	movs	r0, #128	; 0x80
    6abe:	08e4      	lsrs	r4, r4, #3
    6ac0:	0300      	lsls	r0, r0, #12
    6ac2:	4204      	tst	r4, r0
    6ac4:	d0e7      	beq.n	6a96 <__aeabi_dadd+0x54e>
    6ac6:	08cb      	lsrs	r3, r1, #3
    6ac8:	4203      	tst	r3, r0
    6aca:	d1e4      	bne.n	6a96 <__aeabi_dadd+0x54e>
    6acc:	08d2      	lsrs	r2, r2, #3
    6ace:	0749      	lsls	r1, r1, #29
    6ad0:	4311      	orrs	r1, r2
    6ad2:	000f      	movs	r7, r1
    6ad4:	001c      	movs	r4, r3
    6ad6:	e7de      	b.n	6a96 <__aeabi_dadd+0x54e>
    6ad8:	2700      	movs	r7, #0
    6ada:	2400      	movs	r4, #0
    6adc:	e5d5      	b.n	668a <__aeabi_dadd+0x142>
    6ade:	2100      	movs	r1, #0
    6ae0:	e76b      	b.n	69ba <__aeabi_dadd+0x472>
    6ae2:	2500      	movs	r5, #0
    6ae4:	2700      	movs	r7, #0
    6ae6:	e5f3      	b.n	66d0 <__aeabi_dadd+0x188>
    6ae8:	464e      	mov	r6, r9
    6aea:	0025      	movs	r5, r4
    6aec:	3e20      	subs	r6, #32
    6aee:	40f5      	lsrs	r5, r6
    6af0:	464b      	mov	r3, r9
    6af2:	002e      	movs	r6, r5
    6af4:	2b20      	cmp	r3, #32
    6af6:	d02d      	beq.n	6b54 <__aeabi_dadd+0x60c>
    6af8:	2540      	movs	r5, #64	; 0x40
    6afa:	1aed      	subs	r5, r5, r3
    6afc:	40ac      	lsls	r4, r5
    6afe:	4327      	orrs	r7, r4
    6b00:	1e7c      	subs	r4, r7, #1
    6b02:	41a7      	sbcs	r7, r4
    6b04:	2400      	movs	r4, #0
    6b06:	4337      	orrs	r7, r6
    6b08:	e6c9      	b.n	689e <__aeabi_dadd+0x356>
    6b0a:	2480      	movs	r4, #128	; 0x80
    6b0c:	2500      	movs	r5, #0
    6b0e:	0324      	lsls	r4, r4, #12
    6b10:	4e13      	ldr	r6, [pc, #76]	; (6b60 <__aeabi_dadd+0x618>)
    6b12:	2700      	movs	r7, #0
    6b14:	e5dc      	b.n	66d0 <__aeabi_dadd+0x188>
    6b16:	4327      	orrs	r7, r4
    6b18:	1e7c      	subs	r4, r7, #1
    6b1a:	41a7      	sbcs	r7, r4
    6b1c:	2400      	movs	r4, #0
    6b1e:	e779      	b.n	6a14 <__aeabi_dadd+0x4cc>
    6b20:	000c      	movs	r4, r1
    6b22:	0017      	movs	r7, r2
    6b24:	4e0e      	ldr	r6, [pc, #56]	; (6b60 <__aeabi_dadd+0x618>)
    6b26:	e593      	b.n	6650 <__aeabi_dadd+0x108>
    6b28:	000c      	movs	r4, r1
    6b2a:	0017      	movs	r7, r2
    6b2c:	e590      	b.n	6650 <__aeabi_dadd+0x108>
    6b2e:	4656      	mov	r6, sl
    6b30:	0023      	movs	r3, r4
    6b32:	3e20      	subs	r6, #32
    6b34:	40f3      	lsrs	r3, r6
    6b36:	4699      	mov	r9, r3
    6b38:	4653      	mov	r3, sl
    6b3a:	2b20      	cmp	r3, #32
    6b3c:	d00e      	beq.n	6b5c <__aeabi_dadd+0x614>
    6b3e:	2340      	movs	r3, #64	; 0x40
    6b40:	4656      	mov	r6, sl
    6b42:	1b9b      	subs	r3, r3, r6
    6b44:	409c      	lsls	r4, r3
    6b46:	4327      	orrs	r7, r4
    6b48:	1e7c      	subs	r4, r7, #1
    6b4a:	41a7      	sbcs	r7, r4
    6b4c:	464b      	mov	r3, r9
    6b4e:	2400      	movs	r4, #0
    6b50:	431f      	orrs	r7, r3
    6b52:	e75f      	b.n	6a14 <__aeabi_dadd+0x4cc>
    6b54:	2400      	movs	r4, #0
    6b56:	e7d2      	b.n	6afe <__aeabi_dadd+0x5b6>
    6b58:	0017      	movs	r7, r2
    6b5a:	e5b2      	b.n	66c2 <__aeabi_dadd+0x17a>
    6b5c:	2400      	movs	r4, #0
    6b5e:	e7f2      	b.n	6b46 <__aeabi_dadd+0x5fe>
    6b60:	000007ff 	.word	0x000007ff
    6b64:	ff7fffff 	.word	0xff7fffff

00006b68 <__aeabi_ddiv>:
    6b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b6a:	4657      	mov	r7, sl
    6b6c:	4645      	mov	r5, r8
    6b6e:	46de      	mov	lr, fp
    6b70:	464e      	mov	r6, r9
    6b72:	b5e0      	push	{r5, r6, r7, lr}
    6b74:	004c      	lsls	r4, r1, #1
    6b76:	030e      	lsls	r6, r1, #12
    6b78:	b087      	sub	sp, #28
    6b7a:	4683      	mov	fp, r0
    6b7c:	4692      	mov	sl, r2
    6b7e:	001d      	movs	r5, r3
    6b80:	4680      	mov	r8, r0
    6b82:	0b36      	lsrs	r6, r6, #12
    6b84:	0d64      	lsrs	r4, r4, #21
    6b86:	0fcf      	lsrs	r7, r1, #31
    6b88:	2c00      	cmp	r4, #0
    6b8a:	d04f      	beq.n	6c2c <__aeabi_ddiv+0xc4>
    6b8c:	4b6f      	ldr	r3, [pc, #444]	; (6d4c <__aeabi_ddiv+0x1e4>)
    6b8e:	429c      	cmp	r4, r3
    6b90:	d035      	beq.n	6bfe <__aeabi_ddiv+0x96>
    6b92:	2380      	movs	r3, #128	; 0x80
    6b94:	0f42      	lsrs	r2, r0, #29
    6b96:	041b      	lsls	r3, r3, #16
    6b98:	00f6      	lsls	r6, r6, #3
    6b9a:	4313      	orrs	r3, r2
    6b9c:	4333      	orrs	r3, r6
    6b9e:	4699      	mov	r9, r3
    6ba0:	00c3      	lsls	r3, r0, #3
    6ba2:	4698      	mov	r8, r3
    6ba4:	4b6a      	ldr	r3, [pc, #424]	; (6d50 <__aeabi_ddiv+0x1e8>)
    6ba6:	2600      	movs	r6, #0
    6ba8:	469c      	mov	ip, r3
    6baa:	2300      	movs	r3, #0
    6bac:	4464      	add	r4, ip
    6bae:	9303      	str	r3, [sp, #12]
    6bb0:	032b      	lsls	r3, r5, #12
    6bb2:	0b1b      	lsrs	r3, r3, #12
    6bb4:	469b      	mov	fp, r3
    6bb6:	006b      	lsls	r3, r5, #1
    6bb8:	0fed      	lsrs	r5, r5, #31
    6bba:	4650      	mov	r0, sl
    6bbc:	0d5b      	lsrs	r3, r3, #21
    6bbe:	9501      	str	r5, [sp, #4]
    6bc0:	d05e      	beq.n	6c80 <__aeabi_ddiv+0x118>
    6bc2:	4a62      	ldr	r2, [pc, #392]	; (6d4c <__aeabi_ddiv+0x1e4>)
    6bc4:	4293      	cmp	r3, r2
    6bc6:	d053      	beq.n	6c70 <__aeabi_ddiv+0x108>
    6bc8:	465a      	mov	r2, fp
    6bca:	00d1      	lsls	r1, r2, #3
    6bcc:	2280      	movs	r2, #128	; 0x80
    6bce:	0f40      	lsrs	r0, r0, #29
    6bd0:	0412      	lsls	r2, r2, #16
    6bd2:	4302      	orrs	r2, r0
    6bd4:	430a      	orrs	r2, r1
    6bd6:	4693      	mov	fp, r2
    6bd8:	4652      	mov	r2, sl
    6bda:	00d1      	lsls	r1, r2, #3
    6bdc:	4a5c      	ldr	r2, [pc, #368]	; (6d50 <__aeabi_ddiv+0x1e8>)
    6bde:	4694      	mov	ip, r2
    6be0:	2200      	movs	r2, #0
    6be2:	4463      	add	r3, ip
    6be4:	0038      	movs	r0, r7
    6be6:	4068      	eors	r0, r5
    6be8:	4684      	mov	ip, r0
    6bea:	9002      	str	r0, [sp, #8]
    6bec:	1ae4      	subs	r4, r4, r3
    6bee:	4316      	orrs	r6, r2
    6bf0:	2e0f      	cmp	r6, #15
    6bf2:	d900      	bls.n	6bf6 <__aeabi_ddiv+0x8e>
    6bf4:	e0b4      	b.n	6d60 <__aeabi_ddiv+0x1f8>
    6bf6:	4b57      	ldr	r3, [pc, #348]	; (6d54 <__aeabi_ddiv+0x1ec>)
    6bf8:	00b6      	lsls	r6, r6, #2
    6bfa:	599b      	ldr	r3, [r3, r6]
    6bfc:	469f      	mov	pc, r3
    6bfe:	0003      	movs	r3, r0
    6c00:	4333      	orrs	r3, r6
    6c02:	4699      	mov	r9, r3
    6c04:	d16c      	bne.n	6ce0 <__aeabi_ddiv+0x178>
    6c06:	2300      	movs	r3, #0
    6c08:	4698      	mov	r8, r3
    6c0a:	3302      	adds	r3, #2
    6c0c:	2608      	movs	r6, #8
    6c0e:	9303      	str	r3, [sp, #12]
    6c10:	e7ce      	b.n	6bb0 <__aeabi_ddiv+0x48>
    6c12:	46cb      	mov	fp, r9
    6c14:	4641      	mov	r1, r8
    6c16:	9a03      	ldr	r2, [sp, #12]
    6c18:	9701      	str	r7, [sp, #4]
    6c1a:	2a02      	cmp	r2, #2
    6c1c:	d165      	bne.n	6cea <__aeabi_ddiv+0x182>
    6c1e:	9b01      	ldr	r3, [sp, #4]
    6c20:	4c4a      	ldr	r4, [pc, #296]	; (6d4c <__aeabi_ddiv+0x1e4>)
    6c22:	469c      	mov	ip, r3
    6c24:	2300      	movs	r3, #0
    6c26:	2200      	movs	r2, #0
    6c28:	4698      	mov	r8, r3
    6c2a:	e06b      	b.n	6d04 <__aeabi_ddiv+0x19c>
    6c2c:	0003      	movs	r3, r0
    6c2e:	4333      	orrs	r3, r6
    6c30:	4699      	mov	r9, r3
    6c32:	d04e      	beq.n	6cd2 <__aeabi_ddiv+0x16a>
    6c34:	2e00      	cmp	r6, #0
    6c36:	d100      	bne.n	6c3a <__aeabi_ddiv+0xd2>
    6c38:	e1bc      	b.n	6fb4 <__aeabi_ddiv+0x44c>
    6c3a:	0030      	movs	r0, r6
    6c3c:	f001 fb08 	bl	8250 <__clzsi2>
    6c40:	0003      	movs	r3, r0
    6c42:	3b0b      	subs	r3, #11
    6c44:	2b1c      	cmp	r3, #28
    6c46:	dd00      	ble.n	6c4a <__aeabi_ddiv+0xe2>
    6c48:	e1ac      	b.n	6fa4 <__aeabi_ddiv+0x43c>
    6c4a:	221d      	movs	r2, #29
    6c4c:	1ad3      	subs	r3, r2, r3
    6c4e:	465a      	mov	r2, fp
    6c50:	0001      	movs	r1, r0
    6c52:	40da      	lsrs	r2, r3
    6c54:	3908      	subs	r1, #8
    6c56:	408e      	lsls	r6, r1
    6c58:	0013      	movs	r3, r2
    6c5a:	4333      	orrs	r3, r6
    6c5c:	4699      	mov	r9, r3
    6c5e:	465b      	mov	r3, fp
    6c60:	408b      	lsls	r3, r1
    6c62:	4698      	mov	r8, r3
    6c64:	2300      	movs	r3, #0
    6c66:	4c3c      	ldr	r4, [pc, #240]	; (6d58 <__aeabi_ddiv+0x1f0>)
    6c68:	2600      	movs	r6, #0
    6c6a:	1a24      	subs	r4, r4, r0
    6c6c:	9303      	str	r3, [sp, #12]
    6c6e:	e79f      	b.n	6bb0 <__aeabi_ddiv+0x48>
    6c70:	4651      	mov	r1, sl
    6c72:	465a      	mov	r2, fp
    6c74:	4311      	orrs	r1, r2
    6c76:	d129      	bne.n	6ccc <__aeabi_ddiv+0x164>
    6c78:	2200      	movs	r2, #0
    6c7a:	4693      	mov	fp, r2
    6c7c:	3202      	adds	r2, #2
    6c7e:	e7b1      	b.n	6be4 <__aeabi_ddiv+0x7c>
    6c80:	4659      	mov	r1, fp
    6c82:	4301      	orrs	r1, r0
    6c84:	d01e      	beq.n	6cc4 <__aeabi_ddiv+0x15c>
    6c86:	465b      	mov	r3, fp
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d100      	bne.n	6c8e <__aeabi_ddiv+0x126>
    6c8c:	e19e      	b.n	6fcc <__aeabi_ddiv+0x464>
    6c8e:	4658      	mov	r0, fp
    6c90:	f001 fade 	bl	8250 <__clzsi2>
    6c94:	0003      	movs	r3, r0
    6c96:	3b0b      	subs	r3, #11
    6c98:	2b1c      	cmp	r3, #28
    6c9a:	dd00      	ble.n	6c9e <__aeabi_ddiv+0x136>
    6c9c:	e18f      	b.n	6fbe <__aeabi_ddiv+0x456>
    6c9e:	0002      	movs	r2, r0
    6ca0:	4659      	mov	r1, fp
    6ca2:	3a08      	subs	r2, #8
    6ca4:	4091      	lsls	r1, r2
    6ca6:	468b      	mov	fp, r1
    6ca8:	211d      	movs	r1, #29
    6caa:	1acb      	subs	r3, r1, r3
    6cac:	4651      	mov	r1, sl
    6cae:	40d9      	lsrs	r1, r3
    6cb0:	000b      	movs	r3, r1
    6cb2:	4659      	mov	r1, fp
    6cb4:	430b      	orrs	r3, r1
    6cb6:	4651      	mov	r1, sl
    6cb8:	469b      	mov	fp, r3
    6cba:	4091      	lsls	r1, r2
    6cbc:	4b26      	ldr	r3, [pc, #152]	; (6d58 <__aeabi_ddiv+0x1f0>)
    6cbe:	2200      	movs	r2, #0
    6cc0:	1a1b      	subs	r3, r3, r0
    6cc2:	e78f      	b.n	6be4 <__aeabi_ddiv+0x7c>
    6cc4:	2300      	movs	r3, #0
    6cc6:	2201      	movs	r2, #1
    6cc8:	469b      	mov	fp, r3
    6cca:	e78b      	b.n	6be4 <__aeabi_ddiv+0x7c>
    6ccc:	4651      	mov	r1, sl
    6cce:	2203      	movs	r2, #3
    6cd0:	e788      	b.n	6be4 <__aeabi_ddiv+0x7c>
    6cd2:	2300      	movs	r3, #0
    6cd4:	4698      	mov	r8, r3
    6cd6:	3301      	adds	r3, #1
    6cd8:	2604      	movs	r6, #4
    6cda:	2400      	movs	r4, #0
    6cdc:	9303      	str	r3, [sp, #12]
    6cde:	e767      	b.n	6bb0 <__aeabi_ddiv+0x48>
    6ce0:	2303      	movs	r3, #3
    6ce2:	46b1      	mov	r9, r6
    6ce4:	9303      	str	r3, [sp, #12]
    6ce6:	260c      	movs	r6, #12
    6ce8:	e762      	b.n	6bb0 <__aeabi_ddiv+0x48>
    6cea:	2a03      	cmp	r2, #3
    6cec:	d100      	bne.n	6cf0 <__aeabi_ddiv+0x188>
    6cee:	e25c      	b.n	71aa <__aeabi_ddiv+0x642>
    6cf0:	9b01      	ldr	r3, [sp, #4]
    6cf2:	2a01      	cmp	r2, #1
    6cf4:	d000      	beq.n	6cf8 <__aeabi_ddiv+0x190>
    6cf6:	e1e4      	b.n	70c2 <__aeabi_ddiv+0x55a>
    6cf8:	4013      	ands	r3, r2
    6cfa:	469c      	mov	ip, r3
    6cfc:	2300      	movs	r3, #0
    6cfe:	2400      	movs	r4, #0
    6d00:	2200      	movs	r2, #0
    6d02:	4698      	mov	r8, r3
    6d04:	2100      	movs	r1, #0
    6d06:	0312      	lsls	r2, r2, #12
    6d08:	0b13      	lsrs	r3, r2, #12
    6d0a:	0d0a      	lsrs	r2, r1, #20
    6d0c:	0512      	lsls	r2, r2, #20
    6d0e:	431a      	orrs	r2, r3
    6d10:	0523      	lsls	r3, r4, #20
    6d12:	4c12      	ldr	r4, [pc, #72]	; (6d5c <__aeabi_ddiv+0x1f4>)
    6d14:	4640      	mov	r0, r8
    6d16:	4022      	ands	r2, r4
    6d18:	4313      	orrs	r3, r2
    6d1a:	4662      	mov	r2, ip
    6d1c:	005b      	lsls	r3, r3, #1
    6d1e:	07d2      	lsls	r2, r2, #31
    6d20:	085b      	lsrs	r3, r3, #1
    6d22:	4313      	orrs	r3, r2
    6d24:	0019      	movs	r1, r3
    6d26:	b007      	add	sp, #28
    6d28:	bc3c      	pop	{r2, r3, r4, r5}
    6d2a:	4690      	mov	r8, r2
    6d2c:	4699      	mov	r9, r3
    6d2e:	46a2      	mov	sl, r4
    6d30:	46ab      	mov	fp, r5
    6d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d34:	2300      	movs	r3, #0
    6d36:	2280      	movs	r2, #128	; 0x80
    6d38:	469c      	mov	ip, r3
    6d3a:	0312      	lsls	r2, r2, #12
    6d3c:	4698      	mov	r8, r3
    6d3e:	4c03      	ldr	r4, [pc, #12]	; (6d4c <__aeabi_ddiv+0x1e4>)
    6d40:	e7e0      	b.n	6d04 <__aeabi_ddiv+0x19c>
    6d42:	2300      	movs	r3, #0
    6d44:	4c01      	ldr	r4, [pc, #4]	; (6d4c <__aeabi_ddiv+0x1e4>)
    6d46:	2200      	movs	r2, #0
    6d48:	4698      	mov	r8, r3
    6d4a:	e7db      	b.n	6d04 <__aeabi_ddiv+0x19c>
    6d4c:	000007ff 	.word	0x000007ff
    6d50:	fffffc01 	.word	0xfffffc01
    6d54:	0000e098 	.word	0x0000e098
    6d58:	fffffc0d 	.word	0xfffffc0d
    6d5c:	800fffff 	.word	0x800fffff
    6d60:	45d9      	cmp	r9, fp
    6d62:	d900      	bls.n	6d66 <__aeabi_ddiv+0x1fe>
    6d64:	e139      	b.n	6fda <__aeabi_ddiv+0x472>
    6d66:	d100      	bne.n	6d6a <__aeabi_ddiv+0x202>
    6d68:	e134      	b.n	6fd4 <__aeabi_ddiv+0x46c>
    6d6a:	2300      	movs	r3, #0
    6d6c:	4646      	mov	r6, r8
    6d6e:	464d      	mov	r5, r9
    6d70:	469a      	mov	sl, r3
    6d72:	3c01      	subs	r4, #1
    6d74:	465b      	mov	r3, fp
    6d76:	0e0a      	lsrs	r2, r1, #24
    6d78:	021b      	lsls	r3, r3, #8
    6d7a:	431a      	orrs	r2, r3
    6d7c:	020b      	lsls	r3, r1, #8
    6d7e:	0c17      	lsrs	r7, r2, #16
    6d80:	9303      	str	r3, [sp, #12]
    6d82:	0413      	lsls	r3, r2, #16
    6d84:	0c1b      	lsrs	r3, r3, #16
    6d86:	0039      	movs	r1, r7
    6d88:	0028      	movs	r0, r5
    6d8a:	4690      	mov	r8, r2
    6d8c:	9301      	str	r3, [sp, #4]
    6d8e:	f7ff faa1 	bl	62d4 <__udivsi3>
    6d92:	0002      	movs	r2, r0
    6d94:	9b01      	ldr	r3, [sp, #4]
    6d96:	4683      	mov	fp, r0
    6d98:	435a      	muls	r2, r3
    6d9a:	0028      	movs	r0, r5
    6d9c:	0039      	movs	r1, r7
    6d9e:	4691      	mov	r9, r2
    6da0:	f7ff fb1e 	bl	63e0 <__aeabi_uidivmod>
    6da4:	0c35      	lsrs	r5, r6, #16
    6da6:	0409      	lsls	r1, r1, #16
    6da8:	430d      	orrs	r5, r1
    6daa:	45a9      	cmp	r9, r5
    6dac:	d90d      	bls.n	6dca <__aeabi_ddiv+0x262>
    6dae:	465b      	mov	r3, fp
    6db0:	4445      	add	r5, r8
    6db2:	3b01      	subs	r3, #1
    6db4:	45a8      	cmp	r8, r5
    6db6:	d900      	bls.n	6dba <__aeabi_ddiv+0x252>
    6db8:	e13a      	b.n	7030 <__aeabi_ddiv+0x4c8>
    6dba:	45a9      	cmp	r9, r5
    6dbc:	d800      	bhi.n	6dc0 <__aeabi_ddiv+0x258>
    6dbe:	e137      	b.n	7030 <__aeabi_ddiv+0x4c8>
    6dc0:	2302      	movs	r3, #2
    6dc2:	425b      	negs	r3, r3
    6dc4:	469c      	mov	ip, r3
    6dc6:	4445      	add	r5, r8
    6dc8:	44e3      	add	fp, ip
    6dca:	464b      	mov	r3, r9
    6dcc:	1aeb      	subs	r3, r5, r3
    6dce:	0039      	movs	r1, r7
    6dd0:	0018      	movs	r0, r3
    6dd2:	9304      	str	r3, [sp, #16]
    6dd4:	f7ff fa7e 	bl	62d4 <__udivsi3>
    6dd8:	9b01      	ldr	r3, [sp, #4]
    6dda:	0005      	movs	r5, r0
    6ddc:	4343      	muls	r3, r0
    6dde:	0039      	movs	r1, r7
    6de0:	9804      	ldr	r0, [sp, #16]
    6de2:	4699      	mov	r9, r3
    6de4:	f7ff fafc 	bl	63e0 <__aeabi_uidivmod>
    6de8:	0433      	lsls	r3, r6, #16
    6dea:	0409      	lsls	r1, r1, #16
    6dec:	0c1b      	lsrs	r3, r3, #16
    6dee:	430b      	orrs	r3, r1
    6df0:	4599      	cmp	r9, r3
    6df2:	d909      	bls.n	6e08 <__aeabi_ddiv+0x2a0>
    6df4:	4443      	add	r3, r8
    6df6:	1e6a      	subs	r2, r5, #1
    6df8:	4598      	cmp	r8, r3
    6dfa:	d900      	bls.n	6dfe <__aeabi_ddiv+0x296>
    6dfc:	e11a      	b.n	7034 <__aeabi_ddiv+0x4cc>
    6dfe:	4599      	cmp	r9, r3
    6e00:	d800      	bhi.n	6e04 <__aeabi_ddiv+0x29c>
    6e02:	e117      	b.n	7034 <__aeabi_ddiv+0x4cc>
    6e04:	3d02      	subs	r5, #2
    6e06:	4443      	add	r3, r8
    6e08:	464a      	mov	r2, r9
    6e0a:	1a9b      	subs	r3, r3, r2
    6e0c:	465a      	mov	r2, fp
    6e0e:	0412      	lsls	r2, r2, #16
    6e10:	432a      	orrs	r2, r5
    6e12:	9903      	ldr	r1, [sp, #12]
    6e14:	4693      	mov	fp, r2
    6e16:	0c10      	lsrs	r0, r2, #16
    6e18:	0c0a      	lsrs	r2, r1, #16
    6e1a:	4691      	mov	r9, r2
    6e1c:	0409      	lsls	r1, r1, #16
    6e1e:	465a      	mov	r2, fp
    6e20:	0c09      	lsrs	r1, r1, #16
    6e22:	464e      	mov	r6, r9
    6e24:	000d      	movs	r5, r1
    6e26:	0412      	lsls	r2, r2, #16
    6e28:	0c12      	lsrs	r2, r2, #16
    6e2a:	4345      	muls	r5, r0
    6e2c:	9105      	str	r1, [sp, #20]
    6e2e:	4351      	muls	r1, r2
    6e30:	4372      	muls	r2, r6
    6e32:	4370      	muls	r0, r6
    6e34:	1952      	adds	r2, r2, r5
    6e36:	0c0e      	lsrs	r6, r1, #16
    6e38:	18b2      	adds	r2, r6, r2
    6e3a:	4295      	cmp	r5, r2
    6e3c:	d903      	bls.n	6e46 <__aeabi_ddiv+0x2de>
    6e3e:	2580      	movs	r5, #128	; 0x80
    6e40:	026d      	lsls	r5, r5, #9
    6e42:	46ac      	mov	ip, r5
    6e44:	4460      	add	r0, ip
    6e46:	0c15      	lsrs	r5, r2, #16
    6e48:	0409      	lsls	r1, r1, #16
    6e4a:	0412      	lsls	r2, r2, #16
    6e4c:	0c09      	lsrs	r1, r1, #16
    6e4e:	1828      	adds	r0, r5, r0
    6e50:	1852      	adds	r2, r2, r1
    6e52:	4283      	cmp	r3, r0
    6e54:	d200      	bcs.n	6e58 <__aeabi_ddiv+0x2f0>
    6e56:	e0ce      	b.n	6ff6 <__aeabi_ddiv+0x48e>
    6e58:	d100      	bne.n	6e5c <__aeabi_ddiv+0x2f4>
    6e5a:	e0c8      	b.n	6fee <__aeabi_ddiv+0x486>
    6e5c:	1a1d      	subs	r5, r3, r0
    6e5e:	4653      	mov	r3, sl
    6e60:	1a9e      	subs	r6, r3, r2
    6e62:	45b2      	cmp	sl, r6
    6e64:	4192      	sbcs	r2, r2
    6e66:	4252      	negs	r2, r2
    6e68:	1aab      	subs	r3, r5, r2
    6e6a:	469a      	mov	sl, r3
    6e6c:	4598      	cmp	r8, r3
    6e6e:	d100      	bne.n	6e72 <__aeabi_ddiv+0x30a>
    6e70:	e117      	b.n	70a2 <__aeabi_ddiv+0x53a>
    6e72:	0039      	movs	r1, r7
    6e74:	0018      	movs	r0, r3
    6e76:	f7ff fa2d 	bl	62d4 <__udivsi3>
    6e7a:	9b01      	ldr	r3, [sp, #4]
    6e7c:	0005      	movs	r5, r0
    6e7e:	4343      	muls	r3, r0
    6e80:	0039      	movs	r1, r7
    6e82:	4650      	mov	r0, sl
    6e84:	9304      	str	r3, [sp, #16]
    6e86:	f7ff faab 	bl	63e0 <__aeabi_uidivmod>
    6e8a:	9804      	ldr	r0, [sp, #16]
    6e8c:	040b      	lsls	r3, r1, #16
    6e8e:	0c31      	lsrs	r1, r6, #16
    6e90:	4319      	orrs	r1, r3
    6e92:	4288      	cmp	r0, r1
    6e94:	d909      	bls.n	6eaa <__aeabi_ddiv+0x342>
    6e96:	4441      	add	r1, r8
    6e98:	1e6b      	subs	r3, r5, #1
    6e9a:	4588      	cmp	r8, r1
    6e9c:	d900      	bls.n	6ea0 <__aeabi_ddiv+0x338>
    6e9e:	e107      	b.n	70b0 <__aeabi_ddiv+0x548>
    6ea0:	4288      	cmp	r0, r1
    6ea2:	d800      	bhi.n	6ea6 <__aeabi_ddiv+0x33e>
    6ea4:	e104      	b.n	70b0 <__aeabi_ddiv+0x548>
    6ea6:	3d02      	subs	r5, #2
    6ea8:	4441      	add	r1, r8
    6eaa:	9b04      	ldr	r3, [sp, #16]
    6eac:	1acb      	subs	r3, r1, r3
    6eae:	0018      	movs	r0, r3
    6eb0:	0039      	movs	r1, r7
    6eb2:	9304      	str	r3, [sp, #16]
    6eb4:	f7ff fa0e 	bl	62d4 <__udivsi3>
    6eb8:	9b01      	ldr	r3, [sp, #4]
    6eba:	4682      	mov	sl, r0
    6ebc:	4343      	muls	r3, r0
    6ebe:	0039      	movs	r1, r7
    6ec0:	9804      	ldr	r0, [sp, #16]
    6ec2:	9301      	str	r3, [sp, #4]
    6ec4:	f7ff fa8c 	bl	63e0 <__aeabi_uidivmod>
    6ec8:	9801      	ldr	r0, [sp, #4]
    6eca:	040b      	lsls	r3, r1, #16
    6ecc:	0431      	lsls	r1, r6, #16
    6ece:	0c09      	lsrs	r1, r1, #16
    6ed0:	4319      	orrs	r1, r3
    6ed2:	4288      	cmp	r0, r1
    6ed4:	d90d      	bls.n	6ef2 <__aeabi_ddiv+0x38a>
    6ed6:	4653      	mov	r3, sl
    6ed8:	4441      	add	r1, r8
    6eda:	3b01      	subs	r3, #1
    6edc:	4588      	cmp	r8, r1
    6ede:	d900      	bls.n	6ee2 <__aeabi_ddiv+0x37a>
    6ee0:	e0e8      	b.n	70b4 <__aeabi_ddiv+0x54c>
    6ee2:	4288      	cmp	r0, r1
    6ee4:	d800      	bhi.n	6ee8 <__aeabi_ddiv+0x380>
    6ee6:	e0e5      	b.n	70b4 <__aeabi_ddiv+0x54c>
    6ee8:	2302      	movs	r3, #2
    6eea:	425b      	negs	r3, r3
    6eec:	469c      	mov	ip, r3
    6eee:	4441      	add	r1, r8
    6ef0:	44e2      	add	sl, ip
    6ef2:	9b01      	ldr	r3, [sp, #4]
    6ef4:	042d      	lsls	r5, r5, #16
    6ef6:	1ace      	subs	r6, r1, r3
    6ef8:	4651      	mov	r1, sl
    6efa:	4329      	orrs	r1, r5
    6efc:	9d05      	ldr	r5, [sp, #20]
    6efe:	464f      	mov	r7, r9
    6f00:	002a      	movs	r2, r5
    6f02:	040b      	lsls	r3, r1, #16
    6f04:	0c08      	lsrs	r0, r1, #16
    6f06:	0c1b      	lsrs	r3, r3, #16
    6f08:	435a      	muls	r2, r3
    6f0a:	4345      	muls	r5, r0
    6f0c:	437b      	muls	r3, r7
    6f0e:	4378      	muls	r0, r7
    6f10:	195b      	adds	r3, r3, r5
    6f12:	0c17      	lsrs	r7, r2, #16
    6f14:	18fb      	adds	r3, r7, r3
    6f16:	429d      	cmp	r5, r3
    6f18:	d903      	bls.n	6f22 <__aeabi_ddiv+0x3ba>
    6f1a:	2580      	movs	r5, #128	; 0x80
    6f1c:	026d      	lsls	r5, r5, #9
    6f1e:	46ac      	mov	ip, r5
    6f20:	4460      	add	r0, ip
    6f22:	0c1d      	lsrs	r5, r3, #16
    6f24:	0412      	lsls	r2, r2, #16
    6f26:	041b      	lsls	r3, r3, #16
    6f28:	0c12      	lsrs	r2, r2, #16
    6f2a:	1828      	adds	r0, r5, r0
    6f2c:	189b      	adds	r3, r3, r2
    6f2e:	4286      	cmp	r6, r0
    6f30:	d200      	bcs.n	6f34 <__aeabi_ddiv+0x3cc>
    6f32:	e093      	b.n	705c <__aeabi_ddiv+0x4f4>
    6f34:	d100      	bne.n	6f38 <__aeabi_ddiv+0x3d0>
    6f36:	e08e      	b.n	7056 <__aeabi_ddiv+0x4ee>
    6f38:	2301      	movs	r3, #1
    6f3a:	4319      	orrs	r1, r3
    6f3c:	4ba0      	ldr	r3, [pc, #640]	; (71c0 <__aeabi_ddiv+0x658>)
    6f3e:	18e3      	adds	r3, r4, r3
    6f40:	2b00      	cmp	r3, #0
    6f42:	dc00      	bgt.n	6f46 <__aeabi_ddiv+0x3de>
    6f44:	e099      	b.n	707a <__aeabi_ddiv+0x512>
    6f46:	074a      	lsls	r2, r1, #29
    6f48:	d000      	beq.n	6f4c <__aeabi_ddiv+0x3e4>
    6f4a:	e09e      	b.n	708a <__aeabi_ddiv+0x522>
    6f4c:	465a      	mov	r2, fp
    6f4e:	01d2      	lsls	r2, r2, #7
    6f50:	d506      	bpl.n	6f60 <__aeabi_ddiv+0x3f8>
    6f52:	465a      	mov	r2, fp
    6f54:	4b9b      	ldr	r3, [pc, #620]	; (71c4 <__aeabi_ddiv+0x65c>)
    6f56:	401a      	ands	r2, r3
    6f58:	2380      	movs	r3, #128	; 0x80
    6f5a:	4693      	mov	fp, r2
    6f5c:	00db      	lsls	r3, r3, #3
    6f5e:	18e3      	adds	r3, r4, r3
    6f60:	4a99      	ldr	r2, [pc, #612]	; (71c8 <__aeabi_ddiv+0x660>)
    6f62:	4293      	cmp	r3, r2
    6f64:	dd68      	ble.n	7038 <__aeabi_ddiv+0x4d0>
    6f66:	2301      	movs	r3, #1
    6f68:	9a02      	ldr	r2, [sp, #8]
    6f6a:	4c98      	ldr	r4, [pc, #608]	; (71cc <__aeabi_ddiv+0x664>)
    6f6c:	401a      	ands	r2, r3
    6f6e:	2300      	movs	r3, #0
    6f70:	4694      	mov	ip, r2
    6f72:	4698      	mov	r8, r3
    6f74:	2200      	movs	r2, #0
    6f76:	e6c5      	b.n	6d04 <__aeabi_ddiv+0x19c>
    6f78:	2280      	movs	r2, #128	; 0x80
    6f7a:	464b      	mov	r3, r9
    6f7c:	0312      	lsls	r2, r2, #12
    6f7e:	4213      	tst	r3, r2
    6f80:	d00a      	beq.n	6f98 <__aeabi_ddiv+0x430>
    6f82:	465b      	mov	r3, fp
    6f84:	4213      	tst	r3, r2
    6f86:	d106      	bne.n	6f96 <__aeabi_ddiv+0x42e>
    6f88:	431a      	orrs	r2, r3
    6f8a:	0312      	lsls	r2, r2, #12
    6f8c:	0b12      	lsrs	r2, r2, #12
    6f8e:	46ac      	mov	ip, r5
    6f90:	4688      	mov	r8, r1
    6f92:	4c8e      	ldr	r4, [pc, #568]	; (71cc <__aeabi_ddiv+0x664>)
    6f94:	e6b6      	b.n	6d04 <__aeabi_ddiv+0x19c>
    6f96:	464b      	mov	r3, r9
    6f98:	431a      	orrs	r2, r3
    6f9a:	0312      	lsls	r2, r2, #12
    6f9c:	0b12      	lsrs	r2, r2, #12
    6f9e:	46bc      	mov	ip, r7
    6fa0:	4c8a      	ldr	r4, [pc, #552]	; (71cc <__aeabi_ddiv+0x664>)
    6fa2:	e6af      	b.n	6d04 <__aeabi_ddiv+0x19c>
    6fa4:	0003      	movs	r3, r0
    6fa6:	465a      	mov	r2, fp
    6fa8:	3b28      	subs	r3, #40	; 0x28
    6faa:	409a      	lsls	r2, r3
    6fac:	2300      	movs	r3, #0
    6fae:	4691      	mov	r9, r2
    6fb0:	4698      	mov	r8, r3
    6fb2:	e657      	b.n	6c64 <__aeabi_ddiv+0xfc>
    6fb4:	4658      	mov	r0, fp
    6fb6:	f001 f94b 	bl	8250 <__clzsi2>
    6fba:	3020      	adds	r0, #32
    6fbc:	e640      	b.n	6c40 <__aeabi_ddiv+0xd8>
    6fbe:	0003      	movs	r3, r0
    6fc0:	4652      	mov	r2, sl
    6fc2:	3b28      	subs	r3, #40	; 0x28
    6fc4:	409a      	lsls	r2, r3
    6fc6:	2100      	movs	r1, #0
    6fc8:	4693      	mov	fp, r2
    6fca:	e677      	b.n	6cbc <__aeabi_ddiv+0x154>
    6fcc:	f001 f940 	bl	8250 <__clzsi2>
    6fd0:	3020      	adds	r0, #32
    6fd2:	e65f      	b.n	6c94 <__aeabi_ddiv+0x12c>
    6fd4:	4588      	cmp	r8, r1
    6fd6:	d200      	bcs.n	6fda <__aeabi_ddiv+0x472>
    6fd8:	e6c7      	b.n	6d6a <__aeabi_ddiv+0x202>
    6fda:	464b      	mov	r3, r9
    6fdc:	07de      	lsls	r6, r3, #31
    6fde:	085d      	lsrs	r5, r3, #1
    6fe0:	4643      	mov	r3, r8
    6fe2:	085b      	lsrs	r3, r3, #1
    6fe4:	431e      	orrs	r6, r3
    6fe6:	4643      	mov	r3, r8
    6fe8:	07db      	lsls	r3, r3, #31
    6fea:	469a      	mov	sl, r3
    6fec:	e6c2      	b.n	6d74 <__aeabi_ddiv+0x20c>
    6fee:	2500      	movs	r5, #0
    6ff0:	4592      	cmp	sl, r2
    6ff2:	d300      	bcc.n	6ff6 <__aeabi_ddiv+0x48e>
    6ff4:	e733      	b.n	6e5e <__aeabi_ddiv+0x2f6>
    6ff6:	9e03      	ldr	r6, [sp, #12]
    6ff8:	4659      	mov	r1, fp
    6ffa:	46b4      	mov	ip, r6
    6ffc:	44e2      	add	sl, ip
    6ffe:	45b2      	cmp	sl, r6
    7000:	41ad      	sbcs	r5, r5
    7002:	426d      	negs	r5, r5
    7004:	4445      	add	r5, r8
    7006:	18eb      	adds	r3, r5, r3
    7008:	3901      	subs	r1, #1
    700a:	4598      	cmp	r8, r3
    700c:	d207      	bcs.n	701e <__aeabi_ddiv+0x4b6>
    700e:	4298      	cmp	r0, r3
    7010:	d900      	bls.n	7014 <__aeabi_ddiv+0x4ac>
    7012:	e07f      	b.n	7114 <__aeabi_ddiv+0x5ac>
    7014:	d100      	bne.n	7018 <__aeabi_ddiv+0x4b0>
    7016:	e0bc      	b.n	7192 <__aeabi_ddiv+0x62a>
    7018:	1a1d      	subs	r5, r3, r0
    701a:	468b      	mov	fp, r1
    701c:	e71f      	b.n	6e5e <__aeabi_ddiv+0x2f6>
    701e:	4598      	cmp	r8, r3
    7020:	d1fa      	bne.n	7018 <__aeabi_ddiv+0x4b0>
    7022:	9d03      	ldr	r5, [sp, #12]
    7024:	4555      	cmp	r5, sl
    7026:	d9f2      	bls.n	700e <__aeabi_ddiv+0x4a6>
    7028:	4643      	mov	r3, r8
    702a:	468b      	mov	fp, r1
    702c:	1a1d      	subs	r5, r3, r0
    702e:	e716      	b.n	6e5e <__aeabi_ddiv+0x2f6>
    7030:	469b      	mov	fp, r3
    7032:	e6ca      	b.n	6dca <__aeabi_ddiv+0x262>
    7034:	0015      	movs	r5, r2
    7036:	e6e7      	b.n	6e08 <__aeabi_ddiv+0x2a0>
    7038:	465a      	mov	r2, fp
    703a:	08c9      	lsrs	r1, r1, #3
    703c:	0752      	lsls	r2, r2, #29
    703e:	430a      	orrs	r2, r1
    7040:	055b      	lsls	r3, r3, #21
    7042:	4690      	mov	r8, r2
    7044:	0d5c      	lsrs	r4, r3, #21
    7046:	465a      	mov	r2, fp
    7048:	2301      	movs	r3, #1
    704a:	9902      	ldr	r1, [sp, #8]
    704c:	0252      	lsls	r2, r2, #9
    704e:	4019      	ands	r1, r3
    7050:	0b12      	lsrs	r2, r2, #12
    7052:	468c      	mov	ip, r1
    7054:	e656      	b.n	6d04 <__aeabi_ddiv+0x19c>
    7056:	2b00      	cmp	r3, #0
    7058:	d100      	bne.n	705c <__aeabi_ddiv+0x4f4>
    705a:	e76f      	b.n	6f3c <__aeabi_ddiv+0x3d4>
    705c:	4446      	add	r6, r8
    705e:	1e4a      	subs	r2, r1, #1
    7060:	45b0      	cmp	r8, r6
    7062:	d929      	bls.n	70b8 <__aeabi_ddiv+0x550>
    7064:	0011      	movs	r1, r2
    7066:	4286      	cmp	r6, r0
    7068:	d000      	beq.n	706c <__aeabi_ddiv+0x504>
    706a:	e765      	b.n	6f38 <__aeabi_ddiv+0x3d0>
    706c:	9a03      	ldr	r2, [sp, #12]
    706e:	4293      	cmp	r3, r2
    7070:	d000      	beq.n	7074 <__aeabi_ddiv+0x50c>
    7072:	e761      	b.n	6f38 <__aeabi_ddiv+0x3d0>
    7074:	e762      	b.n	6f3c <__aeabi_ddiv+0x3d4>
    7076:	2101      	movs	r1, #1
    7078:	4249      	negs	r1, r1
    707a:	2001      	movs	r0, #1
    707c:	1ac2      	subs	r2, r0, r3
    707e:	2a38      	cmp	r2, #56	; 0x38
    7080:	dd21      	ble.n	70c6 <__aeabi_ddiv+0x55e>
    7082:	9b02      	ldr	r3, [sp, #8]
    7084:	4003      	ands	r3, r0
    7086:	469c      	mov	ip, r3
    7088:	e638      	b.n	6cfc <__aeabi_ddiv+0x194>
    708a:	220f      	movs	r2, #15
    708c:	400a      	ands	r2, r1
    708e:	2a04      	cmp	r2, #4
    7090:	d100      	bne.n	7094 <__aeabi_ddiv+0x52c>
    7092:	e75b      	b.n	6f4c <__aeabi_ddiv+0x3e4>
    7094:	000a      	movs	r2, r1
    7096:	1d11      	adds	r1, r2, #4
    7098:	4291      	cmp	r1, r2
    709a:	4192      	sbcs	r2, r2
    709c:	4252      	negs	r2, r2
    709e:	4493      	add	fp, r2
    70a0:	e754      	b.n	6f4c <__aeabi_ddiv+0x3e4>
    70a2:	4b47      	ldr	r3, [pc, #284]	; (71c0 <__aeabi_ddiv+0x658>)
    70a4:	18e3      	adds	r3, r4, r3
    70a6:	2b00      	cmp	r3, #0
    70a8:	dde5      	ble.n	7076 <__aeabi_ddiv+0x50e>
    70aa:	2201      	movs	r2, #1
    70ac:	4252      	negs	r2, r2
    70ae:	e7f2      	b.n	7096 <__aeabi_ddiv+0x52e>
    70b0:	001d      	movs	r5, r3
    70b2:	e6fa      	b.n	6eaa <__aeabi_ddiv+0x342>
    70b4:	469a      	mov	sl, r3
    70b6:	e71c      	b.n	6ef2 <__aeabi_ddiv+0x38a>
    70b8:	42b0      	cmp	r0, r6
    70ba:	d839      	bhi.n	7130 <__aeabi_ddiv+0x5c8>
    70bc:	d06e      	beq.n	719c <__aeabi_ddiv+0x634>
    70be:	0011      	movs	r1, r2
    70c0:	e73a      	b.n	6f38 <__aeabi_ddiv+0x3d0>
    70c2:	9302      	str	r3, [sp, #8]
    70c4:	e73a      	b.n	6f3c <__aeabi_ddiv+0x3d4>
    70c6:	2a1f      	cmp	r2, #31
    70c8:	dc3c      	bgt.n	7144 <__aeabi_ddiv+0x5dc>
    70ca:	2320      	movs	r3, #32
    70cc:	1a9b      	subs	r3, r3, r2
    70ce:	000c      	movs	r4, r1
    70d0:	4658      	mov	r0, fp
    70d2:	4099      	lsls	r1, r3
    70d4:	4098      	lsls	r0, r3
    70d6:	1e4b      	subs	r3, r1, #1
    70d8:	4199      	sbcs	r1, r3
    70da:	465b      	mov	r3, fp
    70dc:	40d4      	lsrs	r4, r2
    70de:	40d3      	lsrs	r3, r2
    70e0:	4320      	orrs	r0, r4
    70e2:	4308      	orrs	r0, r1
    70e4:	001a      	movs	r2, r3
    70e6:	0743      	lsls	r3, r0, #29
    70e8:	d009      	beq.n	70fe <__aeabi_ddiv+0x596>
    70ea:	230f      	movs	r3, #15
    70ec:	4003      	ands	r3, r0
    70ee:	2b04      	cmp	r3, #4
    70f0:	d005      	beq.n	70fe <__aeabi_ddiv+0x596>
    70f2:	0001      	movs	r1, r0
    70f4:	1d08      	adds	r0, r1, #4
    70f6:	4288      	cmp	r0, r1
    70f8:	419b      	sbcs	r3, r3
    70fa:	425b      	negs	r3, r3
    70fc:	18d2      	adds	r2, r2, r3
    70fe:	0213      	lsls	r3, r2, #8
    7100:	d53a      	bpl.n	7178 <__aeabi_ddiv+0x610>
    7102:	2301      	movs	r3, #1
    7104:	9a02      	ldr	r2, [sp, #8]
    7106:	2401      	movs	r4, #1
    7108:	401a      	ands	r2, r3
    710a:	2300      	movs	r3, #0
    710c:	4694      	mov	ip, r2
    710e:	4698      	mov	r8, r3
    7110:	2200      	movs	r2, #0
    7112:	e5f7      	b.n	6d04 <__aeabi_ddiv+0x19c>
    7114:	2102      	movs	r1, #2
    7116:	4249      	negs	r1, r1
    7118:	468c      	mov	ip, r1
    711a:	9d03      	ldr	r5, [sp, #12]
    711c:	44e3      	add	fp, ip
    711e:	46ac      	mov	ip, r5
    7120:	44e2      	add	sl, ip
    7122:	45aa      	cmp	sl, r5
    7124:	41ad      	sbcs	r5, r5
    7126:	426d      	negs	r5, r5
    7128:	4445      	add	r5, r8
    712a:	18ed      	adds	r5, r5, r3
    712c:	1a2d      	subs	r5, r5, r0
    712e:	e696      	b.n	6e5e <__aeabi_ddiv+0x2f6>
    7130:	1e8a      	subs	r2, r1, #2
    7132:	9903      	ldr	r1, [sp, #12]
    7134:	004d      	lsls	r5, r1, #1
    7136:	428d      	cmp	r5, r1
    7138:	4189      	sbcs	r1, r1
    713a:	4249      	negs	r1, r1
    713c:	4441      	add	r1, r8
    713e:	1876      	adds	r6, r6, r1
    7140:	9503      	str	r5, [sp, #12]
    7142:	e78f      	b.n	7064 <__aeabi_ddiv+0x4fc>
    7144:	201f      	movs	r0, #31
    7146:	4240      	negs	r0, r0
    7148:	1ac3      	subs	r3, r0, r3
    714a:	4658      	mov	r0, fp
    714c:	40d8      	lsrs	r0, r3
    714e:	0003      	movs	r3, r0
    7150:	2a20      	cmp	r2, #32
    7152:	d028      	beq.n	71a6 <__aeabi_ddiv+0x63e>
    7154:	2040      	movs	r0, #64	; 0x40
    7156:	465d      	mov	r5, fp
    7158:	1a82      	subs	r2, r0, r2
    715a:	4095      	lsls	r5, r2
    715c:	4329      	orrs	r1, r5
    715e:	1e4a      	subs	r2, r1, #1
    7160:	4191      	sbcs	r1, r2
    7162:	4319      	orrs	r1, r3
    7164:	2307      	movs	r3, #7
    7166:	2200      	movs	r2, #0
    7168:	400b      	ands	r3, r1
    716a:	d009      	beq.n	7180 <__aeabi_ddiv+0x618>
    716c:	230f      	movs	r3, #15
    716e:	2200      	movs	r2, #0
    7170:	400b      	ands	r3, r1
    7172:	0008      	movs	r0, r1
    7174:	2b04      	cmp	r3, #4
    7176:	d1bd      	bne.n	70f4 <__aeabi_ddiv+0x58c>
    7178:	0001      	movs	r1, r0
    717a:	0753      	lsls	r3, r2, #29
    717c:	0252      	lsls	r2, r2, #9
    717e:	0b12      	lsrs	r2, r2, #12
    7180:	08c9      	lsrs	r1, r1, #3
    7182:	4319      	orrs	r1, r3
    7184:	2301      	movs	r3, #1
    7186:	4688      	mov	r8, r1
    7188:	9902      	ldr	r1, [sp, #8]
    718a:	2400      	movs	r4, #0
    718c:	4019      	ands	r1, r3
    718e:	468c      	mov	ip, r1
    7190:	e5b8      	b.n	6d04 <__aeabi_ddiv+0x19c>
    7192:	4552      	cmp	r2, sl
    7194:	d8be      	bhi.n	7114 <__aeabi_ddiv+0x5ac>
    7196:	468b      	mov	fp, r1
    7198:	2500      	movs	r5, #0
    719a:	e660      	b.n	6e5e <__aeabi_ddiv+0x2f6>
    719c:	9d03      	ldr	r5, [sp, #12]
    719e:	429d      	cmp	r5, r3
    71a0:	d3c6      	bcc.n	7130 <__aeabi_ddiv+0x5c8>
    71a2:	0011      	movs	r1, r2
    71a4:	e762      	b.n	706c <__aeabi_ddiv+0x504>
    71a6:	2500      	movs	r5, #0
    71a8:	e7d8      	b.n	715c <__aeabi_ddiv+0x5f4>
    71aa:	2280      	movs	r2, #128	; 0x80
    71ac:	465b      	mov	r3, fp
    71ae:	0312      	lsls	r2, r2, #12
    71b0:	431a      	orrs	r2, r3
    71b2:	9b01      	ldr	r3, [sp, #4]
    71b4:	0312      	lsls	r2, r2, #12
    71b6:	0b12      	lsrs	r2, r2, #12
    71b8:	469c      	mov	ip, r3
    71ba:	4688      	mov	r8, r1
    71bc:	4c03      	ldr	r4, [pc, #12]	; (71cc <__aeabi_ddiv+0x664>)
    71be:	e5a1      	b.n	6d04 <__aeabi_ddiv+0x19c>
    71c0:	000003ff 	.word	0x000003ff
    71c4:	feffffff 	.word	0xfeffffff
    71c8:	000007fe 	.word	0x000007fe
    71cc:	000007ff 	.word	0x000007ff

000071d0 <__eqdf2>:
    71d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71d2:	464f      	mov	r7, r9
    71d4:	4646      	mov	r6, r8
    71d6:	46d6      	mov	lr, sl
    71d8:	005c      	lsls	r4, r3, #1
    71da:	b5c0      	push	{r6, r7, lr}
    71dc:	031f      	lsls	r7, r3, #12
    71de:	0fdb      	lsrs	r3, r3, #31
    71e0:	469a      	mov	sl, r3
    71e2:	4b17      	ldr	r3, [pc, #92]	; (7240 <__eqdf2+0x70>)
    71e4:	030e      	lsls	r6, r1, #12
    71e6:	004d      	lsls	r5, r1, #1
    71e8:	4684      	mov	ip, r0
    71ea:	4680      	mov	r8, r0
    71ec:	0b36      	lsrs	r6, r6, #12
    71ee:	0d6d      	lsrs	r5, r5, #21
    71f0:	0fc9      	lsrs	r1, r1, #31
    71f2:	4691      	mov	r9, r2
    71f4:	0b3f      	lsrs	r7, r7, #12
    71f6:	0d64      	lsrs	r4, r4, #21
    71f8:	2001      	movs	r0, #1
    71fa:	429d      	cmp	r5, r3
    71fc:	d008      	beq.n	7210 <__eqdf2+0x40>
    71fe:	429c      	cmp	r4, r3
    7200:	d001      	beq.n	7206 <__eqdf2+0x36>
    7202:	42a5      	cmp	r5, r4
    7204:	d00b      	beq.n	721e <__eqdf2+0x4e>
    7206:	bc1c      	pop	{r2, r3, r4}
    7208:	4690      	mov	r8, r2
    720a:	4699      	mov	r9, r3
    720c:	46a2      	mov	sl, r4
    720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7210:	4663      	mov	r3, ip
    7212:	4333      	orrs	r3, r6
    7214:	d1f7      	bne.n	7206 <__eqdf2+0x36>
    7216:	42ac      	cmp	r4, r5
    7218:	d1f5      	bne.n	7206 <__eqdf2+0x36>
    721a:	433a      	orrs	r2, r7
    721c:	d1f3      	bne.n	7206 <__eqdf2+0x36>
    721e:	2001      	movs	r0, #1
    7220:	42be      	cmp	r6, r7
    7222:	d1f0      	bne.n	7206 <__eqdf2+0x36>
    7224:	45c8      	cmp	r8, r9
    7226:	d1ee      	bne.n	7206 <__eqdf2+0x36>
    7228:	4551      	cmp	r1, sl
    722a:	d007      	beq.n	723c <__eqdf2+0x6c>
    722c:	2d00      	cmp	r5, #0
    722e:	d1ea      	bne.n	7206 <__eqdf2+0x36>
    7230:	4663      	mov	r3, ip
    7232:	431e      	orrs	r6, r3
    7234:	0030      	movs	r0, r6
    7236:	1e46      	subs	r6, r0, #1
    7238:	41b0      	sbcs	r0, r6
    723a:	e7e4      	b.n	7206 <__eqdf2+0x36>
    723c:	2000      	movs	r0, #0
    723e:	e7e2      	b.n	7206 <__eqdf2+0x36>
    7240:	000007ff 	.word	0x000007ff

00007244 <__gedf2>:
    7244:	b5f0      	push	{r4, r5, r6, r7, lr}
    7246:	4645      	mov	r5, r8
    7248:	46de      	mov	lr, fp
    724a:	4657      	mov	r7, sl
    724c:	464e      	mov	r6, r9
    724e:	b5e0      	push	{r5, r6, r7, lr}
    7250:	031f      	lsls	r7, r3, #12
    7252:	0b3d      	lsrs	r5, r7, #12
    7254:	4f2c      	ldr	r7, [pc, #176]	; (7308 <__gedf2+0xc4>)
    7256:	030e      	lsls	r6, r1, #12
    7258:	004c      	lsls	r4, r1, #1
    725a:	46ab      	mov	fp, r5
    725c:	005d      	lsls	r5, r3, #1
    725e:	4684      	mov	ip, r0
    7260:	0b36      	lsrs	r6, r6, #12
    7262:	0d64      	lsrs	r4, r4, #21
    7264:	0fc9      	lsrs	r1, r1, #31
    7266:	4690      	mov	r8, r2
    7268:	0d6d      	lsrs	r5, r5, #21
    726a:	0fdb      	lsrs	r3, r3, #31
    726c:	42bc      	cmp	r4, r7
    726e:	d02a      	beq.n	72c6 <__gedf2+0x82>
    7270:	4f25      	ldr	r7, [pc, #148]	; (7308 <__gedf2+0xc4>)
    7272:	42bd      	cmp	r5, r7
    7274:	d02d      	beq.n	72d2 <__gedf2+0x8e>
    7276:	2c00      	cmp	r4, #0
    7278:	d10f      	bne.n	729a <__gedf2+0x56>
    727a:	4330      	orrs	r0, r6
    727c:	0007      	movs	r7, r0
    727e:	4681      	mov	r9, r0
    7280:	4278      	negs	r0, r7
    7282:	4178      	adcs	r0, r7
    7284:	b2c0      	uxtb	r0, r0
    7286:	2d00      	cmp	r5, #0
    7288:	d117      	bne.n	72ba <__gedf2+0x76>
    728a:	465f      	mov	r7, fp
    728c:	433a      	orrs	r2, r7
    728e:	d114      	bne.n	72ba <__gedf2+0x76>
    7290:	464b      	mov	r3, r9
    7292:	2000      	movs	r0, #0
    7294:	2b00      	cmp	r3, #0
    7296:	d00a      	beq.n	72ae <__gedf2+0x6a>
    7298:	e006      	b.n	72a8 <__gedf2+0x64>
    729a:	2d00      	cmp	r5, #0
    729c:	d102      	bne.n	72a4 <__gedf2+0x60>
    729e:	4658      	mov	r0, fp
    72a0:	4302      	orrs	r2, r0
    72a2:	d001      	beq.n	72a8 <__gedf2+0x64>
    72a4:	4299      	cmp	r1, r3
    72a6:	d018      	beq.n	72da <__gedf2+0x96>
    72a8:	4248      	negs	r0, r1
    72aa:	2101      	movs	r1, #1
    72ac:	4308      	orrs	r0, r1
    72ae:	bc3c      	pop	{r2, r3, r4, r5}
    72b0:	4690      	mov	r8, r2
    72b2:	4699      	mov	r9, r3
    72b4:	46a2      	mov	sl, r4
    72b6:	46ab      	mov	fp, r5
    72b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72ba:	2800      	cmp	r0, #0
    72bc:	d0f2      	beq.n	72a4 <__gedf2+0x60>
    72be:	2001      	movs	r0, #1
    72c0:	3b01      	subs	r3, #1
    72c2:	4318      	orrs	r0, r3
    72c4:	e7f3      	b.n	72ae <__gedf2+0x6a>
    72c6:	0037      	movs	r7, r6
    72c8:	4307      	orrs	r7, r0
    72ca:	d0d1      	beq.n	7270 <__gedf2+0x2c>
    72cc:	2002      	movs	r0, #2
    72ce:	4240      	negs	r0, r0
    72d0:	e7ed      	b.n	72ae <__gedf2+0x6a>
    72d2:	465f      	mov	r7, fp
    72d4:	4317      	orrs	r7, r2
    72d6:	d0ce      	beq.n	7276 <__gedf2+0x32>
    72d8:	e7f8      	b.n	72cc <__gedf2+0x88>
    72da:	42ac      	cmp	r4, r5
    72dc:	dce4      	bgt.n	72a8 <__gedf2+0x64>
    72de:	da03      	bge.n	72e8 <__gedf2+0xa4>
    72e0:	1e48      	subs	r0, r1, #1
    72e2:	2101      	movs	r1, #1
    72e4:	4308      	orrs	r0, r1
    72e6:	e7e2      	b.n	72ae <__gedf2+0x6a>
    72e8:	455e      	cmp	r6, fp
    72ea:	d8dd      	bhi.n	72a8 <__gedf2+0x64>
    72ec:	d006      	beq.n	72fc <__gedf2+0xb8>
    72ee:	2000      	movs	r0, #0
    72f0:	455e      	cmp	r6, fp
    72f2:	d2dc      	bcs.n	72ae <__gedf2+0x6a>
    72f4:	2301      	movs	r3, #1
    72f6:	1e48      	subs	r0, r1, #1
    72f8:	4318      	orrs	r0, r3
    72fa:	e7d8      	b.n	72ae <__gedf2+0x6a>
    72fc:	45c4      	cmp	ip, r8
    72fe:	d8d3      	bhi.n	72a8 <__gedf2+0x64>
    7300:	2000      	movs	r0, #0
    7302:	45c4      	cmp	ip, r8
    7304:	d3f6      	bcc.n	72f4 <__gedf2+0xb0>
    7306:	e7d2      	b.n	72ae <__gedf2+0x6a>
    7308:	000007ff 	.word	0x000007ff

0000730c <__ledf2>:
    730c:	b5f0      	push	{r4, r5, r6, r7, lr}
    730e:	464e      	mov	r6, r9
    7310:	4645      	mov	r5, r8
    7312:	46de      	mov	lr, fp
    7314:	4657      	mov	r7, sl
    7316:	005c      	lsls	r4, r3, #1
    7318:	b5e0      	push	{r5, r6, r7, lr}
    731a:	031f      	lsls	r7, r3, #12
    731c:	0fdb      	lsrs	r3, r3, #31
    731e:	4699      	mov	r9, r3
    7320:	4b2a      	ldr	r3, [pc, #168]	; (73cc <__ledf2+0xc0>)
    7322:	030e      	lsls	r6, r1, #12
    7324:	004d      	lsls	r5, r1, #1
    7326:	0fc9      	lsrs	r1, r1, #31
    7328:	4684      	mov	ip, r0
    732a:	0b36      	lsrs	r6, r6, #12
    732c:	0d6d      	lsrs	r5, r5, #21
    732e:	468b      	mov	fp, r1
    7330:	4690      	mov	r8, r2
    7332:	0b3f      	lsrs	r7, r7, #12
    7334:	0d64      	lsrs	r4, r4, #21
    7336:	429d      	cmp	r5, r3
    7338:	d020      	beq.n	737c <__ledf2+0x70>
    733a:	4b24      	ldr	r3, [pc, #144]	; (73cc <__ledf2+0xc0>)
    733c:	429c      	cmp	r4, r3
    733e:	d022      	beq.n	7386 <__ledf2+0x7a>
    7340:	2d00      	cmp	r5, #0
    7342:	d112      	bne.n	736a <__ledf2+0x5e>
    7344:	4330      	orrs	r0, r6
    7346:	4243      	negs	r3, r0
    7348:	4143      	adcs	r3, r0
    734a:	b2db      	uxtb	r3, r3
    734c:	2c00      	cmp	r4, #0
    734e:	d01f      	beq.n	7390 <__ledf2+0x84>
    7350:	2b00      	cmp	r3, #0
    7352:	d00c      	beq.n	736e <__ledf2+0x62>
    7354:	464b      	mov	r3, r9
    7356:	2001      	movs	r0, #1
    7358:	3b01      	subs	r3, #1
    735a:	4303      	orrs	r3, r0
    735c:	0018      	movs	r0, r3
    735e:	bc3c      	pop	{r2, r3, r4, r5}
    7360:	4690      	mov	r8, r2
    7362:	4699      	mov	r9, r3
    7364:	46a2      	mov	sl, r4
    7366:	46ab      	mov	fp, r5
    7368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    736a:	2c00      	cmp	r4, #0
    736c:	d016      	beq.n	739c <__ledf2+0x90>
    736e:	45cb      	cmp	fp, r9
    7370:	d017      	beq.n	73a2 <__ledf2+0x96>
    7372:	465b      	mov	r3, fp
    7374:	4259      	negs	r1, r3
    7376:	2301      	movs	r3, #1
    7378:	430b      	orrs	r3, r1
    737a:	e7ef      	b.n	735c <__ledf2+0x50>
    737c:	0031      	movs	r1, r6
    737e:	2302      	movs	r3, #2
    7380:	4301      	orrs	r1, r0
    7382:	d1eb      	bne.n	735c <__ledf2+0x50>
    7384:	e7d9      	b.n	733a <__ledf2+0x2e>
    7386:	0039      	movs	r1, r7
    7388:	2302      	movs	r3, #2
    738a:	4311      	orrs	r1, r2
    738c:	d1e6      	bne.n	735c <__ledf2+0x50>
    738e:	e7d7      	b.n	7340 <__ledf2+0x34>
    7390:	433a      	orrs	r2, r7
    7392:	d1dd      	bne.n	7350 <__ledf2+0x44>
    7394:	2300      	movs	r3, #0
    7396:	2800      	cmp	r0, #0
    7398:	d0e0      	beq.n	735c <__ledf2+0x50>
    739a:	e7ea      	b.n	7372 <__ledf2+0x66>
    739c:	433a      	orrs	r2, r7
    739e:	d1e6      	bne.n	736e <__ledf2+0x62>
    73a0:	e7e7      	b.n	7372 <__ledf2+0x66>
    73a2:	42a5      	cmp	r5, r4
    73a4:	dce5      	bgt.n	7372 <__ledf2+0x66>
    73a6:	db05      	blt.n	73b4 <__ledf2+0xa8>
    73a8:	42be      	cmp	r6, r7
    73aa:	d8e2      	bhi.n	7372 <__ledf2+0x66>
    73ac:	d007      	beq.n	73be <__ledf2+0xb2>
    73ae:	2300      	movs	r3, #0
    73b0:	42be      	cmp	r6, r7
    73b2:	d2d3      	bcs.n	735c <__ledf2+0x50>
    73b4:	4659      	mov	r1, fp
    73b6:	2301      	movs	r3, #1
    73b8:	3901      	subs	r1, #1
    73ba:	430b      	orrs	r3, r1
    73bc:	e7ce      	b.n	735c <__ledf2+0x50>
    73be:	45c4      	cmp	ip, r8
    73c0:	d8d7      	bhi.n	7372 <__ledf2+0x66>
    73c2:	2300      	movs	r3, #0
    73c4:	45c4      	cmp	ip, r8
    73c6:	d3f5      	bcc.n	73b4 <__ledf2+0xa8>
    73c8:	e7c8      	b.n	735c <__ledf2+0x50>
    73ca:	46c0      	nop			; (mov r8, r8)
    73cc:	000007ff 	.word	0x000007ff

000073d0 <__aeabi_dmul>:
    73d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    73d2:	4657      	mov	r7, sl
    73d4:	4645      	mov	r5, r8
    73d6:	46de      	mov	lr, fp
    73d8:	464e      	mov	r6, r9
    73da:	b5e0      	push	{r5, r6, r7, lr}
    73dc:	030c      	lsls	r4, r1, #12
    73de:	4698      	mov	r8, r3
    73e0:	004e      	lsls	r6, r1, #1
    73e2:	0b23      	lsrs	r3, r4, #12
    73e4:	b087      	sub	sp, #28
    73e6:	0007      	movs	r7, r0
    73e8:	4692      	mov	sl, r2
    73ea:	469b      	mov	fp, r3
    73ec:	0d76      	lsrs	r6, r6, #21
    73ee:	0fcd      	lsrs	r5, r1, #31
    73f0:	2e00      	cmp	r6, #0
    73f2:	d06b      	beq.n	74cc <__aeabi_dmul+0xfc>
    73f4:	4b6d      	ldr	r3, [pc, #436]	; (75ac <__aeabi_dmul+0x1dc>)
    73f6:	429e      	cmp	r6, r3
    73f8:	d035      	beq.n	7466 <__aeabi_dmul+0x96>
    73fa:	2480      	movs	r4, #128	; 0x80
    73fc:	465b      	mov	r3, fp
    73fe:	0f42      	lsrs	r2, r0, #29
    7400:	0424      	lsls	r4, r4, #16
    7402:	00db      	lsls	r3, r3, #3
    7404:	4314      	orrs	r4, r2
    7406:	431c      	orrs	r4, r3
    7408:	00c3      	lsls	r3, r0, #3
    740a:	4699      	mov	r9, r3
    740c:	4b68      	ldr	r3, [pc, #416]	; (75b0 <__aeabi_dmul+0x1e0>)
    740e:	46a3      	mov	fp, r4
    7410:	469c      	mov	ip, r3
    7412:	2300      	movs	r3, #0
    7414:	2700      	movs	r7, #0
    7416:	4466      	add	r6, ip
    7418:	9302      	str	r3, [sp, #8]
    741a:	4643      	mov	r3, r8
    741c:	031c      	lsls	r4, r3, #12
    741e:	005a      	lsls	r2, r3, #1
    7420:	0fdb      	lsrs	r3, r3, #31
    7422:	4650      	mov	r0, sl
    7424:	0b24      	lsrs	r4, r4, #12
    7426:	0d52      	lsrs	r2, r2, #21
    7428:	4698      	mov	r8, r3
    742a:	d100      	bne.n	742e <__aeabi_dmul+0x5e>
    742c:	e076      	b.n	751c <__aeabi_dmul+0x14c>
    742e:	4b5f      	ldr	r3, [pc, #380]	; (75ac <__aeabi_dmul+0x1dc>)
    7430:	429a      	cmp	r2, r3
    7432:	d06d      	beq.n	7510 <__aeabi_dmul+0x140>
    7434:	2380      	movs	r3, #128	; 0x80
    7436:	0f41      	lsrs	r1, r0, #29
    7438:	041b      	lsls	r3, r3, #16
    743a:	430b      	orrs	r3, r1
    743c:	495c      	ldr	r1, [pc, #368]	; (75b0 <__aeabi_dmul+0x1e0>)
    743e:	00e4      	lsls	r4, r4, #3
    7440:	468c      	mov	ip, r1
    7442:	431c      	orrs	r4, r3
    7444:	00c3      	lsls	r3, r0, #3
    7446:	2000      	movs	r0, #0
    7448:	4462      	add	r2, ip
    744a:	4641      	mov	r1, r8
    744c:	18b6      	adds	r6, r6, r2
    744e:	4069      	eors	r1, r5
    7450:	1c72      	adds	r2, r6, #1
    7452:	9101      	str	r1, [sp, #4]
    7454:	4694      	mov	ip, r2
    7456:	4307      	orrs	r7, r0
    7458:	2f0f      	cmp	r7, #15
    745a:	d900      	bls.n	745e <__aeabi_dmul+0x8e>
    745c:	e0b0      	b.n	75c0 <__aeabi_dmul+0x1f0>
    745e:	4a55      	ldr	r2, [pc, #340]	; (75b4 <__aeabi_dmul+0x1e4>)
    7460:	00bf      	lsls	r7, r7, #2
    7462:	59d2      	ldr	r2, [r2, r7]
    7464:	4697      	mov	pc, r2
    7466:	465b      	mov	r3, fp
    7468:	4303      	orrs	r3, r0
    746a:	4699      	mov	r9, r3
    746c:	d000      	beq.n	7470 <__aeabi_dmul+0xa0>
    746e:	e087      	b.n	7580 <__aeabi_dmul+0x1b0>
    7470:	2300      	movs	r3, #0
    7472:	469b      	mov	fp, r3
    7474:	3302      	adds	r3, #2
    7476:	2708      	movs	r7, #8
    7478:	9302      	str	r3, [sp, #8]
    747a:	e7ce      	b.n	741a <__aeabi_dmul+0x4a>
    747c:	4642      	mov	r2, r8
    747e:	9201      	str	r2, [sp, #4]
    7480:	2802      	cmp	r0, #2
    7482:	d067      	beq.n	7554 <__aeabi_dmul+0x184>
    7484:	2803      	cmp	r0, #3
    7486:	d100      	bne.n	748a <__aeabi_dmul+0xba>
    7488:	e20e      	b.n	78a8 <__aeabi_dmul+0x4d8>
    748a:	2801      	cmp	r0, #1
    748c:	d000      	beq.n	7490 <__aeabi_dmul+0xc0>
    748e:	e162      	b.n	7756 <__aeabi_dmul+0x386>
    7490:	2300      	movs	r3, #0
    7492:	2400      	movs	r4, #0
    7494:	2200      	movs	r2, #0
    7496:	4699      	mov	r9, r3
    7498:	9901      	ldr	r1, [sp, #4]
    749a:	4001      	ands	r1, r0
    749c:	b2cd      	uxtb	r5, r1
    749e:	2100      	movs	r1, #0
    74a0:	0312      	lsls	r2, r2, #12
    74a2:	0d0b      	lsrs	r3, r1, #20
    74a4:	0b12      	lsrs	r2, r2, #12
    74a6:	051b      	lsls	r3, r3, #20
    74a8:	4313      	orrs	r3, r2
    74aa:	4a43      	ldr	r2, [pc, #268]	; (75b8 <__aeabi_dmul+0x1e8>)
    74ac:	0524      	lsls	r4, r4, #20
    74ae:	4013      	ands	r3, r2
    74b0:	431c      	orrs	r4, r3
    74b2:	0064      	lsls	r4, r4, #1
    74b4:	07ed      	lsls	r5, r5, #31
    74b6:	0864      	lsrs	r4, r4, #1
    74b8:	432c      	orrs	r4, r5
    74ba:	4648      	mov	r0, r9
    74bc:	0021      	movs	r1, r4
    74be:	b007      	add	sp, #28
    74c0:	bc3c      	pop	{r2, r3, r4, r5}
    74c2:	4690      	mov	r8, r2
    74c4:	4699      	mov	r9, r3
    74c6:	46a2      	mov	sl, r4
    74c8:	46ab      	mov	fp, r5
    74ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74cc:	4303      	orrs	r3, r0
    74ce:	4699      	mov	r9, r3
    74d0:	d04f      	beq.n	7572 <__aeabi_dmul+0x1a2>
    74d2:	465b      	mov	r3, fp
    74d4:	2b00      	cmp	r3, #0
    74d6:	d100      	bne.n	74da <__aeabi_dmul+0x10a>
    74d8:	e189      	b.n	77ee <__aeabi_dmul+0x41e>
    74da:	4658      	mov	r0, fp
    74dc:	f000 feb8 	bl	8250 <__clzsi2>
    74e0:	0003      	movs	r3, r0
    74e2:	3b0b      	subs	r3, #11
    74e4:	2b1c      	cmp	r3, #28
    74e6:	dd00      	ble.n	74ea <__aeabi_dmul+0x11a>
    74e8:	e17a      	b.n	77e0 <__aeabi_dmul+0x410>
    74ea:	221d      	movs	r2, #29
    74ec:	1ad3      	subs	r3, r2, r3
    74ee:	003a      	movs	r2, r7
    74f0:	0001      	movs	r1, r0
    74f2:	465c      	mov	r4, fp
    74f4:	40da      	lsrs	r2, r3
    74f6:	3908      	subs	r1, #8
    74f8:	408c      	lsls	r4, r1
    74fa:	0013      	movs	r3, r2
    74fc:	408f      	lsls	r7, r1
    74fe:	4323      	orrs	r3, r4
    7500:	469b      	mov	fp, r3
    7502:	46b9      	mov	r9, r7
    7504:	2300      	movs	r3, #0
    7506:	4e2d      	ldr	r6, [pc, #180]	; (75bc <__aeabi_dmul+0x1ec>)
    7508:	2700      	movs	r7, #0
    750a:	1a36      	subs	r6, r6, r0
    750c:	9302      	str	r3, [sp, #8]
    750e:	e784      	b.n	741a <__aeabi_dmul+0x4a>
    7510:	4653      	mov	r3, sl
    7512:	4323      	orrs	r3, r4
    7514:	d12a      	bne.n	756c <__aeabi_dmul+0x19c>
    7516:	2400      	movs	r4, #0
    7518:	2002      	movs	r0, #2
    751a:	e796      	b.n	744a <__aeabi_dmul+0x7a>
    751c:	4653      	mov	r3, sl
    751e:	4323      	orrs	r3, r4
    7520:	d020      	beq.n	7564 <__aeabi_dmul+0x194>
    7522:	2c00      	cmp	r4, #0
    7524:	d100      	bne.n	7528 <__aeabi_dmul+0x158>
    7526:	e157      	b.n	77d8 <__aeabi_dmul+0x408>
    7528:	0020      	movs	r0, r4
    752a:	f000 fe91 	bl	8250 <__clzsi2>
    752e:	0003      	movs	r3, r0
    7530:	3b0b      	subs	r3, #11
    7532:	2b1c      	cmp	r3, #28
    7534:	dd00      	ble.n	7538 <__aeabi_dmul+0x168>
    7536:	e149      	b.n	77cc <__aeabi_dmul+0x3fc>
    7538:	211d      	movs	r1, #29
    753a:	1acb      	subs	r3, r1, r3
    753c:	4651      	mov	r1, sl
    753e:	0002      	movs	r2, r0
    7540:	40d9      	lsrs	r1, r3
    7542:	4653      	mov	r3, sl
    7544:	3a08      	subs	r2, #8
    7546:	4094      	lsls	r4, r2
    7548:	4093      	lsls	r3, r2
    754a:	430c      	orrs	r4, r1
    754c:	4a1b      	ldr	r2, [pc, #108]	; (75bc <__aeabi_dmul+0x1ec>)
    754e:	1a12      	subs	r2, r2, r0
    7550:	2000      	movs	r0, #0
    7552:	e77a      	b.n	744a <__aeabi_dmul+0x7a>
    7554:	2501      	movs	r5, #1
    7556:	9b01      	ldr	r3, [sp, #4]
    7558:	4c14      	ldr	r4, [pc, #80]	; (75ac <__aeabi_dmul+0x1dc>)
    755a:	401d      	ands	r5, r3
    755c:	2300      	movs	r3, #0
    755e:	2200      	movs	r2, #0
    7560:	4699      	mov	r9, r3
    7562:	e79c      	b.n	749e <__aeabi_dmul+0xce>
    7564:	2400      	movs	r4, #0
    7566:	2200      	movs	r2, #0
    7568:	2001      	movs	r0, #1
    756a:	e76e      	b.n	744a <__aeabi_dmul+0x7a>
    756c:	4653      	mov	r3, sl
    756e:	2003      	movs	r0, #3
    7570:	e76b      	b.n	744a <__aeabi_dmul+0x7a>
    7572:	2300      	movs	r3, #0
    7574:	469b      	mov	fp, r3
    7576:	3301      	adds	r3, #1
    7578:	2704      	movs	r7, #4
    757a:	2600      	movs	r6, #0
    757c:	9302      	str	r3, [sp, #8]
    757e:	e74c      	b.n	741a <__aeabi_dmul+0x4a>
    7580:	2303      	movs	r3, #3
    7582:	4681      	mov	r9, r0
    7584:	270c      	movs	r7, #12
    7586:	9302      	str	r3, [sp, #8]
    7588:	e747      	b.n	741a <__aeabi_dmul+0x4a>
    758a:	2280      	movs	r2, #128	; 0x80
    758c:	2300      	movs	r3, #0
    758e:	2500      	movs	r5, #0
    7590:	0312      	lsls	r2, r2, #12
    7592:	4699      	mov	r9, r3
    7594:	4c05      	ldr	r4, [pc, #20]	; (75ac <__aeabi_dmul+0x1dc>)
    7596:	e782      	b.n	749e <__aeabi_dmul+0xce>
    7598:	465c      	mov	r4, fp
    759a:	464b      	mov	r3, r9
    759c:	9802      	ldr	r0, [sp, #8]
    759e:	e76f      	b.n	7480 <__aeabi_dmul+0xb0>
    75a0:	465c      	mov	r4, fp
    75a2:	464b      	mov	r3, r9
    75a4:	9501      	str	r5, [sp, #4]
    75a6:	9802      	ldr	r0, [sp, #8]
    75a8:	e76a      	b.n	7480 <__aeabi_dmul+0xb0>
    75aa:	46c0      	nop			; (mov r8, r8)
    75ac:	000007ff 	.word	0x000007ff
    75b0:	fffffc01 	.word	0xfffffc01
    75b4:	0000e0d8 	.word	0x0000e0d8
    75b8:	800fffff 	.word	0x800fffff
    75bc:	fffffc0d 	.word	0xfffffc0d
    75c0:	464a      	mov	r2, r9
    75c2:	4649      	mov	r1, r9
    75c4:	0c17      	lsrs	r7, r2, #16
    75c6:	0c1a      	lsrs	r2, r3, #16
    75c8:	041b      	lsls	r3, r3, #16
    75ca:	0c1b      	lsrs	r3, r3, #16
    75cc:	0408      	lsls	r0, r1, #16
    75ce:	0019      	movs	r1, r3
    75d0:	0c00      	lsrs	r0, r0, #16
    75d2:	4341      	muls	r1, r0
    75d4:	0015      	movs	r5, r2
    75d6:	4688      	mov	r8, r1
    75d8:	0019      	movs	r1, r3
    75da:	437d      	muls	r5, r7
    75dc:	4379      	muls	r1, r7
    75de:	9503      	str	r5, [sp, #12]
    75e0:	4689      	mov	r9, r1
    75e2:	0029      	movs	r1, r5
    75e4:	0015      	movs	r5, r2
    75e6:	4345      	muls	r5, r0
    75e8:	444d      	add	r5, r9
    75ea:	9502      	str	r5, [sp, #8]
    75ec:	4645      	mov	r5, r8
    75ee:	0c2d      	lsrs	r5, r5, #16
    75f0:	46aa      	mov	sl, r5
    75f2:	9d02      	ldr	r5, [sp, #8]
    75f4:	4455      	add	r5, sl
    75f6:	45a9      	cmp	r9, r5
    75f8:	d906      	bls.n	7608 <__aeabi_dmul+0x238>
    75fa:	468a      	mov	sl, r1
    75fc:	2180      	movs	r1, #128	; 0x80
    75fe:	0249      	lsls	r1, r1, #9
    7600:	4689      	mov	r9, r1
    7602:	44ca      	add	sl, r9
    7604:	4651      	mov	r1, sl
    7606:	9103      	str	r1, [sp, #12]
    7608:	0c29      	lsrs	r1, r5, #16
    760a:	9104      	str	r1, [sp, #16]
    760c:	4641      	mov	r1, r8
    760e:	0409      	lsls	r1, r1, #16
    7610:	042d      	lsls	r5, r5, #16
    7612:	0c09      	lsrs	r1, r1, #16
    7614:	4688      	mov	r8, r1
    7616:	0029      	movs	r1, r5
    7618:	0c25      	lsrs	r5, r4, #16
    761a:	0424      	lsls	r4, r4, #16
    761c:	4441      	add	r1, r8
    761e:	0c24      	lsrs	r4, r4, #16
    7620:	9105      	str	r1, [sp, #20]
    7622:	0021      	movs	r1, r4
    7624:	4341      	muls	r1, r0
    7626:	4688      	mov	r8, r1
    7628:	0021      	movs	r1, r4
    762a:	4379      	muls	r1, r7
    762c:	468a      	mov	sl, r1
    762e:	4368      	muls	r0, r5
    7630:	4641      	mov	r1, r8
    7632:	4450      	add	r0, sl
    7634:	4681      	mov	r9, r0
    7636:	0c08      	lsrs	r0, r1, #16
    7638:	4448      	add	r0, r9
    763a:	436f      	muls	r7, r5
    763c:	4582      	cmp	sl, r0
    763e:	d903      	bls.n	7648 <__aeabi_dmul+0x278>
    7640:	2180      	movs	r1, #128	; 0x80
    7642:	0249      	lsls	r1, r1, #9
    7644:	4689      	mov	r9, r1
    7646:	444f      	add	r7, r9
    7648:	0c01      	lsrs	r1, r0, #16
    764a:	4689      	mov	r9, r1
    764c:	0039      	movs	r1, r7
    764e:	4449      	add	r1, r9
    7650:	9102      	str	r1, [sp, #8]
    7652:	4641      	mov	r1, r8
    7654:	040f      	lsls	r7, r1, #16
    7656:	9904      	ldr	r1, [sp, #16]
    7658:	0c3f      	lsrs	r7, r7, #16
    765a:	4688      	mov	r8, r1
    765c:	0400      	lsls	r0, r0, #16
    765e:	19c0      	adds	r0, r0, r7
    7660:	4480      	add	r8, r0
    7662:	4641      	mov	r1, r8
    7664:	9104      	str	r1, [sp, #16]
    7666:	4659      	mov	r1, fp
    7668:	0c0f      	lsrs	r7, r1, #16
    766a:	0409      	lsls	r1, r1, #16
    766c:	0c09      	lsrs	r1, r1, #16
    766e:	4688      	mov	r8, r1
    7670:	4359      	muls	r1, r3
    7672:	468a      	mov	sl, r1
    7674:	0039      	movs	r1, r7
    7676:	4351      	muls	r1, r2
    7678:	4689      	mov	r9, r1
    767a:	4641      	mov	r1, r8
    767c:	434a      	muls	r2, r1
    767e:	4651      	mov	r1, sl
    7680:	0c09      	lsrs	r1, r1, #16
    7682:	468b      	mov	fp, r1
    7684:	437b      	muls	r3, r7
    7686:	18d2      	adds	r2, r2, r3
    7688:	445a      	add	r2, fp
    768a:	4293      	cmp	r3, r2
    768c:	d903      	bls.n	7696 <__aeabi_dmul+0x2c6>
    768e:	2380      	movs	r3, #128	; 0x80
    7690:	025b      	lsls	r3, r3, #9
    7692:	469b      	mov	fp, r3
    7694:	44d9      	add	r9, fp
    7696:	4651      	mov	r1, sl
    7698:	0409      	lsls	r1, r1, #16
    769a:	0c09      	lsrs	r1, r1, #16
    769c:	468a      	mov	sl, r1
    769e:	4641      	mov	r1, r8
    76a0:	4361      	muls	r1, r4
    76a2:	437c      	muls	r4, r7
    76a4:	0c13      	lsrs	r3, r2, #16
    76a6:	0412      	lsls	r2, r2, #16
    76a8:	444b      	add	r3, r9
    76aa:	4452      	add	r2, sl
    76ac:	46a1      	mov	r9, r4
    76ae:	468a      	mov	sl, r1
    76b0:	003c      	movs	r4, r7
    76b2:	4641      	mov	r1, r8
    76b4:	436c      	muls	r4, r5
    76b6:	434d      	muls	r5, r1
    76b8:	4651      	mov	r1, sl
    76ba:	444d      	add	r5, r9
    76bc:	0c0f      	lsrs	r7, r1, #16
    76be:	197d      	adds	r5, r7, r5
    76c0:	45a9      	cmp	r9, r5
    76c2:	d903      	bls.n	76cc <__aeabi_dmul+0x2fc>
    76c4:	2180      	movs	r1, #128	; 0x80
    76c6:	0249      	lsls	r1, r1, #9
    76c8:	4688      	mov	r8, r1
    76ca:	4444      	add	r4, r8
    76cc:	9f04      	ldr	r7, [sp, #16]
    76ce:	9903      	ldr	r1, [sp, #12]
    76d0:	46b8      	mov	r8, r7
    76d2:	4441      	add	r1, r8
    76d4:	468b      	mov	fp, r1
    76d6:	4583      	cmp	fp, r0
    76d8:	4180      	sbcs	r0, r0
    76da:	4241      	negs	r1, r0
    76dc:	4688      	mov	r8, r1
    76de:	4651      	mov	r1, sl
    76e0:	0408      	lsls	r0, r1, #16
    76e2:	042f      	lsls	r7, r5, #16
    76e4:	0c00      	lsrs	r0, r0, #16
    76e6:	183f      	adds	r7, r7, r0
    76e8:	4658      	mov	r0, fp
    76ea:	9902      	ldr	r1, [sp, #8]
    76ec:	1810      	adds	r0, r2, r0
    76ee:	4689      	mov	r9, r1
    76f0:	4290      	cmp	r0, r2
    76f2:	4192      	sbcs	r2, r2
    76f4:	444f      	add	r7, r9
    76f6:	46ba      	mov	sl, r7
    76f8:	4252      	negs	r2, r2
    76fa:	4699      	mov	r9, r3
    76fc:	4693      	mov	fp, r2
    76fe:	44c2      	add	sl, r8
    7700:	44d1      	add	r9, sl
    7702:	44cb      	add	fp, r9
    7704:	428f      	cmp	r7, r1
    7706:	41bf      	sbcs	r7, r7
    7708:	45c2      	cmp	sl, r8
    770a:	4189      	sbcs	r1, r1
    770c:	4599      	cmp	r9, r3
    770e:	419b      	sbcs	r3, r3
    7710:	4593      	cmp	fp, r2
    7712:	4192      	sbcs	r2, r2
    7714:	427f      	negs	r7, r7
    7716:	4249      	negs	r1, r1
    7718:	0c2d      	lsrs	r5, r5, #16
    771a:	4252      	negs	r2, r2
    771c:	430f      	orrs	r7, r1
    771e:	425b      	negs	r3, r3
    7720:	4313      	orrs	r3, r2
    7722:	197f      	adds	r7, r7, r5
    7724:	18ff      	adds	r7, r7, r3
    7726:	465b      	mov	r3, fp
    7728:	193c      	adds	r4, r7, r4
    772a:	0ddb      	lsrs	r3, r3, #23
    772c:	9a05      	ldr	r2, [sp, #20]
    772e:	0264      	lsls	r4, r4, #9
    7730:	431c      	orrs	r4, r3
    7732:	0243      	lsls	r3, r0, #9
    7734:	4313      	orrs	r3, r2
    7736:	1e5d      	subs	r5, r3, #1
    7738:	41ab      	sbcs	r3, r5
    773a:	465a      	mov	r2, fp
    773c:	0dc0      	lsrs	r0, r0, #23
    773e:	4303      	orrs	r3, r0
    7740:	0252      	lsls	r2, r2, #9
    7742:	4313      	orrs	r3, r2
    7744:	01e2      	lsls	r2, r4, #7
    7746:	d556      	bpl.n	77f6 <__aeabi_dmul+0x426>
    7748:	2001      	movs	r0, #1
    774a:	085a      	lsrs	r2, r3, #1
    774c:	4003      	ands	r3, r0
    774e:	4313      	orrs	r3, r2
    7750:	07e2      	lsls	r2, r4, #31
    7752:	4313      	orrs	r3, r2
    7754:	0864      	lsrs	r4, r4, #1
    7756:	485a      	ldr	r0, [pc, #360]	; (78c0 <__aeabi_dmul+0x4f0>)
    7758:	4460      	add	r0, ip
    775a:	2800      	cmp	r0, #0
    775c:	dd4d      	ble.n	77fa <__aeabi_dmul+0x42a>
    775e:	075a      	lsls	r2, r3, #29
    7760:	d009      	beq.n	7776 <__aeabi_dmul+0x3a6>
    7762:	220f      	movs	r2, #15
    7764:	401a      	ands	r2, r3
    7766:	2a04      	cmp	r2, #4
    7768:	d005      	beq.n	7776 <__aeabi_dmul+0x3a6>
    776a:	1d1a      	adds	r2, r3, #4
    776c:	429a      	cmp	r2, r3
    776e:	419b      	sbcs	r3, r3
    7770:	425b      	negs	r3, r3
    7772:	18e4      	adds	r4, r4, r3
    7774:	0013      	movs	r3, r2
    7776:	01e2      	lsls	r2, r4, #7
    7778:	d504      	bpl.n	7784 <__aeabi_dmul+0x3b4>
    777a:	2080      	movs	r0, #128	; 0x80
    777c:	4a51      	ldr	r2, [pc, #324]	; (78c4 <__aeabi_dmul+0x4f4>)
    777e:	00c0      	lsls	r0, r0, #3
    7780:	4014      	ands	r4, r2
    7782:	4460      	add	r0, ip
    7784:	4a50      	ldr	r2, [pc, #320]	; (78c8 <__aeabi_dmul+0x4f8>)
    7786:	4290      	cmp	r0, r2
    7788:	dd00      	ble.n	778c <__aeabi_dmul+0x3bc>
    778a:	e6e3      	b.n	7554 <__aeabi_dmul+0x184>
    778c:	2501      	movs	r5, #1
    778e:	08db      	lsrs	r3, r3, #3
    7790:	0762      	lsls	r2, r4, #29
    7792:	431a      	orrs	r2, r3
    7794:	0264      	lsls	r4, r4, #9
    7796:	9b01      	ldr	r3, [sp, #4]
    7798:	4691      	mov	r9, r2
    779a:	0b22      	lsrs	r2, r4, #12
    779c:	0544      	lsls	r4, r0, #21
    779e:	0d64      	lsrs	r4, r4, #21
    77a0:	401d      	ands	r5, r3
    77a2:	e67c      	b.n	749e <__aeabi_dmul+0xce>
    77a4:	2280      	movs	r2, #128	; 0x80
    77a6:	4659      	mov	r1, fp
    77a8:	0312      	lsls	r2, r2, #12
    77aa:	4211      	tst	r1, r2
    77ac:	d008      	beq.n	77c0 <__aeabi_dmul+0x3f0>
    77ae:	4214      	tst	r4, r2
    77b0:	d106      	bne.n	77c0 <__aeabi_dmul+0x3f0>
    77b2:	4322      	orrs	r2, r4
    77b4:	0312      	lsls	r2, r2, #12
    77b6:	0b12      	lsrs	r2, r2, #12
    77b8:	4645      	mov	r5, r8
    77ba:	4699      	mov	r9, r3
    77bc:	4c43      	ldr	r4, [pc, #268]	; (78cc <__aeabi_dmul+0x4fc>)
    77be:	e66e      	b.n	749e <__aeabi_dmul+0xce>
    77c0:	465b      	mov	r3, fp
    77c2:	431a      	orrs	r2, r3
    77c4:	0312      	lsls	r2, r2, #12
    77c6:	0b12      	lsrs	r2, r2, #12
    77c8:	4c40      	ldr	r4, [pc, #256]	; (78cc <__aeabi_dmul+0x4fc>)
    77ca:	e668      	b.n	749e <__aeabi_dmul+0xce>
    77cc:	0003      	movs	r3, r0
    77ce:	4654      	mov	r4, sl
    77d0:	3b28      	subs	r3, #40	; 0x28
    77d2:	409c      	lsls	r4, r3
    77d4:	2300      	movs	r3, #0
    77d6:	e6b9      	b.n	754c <__aeabi_dmul+0x17c>
    77d8:	f000 fd3a 	bl	8250 <__clzsi2>
    77dc:	3020      	adds	r0, #32
    77de:	e6a6      	b.n	752e <__aeabi_dmul+0x15e>
    77e0:	0003      	movs	r3, r0
    77e2:	3b28      	subs	r3, #40	; 0x28
    77e4:	409f      	lsls	r7, r3
    77e6:	2300      	movs	r3, #0
    77e8:	46bb      	mov	fp, r7
    77ea:	4699      	mov	r9, r3
    77ec:	e68a      	b.n	7504 <__aeabi_dmul+0x134>
    77ee:	f000 fd2f 	bl	8250 <__clzsi2>
    77f2:	3020      	adds	r0, #32
    77f4:	e674      	b.n	74e0 <__aeabi_dmul+0x110>
    77f6:	46b4      	mov	ip, r6
    77f8:	e7ad      	b.n	7756 <__aeabi_dmul+0x386>
    77fa:	2501      	movs	r5, #1
    77fc:	1a2a      	subs	r2, r5, r0
    77fe:	2a38      	cmp	r2, #56	; 0x38
    7800:	dd06      	ble.n	7810 <__aeabi_dmul+0x440>
    7802:	9b01      	ldr	r3, [sp, #4]
    7804:	2400      	movs	r4, #0
    7806:	401d      	ands	r5, r3
    7808:	2300      	movs	r3, #0
    780a:	2200      	movs	r2, #0
    780c:	4699      	mov	r9, r3
    780e:	e646      	b.n	749e <__aeabi_dmul+0xce>
    7810:	2a1f      	cmp	r2, #31
    7812:	dc21      	bgt.n	7858 <__aeabi_dmul+0x488>
    7814:	2520      	movs	r5, #32
    7816:	0020      	movs	r0, r4
    7818:	1aad      	subs	r5, r5, r2
    781a:	001e      	movs	r6, r3
    781c:	40ab      	lsls	r3, r5
    781e:	40a8      	lsls	r0, r5
    7820:	40d6      	lsrs	r6, r2
    7822:	1e5d      	subs	r5, r3, #1
    7824:	41ab      	sbcs	r3, r5
    7826:	4330      	orrs	r0, r6
    7828:	4318      	orrs	r0, r3
    782a:	40d4      	lsrs	r4, r2
    782c:	0743      	lsls	r3, r0, #29
    782e:	d009      	beq.n	7844 <__aeabi_dmul+0x474>
    7830:	230f      	movs	r3, #15
    7832:	4003      	ands	r3, r0
    7834:	2b04      	cmp	r3, #4
    7836:	d005      	beq.n	7844 <__aeabi_dmul+0x474>
    7838:	0003      	movs	r3, r0
    783a:	1d18      	adds	r0, r3, #4
    783c:	4298      	cmp	r0, r3
    783e:	419b      	sbcs	r3, r3
    7840:	425b      	negs	r3, r3
    7842:	18e4      	adds	r4, r4, r3
    7844:	0223      	lsls	r3, r4, #8
    7846:	d521      	bpl.n	788c <__aeabi_dmul+0x4bc>
    7848:	2501      	movs	r5, #1
    784a:	9b01      	ldr	r3, [sp, #4]
    784c:	2401      	movs	r4, #1
    784e:	401d      	ands	r5, r3
    7850:	2300      	movs	r3, #0
    7852:	2200      	movs	r2, #0
    7854:	4699      	mov	r9, r3
    7856:	e622      	b.n	749e <__aeabi_dmul+0xce>
    7858:	251f      	movs	r5, #31
    785a:	0021      	movs	r1, r4
    785c:	426d      	negs	r5, r5
    785e:	1a28      	subs	r0, r5, r0
    7860:	40c1      	lsrs	r1, r0
    7862:	0008      	movs	r0, r1
    7864:	2a20      	cmp	r2, #32
    7866:	d01d      	beq.n	78a4 <__aeabi_dmul+0x4d4>
    7868:	355f      	adds	r5, #95	; 0x5f
    786a:	1aaa      	subs	r2, r5, r2
    786c:	4094      	lsls	r4, r2
    786e:	4323      	orrs	r3, r4
    7870:	1e5c      	subs	r4, r3, #1
    7872:	41a3      	sbcs	r3, r4
    7874:	2507      	movs	r5, #7
    7876:	4303      	orrs	r3, r0
    7878:	401d      	ands	r5, r3
    787a:	2200      	movs	r2, #0
    787c:	2d00      	cmp	r5, #0
    787e:	d009      	beq.n	7894 <__aeabi_dmul+0x4c4>
    7880:	220f      	movs	r2, #15
    7882:	2400      	movs	r4, #0
    7884:	401a      	ands	r2, r3
    7886:	0018      	movs	r0, r3
    7888:	2a04      	cmp	r2, #4
    788a:	d1d6      	bne.n	783a <__aeabi_dmul+0x46a>
    788c:	0003      	movs	r3, r0
    788e:	0765      	lsls	r5, r4, #29
    7890:	0264      	lsls	r4, r4, #9
    7892:	0b22      	lsrs	r2, r4, #12
    7894:	08db      	lsrs	r3, r3, #3
    7896:	432b      	orrs	r3, r5
    7898:	2501      	movs	r5, #1
    789a:	4699      	mov	r9, r3
    789c:	9b01      	ldr	r3, [sp, #4]
    789e:	2400      	movs	r4, #0
    78a0:	401d      	ands	r5, r3
    78a2:	e5fc      	b.n	749e <__aeabi_dmul+0xce>
    78a4:	2400      	movs	r4, #0
    78a6:	e7e2      	b.n	786e <__aeabi_dmul+0x49e>
    78a8:	2280      	movs	r2, #128	; 0x80
    78aa:	2501      	movs	r5, #1
    78ac:	0312      	lsls	r2, r2, #12
    78ae:	4322      	orrs	r2, r4
    78b0:	9901      	ldr	r1, [sp, #4]
    78b2:	0312      	lsls	r2, r2, #12
    78b4:	0b12      	lsrs	r2, r2, #12
    78b6:	400d      	ands	r5, r1
    78b8:	4699      	mov	r9, r3
    78ba:	4c04      	ldr	r4, [pc, #16]	; (78cc <__aeabi_dmul+0x4fc>)
    78bc:	e5ef      	b.n	749e <__aeabi_dmul+0xce>
    78be:	46c0      	nop			; (mov r8, r8)
    78c0:	000003ff 	.word	0x000003ff
    78c4:	feffffff 	.word	0xfeffffff
    78c8:	000007fe 	.word	0x000007fe
    78cc:	000007ff 	.word	0x000007ff

000078d0 <__aeabi_dsub>:
    78d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78d2:	4646      	mov	r6, r8
    78d4:	46d6      	mov	lr, sl
    78d6:	464f      	mov	r7, r9
    78d8:	030c      	lsls	r4, r1, #12
    78da:	b5c0      	push	{r6, r7, lr}
    78dc:	0fcd      	lsrs	r5, r1, #31
    78de:	004e      	lsls	r6, r1, #1
    78e0:	0a61      	lsrs	r1, r4, #9
    78e2:	0f44      	lsrs	r4, r0, #29
    78e4:	430c      	orrs	r4, r1
    78e6:	00c1      	lsls	r1, r0, #3
    78e8:	0058      	lsls	r0, r3, #1
    78ea:	0d40      	lsrs	r0, r0, #21
    78ec:	4684      	mov	ip, r0
    78ee:	468a      	mov	sl, r1
    78f0:	000f      	movs	r7, r1
    78f2:	0319      	lsls	r1, r3, #12
    78f4:	0f50      	lsrs	r0, r2, #29
    78f6:	0a49      	lsrs	r1, r1, #9
    78f8:	4301      	orrs	r1, r0
    78fa:	48c6      	ldr	r0, [pc, #792]	; (7c14 <__aeabi_dsub+0x344>)
    78fc:	0d76      	lsrs	r6, r6, #21
    78fe:	46a8      	mov	r8, r5
    7900:	0fdb      	lsrs	r3, r3, #31
    7902:	00d2      	lsls	r2, r2, #3
    7904:	4584      	cmp	ip, r0
    7906:	d100      	bne.n	790a <__aeabi_dsub+0x3a>
    7908:	e0d8      	b.n	7abc <__aeabi_dsub+0x1ec>
    790a:	2001      	movs	r0, #1
    790c:	4043      	eors	r3, r0
    790e:	42ab      	cmp	r3, r5
    7910:	d100      	bne.n	7914 <__aeabi_dsub+0x44>
    7912:	e0a6      	b.n	7a62 <__aeabi_dsub+0x192>
    7914:	4660      	mov	r0, ip
    7916:	1a35      	subs	r5, r6, r0
    7918:	2d00      	cmp	r5, #0
    791a:	dc00      	bgt.n	791e <__aeabi_dsub+0x4e>
    791c:	e105      	b.n	7b2a <__aeabi_dsub+0x25a>
    791e:	2800      	cmp	r0, #0
    7920:	d110      	bne.n	7944 <__aeabi_dsub+0x74>
    7922:	000b      	movs	r3, r1
    7924:	4313      	orrs	r3, r2
    7926:	d100      	bne.n	792a <__aeabi_dsub+0x5a>
    7928:	e0d7      	b.n	7ada <__aeabi_dsub+0x20a>
    792a:	1e6b      	subs	r3, r5, #1
    792c:	2b00      	cmp	r3, #0
    792e:	d000      	beq.n	7932 <__aeabi_dsub+0x62>
    7930:	e14b      	b.n	7bca <__aeabi_dsub+0x2fa>
    7932:	4653      	mov	r3, sl
    7934:	1a9f      	subs	r7, r3, r2
    7936:	45ba      	cmp	sl, r7
    7938:	4180      	sbcs	r0, r0
    793a:	1a64      	subs	r4, r4, r1
    793c:	4240      	negs	r0, r0
    793e:	1a24      	subs	r4, r4, r0
    7940:	2601      	movs	r6, #1
    7942:	e01e      	b.n	7982 <__aeabi_dsub+0xb2>
    7944:	4bb3      	ldr	r3, [pc, #716]	; (7c14 <__aeabi_dsub+0x344>)
    7946:	429e      	cmp	r6, r3
    7948:	d048      	beq.n	79dc <__aeabi_dsub+0x10c>
    794a:	2380      	movs	r3, #128	; 0x80
    794c:	041b      	lsls	r3, r3, #16
    794e:	4319      	orrs	r1, r3
    7950:	2d38      	cmp	r5, #56	; 0x38
    7952:	dd00      	ble.n	7956 <__aeabi_dsub+0x86>
    7954:	e119      	b.n	7b8a <__aeabi_dsub+0x2ba>
    7956:	2d1f      	cmp	r5, #31
    7958:	dd00      	ble.n	795c <__aeabi_dsub+0x8c>
    795a:	e14c      	b.n	7bf6 <__aeabi_dsub+0x326>
    795c:	2320      	movs	r3, #32
    795e:	000f      	movs	r7, r1
    7960:	1b5b      	subs	r3, r3, r5
    7962:	0010      	movs	r0, r2
    7964:	409a      	lsls	r2, r3
    7966:	409f      	lsls	r7, r3
    7968:	40e8      	lsrs	r0, r5
    796a:	1e53      	subs	r3, r2, #1
    796c:	419a      	sbcs	r2, r3
    796e:	40e9      	lsrs	r1, r5
    7970:	4307      	orrs	r7, r0
    7972:	4317      	orrs	r7, r2
    7974:	4653      	mov	r3, sl
    7976:	1bdf      	subs	r7, r3, r7
    7978:	1a61      	subs	r1, r4, r1
    797a:	45ba      	cmp	sl, r7
    797c:	41a4      	sbcs	r4, r4
    797e:	4264      	negs	r4, r4
    7980:	1b0c      	subs	r4, r1, r4
    7982:	0223      	lsls	r3, r4, #8
    7984:	d400      	bmi.n	7988 <__aeabi_dsub+0xb8>
    7986:	e0c5      	b.n	7b14 <__aeabi_dsub+0x244>
    7988:	0264      	lsls	r4, r4, #9
    798a:	0a65      	lsrs	r5, r4, #9
    798c:	2d00      	cmp	r5, #0
    798e:	d100      	bne.n	7992 <__aeabi_dsub+0xc2>
    7990:	e0f6      	b.n	7b80 <__aeabi_dsub+0x2b0>
    7992:	0028      	movs	r0, r5
    7994:	f000 fc5c 	bl	8250 <__clzsi2>
    7998:	0003      	movs	r3, r0
    799a:	3b08      	subs	r3, #8
    799c:	2b1f      	cmp	r3, #31
    799e:	dd00      	ble.n	79a2 <__aeabi_dsub+0xd2>
    79a0:	e0e9      	b.n	7b76 <__aeabi_dsub+0x2a6>
    79a2:	2220      	movs	r2, #32
    79a4:	003c      	movs	r4, r7
    79a6:	1ad2      	subs	r2, r2, r3
    79a8:	409d      	lsls	r5, r3
    79aa:	40d4      	lsrs	r4, r2
    79ac:	409f      	lsls	r7, r3
    79ae:	4325      	orrs	r5, r4
    79b0:	429e      	cmp	r6, r3
    79b2:	dd00      	ble.n	79b6 <__aeabi_dsub+0xe6>
    79b4:	e0db      	b.n	7b6e <__aeabi_dsub+0x29e>
    79b6:	1b9e      	subs	r6, r3, r6
    79b8:	1c73      	adds	r3, r6, #1
    79ba:	2b1f      	cmp	r3, #31
    79bc:	dd00      	ble.n	79c0 <__aeabi_dsub+0xf0>
    79be:	e10a      	b.n	7bd6 <__aeabi_dsub+0x306>
    79c0:	2220      	movs	r2, #32
    79c2:	0038      	movs	r0, r7
    79c4:	1ad2      	subs	r2, r2, r3
    79c6:	0029      	movs	r1, r5
    79c8:	4097      	lsls	r7, r2
    79ca:	002c      	movs	r4, r5
    79cc:	4091      	lsls	r1, r2
    79ce:	40d8      	lsrs	r0, r3
    79d0:	1e7a      	subs	r2, r7, #1
    79d2:	4197      	sbcs	r7, r2
    79d4:	40dc      	lsrs	r4, r3
    79d6:	2600      	movs	r6, #0
    79d8:	4301      	orrs	r1, r0
    79da:	430f      	orrs	r7, r1
    79dc:	077b      	lsls	r3, r7, #29
    79de:	d009      	beq.n	79f4 <__aeabi_dsub+0x124>
    79e0:	230f      	movs	r3, #15
    79e2:	403b      	ands	r3, r7
    79e4:	2b04      	cmp	r3, #4
    79e6:	d005      	beq.n	79f4 <__aeabi_dsub+0x124>
    79e8:	1d3b      	adds	r3, r7, #4
    79ea:	42bb      	cmp	r3, r7
    79ec:	41bf      	sbcs	r7, r7
    79ee:	427f      	negs	r7, r7
    79f0:	19e4      	adds	r4, r4, r7
    79f2:	001f      	movs	r7, r3
    79f4:	0223      	lsls	r3, r4, #8
    79f6:	d525      	bpl.n	7a44 <__aeabi_dsub+0x174>
    79f8:	4b86      	ldr	r3, [pc, #536]	; (7c14 <__aeabi_dsub+0x344>)
    79fa:	3601      	adds	r6, #1
    79fc:	429e      	cmp	r6, r3
    79fe:	d100      	bne.n	7a02 <__aeabi_dsub+0x132>
    7a00:	e0af      	b.n	7b62 <__aeabi_dsub+0x292>
    7a02:	4b85      	ldr	r3, [pc, #532]	; (7c18 <__aeabi_dsub+0x348>)
    7a04:	2501      	movs	r5, #1
    7a06:	401c      	ands	r4, r3
    7a08:	4643      	mov	r3, r8
    7a0a:	0762      	lsls	r2, r4, #29
    7a0c:	08ff      	lsrs	r7, r7, #3
    7a0e:	0264      	lsls	r4, r4, #9
    7a10:	0576      	lsls	r6, r6, #21
    7a12:	4317      	orrs	r7, r2
    7a14:	0b24      	lsrs	r4, r4, #12
    7a16:	0d76      	lsrs	r6, r6, #21
    7a18:	401d      	ands	r5, r3
    7a1a:	2100      	movs	r1, #0
    7a1c:	0324      	lsls	r4, r4, #12
    7a1e:	0b23      	lsrs	r3, r4, #12
    7a20:	0d0c      	lsrs	r4, r1, #20
    7a22:	4a7e      	ldr	r2, [pc, #504]	; (7c1c <__aeabi_dsub+0x34c>)
    7a24:	0524      	lsls	r4, r4, #20
    7a26:	431c      	orrs	r4, r3
    7a28:	4014      	ands	r4, r2
    7a2a:	0533      	lsls	r3, r6, #20
    7a2c:	4323      	orrs	r3, r4
    7a2e:	005b      	lsls	r3, r3, #1
    7a30:	07ed      	lsls	r5, r5, #31
    7a32:	085b      	lsrs	r3, r3, #1
    7a34:	432b      	orrs	r3, r5
    7a36:	0038      	movs	r0, r7
    7a38:	0019      	movs	r1, r3
    7a3a:	bc1c      	pop	{r2, r3, r4}
    7a3c:	4690      	mov	r8, r2
    7a3e:	4699      	mov	r9, r3
    7a40:	46a2      	mov	sl, r4
    7a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a44:	2501      	movs	r5, #1
    7a46:	4643      	mov	r3, r8
    7a48:	0762      	lsls	r2, r4, #29
    7a4a:	08ff      	lsrs	r7, r7, #3
    7a4c:	4317      	orrs	r7, r2
    7a4e:	08e4      	lsrs	r4, r4, #3
    7a50:	401d      	ands	r5, r3
    7a52:	4b70      	ldr	r3, [pc, #448]	; (7c14 <__aeabi_dsub+0x344>)
    7a54:	429e      	cmp	r6, r3
    7a56:	d036      	beq.n	7ac6 <__aeabi_dsub+0x1f6>
    7a58:	0324      	lsls	r4, r4, #12
    7a5a:	0576      	lsls	r6, r6, #21
    7a5c:	0b24      	lsrs	r4, r4, #12
    7a5e:	0d76      	lsrs	r6, r6, #21
    7a60:	e7db      	b.n	7a1a <__aeabi_dsub+0x14a>
    7a62:	4663      	mov	r3, ip
    7a64:	1af3      	subs	r3, r6, r3
    7a66:	2b00      	cmp	r3, #0
    7a68:	dc00      	bgt.n	7a6c <__aeabi_dsub+0x19c>
    7a6a:	e094      	b.n	7b96 <__aeabi_dsub+0x2c6>
    7a6c:	4660      	mov	r0, ip
    7a6e:	2800      	cmp	r0, #0
    7a70:	d035      	beq.n	7ade <__aeabi_dsub+0x20e>
    7a72:	4868      	ldr	r0, [pc, #416]	; (7c14 <__aeabi_dsub+0x344>)
    7a74:	4286      	cmp	r6, r0
    7a76:	d0b1      	beq.n	79dc <__aeabi_dsub+0x10c>
    7a78:	2780      	movs	r7, #128	; 0x80
    7a7a:	043f      	lsls	r7, r7, #16
    7a7c:	4339      	orrs	r1, r7
    7a7e:	2b38      	cmp	r3, #56	; 0x38
    7a80:	dc00      	bgt.n	7a84 <__aeabi_dsub+0x1b4>
    7a82:	e0fd      	b.n	7c80 <__aeabi_dsub+0x3b0>
    7a84:	430a      	orrs	r2, r1
    7a86:	0017      	movs	r7, r2
    7a88:	2100      	movs	r1, #0
    7a8a:	1e7a      	subs	r2, r7, #1
    7a8c:	4197      	sbcs	r7, r2
    7a8e:	4457      	add	r7, sl
    7a90:	4557      	cmp	r7, sl
    7a92:	4180      	sbcs	r0, r0
    7a94:	1909      	adds	r1, r1, r4
    7a96:	4244      	negs	r4, r0
    7a98:	190c      	adds	r4, r1, r4
    7a9a:	0223      	lsls	r3, r4, #8
    7a9c:	d53a      	bpl.n	7b14 <__aeabi_dsub+0x244>
    7a9e:	4b5d      	ldr	r3, [pc, #372]	; (7c14 <__aeabi_dsub+0x344>)
    7aa0:	3601      	adds	r6, #1
    7aa2:	429e      	cmp	r6, r3
    7aa4:	d100      	bne.n	7aa8 <__aeabi_dsub+0x1d8>
    7aa6:	e14b      	b.n	7d40 <__aeabi_dsub+0x470>
    7aa8:	2201      	movs	r2, #1
    7aaa:	4b5b      	ldr	r3, [pc, #364]	; (7c18 <__aeabi_dsub+0x348>)
    7aac:	401c      	ands	r4, r3
    7aae:	087b      	lsrs	r3, r7, #1
    7ab0:	4017      	ands	r7, r2
    7ab2:	431f      	orrs	r7, r3
    7ab4:	07e2      	lsls	r2, r4, #31
    7ab6:	4317      	orrs	r7, r2
    7ab8:	0864      	lsrs	r4, r4, #1
    7aba:	e78f      	b.n	79dc <__aeabi_dsub+0x10c>
    7abc:	0008      	movs	r0, r1
    7abe:	4310      	orrs	r0, r2
    7ac0:	d000      	beq.n	7ac4 <__aeabi_dsub+0x1f4>
    7ac2:	e724      	b.n	790e <__aeabi_dsub+0x3e>
    7ac4:	e721      	b.n	790a <__aeabi_dsub+0x3a>
    7ac6:	0023      	movs	r3, r4
    7ac8:	433b      	orrs	r3, r7
    7aca:	d100      	bne.n	7ace <__aeabi_dsub+0x1fe>
    7acc:	e1b9      	b.n	7e42 <__aeabi_dsub+0x572>
    7ace:	2280      	movs	r2, #128	; 0x80
    7ad0:	0312      	lsls	r2, r2, #12
    7ad2:	4314      	orrs	r4, r2
    7ad4:	0324      	lsls	r4, r4, #12
    7ad6:	0b24      	lsrs	r4, r4, #12
    7ad8:	e79f      	b.n	7a1a <__aeabi_dsub+0x14a>
    7ada:	002e      	movs	r6, r5
    7adc:	e77e      	b.n	79dc <__aeabi_dsub+0x10c>
    7ade:	0008      	movs	r0, r1
    7ae0:	4310      	orrs	r0, r2
    7ae2:	d100      	bne.n	7ae6 <__aeabi_dsub+0x216>
    7ae4:	e0ca      	b.n	7c7c <__aeabi_dsub+0x3ac>
    7ae6:	1e58      	subs	r0, r3, #1
    7ae8:	4684      	mov	ip, r0
    7aea:	2800      	cmp	r0, #0
    7aec:	d000      	beq.n	7af0 <__aeabi_dsub+0x220>
    7aee:	e0e7      	b.n	7cc0 <__aeabi_dsub+0x3f0>
    7af0:	4452      	add	r2, sl
    7af2:	4552      	cmp	r2, sl
    7af4:	4180      	sbcs	r0, r0
    7af6:	1864      	adds	r4, r4, r1
    7af8:	4240      	negs	r0, r0
    7afa:	1824      	adds	r4, r4, r0
    7afc:	0017      	movs	r7, r2
    7afe:	2601      	movs	r6, #1
    7b00:	0223      	lsls	r3, r4, #8
    7b02:	d507      	bpl.n	7b14 <__aeabi_dsub+0x244>
    7b04:	2602      	movs	r6, #2
    7b06:	e7cf      	b.n	7aa8 <__aeabi_dsub+0x1d8>
    7b08:	4664      	mov	r4, ip
    7b0a:	432c      	orrs	r4, r5
    7b0c:	d100      	bne.n	7b10 <__aeabi_dsub+0x240>
    7b0e:	e1b3      	b.n	7e78 <__aeabi_dsub+0x5a8>
    7b10:	002c      	movs	r4, r5
    7b12:	4667      	mov	r7, ip
    7b14:	077b      	lsls	r3, r7, #29
    7b16:	d000      	beq.n	7b1a <__aeabi_dsub+0x24a>
    7b18:	e762      	b.n	79e0 <__aeabi_dsub+0x110>
    7b1a:	0763      	lsls	r3, r4, #29
    7b1c:	08ff      	lsrs	r7, r7, #3
    7b1e:	431f      	orrs	r7, r3
    7b20:	2501      	movs	r5, #1
    7b22:	4643      	mov	r3, r8
    7b24:	08e4      	lsrs	r4, r4, #3
    7b26:	401d      	ands	r5, r3
    7b28:	e793      	b.n	7a52 <__aeabi_dsub+0x182>
    7b2a:	2d00      	cmp	r5, #0
    7b2c:	d178      	bne.n	7c20 <__aeabi_dsub+0x350>
    7b2e:	1c75      	adds	r5, r6, #1
    7b30:	056d      	lsls	r5, r5, #21
    7b32:	0d6d      	lsrs	r5, r5, #21
    7b34:	2d01      	cmp	r5, #1
    7b36:	dc00      	bgt.n	7b3a <__aeabi_dsub+0x26a>
    7b38:	e0f2      	b.n	7d20 <__aeabi_dsub+0x450>
    7b3a:	4650      	mov	r0, sl
    7b3c:	1a80      	subs	r0, r0, r2
    7b3e:	4582      	cmp	sl, r0
    7b40:	41bf      	sbcs	r7, r7
    7b42:	1a65      	subs	r5, r4, r1
    7b44:	427f      	negs	r7, r7
    7b46:	1bed      	subs	r5, r5, r7
    7b48:	4684      	mov	ip, r0
    7b4a:	0228      	lsls	r0, r5, #8
    7b4c:	d400      	bmi.n	7b50 <__aeabi_dsub+0x280>
    7b4e:	e08c      	b.n	7c6a <__aeabi_dsub+0x39a>
    7b50:	4650      	mov	r0, sl
    7b52:	1a17      	subs	r7, r2, r0
    7b54:	42ba      	cmp	r2, r7
    7b56:	4192      	sbcs	r2, r2
    7b58:	1b0c      	subs	r4, r1, r4
    7b5a:	4255      	negs	r5, r2
    7b5c:	1b65      	subs	r5, r4, r5
    7b5e:	4698      	mov	r8, r3
    7b60:	e714      	b.n	798c <__aeabi_dsub+0xbc>
    7b62:	2501      	movs	r5, #1
    7b64:	4643      	mov	r3, r8
    7b66:	2400      	movs	r4, #0
    7b68:	401d      	ands	r5, r3
    7b6a:	2700      	movs	r7, #0
    7b6c:	e755      	b.n	7a1a <__aeabi_dsub+0x14a>
    7b6e:	4c2a      	ldr	r4, [pc, #168]	; (7c18 <__aeabi_dsub+0x348>)
    7b70:	1af6      	subs	r6, r6, r3
    7b72:	402c      	ands	r4, r5
    7b74:	e732      	b.n	79dc <__aeabi_dsub+0x10c>
    7b76:	003d      	movs	r5, r7
    7b78:	3828      	subs	r0, #40	; 0x28
    7b7a:	4085      	lsls	r5, r0
    7b7c:	2700      	movs	r7, #0
    7b7e:	e717      	b.n	79b0 <__aeabi_dsub+0xe0>
    7b80:	0038      	movs	r0, r7
    7b82:	f000 fb65 	bl	8250 <__clzsi2>
    7b86:	3020      	adds	r0, #32
    7b88:	e706      	b.n	7998 <__aeabi_dsub+0xc8>
    7b8a:	430a      	orrs	r2, r1
    7b8c:	0017      	movs	r7, r2
    7b8e:	2100      	movs	r1, #0
    7b90:	1e7a      	subs	r2, r7, #1
    7b92:	4197      	sbcs	r7, r2
    7b94:	e6ee      	b.n	7974 <__aeabi_dsub+0xa4>
    7b96:	2b00      	cmp	r3, #0
    7b98:	d000      	beq.n	7b9c <__aeabi_dsub+0x2cc>
    7b9a:	e0e5      	b.n	7d68 <__aeabi_dsub+0x498>
    7b9c:	1c73      	adds	r3, r6, #1
    7b9e:	469c      	mov	ip, r3
    7ba0:	055b      	lsls	r3, r3, #21
    7ba2:	0d5b      	lsrs	r3, r3, #21
    7ba4:	2b01      	cmp	r3, #1
    7ba6:	dc00      	bgt.n	7baa <__aeabi_dsub+0x2da>
    7ba8:	e09f      	b.n	7cea <__aeabi_dsub+0x41a>
    7baa:	4b1a      	ldr	r3, [pc, #104]	; (7c14 <__aeabi_dsub+0x344>)
    7bac:	459c      	cmp	ip, r3
    7bae:	d100      	bne.n	7bb2 <__aeabi_dsub+0x2e2>
    7bb0:	e0c5      	b.n	7d3e <__aeabi_dsub+0x46e>
    7bb2:	4452      	add	r2, sl
    7bb4:	4552      	cmp	r2, sl
    7bb6:	4180      	sbcs	r0, r0
    7bb8:	1864      	adds	r4, r4, r1
    7bba:	4240      	negs	r0, r0
    7bbc:	1824      	adds	r4, r4, r0
    7bbe:	07e7      	lsls	r7, r4, #31
    7bc0:	0852      	lsrs	r2, r2, #1
    7bc2:	4317      	orrs	r7, r2
    7bc4:	0864      	lsrs	r4, r4, #1
    7bc6:	4666      	mov	r6, ip
    7bc8:	e708      	b.n	79dc <__aeabi_dsub+0x10c>
    7bca:	4812      	ldr	r0, [pc, #72]	; (7c14 <__aeabi_dsub+0x344>)
    7bcc:	4285      	cmp	r5, r0
    7bce:	d100      	bne.n	7bd2 <__aeabi_dsub+0x302>
    7bd0:	e085      	b.n	7cde <__aeabi_dsub+0x40e>
    7bd2:	001d      	movs	r5, r3
    7bd4:	e6bc      	b.n	7950 <__aeabi_dsub+0x80>
    7bd6:	0029      	movs	r1, r5
    7bd8:	3e1f      	subs	r6, #31
    7bda:	40f1      	lsrs	r1, r6
    7bdc:	2b20      	cmp	r3, #32
    7bde:	d100      	bne.n	7be2 <__aeabi_dsub+0x312>
    7be0:	e07f      	b.n	7ce2 <__aeabi_dsub+0x412>
    7be2:	2240      	movs	r2, #64	; 0x40
    7be4:	1ad3      	subs	r3, r2, r3
    7be6:	409d      	lsls	r5, r3
    7be8:	432f      	orrs	r7, r5
    7bea:	1e7d      	subs	r5, r7, #1
    7bec:	41af      	sbcs	r7, r5
    7bee:	2400      	movs	r4, #0
    7bf0:	430f      	orrs	r7, r1
    7bf2:	2600      	movs	r6, #0
    7bf4:	e78e      	b.n	7b14 <__aeabi_dsub+0x244>
    7bf6:	002b      	movs	r3, r5
    7bf8:	000f      	movs	r7, r1
    7bfa:	3b20      	subs	r3, #32
    7bfc:	40df      	lsrs	r7, r3
    7bfe:	2d20      	cmp	r5, #32
    7c00:	d071      	beq.n	7ce6 <__aeabi_dsub+0x416>
    7c02:	2340      	movs	r3, #64	; 0x40
    7c04:	1b5d      	subs	r5, r3, r5
    7c06:	40a9      	lsls	r1, r5
    7c08:	430a      	orrs	r2, r1
    7c0a:	1e51      	subs	r1, r2, #1
    7c0c:	418a      	sbcs	r2, r1
    7c0e:	2100      	movs	r1, #0
    7c10:	4317      	orrs	r7, r2
    7c12:	e6af      	b.n	7974 <__aeabi_dsub+0xa4>
    7c14:	000007ff 	.word	0x000007ff
    7c18:	ff7fffff 	.word	0xff7fffff
    7c1c:	800fffff 	.word	0x800fffff
    7c20:	2e00      	cmp	r6, #0
    7c22:	d03e      	beq.n	7ca2 <__aeabi_dsub+0x3d2>
    7c24:	4eb3      	ldr	r6, [pc, #716]	; (7ef4 <__aeabi_dsub+0x624>)
    7c26:	45b4      	cmp	ip, r6
    7c28:	d045      	beq.n	7cb6 <__aeabi_dsub+0x3e6>
    7c2a:	2680      	movs	r6, #128	; 0x80
    7c2c:	0436      	lsls	r6, r6, #16
    7c2e:	426d      	negs	r5, r5
    7c30:	4334      	orrs	r4, r6
    7c32:	2d38      	cmp	r5, #56	; 0x38
    7c34:	dd00      	ble.n	7c38 <__aeabi_dsub+0x368>
    7c36:	e0a8      	b.n	7d8a <__aeabi_dsub+0x4ba>
    7c38:	2d1f      	cmp	r5, #31
    7c3a:	dd00      	ble.n	7c3e <__aeabi_dsub+0x36e>
    7c3c:	e11f      	b.n	7e7e <__aeabi_dsub+0x5ae>
    7c3e:	2620      	movs	r6, #32
    7c40:	0027      	movs	r7, r4
    7c42:	4650      	mov	r0, sl
    7c44:	1b76      	subs	r6, r6, r5
    7c46:	40b7      	lsls	r7, r6
    7c48:	40e8      	lsrs	r0, r5
    7c4a:	4307      	orrs	r7, r0
    7c4c:	4650      	mov	r0, sl
    7c4e:	40b0      	lsls	r0, r6
    7c50:	1e46      	subs	r6, r0, #1
    7c52:	41b0      	sbcs	r0, r6
    7c54:	40ec      	lsrs	r4, r5
    7c56:	4338      	orrs	r0, r7
    7c58:	1a17      	subs	r7, r2, r0
    7c5a:	42ba      	cmp	r2, r7
    7c5c:	4192      	sbcs	r2, r2
    7c5e:	1b0c      	subs	r4, r1, r4
    7c60:	4252      	negs	r2, r2
    7c62:	1aa4      	subs	r4, r4, r2
    7c64:	4666      	mov	r6, ip
    7c66:	4698      	mov	r8, r3
    7c68:	e68b      	b.n	7982 <__aeabi_dsub+0xb2>
    7c6a:	4664      	mov	r4, ip
    7c6c:	4667      	mov	r7, ip
    7c6e:	432c      	orrs	r4, r5
    7c70:	d000      	beq.n	7c74 <__aeabi_dsub+0x3a4>
    7c72:	e68b      	b.n	798c <__aeabi_dsub+0xbc>
    7c74:	2500      	movs	r5, #0
    7c76:	2600      	movs	r6, #0
    7c78:	2700      	movs	r7, #0
    7c7a:	e6ea      	b.n	7a52 <__aeabi_dsub+0x182>
    7c7c:	001e      	movs	r6, r3
    7c7e:	e6ad      	b.n	79dc <__aeabi_dsub+0x10c>
    7c80:	2b1f      	cmp	r3, #31
    7c82:	dc60      	bgt.n	7d46 <__aeabi_dsub+0x476>
    7c84:	2720      	movs	r7, #32
    7c86:	1af8      	subs	r0, r7, r3
    7c88:	000f      	movs	r7, r1
    7c8a:	4684      	mov	ip, r0
    7c8c:	4087      	lsls	r7, r0
    7c8e:	0010      	movs	r0, r2
    7c90:	40d8      	lsrs	r0, r3
    7c92:	4307      	orrs	r7, r0
    7c94:	4660      	mov	r0, ip
    7c96:	4082      	lsls	r2, r0
    7c98:	1e50      	subs	r0, r2, #1
    7c9a:	4182      	sbcs	r2, r0
    7c9c:	40d9      	lsrs	r1, r3
    7c9e:	4317      	orrs	r7, r2
    7ca0:	e6f5      	b.n	7a8e <__aeabi_dsub+0x1be>
    7ca2:	0026      	movs	r6, r4
    7ca4:	4650      	mov	r0, sl
    7ca6:	4306      	orrs	r6, r0
    7ca8:	d005      	beq.n	7cb6 <__aeabi_dsub+0x3e6>
    7caa:	43ed      	mvns	r5, r5
    7cac:	2d00      	cmp	r5, #0
    7cae:	d0d3      	beq.n	7c58 <__aeabi_dsub+0x388>
    7cb0:	4e90      	ldr	r6, [pc, #576]	; (7ef4 <__aeabi_dsub+0x624>)
    7cb2:	45b4      	cmp	ip, r6
    7cb4:	d1bd      	bne.n	7c32 <__aeabi_dsub+0x362>
    7cb6:	000c      	movs	r4, r1
    7cb8:	0017      	movs	r7, r2
    7cba:	4666      	mov	r6, ip
    7cbc:	4698      	mov	r8, r3
    7cbe:	e68d      	b.n	79dc <__aeabi_dsub+0x10c>
    7cc0:	488c      	ldr	r0, [pc, #560]	; (7ef4 <__aeabi_dsub+0x624>)
    7cc2:	4283      	cmp	r3, r0
    7cc4:	d00b      	beq.n	7cde <__aeabi_dsub+0x40e>
    7cc6:	4663      	mov	r3, ip
    7cc8:	e6d9      	b.n	7a7e <__aeabi_dsub+0x1ae>
    7cca:	2d00      	cmp	r5, #0
    7ccc:	d000      	beq.n	7cd0 <__aeabi_dsub+0x400>
    7cce:	e096      	b.n	7dfe <__aeabi_dsub+0x52e>
    7cd0:	0008      	movs	r0, r1
    7cd2:	4310      	orrs	r0, r2
    7cd4:	d100      	bne.n	7cd8 <__aeabi_dsub+0x408>
    7cd6:	e0e2      	b.n	7e9e <__aeabi_dsub+0x5ce>
    7cd8:	000c      	movs	r4, r1
    7cda:	0017      	movs	r7, r2
    7cdc:	4698      	mov	r8, r3
    7cde:	4e85      	ldr	r6, [pc, #532]	; (7ef4 <__aeabi_dsub+0x624>)
    7ce0:	e67c      	b.n	79dc <__aeabi_dsub+0x10c>
    7ce2:	2500      	movs	r5, #0
    7ce4:	e780      	b.n	7be8 <__aeabi_dsub+0x318>
    7ce6:	2100      	movs	r1, #0
    7ce8:	e78e      	b.n	7c08 <__aeabi_dsub+0x338>
    7cea:	0023      	movs	r3, r4
    7cec:	4650      	mov	r0, sl
    7cee:	4303      	orrs	r3, r0
    7cf0:	2e00      	cmp	r6, #0
    7cf2:	d000      	beq.n	7cf6 <__aeabi_dsub+0x426>
    7cf4:	e0a8      	b.n	7e48 <__aeabi_dsub+0x578>
    7cf6:	2b00      	cmp	r3, #0
    7cf8:	d100      	bne.n	7cfc <__aeabi_dsub+0x42c>
    7cfa:	e0de      	b.n	7eba <__aeabi_dsub+0x5ea>
    7cfc:	000b      	movs	r3, r1
    7cfe:	4313      	orrs	r3, r2
    7d00:	d100      	bne.n	7d04 <__aeabi_dsub+0x434>
    7d02:	e66b      	b.n	79dc <__aeabi_dsub+0x10c>
    7d04:	4452      	add	r2, sl
    7d06:	4552      	cmp	r2, sl
    7d08:	4180      	sbcs	r0, r0
    7d0a:	1864      	adds	r4, r4, r1
    7d0c:	4240      	negs	r0, r0
    7d0e:	1824      	adds	r4, r4, r0
    7d10:	0017      	movs	r7, r2
    7d12:	0223      	lsls	r3, r4, #8
    7d14:	d400      	bmi.n	7d18 <__aeabi_dsub+0x448>
    7d16:	e6fd      	b.n	7b14 <__aeabi_dsub+0x244>
    7d18:	4b77      	ldr	r3, [pc, #476]	; (7ef8 <__aeabi_dsub+0x628>)
    7d1a:	4666      	mov	r6, ip
    7d1c:	401c      	ands	r4, r3
    7d1e:	e65d      	b.n	79dc <__aeabi_dsub+0x10c>
    7d20:	0025      	movs	r5, r4
    7d22:	4650      	mov	r0, sl
    7d24:	4305      	orrs	r5, r0
    7d26:	2e00      	cmp	r6, #0
    7d28:	d1cf      	bne.n	7cca <__aeabi_dsub+0x3fa>
    7d2a:	2d00      	cmp	r5, #0
    7d2c:	d14f      	bne.n	7dce <__aeabi_dsub+0x4fe>
    7d2e:	000c      	movs	r4, r1
    7d30:	4314      	orrs	r4, r2
    7d32:	d100      	bne.n	7d36 <__aeabi_dsub+0x466>
    7d34:	e0a0      	b.n	7e78 <__aeabi_dsub+0x5a8>
    7d36:	000c      	movs	r4, r1
    7d38:	0017      	movs	r7, r2
    7d3a:	4698      	mov	r8, r3
    7d3c:	e64e      	b.n	79dc <__aeabi_dsub+0x10c>
    7d3e:	4666      	mov	r6, ip
    7d40:	2400      	movs	r4, #0
    7d42:	2700      	movs	r7, #0
    7d44:	e685      	b.n	7a52 <__aeabi_dsub+0x182>
    7d46:	001f      	movs	r7, r3
    7d48:	0008      	movs	r0, r1
    7d4a:	3f20      	subs	r7, #32
    7d4c:	40f8      	lsrs	r0, r7
    7d4e:	0007      	movs	r7, r0
    7d50:	2b20      	cmp	r3, #32
    7d52:	d100      	bne.n	7d56 <__aeabi_dsub+0x486>
    7d54:	e08e      	b.n	7e74 <__aeabi_dsub+0x5a4>
    7d56:	2040      	movs	r0, #64	; 0x40
    7d58:	1ac3      	subs	r3, r0, r3
    7d5a:	4099      	lsls	r1, r3
    7d5c:	430a      	orrs	r2, r1
    7d5e:	1e51      	subs	r1, r2, #1
    7d60:	418a      	sbcs	r2, r1
    7d62:	2100      	movs	r1, #0
    7d64:	4317      	orrs	r7, r2
    7d66:	e692      	b.n	7a8e <__aeabi_dsub+0x1be>
    7d68:	2e00      	cmp	r6, #0
    7d6a:	d114      	bne.n	7d96 <__aeabi_dsub+0x4c6>
    7d6c:	0026      	movs	r6, r4
    7d6e:	4650      	mov	r0, sl
    7d70:	4306      	orrs	r6, r0
    7d72:	d062      	beq.n	7e3a <__aeabi_dsub+0x56a>
    7d74:	43db      	mvns	r3, r3
    7d76:	2b00      	cmp	r3, #0
    7d78:	d15c      	bne.n	7e34 <__aeabi_dsub+0x564>
    7d7a:	1887      	adds	r7, r0, r2
    7d7c:	4297      	cmp	r7, r2
    7d7e:	4192      	sbcs	r2, r2
    7d80:	1864      	adds	r4, r4, r1
    7d82:	4252      	negs	r2, r2
    7d84:	18a4      	adds	r4, r4, r2
    7d86:	4666      	mov	r6, ip
    7d88:	e687      	b.n	7a9a <__aeabi_dsub+0x1ca>
    7d8a:	4650      	mov	r0, sl
    7d8c:	4320      	orrs	r0, r4
    7d8e:	1e44      	subs	r4, r0, #1
    7d90:	41a0      	sbcs	r0, r4
    7d92:	2400      	movs	r4, #0
    7d94:	e760      	b.n	7c58 <__aeabi_dsub+0x388>
    7d96:	4e57      	ldr	r6, [pc, #348]	; (7ef4 <__aeabi_dsub+0x624>)
    7d98:	45b4      	cmp	ip, r6
    7d9a:	d04e      	beq.n	7e3a <__aeabi_dsub+0x56a>
    7d9c:	2680      	movs	r6, #128	; 0x80
    7d9e:	0436      	lsls	r6, r6, #16
    7da0:	425b      	negs	r3, r3
    7da2:	4334      	orrs	r4, r6
    7da4:	2b38      	cmp	r3, #56	; 0x38
    7da6:	dd00      	ble.n	7daa <__aeabi_dsub+0x4da>
    7da8:	e07f      	b.n	7eaa <__aeabi_dsub+0x5da>
    7daa:	2b1f      	cmp	r3, #31
    7dac:	dd00      	ble.n	7db0 <__aeabi_dsub+0x4e0>
    7dae:	e08b      	b.n	7ec8 <__aeabi_dsub+0x5f8>
    7db0:	2620      	movs	r6, #32
    7db2:	0027      	movs	r7, r4
    7db4:	4650      	mov	r0, sl
    7db6:	1af6      	subs	r6, r6, r3
    7db8:	40b7      	lsls	r7, r6
    7dba:	40d8      	lsrs	r0, r3
    7dbc:	4307      	orrs	r7, r0
    7dbe:	4650      	mov	r0, sl
    7dc0:	40b0      	lsls	r0, r6
    7dc2:	1e46      	subs	r6, r0, #1
    7dc4:	41b0      	sbcs	r0, r6
    7dc6:	4307      	orrs	r7, r0
    7dc8:	40dc      	lsrs	r4, r3
    7dca:	18bf      	adds	r7, r7, r2
    7dcc:	e7d6      	b.n	7d7c <__aeabi_dsub+0x4ac>
    7dce:	000d      	movs	r5, r1
    7dd0:	4315      	orrs	r5, r2
    7dd2:	d100      	bne.n	7dd6 <__aeabi_dsub+0x506>
    7dd4:	e602      	b.n	79dc <__aeabi_dsub+0x10c>
    7dd6:	4650      	mov	r0, sl
    7dd8:	1a80      	subs	r0, r0, r2
    7dda:	4582      	cmp	sl, r0
    7ddc:	41bf      	sbcs	r7, r7
    7dde:	1a65      	subs	r5, r4, r1
    7de0:	427f      	negs	r7, r7
    7de2:	1bed      	subs	r5, r5, r7
    7de4:	4684      	mov	ip, r0
    7de6:	0228      	lsls	r0, r5, #8
    7de8:	d400      	bmi.n	7dec <__aeabi_dsub+0x51c>
    7dea:	e68d      	b.n	7b08 <__aeabi_dsub+0x238>
    7dec:	4650      	mov	r0, sl
    7dee:	1a17      	subs	r7, r2, r0
    7df0:	42ba      	cmp	r2, r7
    7df2:	4192      	sbcs	r2, r2
    7df4:	1b0c      	subs	r4, r1, r4
    7df6:	4252      	negs	r2, r2
    7df8:	1aa4      	subs	r4, r4, r2
    7dfa:	4698      	mov	r8, r3
    7dfc:	e5ee      	b.n	79dc <__aeabi_dsub+0x10c>
    7dfe:	000d      	movs	r5, r1
    7e00:	4315      	orrs	r5, r2
    7e02:	d100      	bne.n	7e06 <__aeabi_dsub+0x536>
    7e04:	e76b      	b.n	7cde <__aeabi_dsub+0x40e>
    7e06:	4650      	mov	r0, sl
    7e08:	0767      	lsls	r7, r4, #29
    7e0a:	08c0      	lsrs	r0, r0, #3
    7e0c:	4307      	orrs	r7, r0
    7e0e:	2080      	movs	r0, #128	; 0x80
    7e10:	08e4      	lsrs	r4, r4, #3
    7e12:	0300      	lsls	r0, r0, #12
    7e14:	4204      	tst	r4, r0
    7e16:	d007      	beq.n	7e28 <__aeabi_dsub+0x558>
    7e18:	08cd      	lsrs	r5, r1, #3
    7e1a:	4205      	tst	r5, r0
    7e1c:	d104      	bne.n	7e28 <__aeabi_dsub+0x558>
    7e1e:	002c      	movs	r4, r5
    7e20:	4698      	mov	r8, r3
    7e22:	08d7      	lsrs	r7, r2, #3
    7e24:	0749      	lsls	r1, r1, #29
    7e26:	430f      	orrs	r7, r1
    7e28:	0f7b      	lsrs	r3, r7, #29
    7e2a:	00e4      	lsls	r4, r4, #3
    7e2c:	431c      	orrs	r4, r3
    7e2e:	00ff      	lsls	r7, r7, #3
    7e30:	4e30      	ldr	r6, [pc, #192]	; (7ef4 <__aeabi_dsub+0x624>)
    7e32:	e5d3      	b.n	79dc <__aeabi_dsub+0x10c>
    7e34:	4e2f      	ldr	r6, [pc, #188]	; (7ef4 <__aeabi_dsub+0x624>)
    7e36:	45b4      	cmp	ip, r6
    7e38:	d1b4      	bne.n	7da4 <__aeabi_dsub+0x4d4>
    7e3a:	000c      	movs	r4, r1
    7e3c:	0017      	movs	r7, r2
    7e3e:	4666      	mov	r6, ip
    7e40:	e5cc      	b.n	79dc <__aeabi_dsub+0x10c>
    7e42:	2700      	movs	r7, #0
    7e44:	2400      	movs	r4, #0
    7e46:	e5e8      	b.n	7a1a <__aeabi_dsub+0x14a>
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d039      	beq.n	7ec0 <__aeabi_dsub+0x5f0>
    7e4c:	000b      	movs	r3, r1
    7e4e:	4313      	orrs	r3, r2
    7e50:	d100      	bne.n	7e54 <__aeabi_dsub+0x584>
    7e52:	e744      	b.n	7cde <__aeabi_dsub+0x40e>
    7e54:	08c0      	lsrs	r0, r0, #3
    7e56:	0767      	lsls	r7, r4, #29
    7e58:	4307      	orrs	r7, r0
    7e5a:	2080      	movs	r0, #128	; 0x80
    7e5c:	08e4      	lsrs	r4, r4, #3
    7e5e:	0300      	lsls	r0, r0, #12
    7e60:	4204      	tst	r4, r0
    7e62:	d0e1      	beq.n	7e28 <__aeabi_dsub+0x558>
    7e64:	08cb      	lsrs	r3, r1, #3
    7e66:	4203      	tst	r3, r0
    7e68:	d1de      	bne.n	7e28 <__aeabi_dsub+0x558>
    7e6a:	08d7      	lsrs	r7, r2, #3
    7e6c:	0749      	lsls	r1, r1, #29
    7e6e:	430f      	orrs	r7, r1
    7e70:	001c      	movs	r4, r3
    7e72:	e7d9      	b.n	7e28 <__aeabi_dsub+0x558>
    7e74:	2100      	movs	r1, #0
    7e76:	e771      	b.n	7d5c <__aeabi_dsub+0x48c>
    7e78:	2500      	movs	r5, #0
    7e7a:	2700      	movs	r7, #0
    7e7c:	e5e9      	b.n	7a52 <__aeabi_dsub+0x182>
    7e7e:	002e      	movs	r6, r5
    7e80:	0027      	movs	r7, r4
    7e82:	3e20      	subs	r6, #32
    7e84:	40f7      	lsrs	r7, r6
    7e86:	2d20      	cmp	r5, #32
    7e88:	d02f      	beq.n	7eea <__aeabi_dsub+0x61a>
    7e8a:	2640      	movs	r6, #64	; 0x40
    7e8c:	1b75      	subs	r5, r6, r5
    7e8e:	40ac      	lsls	r4, r5
    7e90:	4650      	mov	r0, sl
    7e92:	4320      	orrs	r0, r4
    7e94:	1e44      	subs	r4, r0, #1
    7e96:	41a0      	sbcs	r0, r4
    7e98:	2400      	movs	r4, #0
    7e9a:	4338      	orrs	r0, r7
    7e9c:	e6dc      	b.n	7c58 <__aeabi_dsub+0x388>
    7e9e:	2480      	movs	r4, #128	; 0x80
    7ea0:	2500      	movs	r5, #0
    7ea2:	0324      	lsls	r4, r4, #12
    7ea4:	4e13      	ldr	r6, [pc, #76]	; (7ef4 <__aeabi_dsub+0x624>)
    7ea6:	2700      	movs	r7, #0
    7ea8:	e5d3      	b.n	7a52 <__aeabi_dsub+0x182>
    7eaa:	4650      	mov	r0, sl
    7eac:	4320      	orrs	r0, r4
    7eae:	0007      	movs	r7, r0
    7eb0:	1e78      	subs	r0, r7, #1
    7eb2:	4187      	sbcs	r7, r0
    7eb4:	2400      	movs	r4, #0
    7eb6:	18bf      	adds	r7, r7, r2
    7eb8:	e760      	b.n	7d7c <__aeabi_dsub+0x4ac>
    7eba:	000c      	movs	r4, r1
    7ebc:	0017      	movs	r7, r2
    7ebe:	e58d      	b.n	79dc <__aeabi_dsub+0x10c>
    7ec0:	000c      	movs	r4, r1
    7ec2:	0017      	movs	r7, r2
    7ec4:	4e0b      	ldr	r6, [pc, #44]	; (7ef4 <__aeabi_dsub+0x624>)
    7ec6:	e589      	b.n	79dc <__aeabi_dsub+0x10c>
    7ec8:	001e      	movs	r6, r3
    7eca:	0027      	movs	r7, r4
    7ecc:	3e20      	subs	r6, #32
    7ece:	40f7      	lsrs	r7, r6
    7ed0:	2b20      	cmp	r3, #32
    7ed2:	d00c      	beq.n	7eee <__aeabi_dsub+0x61e>
    7ed4:	2640      	movs	r6, #64	; 0x40
    7ed6:	1af3      	subs	r3, r6, r3
    7ed8:	409c      	lsls	r4, r3
    7eda:	4650      	mov	r0, sl
    7edc:	4320      	orrs	r0, r4
    7ede:	1e44      	subs	r4, r0, #1
    7ee0:	41a0      	sbcs	r0, r4
    7ee2:	4307      	orrs	r7, r0
    7ee4:	2400      	movs	r4, #0
    7ee6:	18bf      	adds	r7, r7, r2
    7ee8:	e748      	b.n	7d7c <__aeabi_dsub+0x4ac>
    7eea:	2400      	movs	r4, #0
    7eec:	e7d0      	b.n	7e90 <__aeabi_dsub+0x5c0>
    7eee:	2400      	movs	r4, #0
    7ef0:	e7f3      	b.n	7eda <__aeabi_dsub+0x60a>
    7ef2:	46c0      	nop			; (mov r8, r8)
    7ef4:	000007ff 	.word	0x000007ff
    7ef8:	ff7fffff 	.word	0xff7fffff

00007efc <__aeabi_dcmpun>:
    7efc:	b570      	push	{r4, r5, r6, lr}
    7efe:	4e0e      	ldr	r6, [pc, #56]	; (7f38 <__aeabi_dcmpun+0x3c>)
    7f00:	030d      	lsls	r5, r1, #12
    7f02:	031c      	lsls	r4, r3, #12
    7f04:	0049      	lsls	r1, r1, #1
    7f06:	005b      	lsls	r3, r3, #1
    7f08:	0b2d      	lsrs	r5, r5, #12
    7f0a:	0d49      	lsrs	r1, r1, #21
    7f0c:	0b24      	lsrs	r4, r4, #12
    7f0e:	0d5b      	lsrs	r3, r3, #21
    7f10:	42b1      	cmp	r1, r6
    7f12:	d004      	beq.n	7f1e <__aeabi_dcmpun+0x22>
    7f14:	4908      	ldr	r1, [pc, #32]	; (7f38 <__aeabi_dcmpun+0x3c>)
    7f16:	2000      	movs	r0, #0
    7f18:	428b      	cmp	r3, r1
    7f1a:	d008      	beq.n	7f2e <__aeabi_dcmpun+0x32>
    7f1c:	bd70      	pop	{r4, r5, r6, pc}
    7f1e:	4305      	orrs	r5, r0
    7f20:	2001      	movs	r0, #1
    7f22:	2d00      	cmp	r5, #0
    7f24:	d1fa      	bne.n	7f1c <__aeabi_dcmpun+0x20>
    7f26:	4904      	ldr	r1, [pc, #16]	; (7f38 <__aeabi_dcmpun+0x3c>)
    7f28:	2000      	movs	r0, #0
    7f2a:	428b      	cmp	r3, r1
    7f2c:	d1f6      	bne.n	7f1c <__aeabi_dcmpun+0x20>
    7f2e:	4314      	orrs	r4, r2
    7f30:	0020      	movs	r0, r4
    7f32:	1e44      	subs	r4, r0, #1
    7f34:	41a0      	sbcs	r0, r4
    7f36:	e7f1      	b.n	7f1c <__aeabi_dcmpun+0x20>
    7f38:	000007ff 	.word	0x000007ff

00007f3c <__aeabi_d2iz>:
    7f3c:	b530      	push	{r4, r5, lr}
    7f3e:	4d13      	ldr	r5, [pc, #76]	; (7f8c <__aeabi_d2iz+0x50>)
    7f40:	030a      	lsls	r2, r1, #12
    7f42:	004b      	lsls	r3, r1, #1
    7f44:	0b12      	lsrs	r2, r2, #12
    7f46:	0d5b      	lsrs	r3, r3, #21
    7f48:	0fc9      	lsrs	r1, r1, #31
    7f4a:	2400      	movs	r4, #0
    7f4c:	42ab      	cmp	r3, r5
    7f4e:	dd10      	ble.n	7f72 <__aeabi_d2iz+0x36>
    7f50:	4c0f      	ldr	r4, [pc, #60]	; (7f90 <__aeabi_d2iz+0x54>)
    7f52:	42a3      	cmp	r3, r4
    7f54:	dc0f      	bgt.n	7f76 <__aeabi_d2iz+0x3a>
    7f56:	2480      	movs	r4, #128	; 0x80
    7f58:	4d0e      	ldr	r5, [pc, #56]	; (7f94 <__aeabi_d2iz+0x58>)
    7f5a:	0364      	lsls	r4, r4, #13
    7f5c:	4322      	orrs	r2, r4
    7f5e:	1aed      	subs	r5, r5, r3
    7f60:	2d1f      	cmp	r5, #31
    7f62:	dd0b      	ble.n	7f7c <__aeabi_d2iz+0x40>
    7f64:	480c      	ldr	r0, [pc, #48]	; (7f98 <__aeabi_d2iz+0x5c>)
    7f66:	1ac3      	subs	r3, r0, r3
    7f68:	40da      	lsrs	r2, r3
    7f6a:	4254      	negs	r4, r2
    7f6c:	2900      	cmp	r1, #0
    7f6e:	d100      	bne.n	7f72 <__aeabi_d2iz+0x36>
    7f70:	0014      	movs	r4, r2
    7f72:	0020      	movs	r0, r4
    7f74:	bd30      	pop	{r4, r5, pc}
    7f76:	4b09      	ldr	r3, [pc, #36]	; (7f9c <__aeabi_d2iz+0x60>)
    7f78:	18cc      	adds	r4, r1, r3
    7f7a:	e7fa      	b.n	7f72 <__aeabi_d2iz+0x36>
    7f7c:	4c08      	ldr	r4, [pc, #32]	; (7fa0 <__aeabi_d2iz+0x64>)
    7f7e:	40e8      	lsrs	r0, r5
    7f80:	46a4      	mov	ip, r4
    7f82:	4463      	add	r3, ip
    7f84:	409a      	lsls	r2, r3
    7f86:	4302      	orrs	r2, r0
    7f88:	e7ef      	b.n	7f6a <__aeabi_d2iz+0x2e>
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	000003fe 	.word	0x000003fe
    7f90:	0000041d 	.word	0x0000041d
    7f94:	00000433 	.word	0x00000433
    7f98:	00000413 	.word	0x00000413
    7f9c:	7fffffff 	.word	0x7fffffff
    7fa0:	fffffbed 	.word	0xfffffbed

00007fa4 <__aeabi_i2d>:
    7fa4:	b570      	push	{r4, r5, r6, lr}
    7fa6:	2800      	cmp	r0, #0
    7fa8:	d030      	beq.n	800c <__aeabi_i2d+0x68>
    7faa:	17c3      	asrs	r3, r0, #31
    7fac:	18c4      	adds	r4, r0, r3
    7fae:	405c      	eors	r4, r3
    7fb0:	0fc5      	lsrs	r5, r0, #31
    7fb2:	0020      	movs	r0, r4
    7fb4:	f000 f94c 	bl	8250 <__clzsi2>
    7fb8:	4b17      	ldr	r3, [pc, #92]	; (8018 <__aeabi_i2d+0x74>)
    7fba:	4a18      	ldr	r2, [pc, #96]	; (801c <__aeabi_i2d+0x78>)
    7fbc:	1a1b      	subs	r3, r3, r0
    7fbe:	1ad2      	subs	r2, r2, r3
    7fc0:	2a1f      	cmp	r2, #31
    7fc2:	dd18      	ble.n	7ff6 <__aeabi_i2d+0x52>
    7fc4:	4a16      	ldr	r2, [pc, #88]	; (8020 <__aeabi_i2d+0x7c>)
    7fc6:	1ad2      	subs	r2, r2, r3
    7fc8:	4094      	lsls	r4, r2
    7fca:	2200      	movs	r2, #0
    7fcc:	0324      	lsls	r4, r4, #12
    7fce:	055b      	lsls	r3, r3, #21
    7fd0:	0b24      	lsrs	r4, r4, #12
    7fd2:	0d5b      	lsrs	r3, r3, #21
    7fd4:	2100      	movs	r1, #0
    7fd6:	0010      	movs	r0, r2
    7fd8:	0324      	lsls	r4, r4, #12
    7fda:	0d0a      	lsrs	r2, r1, #20
    7fdc:	0b24      	lsrs	r4, r4, #12
    7fde:	0512      	lsls	r2, r2, #20
    7fe0:	4322      	orrs	r2, r4
    7fe2:	4c10      	ldr	r4, [pc, #64]	; (8024 <__aeabi_i2d+0x80>)
    7fe4:	051b      	lsls	r3, r3, #20
    7fe6:	4022      	ands	r2, r4
    7fe8:	4313      	orrs	r3, r2
    7fea:	005b      	lsls	r3, r3, #1
    7fec:	07ed      	lsls	r5, r5, #31
    7fee:	085b      	lsrs	r3, r3, #1
    7ff0:	432b      	orrs	r3, r5
    7ff2:	0019      	movs	r1, r3
    7ff4:	bd70      	pop	{r4, r5, r6, pc}
    7ff6:	0021      	movs	r1, r4
    7ff8:	4091      	lsls	r1, r2
    7ffa:	000a      	movs	r2, r1
    7ffc:	210b      	movs	r1, #11
    7ffe:	1a08      	subs	r0, r1, r0
    8000:	40c4      	lsrs	r4, r0
    8002:	055b      	lsls	r3, r3, #21
    8004:	0324      	lsls	r4, r4, #12
    8006:	0b24      	lsrs	r4, r4, #12
    8008:	0d5b      	lsrs	r3, r3, #21
    800a:	e7e3      	b.n	7fd4 <__aeabi_i2d+0x30>
    800c:	2500      	movs	r5, #0
    800e:	2300      	movs	r3, #0
    8010:	2400      	movs	r4, #0
    8012:	2200      	movs	r2, #0
    8014:	e7de      	b.n	7fd4 <__aeabi_i2d+0x30>
    8016:	46c0      	nop			; (mov r8, r8)
    8018:	0000041e 	.word	0x0000041e
    801c:	00000433 	.word	0x00000433
    8020:	00000413 	.word	0x00000413
    8024:	800fffff 	.word	0x800fffff

00008028 <__aeabi_ui2d>:
    8028:	b510      	push	{r4, lr}
    802a:	1e04      	subs	r4, r0, #0
    802c:	d028      	beq.n	8080 <__aeabi_ui2d+0x58>
    802e:	f000 f90f 	bl	8250 <__clzsi2>
    8032:	4b15      	ldr	r3, [pc, #84]	; (8088 <__aeabi_ui2d+0x60>)
    8034:	4a15      	ldr	r2, [pc, #84]	; (808c <__aeabi_ui2d+0x64>)
    8036:	1a1b      	subs	r3, r3, r0
    8038:	1ad2      	subs	r2, r2, r3
    803a:	2a1f      	cmp	r2, #31
    803c:	dd15      	ble.n	806a <__aeabi_ui2d+0x42>
    803e:	4a14      	ldr	r2, [pc, #80]	; (8090 <__aeabi_ui2d+0x68>)
    8040:	1ad2      	subs	r2, r2, r3
    8042:	4094      	lsls	r4, r2
    8044:	2200      	movs	r2, #0
    8046:	0324      	lsls	r4, r4, #12
    8048:	055b      	lsls	r3, r3, #21
    804a:	0b24      	lsrs	r4, r4, #12
    804c:	0d5b      	lsrs	r3, r3, #21
    804e:	2100      	movs	r1, #0
    8050:	0010      	movs	r0, r2
    8052:	0324      	lsls	r4, r4, #12
    8054:	0d0a      	lsrs	r2, r1, #20
    8056:	0b24      	lsrs	r4, r4, #12
    8058:	0512      	lsls	r2, r2, #20
    805a:	4322      	orrs	r2, r4
    805c:	4c0d      	ldr	r4, [pc, #52]	; (8094 <__aeabi_ui2d+0x6c>)
    805e:	051b      	lsls	r3, r3, #20
    8060:	4022      	ands	r2, r4
    8062:	4313      	orrs	r3, r2
    8064:	005b      	lsls	r3, r3, #1
    8066:	0859      	lsrs	r1, r3, #1
    8068:	bd10      	pop	{r4, pc}
    806a:	0021      	movs	r1, r4
    806c:	4091      	lsls	r1, r2
    806e:	000a      	movs	r2, r1
    8070:	210b      	movs	r1, #11
    8072:	1a08      	subs	r0, r1, r0
    8074:	40c4      	lsrs	r4, r0
    8076:	055b      	lsls	r3, r3, #21
    8078:	0324      	lsls	r4, r4, #12
    807a:	0b24      	lsrs	r4, r4, #12
    807c:	0d5b      	lsrs	r3, r3, #21
    807e:	e7e6      	b.n	804e <__aeabi_ui2d+0x26>
    8080:	2300      	movs	r3, #0
    8082:	2400      	movs	r4, #0
    8084:	2200      	movs	r2, #0
    8086:	e7e2      	b.n	804e <__aeabi_ui2d+0x26>
    8088:	0000041e 	.word	0x0000041e
    808c:	00000433 	.word	0x00000433
    8090:	00000413 	.word	0x00000413
    8094:	800fffff 	.word	0x800fffff

00008098 <__aeabi_f2d>:
    8098:	0041      	lsls	r1, r0, #1
    809a:	0e09      	lsrs	r1, r1, #24
    809c:	1c4b      	adds	r3, r1, #1
    809e:	b570      	push	{r4, r5, r6, lr}
    80a0:	b2db      	uxtb	r3, r3
    80a2:	0246      	lsls	r6, r0, #9
    80a4:	0a75      	lsrs	r5, r6, #9
    80a6:	0fc4      	lsrs	r4, r0, #31
    80a8:	2b01      	cmp	r3, #1
    80aa:	dd14      	ble.n	80d6 <__aeabi_f2d+0x3e>
    80ac:	23e0      	movs	r3, #224	; 0xe0
    80ae:	009b      	lsls	r3, r3, #2
    80b0:	076d      	lsls	r5, r5, #29
    80b2:	0b36      	lsrs	r6, r6, #12
    80b4:	18cb      	adds	r3, r1, r3
    80b6:	2100      	movs	r1, #0
    80b8:	0d0a      	lsrs	r2, r1, #20
    80ba:	0028      	movs	r0, r5
    80bc:	0512      	lsls	r2, r2, #20
    80be:	4d1c      	ldr	r5, [pc, #112]	; (8130 <__aeabi_f2d+0x98>)
    80c0:	4332      	orrs	r2, r6
    80c2:	055b      	lsls	r3, r3, #21
    80c4:	402a      	ands	r2, r5
    80c6:	085b      	lsrs	r3, r3, #1
    80c8:	4313      	orrs	r3, r2
    80ca:	005b      	lsls	r3, r3, #1
    80cc:	07e4      	lsls	r4, r4, #31
    80ce:	085b      	lsrs	r3, r3, #1
    80d0:	4323      	orrs	r3, r4
    80d2:	0019      	movs	r1, r3
    80d4:	bd70      	pop	{r4, r5, r6, pc}
    80d6:	2900      	cmp	r1, #0
    80d8:	d114      	bne.n	8104 <__aeabi_f2d+0x6c>
    80da:	2d00      	cmp	r5, #0
    80dc:	d01e      	beq.n	811c <__aeabi_f2d+0x84>
    80de:	0028      	movs	r0, r5
    80e0:	f000 f8b6 	bl	8250 <__clzsi2>
    80e4:	280a      	cmp	r0, #10
    80e6:	dc1c      	bgt.n	8122 <__aeabi_f2d+0x8a>
    80e8:	230b      	movs	r3, #11
    80ea:	002a      	movs	r2, r5
    80ec:	1a1b      	subs	r3, r3, r0
    80ee:	40da      	lsrs	r2, r3
    80f0:	0003      	movs	r3, r0
    80f2:	3315      	adds	r3, #21
    80f4:	409d      	lsls	r5, r3
    80f6:	4b0f      	ldr	r3, [pc, #60]	; (8134 <__aeabi_f2d+0x9c>)
    80f8:	0312      	lsls	r2, r2, #12
    80fa:	1a1b      	subs	r3, r3, r0
    80fc:	055b      	lsls	r3, r3, #21
    80fe:	0b16      	lsrs	r6, r2, #12
    8100:	0d5b      	lsrs	r3, r3, #21
    8102:	e7d8      	b.n	80b6 <__aeabi_f2d+0x1e>
    8104:	2d00      	cmp	r5, #0
    8106:	d006      	beq.n	8116 <__aeabi_f2d+0x7e>
    8108:	0b32      	lsrs	r2, r6, #12
    810a:	2680      	movs	r6, #128	; 0x80
    810c:	0336      	lsls	r6, r6, #12
    810e:	076d      	lsls	r5, r5, #29
    8110:	4316      	orrs	r6, r2
    8112:	4b09      	ldr	r3, [pc, #36]	; (8138 <__aeabi_f2d+0xa0>)
    8114:	e7cf      	b.n	80b6 <__aeabi_f2d+0x1e>
    8116:	4b08      	ldr	r3, [pc, #32]	; (8138 <__aeabi_f2d+0xa0>)
    8118:	2600      	movs	r6, #0
    811a:	e7cc      	b.n	80b6 <__aeabi_f2d+0x1e>
    811c:	2300      	movs	r3, #0
    811e:	2600      	movs	r6, #0
    8120:	e7c9      	b.n	80b6 <__aeabi_f2d+0x1e>
    8122:	0003      	movs	r3, r0
    8124:	002a      	movs	r2, r5
    8126:	3b0b      	subs	r3, #11
    8128:	409a      	lsls	r2, r3
    812a:	2500      	movs	r5, #0
    812c:	e7e3      	b.n	80f6 <__aeabi_f2d+0x5e>
    812e:	46c0      	nop			; (mov r8, r8)
    8130:	800fffff 	.word	0x800fffff
    8134:	00000389 	.word	0x00000389
    8138:	000007ff 	.word	0x000007ff

0000813c <__aeabi_d2f>:
    813c:	b5f0      	push	{r4, r5, r6, r7, lr}
    813e:	004c      	lsls	r4, r1, #1
    8140:	0d64      	lsrs	r4, r4, #21
    8142:	030b      	lsls	r3, r1, #12
    8144:	1c62      	adds	r2, r4, #1
    8146:	0f45      	lsrs	r5, r0, #29
    8148:	0a5b      	lsrs	r3, r3, #9
    814a:	0552      	lsls	r2, r2, #21
    814c:	432b      	orrs	r3, r5
    814e:	0fc9      	lsrs	r1, r1, #31
    8150:	00c5      	lsls	r5, r0, #3
    8152:	0d52      	lsrs	r2, r2, #21
    8154:	2a01      	cmp	r2, #1
    8156:	dd28      	ble.n	81aa <__aeabi_d2f+0x6e>
    8158:	4a3a      	ldr	r2, [pc, #232]	; (8244 <__aeabi_d2f+0x108>)
    815a:	18a6      	adds	r6, r4, r2
    815c:	2efe      	cmp	r6, #254	; 0xfe
    815e:	dc1b      	bgt.n	8198 <__aeabi_d2f+0x5c>
    8160:	2e00      	cmp	r6, #0
    8162:	dd3e      	ble.n	81e2 <__aeabi_d2f+0xa6>
    8164:	0180      	lsls	r0, r0, #6
    8166:	0002      	movs	r2, r0
    8168:	1e50      	subs	r0, r2, #1
    816a:	4182      	sbcs	r2, r0
    816c:	0f6d      	lsrs	r5, r5, #29
    816e:	432a      	orrs	r2, r5
    8170:	00db      	lsls	r3, r3, #3
    8172:	4313      	orrs	r3, r2
    8174:	075a      	lsls	r2, r3, #29
    8176:	d004      	beq.n	8182 <__aeabi_d2f+0x46>
    8178:	220f      	movs	r2, #15
    817a:	401a      	ands	r2, r3
    817c:	2a04      	cmp	r2, #4
    817e:	d000      	beq.n	8182 <__aeabi_d2f+0x46>
    8180:	3304      	adds	r3, #4
    8182:	2280      	movs	r2, #128	; 0x80
    8184:	04d2      	lsls	r2, r2, #19
    8186:	401a      	ands	r2, r3
    8188:	d05a      	beq.n	8240 <__aeabi_d2f+0x104>
    818a:	3601      	adds	r6, #1
    818c:	2eff      	cmp	r6, #255	; 0xff
    818e:	d003      	beq.n	8198 <__aeabi_d2f+0x5c>
    8190:	019b      	lsls	r3, r3, #6
    8192:	0a5b      	lsrs	r3, r3, #9
    8194:	b2f4      	uxtb	r4, r6
    8196:	e001      	b.n	819c <__aeabi_d2f+0x60>
    8198:	24ff      	movs	r4, #255	; 0xff
    819a:	2300      	movs	r3, #0
    819c:	0258      	lsls	r0, r3, #9
    819e:	05e4      	lsls	r4, r4, #23
    81a0:	0a40      	lsrs	r0, r0, #9
    81a2:	07c9      	lsls	r1, r1, #31
    81a4:	4320      	orrs	r0, r4
    81a6:	4308      	orrs	r0, r1
    81a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81aa:	2c00      	cmp	r4, #0
    81ac:	d007      	beq.n	81be <__aeabi_d2f+0x82>
    81ae:	431d      	orrs	r5, r3
    81b0:	d0f2      	beq.n	8198 <__aeabi_d2f+0x5c>
    81b2:	2080      	movs	r0, #128	; 0x80
    81b4:	00db      	lsls	r3, r3, #3
    81b6:	0480      	lsls	r0, r0, #18
    81b8:	4303      	orrs	r3, r0
    81ba:	26ff      	movs	r6, #255	; 0xff
    81bc:	e7da      	b.n	8174 <__aeabi_d2f+0x38>
    81be:	432b      	orrs	r3, r5
    81c0:	d003      	beq.n	81ca <__aeabi_d2f+0x8e>
    81c2:	2305      	movs	r3, #5
    81c4:	08db      	lsrs	r3, r3, #3
    81c6:	2cff      	cmp	r4, #255	; 0xff
    81c8:	d003      	beq.n	81d2 <__aeabi_d2f+0x96>
    81ca:	025b      	lsls	r3, r3, #9
    81cc:	0a5b      	lsrs	r3, r3, #9
    81ce:	b2e4      	uxtb	r4, r4
    81d0:	e7e4      	b.n	819c <__aeabi_d2f+0x60>
    81d2:	2b00      	cmp	r3, #0
    81d4:	d032      	beq.n	823c <__aeabi_d2f+0x100>
    81d6:	2080      	movs	r0, #128	; 0x80
    81d8:	03c0      	lsls	r0, r0, #15
    81da:	4303      	orrs	r3, r0
    81dc:	025b      	lsls	r3, r3, #9
    81de:	0a5b      	lsrs	r3, r3, #9
    81e0:	e7dc      	b.n	819c <__aeabi_d2f+0x60>
    81e2:	0032      	movs	r2, r6
    81e4:	3217      	adds	r2, #23
    81e6:	db14      	blt.n	8212 <__aeabi_d2f+0xd6>
    81e8:	2280      	movs	r2, #128	; 0x80
    81ea:	271e      	movs	r7, #30
    81ec:	0412      	lsls	r2, r2, #16
    81ee:	4313      	orrs	r3, r2
    81f0:	1bbf      	subs	r7, r7, r6
    81f2:	2f1f      	cmp	r7, #31
    81f4:	dc0f      	bgt.n	8216 <__aeabi_d2f+0xda>
    81f6:	4a14      	ldr	r2, [pc, #80]	; (8248 <__aeabi_d2f+0x10c>)
    81f8:	4694      	mov	ip, r2
    81fa:	4464      	add	r4, ip
    81fc:	002a      	movs	r2, r5
    81fe:	40a5      	lsls	r5, r4
    8200:	002e      	movs	r6, r5
    8202:	40a3      	lsls	r3, r4
    8204:	1e75      	subs	r5, r6, #1
    8206:	41ae      	sbcs	r6, r5
    8208:	40fa      	lsrs	r2, r7
    820a:	4333      	orrs	r3, r6
    820c:	4313      	orrs	r3, r2
    820e:	2600      	movs	r6, #0
    8210:	e7b0      	b.n	8174 <__aeabi_d2f+0x38>
    8212:	2400      	movs	r4, #0
    8214:	e7d5      	b.n	81c2 <__aeabi_d2f+0x86>
    8216:	2202      	movs	r2, #2
    8218:	4252      	negs	r2, r2
    821a:	1b96      	subs	r6, r2, r6
    821c:	001a      	movs	r2, r3
    821e:	40f2      	lsrs	r2, r6
    8220:	2f20      	cmp	r7, #32
    8222:	d009      	beq.n	8238 <__aeabi_d2f+0xfc>
    8224:	4809      	ldr	r0, [pc, #36]	; (824c <__aeabi_d2f+0x110>)
    8226:	4684      	mov	ip, r0
    8228:	4464      	add	r4, ip
    822a:	40a3      	lsls	r3, r4
    822c:	432b      	orrs	r3, r5
    822e:	1e5d      	subs	r5, r3, #1
    8230:	41ab      	sbcs	r3, r5
    8232:	2600      	movs	r6, #0
    8234:	4313      	orrs	r3, r2
    8236:	e79d      	b.n	8174 <__aeabi_d2f+0x38>
    8238:	2300      	movs	r3, #0
    823a:	e7f7      	b.n	822c <__aeabi_d2f+0xf0>
    823c:	2300      	movs	r3, #0
    823e:	e7ad      	b.n	819c <__aeabi_d2f+0x60>
    8240:	0034      	movs	r4, r6
    8242:	e7bf      	b.n	81c4 <__aeabi_d2f+0x88>
    8244:	fffffc80 	.word	0xfffffc80
    8248:	fffffc82 	.word	0xfffffc82
    824c:	fffffca2 	.word	0xfffffca2

00008250 <__clzsi2>:
    8250:	211c      	movs	r1, #28
    8252:	2301      	movs	r3, #1
    8254:	041b      	lsls	r3, r3, #16
    8256:	4298      	cmp	r0, r3
    8258:	d301      	bcc.n	825e <__clzsi2+0xe>
    825a:	0c00      	lsrs	r0, r0, #16
    825c:	3910      	subs	r1, #16
    825e:	0a1b      	lsrs	r3, r3, #8
    8260:	4298      	cmp	r0, r3
    8262:	d301      	bcc.n	8268 <__clzsi2+0x18>
    8264:	0a00      	lsrs	r0, r0, #8
    8266:	3908      	subs	r1, #8
    8268:	091b      	lsrs	r3, r3, #4
    826a:	4298      	cmp	r0, r3
    826c:	d301      	bcc.n	8272 <__clzsi2+0x22>
    826e:	0900      	lsrs	r0, r0, #4
    8270:	3904      	subs	r1, #4
    8272:	a202      	add	r2, pc, #8	; (adr r2, 827c <__clzsi2+0x2c>)
    8274:	5c10      	ldrb	r0, [r2, r0]
    8276:	1840      	adds	r0, r0, r1
    8278:	4770      	bx	lr
    827a:	46c0      	nop			; (mov r8, r8)
    827c:	02020304 	.word	0x02020304
    8280:	01010101 	.word	0x01010101
	...

0000828c <atoi>:
    828c:	b510      	push	{r4, lr}
    828e:	220a      	movs	r2, #10
    8290:	2100      	movs	r1, #0
    8292:	f000 fc4f 	bl	8b34 <strtol>
    8296:	bd10      	pop	{r4, pc}

00008298 <__errno>:
    8298:	4b01      	ldr	r3, [pc, #4]	; (82a0 <__errno+0x8>)
    829a:	6818      	ldr	r0, [r3, #0]
    829c:	4770      	bx	lr
    829e:	46c0      	nop			; (mov r8, r8)
    82a0:	20000014 	.word	0x20000014

000082a4 <__libc_init_array>:
    82a4:	b570      	push	{r4, r5, r6, lr}
    82a6:	4e0d      	ldr	r6, [pc, #52]	; (82dc <__libc_init_array+0x38>)
    82a8:	4d0d      	ldr	r5, [pc, #52]	; (82e0 <__libc_init_array+0x3c>)
    82aa:	2400      	movs	r4, #0
    82ac:	1bad      	subs	r5, r5, r6
    82ae:	10ad      	asrs	r5, r5, #2
    82b0:	d005      	beq.n	82be <__libc_init_array+0x1a>
    82b2:	00a3      	lsls	r3, r4, #2
    82b4:	58f3      	ldr	r3, [r6, r3]
    82b6:	3401      	adds	r4, #1
    82b8:	4798      	blx	r3
    82ba:	42a5      	cmp	r5, r4
    82bc:	d1f9      	bne.n	82b2 <__libc_init_array+0xe>
    82be:	f006 f923 	bl	e508 <_init>
    82c2:	4e08      	ldr	r6, [pc, #32]	; (82e4 <__libc_init_array+0x40>)
    82c4:	4d08      	ldr	r5, [pc, #32]	; (82e8 <__libc_init_array+0x44>)
    82c6:	2400      	movs	r4, #0
    82c8:	1bad      	subs	r5, r5, r6
    82ca:	10ad      	asrs	r5, r5, #2
    82cc:	d005      	beq.n	82da <__libc_init_array+0x36>
    82ce:	00a3      	lsls	r3, r4, #2
    82d0:	58f3      	ldr	r3, [r6, r3]
    82d2:	3401      	adds	r4, #1
    82d4:	4798      	blx	r3
    82d6:	42a5      	cmp	r5, r4
    82d8:	d1f9      	bne.n	82ce <__libc_init_array+0x2a>
    82da:	bd70      	pop	{r4, r5, r6, pc}
    82dc:	0000e514 	.word	0x0000e514
    82e0:	0000e514 	.word	0x0000e514
    82e4:	0000e514 	.word	0x0000e514
    82e8:	0000e51c 	.word	0x0000e51c

000082ec <memcpy>:
    82ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    82ee:	0005      	movs	r5, r0
    82f0:	2a0f      	cmp	r2, #15
    82f2:	d92f      	bls.n	8354 <memcpy+0x68>
    82f4:	000b      	movs	r3, r1
    82f6:	4303      	orrs	r3, r0
    82f8:	079b      	lsls	r3, r3, #30
    82fa:	d134      	bne.n	8366 <memcpy+0x7a>
    82fc:	0016      	movs	r6, r2
    82fe:	000c      	movs	r4, r1
    8300:	0003      	movs	r3, r0
    8302:	3e10      	subs	r6, #16
    8304:	0935      	lsrs	r5, r6, #4
    8306:	3501      	adds	r5, #1
    8308:	012d      	lsls	r5, r5, #4
    830a:	1945      	adds	r5, r0, r5
    830c:	6827      	ldr	r7, [r4, #0]
    830e:	601f      	str	r7, [r3, #0]
    8310:	6867      	ldr	r7, [r4, #4]
    8312:	605f      	str	r7, [r3, #4]
    8314:	68a7      	ldr	r7, [r4, #8]
    8316:	609f      	str	r7, [r3, #8]
    8318:	68e7      	ldr	r7, [r4, #12]
    831a:	3410      	adds	r4, #16
    831c:	60df      	str	r7, [r3, #12]
    831e:	3310      	adds	r3, #16
    8320:	429d      	cmp	r5, r3
    8322:	d1f3      	bne.n	830c <memcpy+0x20>
    8324:	230f      	movs	r3, #15
    8326:	439e      	bics	r6, r3
    8328:	3610      	adds	r6, #16
    832a:	1985      	adds	r5, r0, r6
    832c:	1989      	adds	r1, r1, r6
    832e:	4013      	ands	r3, r2
    8330:	2b03      	cmp	r3, #3
    8332:	d91a      	bls.n	836a <memcpy+0x7e>
    8334:	1f1e      	subs	r6, r3, #4
    8336:	2300      	movs	r3, #0
    8338:	08b4      	lsrs	r4, r6, #2
    833a:	3401      	adds	r4, #1
    833c:	00a4      	lsls	r4, r4, #2
    833e:	58cf      	ldr	r7, [r1, r3]
    8340:	50ef      	str	r7, [r5, r3]
    8342:	3304      	adds	r3, #4
    8344:	42a3      	cmp	r3, r4
    8346:	d1fa      	bne.n	833e <memcpy+0x52>
    8348:	2403      	movs	r4, #3
    834a:	43a6      	bics	r6, r4
    834c:	1d33      	adds	r3, r6, #4
    834e:	4022      	ands	r2, r4
    8350:	18c9      	adds	r1, r1, r3
    8352:	18ed      	adds	r5, r5, r3
    8354:	2a00      	cmp	r2, #0
    8356:	d005      	beq.n	8364 <memcpy+0x78>
    8358:	2300      	movs	r3, #0
    835a:	5ccc      	ldrb	r4, [r1, r3]
    835c:	54ec      	strb	r4, [r5, r3]
    835e:	3301      	adds	r3, #1
    8360:	4293      	cmp	r3, r2
    8362:	d1fa      	bne.n	835a <memcpy+0x6e>
    8364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8366:	0005      	movs	r5, r0
    8368:	e7f6      	b.n	8358 <memcpy+0x6c>
    836a:	001a      	movs	r2, r3
    836c:	e7f2      	b.n	8354 <memcpy+0x68>
    836e:	46c0      	nop			; (mov r8, r8)

00008370 <memset>:
    8370:	b5f0      	push	{r4, r5, r6, r7, lr}
    8372:	0783      	lsls	r3, r0, #30
    8374:	d043      	beq.n	83fe <memset+0x8e>
    8376:	1e54      	subs	r4, r2, #1
    8378:	2a00      	cmp	r2, #0
    837a:	d03f      	beq.n	83fc <memset+0x8c>
    837c:	b2ce      	uxtb	r6, r1
    837e:	0002      	movs	r2, r0
    8380:	2503      	movs	r5, #3
    8382:	e002      	b.n	838a <memset+0x1a>
    8384:	001a      	movs	r2, r3
    8386:	3c01      	subs	r4, #1
    8388:	d338      	bcc.n	83fc <memset+0x8c>
    838a:	1c53      	adds	r3, r2, #1
    838c:	7016      	strb	r6, [r2, #0]
    838e:	422b      	tst	r3, r5
    8390:	d1f8      	bne.n	8384 <memset+0x14>
    8392:	2c03      	cmp	r4, #3
    8394:	d92a      	bls.n	83ec <memset+0x7c>
    8396:	22ff      	movs	r2, #255	; 0xff
    8398:	400a      	ands	r2, r1
    839a:	0215      	lsls	r5, r2, #8
    839c:	4315      	orrs	r5, r2
    839e:	042a      	lsls	r2, r5, #16
    83a0:	4315      	orrs	r5, r2
    83a2:	2c0f      	cmp	r4, #15
    83a4:	d914      	bls.n	83d0 <memset+0x60>
    83a6:	0027      	movs	r7, r4
    83a8:	001a      	movs	r2, r3
    83aa:	3f10      	subs	r7, #16
    83ac:	093e      	lsrs	r6, r7, #4
    83ae:	3601      	adds	r6, #1
    83b0:	0136      	lsls	r6, r6, #4
    83b2:	199e      	adds	r6, r3, r6
    83b4:	6015      	str	r5, [r2, #0]
    83b6:	6055      	str	r5, [r2, #4]
    83b8:	6095      	str	r5, [r2, #8]
    83ba:	60d5      	str	r5, [r2, #12]
    83bc:	3210      	adds	r2, #16
    83be:	4296      	cmp	r6, r2
    83c0:	d1f8      	bne.n	83b4 <memset+0x44>
    83c2:	220f      	movs	r2, #15
    83c4:	4397      	bics	r7, r2
    83c6:	3710      	adds	r7, #16
    83c8:	19db      	adds	r3, r3, r7
    83ca:	4014      	ands	r4, r2
    83cc:	2c03      	cmp	r4, #3
    83ce:	d90d      	bls.n	83ec <memset+0x7c>
    83d0:	001a      	movs	r2, r3
    83d2:	1f27      	subs	r7, r4, #4
    83d4:	08be      	lsrs	r6, r7, #2
    83d6:	3601      	adds	r6, #1
    83d8:	00b6      	lsls	r6, r6, #2
    83da:	199e      	adds	r6, r3, r6
    83dc:	c220      	stmia	r2!, {r5}
    83de:	42b2      	cmp	r2, r6
    83e0:	d1fc      	bne.n	83dc <memset+0x6c>
    83e2:	2203      	movs	r2, #3
    83e4:	4397      	bics	r7, r2
    83e6:	3704      	adds	r7, #4
    83e8:	19db      	adds	r3, r3, r7
    83ea:	4014      	ands	r4, r2
    83ec:	2c00      	cmp	r4, #0
    83ee:	d005      	beq.n	83fc <memset+0x8c>
    83f0:	b2c9      	uxtb	r1, r1
    83f2:	191c      	adds	r4, r3, r4
    83f4:	7019      	strb	r1, [r3, #0]
    83f6:	3301      	adds	r3, #1
    83f8:	429c      	cmp	r4, r3
    83fa:	d1fb      	bne.n	83f4 <memset+0x84>
    83fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83fe:	0014      	movs	r4, r2
    8400:	0003      	movs	r3, r0
    8402:	e7c6      	b.n	8392 <memset+0x22>

00008404 <sprintf>:
    8404:	b40e      	push	{r1, r2, r3}
    8406:	b510      	push	{r4, lr}
    8408:	b09d      	sub	sp, #116	; 0x74
    840a:	a902      	add	r1, sp, #8
    840c:	9002      	str	r0, [sp, #8]
    840e:	6108      	str	r0, [r1, #16]
    8410:	480b      	ldr	r0, [pc, #44]	; (8440 <sprintf+0x3c>)
    8412:	2482      	movs	r4, #130	; 0x82
    8414:	6088      	str	r0, [r1, #8]
    8416:	6148      	str	r0, [r1, #20]
    8418:	2001      	movs	r0, #1
    841a:	4240      	negs	r0, r0
    841c:	ab1f      	add	r3, sp, #124	; 0x7c
    841e:	81c8      	strh	r0, [r1, #14]
    8420:	4808      	ldr	r0, [pc, #32]	; (8444 <sprintf+0x40>)
    8422:	cb04      	ldmia	r3!, {r2}
    8424:	00a4      	lsls	r4, r4, #2
    8426:	6800      	ldr	r0, [r0, #0]
    8428:	9301      	str	r3, [sp, #4]
    842a:	818c      	strh	r4, [r1, #12]
    842c:	f000 fb98 	bl	8b60 <_svfprintf_r>
    8430:	2300      	movs	r3, #0
    8432:	9a02      	ldr	r2, [sp, #8]
    8434:	7013      	strb	r3, [r2, #0]
    8436:	b01d      	add	sp, #116	; 0x74
    8438:	bc10      	pop	{r4}
    843a:	bc08      	pop	{r3}
    843c:	b003      	add	sp, #12
    843e:	4718      	bx	r3
    8440:	7fffffff 	.word	0x7fffffff
    8444:	20000014 	.word	0x20000014

00008448 <strcpy>:
    8448:	1c03      	adds	r3, r0, #0
    844a:	780a      	ldrb	r2, [r1, #0]
    844c:	3101      	adds	r1, #1
    844e:	701a      	strb	r2, [r3, #0]
    8450:	3301      	adds	r3, #1
    8452:	2a00      	cmp	r2, #0
    8454:	d1f9      	bne.n	844a <strcpy+0x2>
    8456:	4770      	bx	lr

00008458 <strlen>:
    8458:	b510      	push	{r4, lr}
    845a:	0783      	lsls	r3, r0, #30
    845c:	d025      	beq.n	84aa <strlen+0x52>
    845e:	7803      	ldrb	r3, [r0, #0]
    8460:	2b00      	cmp	r3, #0
    8462:	d024      	beq.n	84ae <strlen+0x56>
    8464:	0003      	movs	r3, r0
    8466:	2103      	movs	r1, #3
    8468:	e002      	b.n	8470 <strlen+0x18>
    846a:	781a      	ldrb	r2, [r3, #0]
    846c:	2a00      	cmp	r2, #0
    846e:	d01a      	beq.n	84a6 <strlen+0x4e>
    8470:	3301      	adds	r3, #1
    8472:	420b      	tst	r3, r1
    8474:	d1f9      	bne.n	846a <strlen+0x12>
    8476:	6819      	ldr	r1, [r3, #0]
    8478:	4a0e      	ldr	r2, [pc, #56]	; (84b4 <strlen+0x5c>)
    847a:	4c0f      	ldr	r4, [pc, #60]	; (84b8 <strlen+0x60>)
    847c:	188a      	adds	r2, r1, r2
    847e:	438a      	bics	r2, r1
    8480:	4222      	tst	r2, r4
    8482:	d106      	bne.n	8492 <strlen+0x3a>
    8484:	3304      	adds	r3, #4
    8486:	6819      	ldr	r1, [r3, #0]
    8488:	4a0a      	ldr	r2, [pc, #40]	; (84b4 <strlen+0x5c>)
    848a:	188a      	adds	r2, r1, r2
    848c:	438a      	bics	r2, r1
    848e:	4222      	tst	r2, r4
    8490:	d0f8      	beq.n	8484 <strlen+0x2c>
    8492:	001a      	movs	r2, r3
    8494:	781b      	ldrb	r3, [r3, #0]
    8496:	2b00      	cmp	r3, #0
    8498:	d003      	beq.n	84a2 <strlen+0x4a>
    849a:	3201      	adds	r2, #1
    849c:	7811      	ldrb	r1, [r2, #0]
    849e:	2900      	cmp	r1, #0
    84a0:	d1fb      	bne.n	849a <strlen+0x42>
    84a2:	1a10      	subs	r0, r2, r0
    84a4:	bd10      	pop	{r4, pc}
    84a6:	1a18      	subs	r0, r3, r0
    84a8:	e7fc      	b.n	84a4 <strlen+0x4c>
    84aa:	0003      	movs	r3, r0
    84ac:	e7e3      	b.n	8476 <strlen+0x1e>
    84ae:	2000      	movs	r0, #0
    84b0:	e7f8      	b.n	84a4 <strlen+0x4c>
    84b2:	46c0      	nop			; (mov r8, r8)
    84b4:	fefefeff 	.word	0xfefefeff
    84b8:	80808080 	.word	0x80808080

000084bc <critical_factorization>:
    84bc:	2301      	movs	r3, #1
    84be:	b5f0      	push	{r4, r5, r6, r7, lr}
    84c0:	4647      	mov	r7, r8
    84c2:	46ce      	mov	lr, r9
    84c4:	4694      	mov	ip, r2
    84c6:	2201      	movs	r2, #1
    84c8:	4698      	mov	r8, r3
    84ca:	2401      	movs	r4, #1
    84cc:	2500      	movs	r5, #0
    84ce:	b580      	push	{r7, lr}
    84d0:	4252      	negs	r2, r2
    84d2:	192b      	adds	r3, r5, r4
    84d4:	428b      	cmp	r3, r1
    84d6:	d20b      	bcs.n	84f0 <critical_factorization+0x34>
    84d8:	1886      	adds	r6, r0, r2
    84da:	5cc7      	ldrb	r7, [r0, r3]
    84dc:	5d36      	ldrb	r6, [r6, r4]
    84de:	42b7      	cmp	r7, r6
    84e0:	d22d      	bcs.n	853e <critical_factorization+0x82>
    84e2:	1a9c      	subs	r4, r3, r2
    84e4:	46a0      	mov	r8, r4
    84e6:	001d      	movs	r5, r3
    84e8:	2401      	movs	r4, #1
    84ea:	192b      	adds	r3, r5, r4
    84ec:	428b      	cmp	r3, r1
    84ee:	d3f3      	bcc.n	84d8 <critical_factorization+0x1c>
    84f0:	4644      	mov	r4, r8
    84f2:	4663      	mov	r3, ip
    84f4:	601c      	str	r4, [r3, #0]
    84f6:	2301      	movs	r3, #1
    84f8:	4699      	mov	r9, r3
    84fa:	3b02      	subs	r3, #2
    84fc:	2401      	movs	r4, #1
    84fe:	2500      	movs	r5, #0
    8500:	4698      	mov	r8, r3
    8502:	192b      	adds	r3, r5, r4
    8504:	4299      	cmp	r1, r3
    8506:	d90d      	bls.n	8524 <critical_factorization+0x68>
    8508:	4646      	mov	r6, r8
    850a:	1986      	adds	r6, r0, r6
    850c:	5cc7      	ldrb	r7, [r0, r3]
    850e:	5d36      	ldrb	r6, [r6, r4]
    8510:	42b7      	cmp	r7, r6
    8512:	d91c      	bls.n	854e <critical_factorization+0x92>
    8514:	4644      	mov	r4, r8
    8516:	1b1c      	subs	r4, r3, r4
    8518:	46a1      	mov	r9, r4
    851a:	001d      	movs	r5, r3
    851c:	2401      	movs	r4, #1
    851e:	192b      	adds	r3, r5, r4
    8520:	4299      	cmp	r1, r3
    8522:	d8f1      	bhi.n	8508 <critical_factorization+0x4c>
    8524:	4643      	mov	r3, r8
    8526:	1c50      	adds	r0, r2, #1
    8528:	3301      	adds	r3, #1
    852a:	4283      	cmp	r3, r0
    852c:	d303      	bcc.n	8536 <critical_factorization+0x7a>
    852e:	4662      	mov	r2, ip
    8530:	4649      	mov	r1, r9
    8532:	0018      	movs	r0, r3
    8534:	6011      	str	r1, [r2, #0]
    8536:	bc0c      	pop	{r2, r3}
    8538:	4690      	mov	r8, r2
    853a:	4699      	mov	r9, r3
    853c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    853e:	42b7      	cmp	r7, r6
    8540:	d00d      	beq.n	855e <critical_factorization+0xa2>
    8542:	2301      	movs	r3, #1
    8544:	002a      	movs	r2, r5
    8546:	4698      	mov	r8, r3
    8548:	3501      	adds	r5, #1
    854a:	2401      	movs	r4, #1
    854c:	e7c1      	b.n	84d2 <critical_factorization+0x16>
    854e:	42b7      	cmp	r7, r6
    8550:	d009      	beq.n	8566 <critical_factorization+0xaa>
    8552:	2301      	movs	r3, #1
    8554:	46a8      	mov	r8, r5
    8556:	4699      	mov	r9, r3
    8558:	3501      	adds	r5, #1
    855a:	2401      	movs	r4, #1
    855c:	e7d1      	b.n	8502 <critical_factorization+0x46>
    855e:	4544      	cmp	r4, r8
    8560:	d005      	beq.n	856e <critical_factorization+0xb2>
    8562:	3401      	adds	r4, #1
    8564:	e7b5      	b.n	84d2 <critical_factorization+0x16>
    8566:	454c      	cmp	r4, r9
    8568:	d004      	beq.n	8574 <critical_factorization+0xb8>
    856a:	3401      	adds	r4, #1
    856c:	e7c9      	b.n	8502 <critical_factorization+0x46>
    856e:	001d      	movs	r5, r3
    8570:	2401      	movs	r4, #1
    8572:	e7ae      	b.n	84d2 <critical_factorization+0x16>
    8574:	001d      	movs	r5, r3
    8576:	2401      	movs	r4, #1
    8578:	e7c3      	b.n	8502 <critical_factorization+0x46>
    857a:	46c0      	nop			; (mov r8, r8)

0000857c <two_way_long_needle>:
    857c:	b5f0      	push	{r4, r5, r6, r7, lr}
    857e:	46de      	mov	lr, fp
    8580:	4657      	mov	r7, sl
    8582:	464e      	mov	r6, r9
    8584:	4645      	mov	r5, r8
    8586:	b5e0      	push	{r5, r6, r7, lr}
    8588:	0015      	movs	r5, r2
    858a:	4c7b      	ldr	r4, [pc, #492]	; (8778 <two_way_long_needle+0x1fc>)
    858c:	0006      	movs	r6, r0
    858e:	44a5      	add	sp, r4
    8590:	aa03      	add	r2, sp, #12
    8592:	000f      	movs	r7, r1
    8594:	0028      	movs	r0, r5
    8596:	0019      	movs	r1, r3
    8598:	001c      	movs	r4, r3
    859a:	f7ff ff8f 	bl	84bc <critical_factorization>
    859e:	4683      	mov	fp, r0
    85a0:	aaff      	add	r2, sp, #1020	; 0x3fc
    85a2:	ab04      	add	r3, sp, #16
    85a4:	3214      	adds	r2, #20
    85a6:	c310      	stmia	r3!, {r4}
    85a8:	4293      	cmp	r3, r2
    85aa:	d1fc      	bne.n	85a6 <two_way_long_needle+0x2a>
    85ac:	1e63      	subs	r3, r4, #1
    85ae:	0029      	movs	r1, r5
    85b0:	46a4      	mov	ip, r4
    85b2:	2c00      	cmp	r4, #0
    85b4:	d009      	beq.n	85ca <two_way_long_needle+0x4e>
    85b6:	2408      	movs	r4, #8
    85b8:	780a      	ldrb	r2, [r1, #0]
    85ba:	a802      	add	r0, sp, #8
    85bc:	0092      	lsls	r2, r2, #2
    85be:	1900      	adds	r0, r0, r4
    85c0:	5083      	str	r3, [r0, r2]
    85c2:	3101      	adds	r1, #1
    85c4:	3b01      	subs	r3, #1
    85c6:	d2f6      	bcs.n	85b6 <two_way_long_needle+0x3a>
    85c8:	4664      	mov	r4, ip
    85ca:	9b03      	ldr	r3, [sp, #12]
    85cc:	465a      	mov	r2, fp
    85ce:	18e9      	adds	r1, r5, r3
    85d0:	0028      	movs	r0, r5
    85d2:	f003 f985 	bl	b8e0 <memcmp>
    85d6:	2800      	cmp	r0, #0
    85d8:	d000      	beq.n	85dc <two_way_long_needle+0x60>
    85da:	e074      	b.n	86c6 <two_way_long_needle+0x14a>
    85dc:	2300      	movs	r3, #0
    85de:	001a      	movs	r2, r3
    85e0:	469a      	mov	sl, r3
    85e2:	1e63      	subs	r3, r4, #1
    85e4:	4698      	mov	r8, r3
    85e6:	4659      	mov	r1, fp
    85e8:	2301      	movs	r3, #1
    85ea:	0038      	movs	r0, r7
    85ec:	46a1      	mov	r9, r4
    85ee:	0017      	movs	r7, r2
    85f0:	4644      	mov	r4, r8
    85f2:	46b0      	mov	r8, r6
    85f4:	1a5b      	subs	r3, r3, r1
    85f6:	9301      	str	r3, [sp, #4]
    85f8:	9100      	str	r1, [sp, #0]
    85fa:	4656      	mov	r6, sl
    85fc:	444e      	add	r6, r9
    85fe:	1a32      	subs	r2, r6, r0
    8600:	2100      	movs	r1, #0
    8602:	4440      	add	r0, r8
    8604:	f003 f92c 	bl	b860 <memchr>
    8608:	2800      	cmp	r0, #0
    860a:	d153      	bne.n	86b4 <two_way_long_needle+0x138>
    860c:	2e00      	cmp	r6, #0
    860e:	d051      	beq.n	86b4 <two_way_long_needle+0x138>
    8610:	4643      	mov	r3, r8
    8612:	2108      	movs	r1, #8
    8614:	199b      	adds	r3, r3, r6
    8616:	3b01      	subs	r3, #1
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	aa02      	add	r2, sp, #8
    861c:	009b      	lsls	r3, r3, #2
    861e:	1852      	adds	r2, r2, r1
    8620:	58d3      	ldr	r3, [r2, r3]
    8622:	2b00      	cmp	r3, #0
    8624:	d00a      	beq.n	863c <two_way_long_needle+0xc0>
    8626:	2f00      	cmp	r7, #0
    8628:	d004      	beq.n	8634 <two_way_long_needle+0xb8>
    862a:	9a03      	ldr	r2, [sp, #12]
    862c:	4293      	cmp	r3, r2
    862e:	d201      	bcs.n	8634 <two_way_long_needle+0xb8>
    8630:	464b      	mov	r3, r9
    8632:	1a9b      	subs	r3, r3, r2
    8634:	449a      	add	sl, r3
    8636:	2700      	movs	r7, #0
    8638:	0030      	movs	r0, r6
    863a:	e7de      	b.n	85fa <two_way_long_needle+0x7e>
    863c:	9900      	ldr	r1, [sp, #0]
    863e:	003b      	movs	r3, r7
    8640:	428f      	cmp	r7, r1
    8642:	d200      	bcs.n	8646 <two_way_long_needle+0xca>
    8644:	000b      	movs	r3, r1
    8646:	42a3      	cmp	r3, r4
    8648:	d20d      	bcs.n	8666 <two_way_long_needle+0xea>
    864a:	4642      	mov	r2, r8
    864c:	4452      	add	r2, sl
    864e:	e002      	b.n	8656 <two_way_long_needle+0xda>
    8650:	3301      	adds	r3, #1
    8652:	42a3      	cmp	r3, r4
    8654:	d207      	bcs.n	8666 <two_way_long_needle+0xea>
    8656:	5ce8      	ldrb	r0, [r5, r3]
    8658:	5cd1      	ldrb	r1, [r2, r3]
    865a:	4288      	cmp	r0, r1
    865c:	d0f8      	beq.n	8650 <two_way_long_needle+0xd4>
    865e:	9a01      	ldr	r2, [sp, #4]
    8660:	4452      	add	r2, sl
    8662:	4692      	mov	sl, r2
    8664:	e7e6      	b.n	8634 <two_way_long_needle+0xb8>
    8666:	9b00      	ldr	r3, [sp, #0]
    8668:	1e59      	subs	r1, r3, #1
    866a:	429f      	cmp	r7, r3
    866c:	d300      	bcc.n	8670 <two_way_long_needle+0xf4>
    866e:	e07d      	b.n	876c <two_way_long_needle+0x1f0>
    8670:	4642      	mov	r2, r8
    8672:	4452      	add	r2, sl
    8674:	5c50      	ldrb	r0, [r2, r1]
    8676:	5c6b      	ldrb	r3, [r5, r1]
    8678:	4298      	cmp	r0, r3
    867a:	d000      	beq.n	867e <two_way_long_needle+0x102>
    867c:	e074      	b.n	8768 <two_way_long_needle+0x1ec>
    867e:	1e7b      	subs	r3, r7, #1
    8680:	469b      	mov	fp, r3
    8682:	0023      	movs	r3, r4
    8684:	46b4      	mov	ip, r6
    8686:	465c      	mov	r4, fp
    8688:	0016      	movs	r6, r2
    868a:	469b      	mov	fp, r3
    868c:	e004      	b.n	8698 <two_way_long_needle+0x11c>
    868e:	5cea      	ldrb	r2, [r5, r3]
    8690:	5cf0      	ldrb	r0, [r6, r3]
    8692:	4282      	cmp	r2, r0
    8694:	d103      	bne.n	869e <two_way_long_needle+0x122>
    8696:	0019      	movs	r1, r3
    8698:	1e4b      	subs	r3, r1, #1
    869a:	42a3      	cmp	r3, r4
    869c:	d1f7      	bne.n	868e <two_way_long_needle+0x112>
    869e:	4666      	mov	r6, ip
    86a0:	465c      	mov	r4, fp
    86a2:	3701      	adds	r7, #1
    86a4:	428f      	cmp	r7, r1
    86a6:	d863      	bhi.n	8770 <two_way_long_needle+0x1f4>
    86a8:	464b      	mov	r3, r9
    86aa:	9f03      	ldr	r7, [sp, #12]
    86ac:	0030      	movs	r0, r6
    86ae:	44ba      	add	sl, r7
    86b0:	1bdf      	subs	r7, r3, r7
    86b2:	e7a2      	b.n	85fa <two_way_long_needle+0x7e>
    86b4:	2000      	movs	r0, #0
    86b6:	4b31      	ldr	r3, [pc, #196]	; (877c <two_way_long_needle+0x200>)
    86b8:	449d      	add	sp, r3
    86ba:	bc3c      	pop	{r2, r3, r4, r5}
    86bc:	4690      	mov	r8, r2
    86be:	4699      	mov	r9, r3
    86c0:	46a2      	mov	sl, r4
    86c2:	46ab      	mov	fp, r5
    86c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86c6:	465b      	mov	r3, fp
    86c8:	1ae3      	subs	r3, r4, r3
    86ca:	455b      	cmp	r3, fp
    86cc:	d34a      	bcc.n	8764 <two_way_long_needle+0x1e8>
    86ce:	3301      	adds	r3, #1
    86d0:	9303      	str	r3, [sp, #12]
    86d2:	2300      	movs	r3, #0
    86d4:	469a      	mov	sl, r3
    86d6:	1e63      	subs	r3, r4, #1
    86d8:	4698      	mov	r8, r3
    86da:	465a      	mov	r2, fp
    86dc:	2301      	movs	r3, #1
    86de:	0038      	movs	r0, r7
    86e0:	46a1      	mov	r9, r4
    86e2:	4657      	mov	r7, sl
    86e4:	4644      	mov	r4, r8
    86e6:	46b0      	mov	r8, r6
    86e8:	1a9b      	subs	r3, r3, r2
    86ea:	9300      	str	r3, [sp, #0]
    86ec:	464b      	mov	r3, r9
    86ee:	18fe      	adds	r6, r7, r3
    86f0:	1a32      	subs	r2, r6, r0
    86f2:	2100      	movs	r1, #0
    86f4:	4440      	add	r0, r8
    86f6:	f003 f8b3 	bl	b860 <memchr>
    86fa:	2800      	cmp	r0, #0
    86fc:	d1da      	bne.n	86b4 <two_way_long_needle+0x138>
    86fe:	2e00      	cmp	r6, #0
    8700:	d0d8      	beq.n	86b4 <two_way_long_needle+0x138>
    8702:	4643      	mov	r3, r8
    8704:	2108      	movs	r1, #8
    8706:	199b      	adds	r3, r3, r6
    8708:	3b01      	subs	r3, #1
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	aa02      	add	r2, sp, #8
    870e:	009b      	lsls	r3, r3, #2
    8710:	1852      	adds	r2, r2, r1
    8712:	58d3      	ldr	r3, [r2, r3]
    8714:	2b00      	cmp	r3, #0
    8716:	d122      	bne.n	875e <two_way_long_needle+0x1e2>
    8718:	4643      	mov	r3, r8
    871a:	19d8      	adds	r0, r3, r7
    871c:	45a3      	cmp	fp, r4
    871e:	d20c      	bcs.n	873a <two_way_long_needle+0x1be>
    8720:	465b      	mov	r3, fp
    8722:	5cc1      	ldrb	r1, [r0, r3]
    8724:	5cea      	ldrb	r2, [r5, r3]
    8726:	4291      	cmp	r1, r2
    8728:	d004      	beq.n	8734 <two_way_long_needle+0x1b8>
    872a:	e015      	b.n	8758 <two_way_long_needle+0x1dc>
    872c:	5ce9      	ldrb	r1, [r5, r3]
    872e:	5cc2      	ldrb	r2, [r0, r3]
    8730:	4291      	cmp	r1, r2
    8732:	d111      	bne.n	8758 <two_way_long_needle+0x1dc>
    8734:	3301      	adds	r3, #1
    8736:	42a3      	cmp	r3, r4
    8738:	d3f8      	bcc.n	872c <two_way_long_needle+0x1b0>
    873a:	465b      	mov	r3, fp
    873c:	3b01      	subs	r3, #1
    873e:	d202      	bcs.n	8746 <two_way_long_needle+0x1ca>
    8740:	e7b9      	b.n	86b6 <two_way_long_needle+0x13a>
    8742:	3b01      	subs	r3, #1
    8744:	d3b7      	bcc.n	86b6 <two_way_long_needle+0x13a>
    8746:	5ce9      	ldrb	r1, [r5, r3]
    8748:	5cc2      	ldrb	r2, [r0, r3]
    874a:	4291      	cmp	r1, r2
    874c:	d0f9      	beq.n	8742 <two_way_long_needle+0x1c6>
    874e:	9b03      	ldr	r3, [sp, #12]
    8750:	0030      	movs	r0, r6
    8752:	469c      	mov	ip, r3
    8754:	4467      	add	r7, ip
    8756:	e7c9      	b.n	86ec <two_way_long_needle+0x170>
    8758:	9a00      	ldr	r2, [sp, #0]
    875a:	4694      	mov	ip, r2
    875c:	4467      	add	r7, ip
    875e:	18ff      	adds	r7, r7, r3
    8760:	0030      	movs	r0, r6
    8762:	e7c3      	b.n	86ec <two_way_long_needle+0x170>
    8764:	465b      	mov	r3, fp
    8766:	e7b2      	b.n	86ce <two_way_long_needle+0x152>
    8768:	9900      	ldr	r1, [sp, #0]
    876a:	e79a      	b.n	86a2 <two_way_long_needle+0x126>
    876c:	0019      	movs	r1, r3
    876e:	e798      	b.n	86a2 <two_way_long_needle+0x126>
    8770:	4640      	mov	r0, r8
    8772:	4450      	add	r0, sl
    8774:	e79f      	b.n	86b6 <two_way_long_needle+0x13a>
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	fffffbec 	.word	0xfffffbec
    877c:	00000414 	.word	0x00000414

00008780 <strstr>:
    8780:	b5f0      	push	{r4, r5, r6, r7, lr}
    8782:	4657      	mov	r7, sl
    8784:	4645      	mov	r5, r8
    8786:	46de      	mov	lr, fp
    8788:	464e      	mov	r6, r9
    878a:	b5e0      	push	{r5, r6, r7, lr}
    878c:	7803      	ldrb	r3, [r0, #0]
    878e:	b085      	sub	sp, #20
    8790:	0007      	movs	r7, r0
    8792:	000d      	movs	r5, r1
    8794:	2b00      	cmp	r3, #0
    8796:	d035      	beq.n	8804 <strstr+0x84>
    8798:	7809      	ldrb	r1, [r1, #0]
    879a:	1e0a      	subs	r2, r1, #0
    879c:	d100      	bne.n	87a0 <strstr+0x20>
    879e:	e09f      	b.n	88e0 <strstr+0x160>
    87a0:	002c      	movs	r4, r5
    87a2:	2601      	movs	r6, #1
    87a4:	e002      	b.n	87ac <strstr+0x2c>
    87a6:	7822      	ldrb	r2, [r4, #0]
    87a8:	2a00      	cmp	r2, #0
    87aa:	d00b      	beq.n	87c4 <strstr+0x44>
    87ac:	1a9b      	subs	r3, r3, r2
    87ae:	425a      	negs	r2, r3
    87b0:	4153      	adcs	r3, r2
    87b2:	3001      	adds	r0, #1
    87b4:	401e      	ands	r6, r3
    87b6:	7803      	ldrb	r3, [r0, #0]
    87b8:	3401      	adds	r4, #1
    87ba:	2b00      	cmp	r3, #0
    87bc:	d1f3      	bne.n	87a6 <strstr+0x26>
    87be:	7823      	ldrb	r3, [r4, #0]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d122      	bne.n	880a <strstr+0x8a>
    87c4:	0038      	movs	r0, r7
    87c6:	2e00      	cmp	r6, #0
    87c8:	d006      	beq.n	87d8 <strstr+0x58>
    87ca:	b005      	add	sp, #20
    87cc:	bc3c      	pop	{r2, r3, r4, r5}
    87ce:	4690      	mov	r8, r2
    87d0:	4699      	mov	r9, r3
    87d2:	46a2      	mov	sl, r4
    87d4:	46ab      	mov	fp, r5
    87d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87d8:	1c78      	adds	r0, r7, #1
    87da:	f003 fc11 	bl	c000 <strchr>
    87de:	1b64      	subs	r4, r4, r5
    87e0:	1e06      	subs	r6, r0, #0
    87e2:	d012      	beq.n	880a <strstr+0x8a>
    87e4:	2c01      	cmp	r4, #1
    87e6:	d0f0      	beq.n	87ca <strstr+0x4a>
    87e8:	193f      	adds	r7, r7, r4
    87ea:	2101      	movs	r1, #1
    87ec:	42b8      	cmp	r0, r7
    87ee:	d800      	bhi.n	87f2 <strstr+0x72>
    87f0:	1a39      	subs	r1, r7, r0
    87f2:	000f      	movs	r7, r1
    87f4:	2c1f      	cmp	r4, #31
    87f6:	d90a      	bls.n	880e <strstr+0x8e>
    87f8:	0023      	movs	r3, r4
    87fa:	002a      	movs	r2, r5
    87fc:	0030      	movs	r0, r6
    87fe:	f7ff febd 	bl	857c <two_way_long_needle>
    8802:	e7e2      	b.n	87ca <strstr+0x4a>
    8804:	780b      	ldrb	r3, [r1, #0]
    8806:	2b00      	cmp	r3, #0
    8808:	d06a      	beq.n	88e0 <strstr+0x160>
    880a:	2000      	movs	r0, #0
    880c:	e7dd      	b.n	87ca <strstr+0x4a>
    880e:	aa03      	add	r2, sp, #12
    8810:	0021      	movs	r1, r4
    8812:	0028      	movs	r0, r5
    8814:	f7ff fe52 	bl	84bc <critical_factorization>
    8818:	9b03      	ldr	r3, [sp, #12]
    881a:	4680      	mov	r8, r0
    881c:	0002      	movs	r2, r0
    881e:	18e9      	adds	r1, r5, r3
    8820:	0028      	movs	r0, r5
    8822:	f003 f85d 	bl	b8e0 <memcmp>
    8826:	2800      	cmp	r0, #0
    8828:	d15c      	bne.n	88e4 <strstr+0x164>
    882a:	2300      	movs	r3, #0
    882c:	4699      	mov	r9, r3
    882e:	4643      	mov	r3, r8
    8830:	3b01      	subs	r3, #1
    8832:	9300      	str	r3, [sp, #0]
    8834:	4642      	mov	r2, r8
    8836:	2301      	movs	r3, #1
    8838:	46b2      	mov	sl, r6
    883a:	0038      	movs	r0, r7
    883c:	464e      	mov	r6, r9
    883e:	464f      	mov	r7, r9
    8840:	1a9b      	subs	r3, r3, r2
    8842:	9301      	str	r3, [sp, #4]
    8844:	19e3      	adds	r3, r4, r7
    8846:	1a1a      	subs	r2, r3, r0
    8848:	2100      	movs	r1, #0
    884a:	4450      	add	r0, sl
    884c:	4699      	mov	r9, r3
    884e:	f003 f807 	bl	b860 <memchr>
    8852:	2800      	cmp	r0, #0
    8854:	d1d9      	bne.n	880a <strstr+0x8a>
    8856:	464b      	mov	r3, r9
    8858:	2b00      	cmp	r3, #0
    885a:	d0d6      	beq.n	880a <strstr+0x8a>
    885c:	4643      	mov	r3, r8
    885e:	45b0      	cmp	r8, r6
    8860:	d200      	bcs.n	8864 <strstr+0xe4>
    8862:	0033      	movs	r3, r6
    8864:	429c      	cmp	r4, r3
    8866:	d90f      	bls.n	8888 <strstr+0x108>
    8868:	4652      	mov	r2, sl
    886a:	18d2      	adds	r2, r2, r3
    886c:	5ce9      	ldrb	r1, [r5, r3]
    886e:	5dd2      	ldrb	r2, [r2, r7]
    8870:	4291      	cmp	r1, r2
    8872:	d12e      	bne.n	88d2 <strstr+0x152>
    8874:	4652      	mov	r2, sl
    8876:	19d0      	adds	r0, r2, r7
    8878:	e003      	b.n	8882 <strstr+0x102>
    887a:	5ce9      	ldrb	r1, [r5, r3]
    887c:	5cc2      	ldrb	r2, [r0, r3]
    887e:	4291      	cmp	r1, r2
    8880:	d127      	bne.n	88d2 <strstr+0x152>
    8882:	3301      	adds	r3, #1
    8884:	429c      	cmp	r4, r3
    8886:	d1f8      	bne.n	887a <strstr+0xfa>
    8888:	9a00      	ldr	r2, [sp, #0]
    888a:	45b0      	cmp	r8, r6
    888c:	d976      	bls.n	897c <strstr+0x1fc>
    888e:	46bc      	mov	ip, r7
    8890:	44d4      	add	ip, sl
    8892:	4661      	mov	r1, ip
    8894:	9b00      	ldr	r3, [sp, #0]
    8896:	5cc9      	ldrb	r1, [r1, r3]
    8898:	5ceb      	ldrb	r3, [r5, r3]
    889a:	4299      	cmp	r1, r3
    889c:	d16e      	bne.n	897c <strstr+0x1fc>
    889e:	1e73      	subs	r3, r6, #1
    88a0:	469b      	mov	fp, r3
    88a2:	4663      	mov	r3, ip
    88a4:	46a4      	mov	ip, r4
    88a6:	465c      	mov	r4, fp
    88a8:	46b3      	mov	fp, r6
    88aa:	001e      	movs	r6, r3
    88ac:	e004      	b.n	88b8 <strstr+0x138>
    88ae:	5ce8      	ldrb	r0, [r5, r3]
    88b0:	5cf1      	ldrb	r1, [r6, r3]
    88b2:	4288      	cmp	r0, r1
    88b4:	d103      	bne.n	88be <strstr+0x13e>
    88b6:	001a      	movs	r2, r3
    88b8:	1e53      	subs	r3, r2, #1
    88ba:	42a3      	cmp	r3, r4
    88bc:	d1f7      	bne.n	88ae <strstr+0x12e>
    88be:	4664      	mov	r4, ip
    88c0:	465e      	mov	r6, fp
    88c2:	3601      	adds	r6, #1
    88c4:	4296      	cmp	r6, r2
    88c6:	d85b      	bhi.n	8980 <strstr+0x200>
    88c8:	9e03      	ldr	r6, [sp, #12]
    88ca:	4648      	mov	r0, r9
    88cc:	19bf      	adds	r7, r7, r6
    88ce:	1ba6      	subs	r6, r4, r6
    88d0:	e7b8      	b.n	8844 <strstr+0xc4>
    88d2:	9a01      	ldr	r2, [sp, #4]
    88d4:	2600      	movs	r6, #0
    88d6:	4694      	mov	ip, r2
    88d8:	4467      	add	r7, ip
    88da:	18ff      	adds	r7, r7, r3
    88dc:	4648      	mov	r0, r9
    88de:	e7b1      	b.n	8844 <strstr+0xc4>
    88e0:	0038      	movs	r0, r7
    88e2:	e772      	b.n	87ca <strstr+0x4a>
    88e4:	4643      	mov	r3, r8
    88e6:	1ae3      	subs	r3, r4, r3
    88e8:	4543      	cmp	r3, r8
    88ea:	d200      	bcs.n	88ee <strstr+0x16e>
    88ec:	4643      	mov	r3, r8
    88ee:	3301      	adds	r3, #1
    88f0:	9303      	str	r3, [sp, #12]
    88f2:	2300      	movs	r3, #0
    88f4:	4642      	mov	r2, r8
    88f6:	4699      	mov	r9, r3
    88f8:	3301      	adds	r3, #1
    88fa:	1a9b      	subs	r3, r3, r2
    88fc:	464a      	mov	r2, r9
    88fe:	46b3      	mov	fp, r6
    8900:	46b1      	mov	r9, r6
    8902:	0038      	movs	r0, r7
    8904:	469a      	mov	sl, r3
    8906:	0016      	movs	r6, r2
    8908:	44c3      	add	fp, r8
    890a:	19a7      	adds	r7, r4, r6
    890c:	1a3a      	subs	r2, r7, r0
    890e:	2100      	movs	r1, #0
    8910:	4448      	add	r0, r9
    8912:	f002 ffa5 	bl	b860 <memchr>
    8916:	2800      	cmp	r0, #0
    8918:	d000      	beq.n	891c <strstr+0x19c>
    891a:	e776      	b.n	880a <strstr+0x8a>
    891c:	2f00      	cmp	r7, #0
    891e:	d100      	bne.n	8922 <strstr+0x1a2>
    8920:	e773      	b.n	880a <strstr+0x8a>
    8922:	464b      	mov	r3, r9
    8924:	1998      	adds	r0, r3, r6
    8926:	4544      	cmp	r4, r8
    8928:	d90f      	bls.n	894a <strstr+0x1ca>
    892a:	465b      	mov	r3, fp
    892c:	5d99      	ldrb	r1, [r3, r6]
    892e:	4643      	mov	r3, r8
    8930:	4648      	mov	r0, r9
    8932:	5cea      	ldrb	r2, [r5, r3]
    8934:	1980      	adds	r0, r0, r6
    8936:	4291      	cmp	r1, r2
    8938:	d004      	beq.n	8944 <strstr+0x1c4>
    893a:	e016      	b.n	896a <strstr+0x1ea>
    893c:	5ce9      	ldrb	r1, [r5, r3]
    893e:	5cc2      	ldrb	r2, [r0, r3]
    8940:	4291      	cmp	r1, r2
    8942:	d112      	bne.n	896a <strstr+0x1ea>
    8944:	3301      	adds	r3, #1
    8946:	429c      	cmp	r4, r3
    8948:	d1f8      	bne.n	893c <strstr+0x1bc>
    894a:	4643      	mov	r3, r8
    894c:	3b01      	subs	r3, #1
    894e:	d200      	bcs.n	8952 <strstr+0x1d2>
    8950:	e73b      	b.n	87ca <strstr+0x4a>
    8952:	5cc1      	ldrb	r1, [r0, r3]
    8954:	5cea      	ldrb	r2, [r5, r3]
    8956:	4291      	cmp	r1, r2
    8958:	d004      	beq.n	8964 <strstr+0x1e4>
    895a:	e00a      	b.n	8972 <strstr+0x1f2>
    895c:	5ce9      	ldrb	r1, [r5, r3]
    895e:	5cc2      	ldrb	r2, [r0, r3]
    8960:	4291      	cmp	r1, r2
    8962:	d106      	bne.n	8972 <strstr+0x1f2>
    8964:	3b01      	subs	r3, #1
    8966:	d2f9      	bcs.n	895c <strstr+0x1dc>
    8968:	e72f      	b.n	87ca <strstr+0x4a>
    896a:	4456      	add	r6, sl
    896c:	18f6      	adds	r6, r6, r3
    896e:	0038      	movs	r0, r7
    8970:	e7cb      	b.n	890a <strstr+0x18a>
    8972:	9b03      	ldr	r3, [sp, #12]
    8974:	0038      	movs	r0, r7
    8976:	469c      	mov	ip, r3
    8978:	4466      	add	r6, ip
    897a:	e7c6      	b.n	890a <strstr+0x18a>
    897c:	4642      	mov	r2, r8
    897e:	e7a0      	b.n	88c2 <strstr+0x142>
    8980:	46b9      	mov	r9, r7
    8982:	4650      	mov	r0, sl
    8984:	4448      	add	r0, r9
    8986:	e720      	b.n	87ca <strstr+0x4a>

00008988 <strtok>:
    8988:	4b03      	ldr	r3, [pc, #12]	; (8998 <strtok+0x10>)
    898a:	b510      	push	{r4, lr}
    898c:	681a      	ldr	r2, [r3, #0]
    898e:	2301      	movs	r3, #1
    8990:	325c      	adds	r2, #92	; 0x5c
    8992:	f000 f803 	bl	899c <__strtok_r>
    8996:	bd10      	pop	{r4, pc}
    8998:	20000014 	.word	0x20000014

0000899c <__strtok_r>:
    899c:	b5f0      	push	{r4, r5, r6, r7, lr}
    899e:	2800      	cmp	r0, #0
    89a0:	d024      	beq.n	89ec <__strtok_r+0x50>
    89a2:	1c47      	adds	r7, r0, #1
    89a4:	7806      	ldrb	r6, [r0, #0]
    89a6:	000c      	movs	r4, r1
    89a8:	e002      	b.n	89b0 <__strtok_r+0x14>
    89aa:	3401      	adds	r4, #1
    89ac:	42ae      	cmp	r6, r5
    89ae:	d015      	beq.n	89dc <__strtok_r+0x40>
    89b0:	7825      	ldrb	r5, [r4, #0]
    89b2:	2d00      	cmp	r5, #0
    89b4:	d1f9      	bne.n	89aa <__strtok_r+0xe>
    89b6:	2e00      	cmp	r6, #0
    89b8:	d01d      	beq.n	89f6 <__strtok_r+0x5a>
    89ba:	1c7e      	adds	r6, r7, #1
    89bc:	783d      	ldrb	r5, [r7, #0]
    89be:	000b      	movs	r3, r1
    89c0:	e002      	b.n	89c8 <__strtok_r+0x2c>
    89c2:	3301      	adds	r3, #1
    89c4:	2c00      	cmp	r4, #0
    89c6:	d00d      	beq.n	89e4 <__strtok_r+0x48>
    89c8:	781c      	ldrb	r4, [r3, #0]
    89ca:	42a5      	cmp	r5, r4
    89cc:	d1f9      	bne.n	89c2 <__strtok_r+0x26>
    89ce:	2d00      	cmp	r5, #0
    89d0:	d00a      	beq.n	89e8 <__strtok_r+0x4c>
    89d2:	2100      	movs	r1, #0
    89d4:	1e73      	subs	r3, r6, #1
    89d6:	7019      	strb	r1, [r3, #0]
    89d8:	6016      	str	r6, [r2, #0]
    89da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89dc:	2b00      	cmp	r3, #0
    89de:	d00d      	beq.n	89fc <__strtok_r+0x60>
    89e0:	0038      	movs	r0, r7
    89e2:	e7de      	b.n	89a2 <__strtok_r+0x6>
    89e4:	0037      	movs	r7, r6
    89e6:	e7e8      	b.n	89ba <__strtok_r+0x1e>
    89e8:	2600      	movs	r6, #0
    89ea:	e7f5      	b.n	89d8 <__strtok_r+0x3c>
    89ec:	6810      	ldr	r0, [r2, #0]
    89ee:	2800      	cmp	r0, #0
    89f0:	d1d7      	bne.n	89a2 <__strtok_r+0x6>
    89f2:	2000      	movs	r0, #0
    89f4:	e7f1      	b.n	89da <__strtok_r+0x3e>
    89f6:	6016      	str	r6, [r2, #0]
    89f8:	2000      	movs	r0, #0
    89fa:	e7ee      	b.n	89da <__strtok_r+0x3e>
    89fc:	6017      	str	r7, [r2, #0]
    89fe:	7003      	strb	r3, [r0, #0]
    8a00:	e7eb      	b.n	89da <__strtok_r+0x3e>
    8a02:	46c0      	nop			; (mov r8, r8)

00008a04 <_strtol_l.isra.0>:
    8a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a06:	4657      	mov	r7, sl
    8a08:	464e      	mov	r6, r9
    8a0a:	46de      	mov	lr, fp
    8a0c:	4645      	mov	r5, r8
    8a0e:	b5e0      	push	{r5, r6, r7, lr}
    8a10:	001e      	movs	r6, r3
    8a12:	2308      	movs	r3, #8
    8a14:	b083      	sub	sp, #12
    8a16:	9001      	str	r0, [sp, #4]
    8a18:	9100      	str	r1, [sp, #0]
    8a1a:	4692      	mov	sl, r2
    8a1c:	000f      	movs	r7, r1
    8a1e:	4699      	mov	r9, r3
    8a20:	e000      	b.n	8a24 <_strtol_l.isra.0+0x20>
    8a22:	002f      	movs	r7, r5
    8a24:	980c      	ldr	r0, [sp, #48]	; 0x30
    8a26:	783c      	ldrb	r4, [r7, #0]
    8a28:	f002 fc3a 	bl	b2a0 <__locale_ctype_ptr_l>
    8a2c:	464a      	mov	r2, r9
    8a2e:	1900      	adds	r0, r0, r4
    8a30:	7843      	ldrb	r3, [r0, #1]
    8a32:	1c7d      	adds	r5, r7, #1
    8a34:	421a      	tst	r2, r3
    8a36:	d1f4      	bne.n	8a22 <_strtol_l.isra.0+0x1e>
    8a38:	2c2d      	cmp	r4, #45	; 0x2d
    8a3a:	d04f      	beq.n	8adc <_strtol_l.isra.0+0xd8>
    8a3c:	2300      	movs	r3, #0
    8a3e:	4698      	mov	r8, r3
    8a40:	2c2b      	cmp	r4, #43	; 0x2b
    8a42:	d05c      	beq.n	8afe <_strtol_l.isra.0+0xfa>
    8a44:	2e00      	cmp	r6, #0
    8a46:	d003      	beq.n	8a50 <_strtol_l.isra.0+0x4c>
    8a48:	2e10      	cmp	r6, #16
    8a4a:	d05b      	beq.n	8b04 <_strtol_l.isra.0+0x100>
    8a4c:	0037      	movs	r7, r6
    8a4e:	e003      	b.n	8a58 <_strtol_l.isra.0+0x54>
    8a50:	2c30      	cmp	r4, #48	; 0x30
    8a52:	d063      	beq.n	8b1c <_strtol_l.isra.0+0x118>
    8a54:	270a      	movs	r7, #10
    8a56:	260a      	movs	r6, #10
    8a58:	4b35      	ldr	r3, [pc, #212]	; (8b30 <_strtol_l.isra.0+0x12c>)
    8a5a:	0039      	movs	r1, r7
    8a5c:	4443      	add	r3, r8
    8a5e:	0018      	movs	r0, r3
    8a60:	4699      	mov	r9, r3
    8a62:	f7fd fcbd 	bl	63e0 <__aeabi_uidivmod>
    8a66:	4648      	mov	r0, r9
    8a68:	468b      	mov	fp, r1
    8a6a:	0039      	movs	r1, r7
    8a6c:	f7fd fc32 	bl	62d4 <__udivsi3>
    8a70:	2200      	movs	r2, #0
    8a72:	0001      	movs	r1, r0
    8a74:	2000      	movs	r0, #0
    8a76:	0023      	movs	r3, r4
    8a78:	3b30      	subs	r3, #48	; 0x30
    8a7a:	2b09      	cmp	r3, #9
    8a7c:	d907      	bls.n	8a8e <_strtol_l.isra.0+0x8a>
    8a7e:	3b11      	subs	r3, #17
    8a80:	2b19      	cmp	r3, #25
    8a82:	d903      	bls.n	8a8c <_strtol_l.isra.0+0x88>
    8a84:	0023      	movs	r3, r4
    8a86:	3b61      	subs	r3, #97	; 0x61
    8a88:	2b19      	cmp	r3, #25
    8a8a:	d80d      	bhi.n	8aa8 <_strtol_l.isra.0+0xa4>
    8a8c:	330a      	adds	r3, #10
    8a8e:	429e      	cmp	r6, r3
    8a90:	dd0a      	ble.n	8aa8 <_strtol_l.isra.0+0xa4>
    8a92:	1c54      	adds	r4, r2, #1
    8a94:	d005      	beq.n	8aa2 <_strtol_l.isra.0+0x9e>
    8a96:	4281      	cmp	r1, r0
    8a98:	d31d      	bcc.n	8ad6 <_strtol_l.isra.0+0xd2>
    8a9a:	d01a      	beq.n	8ad2 <_strtol_l.isra.0+0xce>
    8a9c:	2201      	movs	r2, #1
    8a9e:	4378      	muls	r0, r7
    8aa0:	1818      	adds	r0, r3, r0
    8aa2:	782c      	ldrb	r4, [r5, #0]
    8aa4:	3501      	adds	r5, #1
    8aa6:	e7e6      	b.n	8a76 <_strtol_l.isra.0+0x72>
    8aa8:	1c53      	adds	r3, r2, #1
    8aaa:	d01c      	beq.n	8ae6 <_strtol_l.isra.0+0xe2>
    8aac:	4643      	mov	r3, r8
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d000      	beq.n	8ab4 <_strtol_l.isra.0+0xb0>
    8ab2:	4240      	negs	r0, r0
    8ab4:	4653      	mov	r3, sl
    8ab6:	2b00      	cmp	r3, #0
    8ab8:	d004      	beq.n	8ac4 <_strtol_l.isra.0+0xc0>
    8aba:	9b00      	ldr	r3, [sp, #0]
    8abc:	2a00      	cmp	r2, #0
    8abe:	d11c      	bne.n	8afa <_strtol_l.isra.0+0xf6>
    8ac0:	4652      	mov	r2, sl
    8ac2:	6013      	str	r3, [r2, #0]
    8ac4:	b003      	add	sp, #12
    8ac6:	bc3c      	pop	{r2, r3, r4, r5}
    8ac8:	4690      	mov	r8, r2
    8aca:	4699      	mov	r9, r3
    8acc:	46a2      	mov	sl, r4
    8ace:	46ab      	mov	fp, r5
    8ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ad2:	459b      	cmp	fp, r3
    8ad4:	dae2      	bge.n	8a9c <_strtol_l.isra.0+0x98>
    8ad6:	2201      	movs	r2, #1
    8ad8:	4252      	negs	r2, r2
    8ada:	e7e2      	b.n	8aa2 <_strtol_l.isra.0+0x9e>
    8adc:	2301      	movs	r3, #1
    8ade:	782c      	ldrb	r4, [r5, #0]
    8ae0:	4698      	mov	r8, r3
    8ae2:	1cbd      	adds	r5, r7, #2
    8ae4:	e7ae      	b.n	8a44 <_strtol_l.isra.0+0x40>
    8ae6:	2322      	movs	r3, #34	; 0x22
    8ae8:	9a01      	ldr	r2, [sp, #4]
    8aea:	4648      	mov	r0, r9
    8aec:	6013      	str	r3, [r2, #0]
    8aee:	4653      	mov	r3, sl
    8af0:	2b00      	cmp	r3, #0
    8af2:	d0e7      	beq.n	8ac4 <_strtol_l.isra.0+0xc0>
    8af4:	1e6b      	subs	r3, r5, #1
    8af6:	4648      	mov	r0, r9
    8af8:	e7e2      	b.n	8ac0 <_strtol_l.isra.0+0xbc>
    8afa:	4681      	mov	r9, r0
    8afc:	e7fa      	b.n	8af4 <_strtol_l.isra.0+0xf0>
    8afe:	782c      	ldrb	r4, [r5, #0]
    8b00:	1cbd      	adds	r5, r7, #2
    8b02:	e79f      	b.n	8a44 <_strtol_l.isra.0+0x40>
    8b04:	2c30      	cmp	r4, #48	; 0x30
    8b06:	d111      	bne.n	8b2c <_strtol_l.isra.0+0x128>
    8b08:	2220      	movs	r2, #32
    8b0a:	782b      	ldrb	r3, [r5, #0]
    8b0c:	4393      	bics	r3, r2
    8b0e:	2b58      	cmp	r3, #88	; 0x58
    8b10:	d10c      	bne.n	8b2c <_strtol_l.isra.0+0x128>
    8b12:	786c      	ldrb	r4, [r5, #1]
    8b14:	2710      	movs	r7, #16
    8b16:	3502      	adds	r5, #2
    8b18:	2610      	movs	r6, #16
    8b1a:	e79d      	b.n	8a58 <_strtol_l.isra.0+0x54>
    8b1c:	2220      	movs	r2, #32
    8b1e:	782b      	ldrb	r3, [r5, #0]
    8b20:	4393      	bics	r3, r2
    8b22:	2b58      	cmp	r3, #88	; 0x58
    8b24:	d0f5      	beq.n	8b12 <_strtol_l.isra.0+0x10e>
    8b26:	2708      	movs	r7, #8
    8b28:	2608      	movs	r6, #8
    8b2a:	e795      	b.n	8a58 <_strtol_l.isra.0+0x54>
    8b2c:	2710      	movs	r7, #16
    8b2e:	e793      	b.n	8a58 <_strtol_l.isra.0+0x54>
    8b30:	7fffffff 	.word	0x7fffffff

00008b34 <strtol>:
    8b34:	0013      	movs	r3, r2
    8b36:	4a08      	ldr	r2, [pc, #32]	; (8b58 <strtol+0x24>)
    8b38:	b530      	push	{r4, r5, lr}
    8b3a:	0005      	movs	r5, r0
    8b3c:	6810      	ldr	r0, [r2, #0]
    8b3e:	b083      	sub	sp, #12
    8b40:	6b44      	ldr	r4, [r0, #52]	; 0x34
    8b42:	2c00      	cmp	r4, #0
    8b44:	d006      	beq.n	8b54 <strtol+0x20>
    8b46:	000a      	movs	r2, r1
    8b48:	9400      	str	r4, [sp, #0]
    8b4a:	0029      	movs	r1, r5
    8b4c:	f7ff ff5a 	bl	8a04 <_strtol_l.isra.0>
    8b50:	b003      	add	sp, #12
    8b52:	bd30      	pop	{r4, r5, pc}
    8b54:	4c01      	ldr	r4, [pc, #4]	; (8b5c <strtol+0x28>)
    8b56:	e7f6      	b.n	8b46 <strtol+0x12>
    8b58:	20000014 	.word	0x20000014
    8b5c:	20000444 	.word	0x20000444

00008b60 <_svfprintf_r>:
    8b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b62:	46de      	mov	lr, fp
    8b64:	4645      	mov	r5, r8
    8b66:	4657      	mov	r7, sl
    8b68:	464e      	mov	r6, r9
    8b6a:	b5e0      	push	{r5, r6, r7, lr}
    8b6c:	b0c3      	sub	sp, #268	; 0x10c
    8b6e:	000d      	movs	r5, r1
    8b70:	9106      	str	r1, [sp, #24]
    8b72:	0014      	movs	r4, r2
    8b74:	930f      	str	r3, [sp, #60]	; 0x3c
    8b76:	9009      	str	r0, [sp, #36]	; 0x24
    8b78:	f002 fb96 	bl	b2a8 <_localeconv_r>
    8b7c:	6803      	ldr	r3, [r0, #0]
    8b7e:	0018      	movs	r0, r3
    8b80:	9319      	str	r3, [sp, #100]	; 0x64
    8b82:	f7ff fc69 	bl	8458 <strlen>
    8b86:	9018      	str	r0, [sp, #96]	; 0x60
    8b88:	89ab      	ldrh	r3, [r5, #12]
    8b8a:	061b      	lsls	r3, r3, #24
    8b8c:	d505      	bpl.n	8b9a <_svfprintf_r+0x3a>
    8b8e:	692b      	ldr	r3, [r5, #16]
    8b90:	9307      	str	r3, [sp, #28]
    8b92:	2b00      	cmp	r3, #0
    8b94:	d101      	bne.n	8b9a <_svfprintf_r+0x3a>
    8b96:	f001 f863 	bl	9c60 <_svfprintf_r+0x1100>
    8b9a:	ab32      	add	r3, sp, #200	; 0xc8
    8b9c:	9325      	str	r3, [sp, #148]	; 0x94
    8b9e:	2300      	movs	r3, #0
    8ba0:	46a3      	mov	fp, r4
    8ba2:	af25      	add	r7, sp, #148	; 0x94
    8ba4:	60bb      	str	r3, [r7, #8]
    8ba6:	607b      	str	r3, [r7, #4]
    8ba8:	9314      	str	r3, [sp, #80]	; 0x50
    8baa:	9316      	str	r3, [sp, #88]	; 0x58
    8bac:	9315      	str	r3, [sp, #84]	; 0x54
    8bae:	ae32      	add	r6, sp, #200	; 0xc8
    8bb0:	9317      	str	r3, [sp, #92]	; 0x5c
    8bb2:	931a      	str	r3, [sp, #104]	; 0x68
    8bb4:	930a      	str	r3, [sp, #40]	; 0x28
    8bb6:	465b      	mov	r3, fp
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	465c      	mov	r4, fp
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d01c      	beq.n	8bfa <_svfprintf_r+0x9a>
    8bc0:	2b25      	cmp	r3, #37	; 0x25
    8bc2:	d102      	bne.n	8bca <_svfprintf_r+0x6a>
    8bc4:	e019      	b.n	8bfa <_svfprintf_r+0x9a>
    8bc6:	2b25      	cmp	r3, #37	; 0x25
    8bc8:	d003      	beq.n	8bd2 <_svfprintf_r+0x72>
    8bca:	3401      	adds	r4, #1
    8bcc:	7823      	ldrb	r3, [r4, #0]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d1f9      	bne.n	8bc6 <_svfprintf_r+0x66>
    8bd2:	465b      	mov	r3, fp
    8bd4:	1ae5      	subs	r5, r4, r3
    8bd6:	d010      	beq.n	8bfa <_svfprintf_r+0x9a>
    8bd8:	465b      	mov	r3, fp
    8bda:	6033      	str	r3, [r6, #0]
    8bdc:	68bb      	ldr	r3, [r7, #8]
    8bde:	6075      	str	r5, [r6, #4]
    8be0:	195b      	adds	r3, r3, r5
    8be2:	60bb      	str	r3, [r7, #8]
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	3301      	adds	r3, #1
    8be8:	607b      	str	r3, [r7, #4]
    8bea:	2b07      	cmp	r3, #7
    8bec:	dc2e      	bgt.n	8c4c <_svfprintf_r+0xec>
    8bee:	3608      	adds	r6, #8
    8bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8bf2:	469c      	mov	ip, r3
    8bf4:	44ac      	add	ip, r5
    8bf6:	4663      	mov	r3, ip
    8bf8:	930a      	str	r3, [sp, #40]	; 0x28
    8bfa:	7823      	ldrb	r3, [r4, #0]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d02e      	beq.n	8c5e <_svfprintf_r+0xfe>
    8c00:	1c63      	adds	r3, r4, #1
    8c02:	469b      	mov	fp, r3
    8c04:	2300      	movs	r3, #0
    8c06:	aa16      	add	r2, sp, #88	; 0x58
    8c08:	77d3      	strb	r3, [r2, #31]
    8c0a:	2201      	movs	r2, #1
    8c0c:	4252      	negs	r2, r2
    8c0e:	4692      	mov	sl, r2
    8c10:	2200      	movs	r2, #0
    8c12:	2100      	movs	r1, #0
    8c14:	920b      	str	r2, [sp, #44]	; 0x2c
    8c16:	3220      	adds	r2, #32
    8c18:	4691      	mov	r9, r2
    8c1a:	3220      	adds	r2, #32
    8c1c:	7863      	ldrb	r3, [r4, #1]
    8c1e:	4688      	mov	r8, r1
    8c20:	2000      	movs	r0, #0
    8c22:	2400      	movs	r4, #0
    8c24:	4694      	mov	ip, r2
    8c26:	4659      	mov	r1, fp
    8c28:	3101      	adds	r1, #1
    8c2a:	001a      	movs	r2, r3
    8c2c:	3a20      	subs	r2, #32
    8c2e:	2a58      	cmp	r2, #88	; 0x58
    8c30:	d900      	bls.n	8c34 <_svfprintf_r+0xd4>
    8c32:	e2fd      	b.n	9230 <_svfprintf_r+0x6d0>
    8c34:	4dd7      	ldr	r5, [pc, #860]	; (8f94 <_svfprintf_r+0x434>)
    8c36:	0092      	lsls	r2, r2, #2
    8c38:	58aa      	ldr	r2, [r5, r2]
    8c3a:	4697      	mov	pc, r2
    8c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c3e:	920f      	str	r2, [sp, #60]	; 0x3c
    8c40:	425b      	negs	r3, r3
    8c42:	930b      	str	r3, [sp, #44]	; 0x2c
    8c44:	2304      	movs	r3, #4
    8c46:	431c      	orrs	r4, r3
    8c48:	780b      	ldrb	r3, [r1, #0]
    8c4a:	e7ed      	b.n	8c28 <_svfprintf_r+0xc8>
    8c4c:	003a      	movs	r2, r7
    8c4e:	9906      	ldr	r1, [sp, #24]
    8c50:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c52:	f003 fa43 	bl	c0dc <__ssprint_r>
    8c56:	2800      	cmp	r0, #0
    8c58:	d109      	bne.n	8c6e <_svfprintf_r+0x10e>
    8c5a:	ae32      	add	r6, sp, #200	; 0xc8
    8c5c:	e7c8      	b.n	8bf0 <_svfprintf_r+0x90>
    8c5e:	68bb      	ldr	r3, [r7, #8]
    8c60:	2b00      	cmp	r3, #0
    8c62:	d004      	beq.n	8c6e <_svfprintf_r+0x10e>
    8c64:	003a      	movs	r2, r7
    8c66:	9906      	ldr	r1, [sp, #24]
    8c68:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c6a:	f003 fa37 	bl	c0dc <__ssprint_r>
    8c6e:	9b06      	ldr	r3, [sp, #24]
    8c70:	899b      	ldrh	r3, [r3, #12]
    8c72:	065b      	lsls	r3, r3, #25
    8c74:	d501      	bpl.n	8c7a <_svfprintf_r+0x11a>
    8c76:	f001 f8ce 	bl	9e16 <_svfprintf_r+0x12b6>
    8c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
    8c7c:	b043      	add	sp, #268	; 0x10c
    8c7e:	bc3c      	pop	{r2, r3, r4, r5}
    8c80:	4690      	mov	r8, r2
    8c82:	4699      	mov	r9, r3
    8c84:	46a2      	mov	sl, r4
    8c86:	46ab      	mov	fp, r5
    8c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c8a:	2201      	movs	r2, #1
    8c8c:	780b      	ldrb	r3, [r1, #0]
    8c8e:	4690      	mov	r8, r2
    8c90:	202b      	movs	r0, #43	; 0x2b
    8c92:	e7c9      	b.n	8c28 <_svfprintf_r+0xc8>
    8c94:	1c4b      	adds	r3, r1, #1
    8c96:	469b      	mov	fp, r3
    8c98:	780b      	ldrb	r3, [r1, #0]
    8c9a:	2b2a      	cmp	r3, #42	; 0x2a
    8c9c:	d101      	bne.n	8ca2 <_svfprintf_r+0x142>
    8c9e:	f001 fa1b 	bl	a0d8 <_svfprintf_r+0x1578>
    8ca2:	001a      	movs	r2, r3
    8ca4:	2100      	movs	r1, #0
    8ca6:	3a30      	subs	r2, #48	; 0x30
    8ca8:	468a      	mov	sl, r1
    8caa:	4659      	mov	r1, fp
    8cac:	2a09      	cmp	r2, #9
    8cae:	d8bc      	bhi.n	8c2a <_svfprintf_r+0xca>
    8cb0:	0003      	movs	r3, r0
    8cb2:	0011      	movs	r1, r2
    8cb4:	4650      	mov	r0, sl
    8cb6:	465a      	mov	r2, fp
    8cb8:	469a      	mov	sl, r3
    8cba:	46a3      	mov	fp, r4
    8cbc:	0083      	lsls	r3, r0, #2
    8cbe:	181b      	adds	r3, r3, r0
    8cc0:	7814      	ldrb	r4, [r2, #0]
    8cc2:	005b      	lsls	r3, r3, #1
    8cc4:	1858      	adds	r0, r3, r1
    8cc6:	0021      	movs	r1, r4
    8cc8:	1c53      	adds	r3, r2, #1
    8cca:	3930      	subs	r1, #48	; 0x30
    8ccc:	001a      	movs	r2, r3
    8cce:	2909      	cmp	r1, #9
    8cd0:	d9f4      	bls.n	8cbc <_svfprintf_r+0x15c>
    8cd2:	4652      	mov	r2, sl
    8cd4:	0019      	movs	r1, r3
    8cd6:	4682      	mov	sl, r0
    8cd8:	0023      	movs	r3, r4
    8cda:	0010      	movs	r0, r2
    8cdc:	465c      	mov	r4, fp
    8cde:	e7a4      	b.n	8c2a <_svfprintf_r+0xca>
    8ce0:	2380      	movs	r3, #128	; 0x80
    8ce2:	431c      	orrs	r4, r3
    8ce4:	780b      	ldrb	r3, [r1, #0]
    8ce6:	e79f      	b.n	8c28 <_svfprintf_r+0xc8>
    8ce8:	468b      	mov	fp, r1
    8cea:	4641      	mov	r1, r8
    8cec:	9312      	str	r3, [sp, #72]	; 0x48
    8cee:	2900      	cmp	r1, #0
    8cf0:	d001      	beq.n	8cf6 <_svfprintf_r+0x196>
    8cf2:	f001 fa1f 	bl	a134 <_svfprintf_r+0x15d4>
    8cf6:	2310      	movs	r3, #16
    8cf8:	431c      	orrs	r4, r3
    8cfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8cfc:	06a3      	lsls	r3, r4, #26
    8cfe:	d501      	bpl.n	8d04 <_svfprintf_r+0x1a4>
    8d00:	f000 fe88 	bl	9a14 <_svfprintf_r+0xeb4>
    8d04:	06e3      	lsls	r3, r4, #27
    8d06:	d501      	bpl.n	8d0c <_svfprintf_r+0x1ac>
    8d08:	f000 fd80 	bl	980c <_svfprintf_r+0xcac>
    8d0c:	0663      	lsls	r3, r4, #25
    8d0e:	d401      	bmi.n	8d14 <_svfprintf_r+0x1b4>
    8d10:	f000 fd7c 	bl	980c <_svfprintf_r+0xcac>
    8d14:	2100      	movs	r1, #0
    8d16:	5e53      	ldrsh	r3, [r2, r1]
    8d18:	930c      	str	r3, [sp, #48]	; 0x30
    8d1a:	3204      	adds	r2, #4
    8d1c:	17db      	asrs	r3, r3, #31
    8d1e:	930d      	str	r3, [sp, #52]	; 0x34
    8d20:	920f      	str	r2, [sp, #60]	; 0x3c
    8d22:	d501      	bpl.n	8d28 <_svfprintf_r+0x1c8>
    8d24:	f000 fe86 	bl	9a34 <_svfprintf_r+0xed4>
    8d28:	990c      	ldr	r1, [sp, #48]	; 0x30
    8d2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8d2c:	0008      	movs	r0, r1
    8d2e:	ab16      	add	r3, sp, #88	; 0x58
    8d30:	7fdb      	ldrb	r3, [r3, #31]
    8d32:	4310      	orrs	r0, r2
    8d34:	4698      	mov	r8, r3
    8d36:	0002      	movs	r2, r0
    8d38:	2301      	movs	r3, #1
    8d3a:	4651      	mov	r1, sl
    8d3c:	3101      	adds	r1, #1
    8d3e:	d100      	bne.n	8d42 <_svfprintf_r+0x1e2>
    8d40:	e0ff      	b.n	8f42 <_svfprintf_r+0x3e2>
    8d42:	2180      	movs	r1, #128	; 0x80
    8d44:	0020      	movs	r0, r4
    8d46:	4388      	bics	r0, r1
    8d48:	9008      	str	r0, [sp, #32]
    8d4a:	2a00      	cmp	r2, #0
    8d4c:	d000      	beq.n	8d50 <_svfprintf_r+0x1f0>
    8d4e:	e0fc      	b.n	8f4a <_svfprintf_r+0x3ea>
    8d50:	4652      	mov	r2, sl
    8d52:	2a00      	cmp	r2, #0
    8d54:	d001      	beq.n	8d5a <_svfprintf_r+0x1fa>
    8d56:	f000 fc2c 	bl	95b2 <_svfprintf_r+0xa52>
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	d001      	beq.n	8d62 <_svfprintf_r+0x202>
    8d5e:	f000 fd04 	bl	976a <_svfprintf_r+0xc0a>
    8d62:	2001      	movs	r0, #1
    8d64:	ab32      	add	r3, sp, #200	; 0xc8
    8d66:	4020      	ands	r0, r4
    8d68:	900e      	str	r0, [sp, #56]	; 0x38
    8d6a:	9311      	str	r3, [sp, #68]	; 0x44
    8d6c:	d008      	beq.n	8d80 <_svfprintf_r+0x220>
    8d6e:	2327      	movs	r3, #39	; 0x27
    8d70:	2130      	movs	r1, #48	; 0x30
    8d72:	aa28      	add	r2, sp, #160	; 0xa0
    8d74:	54d1      	strb	r1, [r2, r3]
    8d76:	aa16      	add	r2, sp, #88	; 0x58
    8d78:	4694      	mov	ip, r2
    8d7a:	3348      	adds	r3, #72	; 0x48
    8d7c:	4463      	add	r3, ip
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	4653      	mov	r3, sl
    8d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8d84:	9307      	str	r3, [sp, #28]
    8d86:	4592      	cmp	sl, r2
    8d88:	da00      	bge.n	8d8c <_svfprintf_r+0x22c>
    8d8a:	9207      	str	r2, [sp, #28]
    8d8c:	2300      	movs	r3, #0
    8d8e:	9313      	str	r3, [sp, #76]	; 0x4c
    8d90:	4643      	mov	r3, r8
    8d92:	2b00      	cmp	r3, #0
    8d94:	d002      	beq.n	8d9c <_svfprintf_r+0x23c>
    8d96:	9b07      	ldr	r3, [sp, #28]
    8d98:	3301      	adds	r3, #1
    8d9a:	9307      	str	r3, [sp, #28]
    8d9c:	2302      	movs	r3, #2
    8d9e:	9a08      	ldr	r2, [sp, #32]
    8da0:	401a      	ands	r2, r3
    8da2:	4691      	mov	r9, r2
    8da4:	d002      	beq.n	8dac <_svfprintf_r+0x24c>
    8da6:	9b07      	ldr	r3, [sp, #28]
    8da8:	3302      	adds	r3, #2
    8daa:	9307      	str	r3, [sp, #28]
    8dac:	2384      	movs	r3, #132	; 0x84
    8dae:	9a08      	ldr	r2, [sp, #32]
    8db0:	401a      	ands	r2, r3
    8db2:	9210      	str	r2, [sp, #64]	; 0x40
    8db4:	d000      	beq.n	8db8 <_svfprintf_r+0x258>
    8db6:	e24d      	b.n	9254 <_svfprintf_r+0x6f4>
    8db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dba:	9a07      	ldr	r2, [sp, #28]
    8dbc:	1a9c      	subs	r4, r3, r2
    8dbe:	2c00      	cmp	r4, #0
    8dc0:	dc00      	bgt.n	8dc4 <_svfprintf_r+0x264>
    8dc2:	e247      	b.n	9254 <_svfprintf_r+0x6f4>
    8dc4:	4974      	ldr	r1, [pc, #464]	; (8f98 <_svfprintf_r+0x438>)
    8dc6:	68ba      	ldr	r2, [r7, #8]
    8dc8:	687b      	ldr	r3, [r7, #4]
    8dca:	4688      	mov	r8, r1
    8dcc:	2c10      	cmp	r4, #16
    8dce:	dd1f      	ble.n	8e10 <_svfprintf_r+0x2b0>
    8dd0:	0031      	movs	r1, r6
    8dd2:	2510      	movs	r5, #16
    8dd4:	4646      	mov	r6, r8
    8dd6:	e003      	b.n	8de0 <_svfprintf_r+0x280>
    8dd8:	3c10      	subs	r4, #16
    8dda:	3108      	adds	r1, #8
    8ddc:	2c10      	cmp	r4, #16
    8dde:	dd15      	ble.n	8e0c <_svfprintf_r+0x2ac>
    8de0:	3210      	adds	r2, #16
    8de2:	3301      	adds	r3, #1
    8de4:	600e      	str	r6, [r1, #0]
    8de6:	604d      	str	r5, [r1, #4]
    8de8:	60ba      	str	r2, [r7, #8]
    8dea:	607b      	str	r3, [r7, #4]
    8dec:	2b07      	cmp	r3, #7
    8dee:	ddf3      	ble.n	8dd8 <_svfprintf_r+0x278>
    8df0:	003a      	movs	r2, r7
    8df2:	9906      	ldr	r1, [sp, #24]
    8df4:	9809      	ldr	r0, [sp, #36]	; 0x24
    8df6:	f003 f971 	bl	c0dc <__ssprint_r>
    8dfa:	2800      	cmp	r0, #0
    8dfc:	d000      	beq.n	8e00 <_svfprintf_r+0x2a0>
    8dfe:	e736      	b.n	8c6e <_svfprintf_r+0x10e>
    8e00:	3c10      	subs	r4, #16
    8e02:	68ba      	ldr	r2, [r7, #8]
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	a932      	add	r1, sp, #200	; 0xc8
    8e08:	2c10      	cmp	r4, #16
    8e0a:	dce9      	bgt.n	8de0 <_svfprintf_r+0x280>
    8e0c:	46b0      	mov	r8, r6
    8e0e:	000e      	movs	r6, r1
    8e10:	4641      	mov	r1, r8
    8e12:	6074      	str	r4, [r6, #4]
    8e14:	3301      	adds	r3, #1
    8e16:	18a4      	adds	r4, r4, r2
    8e18:	6031      	str	r1, [r6, #0]
    8e1a:	60bc      	str	r4, [r7, #8]
    8e1c:	607b      	str	r3, [r7, #4]
    8e1e:	2b07      	cmp	r3, #7
    8e20:	dd01      	ble.n	8e26 <_svfprintf_r+0x2c6>
    8e22:	f000 fca8 	bl	9776 <_svfprintf_r+0xc16>
    8e26:	ab16      	add	r3, sp, #88	; 0x58
    8e28:	7fdb      	ldrb	r3, [r3, #31]
    8e2a:	3608      	adds	r6, #8
    8e2c:	4698      	mov	r8, r3
    8e2e:	e212      	b.n	9256 <_svfprintf_r+0x6f6>
    8e30:	468b      	mov	fp, r1
    8e32:	4641      	mov	r1, r8
    8e34:	9312      	str	r3, [sp, #72]	; 0x48
    8e36:	2900      	cmp	r1, #0
    8e38:	d001      	beq.n	8e3e <_svfprintf_r+0x2de>
    8e3a:	f001 f977 	bl	a12c <_svfprintf_r+0x15cc>
    8e3e:	2207      	movs	r2, #7
    8e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e42:	3307      	adds	r3, #7
    8e44:	4393      	bics	r3, r2
    8e46:	3201      	adds	r2, #1
    8e48:	4694      	mov	ip, r2
    8e4a:	449c      	add	ip, r3
    8e4c:	4662      	mov	r2, ip
    8e4e:	920f      	str	r2, [sp, #60]	; 0x3c
    8e50:	681a      	ldr	r2, [r3, #0]
    8e52:	9216      	str	r2, [sp, #88]	; 0x58
    8e54:	685b      	ldr	r3, [r3, #4]
    8e56:	2201      	movs	r2, #1
    8e58:	9315      	str	r3, [sp, #84]	; 0x54
    8e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8e5c:	9d16      	ldr	r5, [sp, #88]	; 0x58
    8e5e:	005b      	lsls	r3, r3, #1
    8e60:	085b      	lsrs	r3, r3, #1
    8e62:	4698      	mov	r8, r3
    8e64:	4252      	negs	r2, r2
    8e66:	4b4d      	ldr	r3, [pc, #308]	; (8f9c <_svfprintf_r+0x43c>)
    8e68:	0028      	movs	r0, r5
    8e6a:	4641      	mov	r1, r8
    8e6c:	f7ff f846 	bl	7efc <__aeabi_dcmpun>
    8e70:	2800      	cmp	r0, #0
    8e72:	d001      	beq.n	8e78 <_svfprintf_r+0x318>
    8e74:	f000 fdfd 	bl	9a72 <_svfprintf_r+0xf12>
    8e78:	2201      	movs	r2, #1
    8e7a:	4b48      	ldr	r3, [pc, #288]	; (8f9c <_svfprintf_r+0x43c>)
    8e7c:	4252      	negs	r2, r2
    8e7e:	0028      	movs	r0, r5
    8e80:	4641      	mov	r1, r8
    8e82:	f7fd fad3 	bl	642c <__aeabi_dcmple>
    8e86:	2800      	cmp	r0, #0
    8e88:	d001      	beq.n	8e8e <_svfprintf_r+0x32e>
    8e8a:	f000 fdf2 	bl	9a72 <_svfprintf_r+0xf12>
    8e8e:	2200      	movs	r2, #0
    8e90:	2300      	movs	r3, #0
    8e92:	9816      	ldr	r0, [sp, #88]	; 0x58
    8e94:	9915      	ldr	r1, [sp, #84]	; 0x54
    8e96:	f7fd fabf 	bl	6418 <__aeabi_dcmplt>
    8e9a:	2800      	cmp	r0, #0
    8e9c:	d001      	beq.n	8ea2 <_svfprintf_r+0x342>
    8e9e:	f001 f822 	bl	9ee6 <_svfprintf_r+0x1386>
    8ea2:	ab16      	add	r3, sp, #88	; 0x58
    8ea4:	7fdb      	ldrb	r3, [r3, #31]
    8ea6:	4698      	mov	r8, r3
    8ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eaa:	2b47      	cmp	r3, #71	; 0x47
    8eac:	dd01      	ble.n	8eb2 <_svfprintf_r+0x352>
    8eae:	f000 fec7 	bl	9c40 <_svfprintf_r+0x10e0>
    8eb2:	4b3b      	ldr	r3, [pc, #236]	; (8fa0 <_svfprintf_r+0x440>)
    8eb4:	9311      	str	r3, [sp, #68]	; 0x44
    8eb6:	2380      	movs	r3, #128	; 0x80
    8eb8:	439c      	bics	r4, r3
    8eba:	3b7d      	subs	r3, #125	; 0x7d
    8ebc:	9307      	str	r3, [sp, #28]
    8ebe:	930e      	str	r3, [sp, #56]	; 0x38
    8ec0:	2300      	movs	r3, #0
    8ec2:	9408      	str	r4, [sp, #32]
    8ec4:	469a      	mov	sl, r3
    8ec6:	9313      	str	r3, [sp, #76]	; 0x4c
    8ec8:	e762      	b.n	8d90 <_svfprintf_r+0x230>
    8eca:	2200      	movs	r2, #0
    8ecc:	3b30      	subs	r3, #48	; 0x30
    8ece:	0015      	movs	r5, r2
    8ed0:	001a      	movs	r2, r3
    8ed2:	0003      	movs	r3, r0
    8ed4:	9407      	str	r4, [sp, #28]
    8ed6:	0008      	movs	r0, r1
    8ed8:	002c      	movs	r4, r5
    8eda:	469b      	mov	fp, r3
    8edc:	00a3      	lsls	r3, r4, #2
    8ede:	191c      	adds	r4, r3, r4
    8ee0:	7803      	ldrb	r3, [r0, #0]
    8ee2:	0064      	lsls	r4, r4, #1
    8ee4:	1914      	adds	r4, r2, r4
    8ee6:	001a      	movs	r2, r3
    8ee8:	3101      	adds	r1, #1
    8eea:	3a30      	subs	r2, #48	; 0x30
    8eec:	0008      	movs	r0, r1
    8eee:	2a09      	cmp	r2, #9
    8ef0:	d9f4      	bls.n	8edc <_svfprintf_r+0x37c>
    8ef2:	940b      	str	r4, [sp, #44]	; 0x2c
    8ef4:	4658      	mov	r0, fp
    8ef6:	9c07      	ldr	r4, [sp, #28]
    8ef8:	e697      	b.n	8c2a <_svfprintf_r+0xca>
    8efa:	2308      	movs	r3, #8
    8efc:	431c      	orrs	r4, r3
    8efe:	780b      	ldrb	r3, [r1, #0]
    8f00:	e692      	b.n	8c28 <_svfprintf_r+0xc8>
    8f02:	9312      	str	r3, [sp, #72]	; 0x48
    8f04:	2310      	movs	r3, #16
    8f06:	431c      	orrs	r4, r3
    8f08:	468b      	mov	fp, r1
    8f0a:	06a3      	lsls	r3, r4, #26
    8f0c:	d500      	bpl.n	8f10 <_svfprintf_r+0x3b0>
    8f0e:	e17b      	b.n	9208 <_svfprintf_r+0x6a8>
    8f10:	06e3      	lsls	r3, r4, #27
    8f12:	d501      	bpl.n	8f18 <_svfprintf_r+0x3b8>
    8f14:	f000 fc7e 	bl	9814 <_svfprintf_r+0xcb4>
    8f18:	0663      	lsls	r3, r4, #25
    8f1a:	d401      	bmi.n	8f20 <_svfprintf_r+0x3c0>
    8f1c:	f000 fc7a 	bl	9814 <_svfprintf_r+0xcb4>
    8f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8f22:	881a      	ldrh	r2, [r3, #0]
    8f24:	920c      	str	r2, [sp, #48]	; 0x30
    8f26:	2200      	movs	r2, #0
    8f28:	3304      	adds	r3, #4
    8f2a:	930f      	str	r3, [sp, #60]	; 0x3c
    8f2c:	2300      	movs	r3, #0
    8f2e:	920d      	str	r2, [sp, #52]	; 0x34
    8f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8f32:	2100      	movs	r1, #0
    8f34:	a816      	add	r0, sp, #88	; 0x58
    8f36:	77c1      	strb	r1, [r0, #31]
    8f38:	4688      	mov	r8, r1
    8f3a:	4651      	mov	r1, sl
    8f3c:	3101      	adds	r1, #1
    8f3e:	d000      	beq.n	8f42 <_svfprintf_r+0x3e2>
    8f40:	e6ff      	b.n	8d42 <_svfprintf_r+0x1e2>
    8f42:	2a00      	cmp	r2, #0
    8f44:	d100      	bne.n	8f48 <_svfprintf_r+0x3e8>
    8f46:	e335      	b.n	95b4 <_svfprintf_r+0xa54>
    8f48:	9408      	str	r4, [sp, #32]
    8f4a:	2b01      	cmp	r3, #1
    8f4c:	d100      	bne.n	8f50 <_svfprintf_r+0x3f0>
    8f4e:	e3e5      	b.n	971c <_svfprintf_r+0xbbc>
    8f50:	2b02      	cmp	r3, #2
    8f52:	d000      	beq.n	8f56 <_svfprintf_r+0x3f6>
    8f54:	e362      	b.n	961c <_svfprintf_r+0xabc>
    8f56:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    8f58:	200f      	movs	r0, #15
    8f5a:	46a1      	mov	r9, r4
    8f5c:	46b4      	mov	ip, r6
    8f5e:	ab32      	add	r3, sp, #200	; 0xc8
    8f60:	0019      	movs	r1, r3
    8f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8f66:	0004      	movs	r4, r0
    8f68:	464d      	mov	r5, r9
    8f6a:	4014      	ands	r4, r2
    8f6c:	5d2c      	ldrb	r4, [r5, r4]
    8f6e:	071e      	lsls	r6, r3, #28
    8f70:	0915      	lsrs	r5, r2, #4
    8f72:	3901      	subs	r1, #1
    8f74:	432e      	orrs	r6, r5
    8f76:	700c      	strb	r4, [r1, #0]
    8f78:	091c      	lsrs	r4, r3, #4
    8f7a:	0023      	movs	r3, r4
    8f7c:	0034      	movs	r4, r6
    8f7e:	0032      	movs	r2, r6
    8f80:	431c      	orrs	r4, r3
    8f82:	d1f0      	bne.n	8f66 <_svfprintf_r+0x406>
    8f84:	920c      	str	r2, [sp, #48]	; 0x30
    8f86:	930d      	str	r3, [sp, #52]	; 0x34
    8f88:	ab32      	add	r3, sp, #200	; 0xc8
    8f8a:	1a5b      	subs	r3, r3, r1
    8f8c:	9111      	str	r1, [sp, #68]	; 0x44
    8f8e:	4666      	mov	r6, ip
    8f90:	930e      	str	r3, [sp, #56]	; 0x38
    8f92:	e6f5      	b.n	8d80 <_svfprintf_r+0x220>
    8f94:	0000e11c 	.word	0x0000e11c
    8f98:	0000e2c4 	.word	0x0000e2c4
    8f9c:	7fefffff 	.word	0x7fefffff
    8fa0:	0000e280 	.word	0x0000e280
    8fa4:	9312      	str	r3, [sp, #72]	; 0x48
    8fa6:	2310      	movs	r3, #16
    8fa8:	431c      	orrs	r4, r3
    8faa:	468b      	mov	fp, r1
    8fac:	06a3      	lsls	r3, r4, #26
    8fae:	d500      	bpl.n	8fb2 <_svfprintf_r+0x452>
    8fb0:	e111      	b.n	91d6 <_svfprintf_r+0x676>
    8fb2:	06e3      	lsls	r3, r4, #27
    8fb4:	d501      	bpl.n	8fba <_svfprintf_r+0x45a>
    8fb6:	f000 fc31 	bl	981c <_svfprintf_r+0xcbc>
    8fba:	0663      	lsls	r3, r4, #25
    8fbc:	d401      	bmi.n	8fc2 <_svfprintf_r+0x462>
    8fbe:	f000 fc2d 	bl	981c <_svfprintf_r+0xcbc>
    8fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8fc4:	881a      	ldrh	r2, [r3, #0]
    8fc6:	920c      	str	r2, [sp, #48]	; 0x30
    8fc8:	2200      	movs	r2, #0
    8fca:	3304      	adds	r3, #4
    8fcc:	920d      	str	r2, [sp, #52]	; 0x34
    8fce:	930f      	str	r3, [sp, #60]	; 0x3c
    8fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8fd2:	2301      	movs	r3, #1
    8fd4:	e7ad      	b.n	8f32 <_svfprintf_r+0x3d2>
    8fd6:	468b      	mov	fp, r1
    8fd8:	4641      	mov	r1, r8
    8fda:	9312      	str	r3, [sp, #72]	; 0x48
    8fdc:	2900      	cmp	r1, #0
    8fde:	d001      	beq.n	8fe4 <_svfprintf_r+0x484>
    8fe0:	f001 f890 	bl	a104 <_svfprintf_r+0x15a4>
    8fe4:	4bb8      	ldr	r3, [pc, #736]	; (92c8 <_svfprintf_r+0x768>)
    8fe6:	9317      	str	r3, [sp, #92]	; 0x5c
    8fe8:	06a3      	lsls	r3, r4, #26
    8fea:	d500      	bpl.n	8fee <_svfprintf_r+0x48e>
    8fec:	e0ab      	b.n	9146 <_svfprintf_r+0x5e6>
    8fee:	06e3      	lsls	r3, r4, #27
    8ff0:	d501      	bpl.n	8ff6 <_svfprintf_r+0x496>
    8ff2:	f000 fc07 	bl	9804 <_svfprintf_r+0xca4>
    8ff6:	0663      	lsls	r3, r4, #25
    8ff8:	d401      	bmi.n	8ffe <_svfprintf_r+0x49e>
    8ffa:	f000 fc03 	bl	9804 <_svfprintf_r+0xca4>
    8ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9000:	881a      	ldrh	r2, [r3, #0]
    9002:	920c      	str	r2, [sp, #48]	; 0x30
    9004:	2200      	movs	r2, #0
    9006:	3304      	adds	r3, #4
    9008:	920d      	str	r2, [sp, #52]	; 0x34
    900a:	930f      	str	r3, [sp, #60]	; 0x3c
    900c:	07e3      	lsls	r3, r4, #31
    900e:	d400      	bmi.n	9012 <_svfprintf_r+0x4b2>
    9010:	e0a9      	b.n	9166 <_svfprintf_r+0x606>
    9012:	990c      	ldr	r1, [sp, #48]	; 0x30
    9014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9016:	000b      	movs	r3, r1
    9018:	4313      	orrs	r3, r2
    901a:	001a      	movs	r2, r3
    901c:	2302      	movs	r3, #2
    901e:	2a00      	cmp	r2, #0
    9020:	d100      	bne.n	9024 <_svfprintf_r+0x4c4>
    9022:	e786      	b.n	8f32 <_svfprintf_r+0x3d2>
    9024:	2030      	movs	r0, #48	; 0x30
    9026:	a91e      	add	r1, sp, #120	; 0x78
    9028:	7008      	strb	r0, [r1, #0]
    902a:	2548      	movs	r5, #72	; 0x48
    902c:	4668      	mov	r0, sp
    902e:	1940      	adds	r0, r0, r5
    9030:	7800      	ldrb	r0, [r0, #0]
    9032:	431c      	orrs	r4, r3
    9034:	7048      	strb	r0, [r1, #1]
    9036:	e77c      	b.n	8f32 <_svfprintf_r+0x3d2>
    9038:	468b      	mov	fp, r1
    903a:	4641      	mov	r1, r8
    903c:	2900      	cmp	r1, #0
    903e:	d001      	beq.n	9044 <_svfprintf_r+0x4e4>
    9040:	f001 f883 	bl	a14a <_svfprintf_r+0x15ea>
    9044:	06a3      	lsls	r3, r4, #26
    9046:	d501      	bpl.n	904c <_svfprintf_r+0x4ec>
    9048:	f000 fde9 	bl	9c1e <_svfprintf_r+0x10be>
    904c:	06e3      	lsls	r3, r4, #27
    904e:	d501      	bpl.n	9054 <_svfprintf_r+0x4f4>
    9050:	f000 fd9b 	bl	9b8a <_svfprintf_r+0x102a>
    9054:	0663      	lsls	r3, r4, #25
    9056:	d401      	bmi.n	905c <_svfprintf_r+0x4fc>
    9058:	f000 fd97 	bl	9b8a <_svfprintf_r+0x102a>
    905c:	4669      	mov	r1, sp
    905e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9060:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    9062:	681a      	ldr	r2, [r3, #0]
    9064:	3304      	adds	r3, #4
    9066:	9207      	str	r2, [sp, #28]
    9068:	8011      	strh	r1, [r2, #0]
    906a:	930f      	str	r3, [sp, #60]	; 0x3c
    906c:	e5a3      	b.n	8bb6 <_svfprintf_r+0x56>
    906e:	464b      	mov	r3, r9
    9070:	431c      	orrs	r4, r3
    9072:	780b      	ldrb	r3, [r1, #0]
    9074:	e5d8      	b.n	8c28 <_svfprintf_r+0xc8>
    9076:	9312      	str	r3, [sp, #72]	; 0x48
    9078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    907a:	468b      	mov	fp, r1
    907c:	1d1d      	adds	r5, r3, #4
    907e:	681b      	ldr	r3, [r3, #0]
    9080:	a916      	add	r1, sp, #88	; 0x58
    9082:	001a      	movs	r2, r3
    9084:	9311      	str	r3, [sp, #68]	; 0x44
    9086:	2300      	movs	r3, #0
    9088:	77cb      	strb	r3, [r1, #31]
    908a:	2a00      	cmp	r2, #0
    908c:	d101      	bne.n	9092 <_svfprintf_r+0x532>
    908e:	f000 fefb 	bl	9e88 <_svfprintf_r+0x1328>
    9092:	4653      	mov	r3, sl
    9094:	3301      	adds	r3, #1
    9096:	d101      	bne.n	909c <_svfprintf_r+0x53c>
    9098:	f000 fe38 	bl	9d0c <_svfprintf_r+0x11ac>
    909c:	4652      	mov	r2, sl
    909e:	2100      	movs	r1, #0
    90a0:	9811      	ldr	r0, [sp, #68]	; 0x44
    90a2:	f002 fbdd 	bl	b860 <memchr>
    90a6:	2800      	cmp	r0, #0
    90a8:	d101      	bne.n	90ae <_svfprintf_r+0x54e>
    90aa:	f000 ff54 	bl	9f56 <_svfprintf_r+0x13f6>
    90ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    90b0:	1ac3      	subs	r3, r0, r3
    90b2:	001a      	movs	r2, r3
    90b4:	930e      	str	r3, [sp, #56]	; 0x38
    90b6:	43db      	mvns	r3, r3
    90b8:	17db      	asrs	r3, r3, #31
    90ba:	401a      	ands	r2, r3
    90bc:	ab16      	add	r3, sp, #88	; 0x58
    90be:	7fdb      	ldrb	r3, [r3, #31]
    90c0:	9207      	str	r2, [sp, #28]
    90c2:	4698      	mov	r8, r3
    90c4:	2300      	movs	r3, #0
    90c6:	950f      	str	r5, [sp, #60]	; 0x3c
    90c8:	9408      	str	r4, [sp, #32]
    90ca:	469a      	mov	sl, r3
    90cc:	9313      	str	r3, [sp, #76]	; 0x4c
    90ce:	e65f      	b.n	8d90 <_svfprintf_r+0x230>
    90d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    90d2:	9312      	str	r3, [sp, #72]	; 0x48
    90d4:	6813      	ldr	r3, [r2, #0]
    90d6:	ad28      	add	r5, sp, #160	; 0xa0
    90d8:	9307      	str	r3, [sp, #28]
    90da:	466b      	mov	r3, sp
    90dc:	7f1b      	ldrb	r3, [r3, #28]
    90de:	468b      	mov	fp, r1
    90e0:	702b      	strb	r3, [r5, #0]
    90e2:	2300      	movs	r3, #0
    90e4:	a916      	add	r1, sp, #88	; 0x58
    90e6:	77cb      	strb	r3, [r1, #31]
    90e8:	0013      	movs	r3, r2
    90ea:	3304      	adds	r3, #4
    90ec:	930f      	str	r3, [sp, #60]	; 0x3c
    90ee:	2300      	movs	r3, #0
    90f0:	9408      	str	r4, [sp, #32]
    90f2:	4698      	mov	r8, r3
    90f4:	3301      	adds	r3, #1
    90f6:	9307      	str	r3, [sp, #28]
    90f8:	930e      	str	r3, [sp, #56]	; 0x38
    90fa:	2300      	movs	r3, #0
    90fc:	9511      	str	r5, [sp, #68]	; 0x44
    90fe:	469a      	mov	sl, r3
    9100:	9313      	str	r3, [sp, #76]	; 0x4c
    9102:	e64b      	b.n	8d9c <_svfprintf_r+0x23c>
    9104:	468b      	mov	fp, r1
    9106:	4641      	mov	r1, r8
    9108:	9312      	str	r3, [sp, #72]	; 0x48
    910a:	2900      	cmp	r1, #0
    910c:	d100      	bne.n	9110 <_svfprintf_r+0x5b0>
    910e:	e5f4      	b.n	8cfa <_svfprintf_r+0x19a>
    9110:	ab16      	add	r3, sp, #88	; 0x58
    9112:	77d8      	strb	r0, [r3, #31]
    9114:	e5f1      	b.n	8cfa <_svfprintf_r+0x19a>
    9116:	4663      	mov	r3, ip
    9118:	431c      	orrs	r4, r3
    911a:	780b      	ldrb	r3, [r1, #0]
    911c:	e584      	b.n	8c28 <_svfprintf_r+0xc8>
    911e:	780b      	ldrb	r3, [r1, #0]
    9120:	2b6c      	cmp	r3, #108	; 0x6c
    9122:	d101      	bne.n	9128 <_svfprintf_r+0x5c8>
    9124:	f000 fd86 	bl	9c34 <_svfprintf_r+0x10d4>
    9128:	2210      	movs	r2, #16
    912a:	4314      	orrs	r4, r2
    912c:	e57c      	b.n	8c28 <_svfprintf_r+0xc8>
    912e:	468b      	mov	fp, r1
    9130:	4641      	mov	r1, r8
    9132:	9312      	str	r3, [sp, #72]	; 0x48
    9134:	2900      	cmp	r1, #0
    9136:	d001      	beq.n	913c <_svfprintf_r+0x5dc>
    9138:	f000 ffe8 	bl	a10c <_svfprintf_r+0x15ac>
    913c:	4b63      	ldr	r3, [pc, #396]	; (92cc <_svfprintf_r+0x76c>)
    913e:	9317      	str	r3, [sp, #92]	; 0x5c
    9140:	06a3      	lsls	r3, r4, #26
    9142:	d400      	bmi.n	9146 <_svfprintf_r+0x5e6>
    9144:	e753      	b.n	8fee <_svfprintf_r+0x48e>
    9146:	2207      	movs	r2, #7
    9148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    914a:	3307      	adds	r3, #7
    914c:	4393      	bics	r3, r2
    914e:	3201      	adds	r2, #1
    9150:	4694      	mov	ip, r2
    9152:	449c      	add	ip, r3
    9154:	4662      	mov	r2, ip
    9156:	920f      	str	r2, [sp, #60]	; 0x3c
    9158:	681a      	ldr	r2, [r3, #0]
    915a:	685b      	ldr	r3, [r3, #4]
    915c:	920c      	str	r2, [sp, #48]	; 0x30
    915e:	930d      	str	r3, [sp, #52]	; 0x34
    9160:	07e3      	lsls	r3, r4, #31
    9162:	d500      	bpl.n	9166 <_svfprintf_r+0x606>
    9164:	e755      	b.n	9012 <_svfprintf_r+0x4b2>
    9166:	990c      	ldr	r1, [sp, #48]	; 0x30
    9168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    916a:	0008      	movs	r0, r1
    916c:	4310      	orrs	r0, r2
    916e:	2302      	movs	r3, #2
    9170:	0002      	movs	r2, r0
    9172:	e6de      	b.n	8f32 <_svfprintf_r+0x3d2>
    9174:	468b      	mov	fp, r1
    9176:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9178:	2230      	movs	r2, #48	; 0x30
    917a:	680b      	ldr	r3, [r1, #0]
    917c:	930c      	str	r3, [sp, #48]	; 0x30
    917e:	2300      	movs	r3, #0
    9180:	930d      	str	r3, [sp, #52]	; 0x34
    9182:	3302      	adds	r3, #2
    9184:	431c      	orrs	r4, r3
    9186:	ab1e      	add	r3, sp, #120	; 0x78
    9188:	701a      	strb	r2, [r3, #0]
    918a:	3248      	adds	r2, #72	; 0x48
    918c:	705a      	strb	r2, [r3, #1]
    918e:	000b      	movs	r3, r1
    9190:	3304      	adds	r3, #4
    9192:	930f      	str	r3, [sp, #60]	; 0x3c
    9194:	4b4d      	ldr	r3, [pc, #308]	; (92cc <_svfprintf_r+0x76c>)
    9196:	9212      	str	r2, [sp, #72]	; 0x48
    9198:	9317      	str	r3, [sp, #92]	; 0x5c
    919a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    919c:	2302      	movs	r3, #2
    919e:	e6c8      	b.n	8f32 <_svfprintf_r+0x3d2>
    91a0:	2301      	movs	r3, #1
    91a2:	431c      	orrs	r4, r3
    91a4:	780b      	ldrb	r3, [r1, #0]
    91a6:	e53f      	b.n	8c28 <_svfprintf_r+0xc8>
    91a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    91aa:	1d1a      	adds	r2, r3, #4
    91ac:	681b      	ldr	r3, [r3, #0]
    91ae:	930b      	str	r3, [sp, #44]	; 0x2c
    91b0:	2b00      	cmp	r3, #0
    91b2:	da00      	bge.n	91b6 <_svfprintf_r+0x656>
    91b4:	e542      	b.n	8c3c <_svfprintf_r+0xdc>
    91b6:	780b      	ldrb	r3, [r1, #0]
    91b8:	920f      	str	r2, [sp, #60]	; 0x3c
    91ba:	e535      	b.n	8c28 <_svfprintf_r+0xc8>
    91bc:	780b      	ldrb	r3, [r1, #0]
    91be:	2800      	cmp	r0, #0
    91c0:	d000      	beq.n	91c4 <_svfprintf_r+0x664>
    91c2:	e531      	b.n	8c28 <_svfprintf_r+0xc8>
    91c4:	2201      	movs	r2, #1
    91c6:	3020      	adds	r0, #32
    91c8:	4690      	mov	r8, r2
    91ca:	e52d      	b.n	8c28 <_svfprintf_r+0xc8>
    91cc:	468b      	mov	fp, r1
    91ce:	9312      	str	r3, [sp, #72]	; 0x48
    91d0:	06a3      	lsls	r3, r4, #26
    91d2:	d400      	bmi.n	91d6 <_svfprintf_r+0x676>
    91d4:	e6ed      	b.n	8fb2 <_svfprintf_r+0x452>
    91d6:	2207      	movs	r2, #7
    91d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    91da:	3307      	adds	r3, #7
    91dc:	4393      	bics	r3, r2
    91de:	3201      	adds	r2, #1
    91e0:	4694      	mov	ip, r2
    91e2:	449c      	add	ip, r3
    91e4:	4662      	mov	r2, ip
    91e6:	920f      	str	r2, [sp, #60]	; 0x3c
    91e8:	681a      	ldr	r2, [r3, #0]
    91ea:	685b      	ldr	r3, [r3, #4]
    91ec:	0011      	movs	r1, r2
    91ee:	001a      	movs	r2, r3
    91f0:	0008      	movs	r0, r1
    91f2:	4310      	orrs	r0, r2
    91f4:	910c      	str	r1, [sp, #48]	; 0x30
    91f6:	920d      	str	r2, [sp, #52]	; 0x34
    91f8:	2301      	movs	r3, #1
    91fa:	0002      	movs	r2, r0
    91fc:	e699      	b.n	8f32 <_svfprintf_r+0x3d2>
    91fe:	468b      	mov	fp, r1
    9200:	9312      	str	r3, [sp, #72]	; 0x48
    9202:	06a3      	lsls	r3, r4, #26
    9204:	d400      	bmi.n	9208 <_svfprintf_r+0x6a8>
    9206:	e683      	b.n	8f10 <_svfprintf_r+0x3b0>
    9208:	2207      	movs	r2, #7
    920a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    920c:	3307      	adds	r3, #7
    920e:	4393      	bics	r3, r2
    9210:	3201      	adds	r2, #1
    9212:	4694      	mov	ip, r2
    9214:	449c      	add	ip, r3
    9216:	4662      	mov	r2, ip
    9218:	920f      	str	r2, [sp, #60]	; 0x3c
    921a:	681a      	ldr	r2, [r3, #0]
    921c:	685b      	ldr	r3, [r3, #4]
    921e:	0011      	movs	r1, r2
    9220:	001a      	movs	r2, r3
    9222:	0008      	movs	r0, r1
    9224:	4310      	orrs	r0, r2
    9226:	910c      	str	r1, [sp, #48]	; 0x30
    9228:	920d      	str	r2, [sp, #52]	; 0x34
    922a:	2300      	movs	r3, #0
    922c:	0002      	movs	r2, r0
    922e:	e680      	b.n	8f32 <_svfprintf_r+0x3d2>
    9230:	468b      	mov	fp, r1
    9232:	4641      	mov	r1, r8
    9234:	9312      	str	r3, [sp, #72]	; 0x48
    9236:	2900      	cmp	r1, #0
    9238:	d001      	beq.n	923e <_svfprintf_r+0x6de>
    923a:	f000 ff7f 	bl	a13c <_svfprintf_r+0x15dc>
    923e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9240:	2b00      	cmp	r3, #0
    9242:	d100      	bne.n	9246 <_svfprintf_r+0x6e6>
    9244:	e50b      	b.n	8c5e <_svfprintf_r+0xfe>
    9246:	ad28      	add	r5, sp, #160	; 0xa0
    9248:	702b      	strb	r3, [r5, #0]
    924a:	2300      	movs	r3, #0
    924c:	aa16      	add	r2, sp, #88	; 0x58
    924e:	77d3      	strb	r3, [r2, #31]
    9250:	9408      	str	r4, [sp, #32]
    9252:	e74e      	b.n	90f2 <_svfprintf_r+0x592>
    9254:	68bc      	ldr	r4, [r7, #8]
    9256:	4643      	mov	r3, r8
    9258:	2b00      	cmp	r3, #0
    925a:	d00f      	beq.n	927c <_svfprintf_r+0x71c>
    925c:	aa16      	add	r2, sp, #88	; 0x58
    925e:	231f      	movs	r3, #31
    9260:	4694      	mov	ip, r2
    9262:	4463      	add	r3, ip
    9264:	6033      	str	r3, [r6, #0]
    9266:	2301      	movs	r3, #1
    9268:	6073      	str	r3, [r6, #4]
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	3401      	adds	r4, #1
    926e:	3301      	adds	r3, #1
    9270:	60bc      	str	r4, [r7, #8]
    9272:	607b      	str	r3, [r7, #4]
    9274:	2b07      	cmp	r3, #7
    9276:	dd00      	ble.n	927a <_svfprintf_r+0x71a>
    9278:	e1b3      	b.n	95e2 <_svfprintf_r+0xa82>
    927a:	3608      	adds	r6, #8
    927c:	464b      	mov	r3, r9
    927e:	2b00      	cmp	r3, #0
    9280:	d00c      	beq.n	929c <_svfprintf_r+0x73c>
    9282:	ab1e      	add	r3, sp, #120	; 0x78
    9284:	6033      	str	r3, [r6, #0]
    9286:	2302      	movs	r3, #2
    9288:	6073      	str	r3, [r6, #4]
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	3402      	adds	r4, #2
    928e:	3301      	adds	r3, #1
    9290:	60bc      	str	r4, [r7, #8]
    9292:	607b      	str	r3, [r7, #4]
    9294:	2b07      	cmp	r3, #7
    9296:	dd00      	ble.n	929a <_svfprintf_r+0x73a>
    9298:	e1af      	b.n	95fa <_svfprintf_r+0xa9a>
    929a:	3608      	adds	r6, #8
    929c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    929e:	2b80      	cmp	r3, #128	; 0x80
    92a0:	d100      	bne.n	92a4 <_svfprintf_r+0x744>
    92a2:	e120      	b.n	94e6 <_svfprintf_r+0x986>
    92a4:	4653      	mov	r3, sl
    92a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    92a8:	1a9d      	subs	r5, r3, r2
    92aa:	2d00      	cmp	r5, #0
    92ac:	dd3c      	ble.n	9328 <_svfprintf_r+0x7c8>
    92ae:	4a08      	ldr	r2, [pc, #32]	; (92d0 <_svfprintf_r+0x770>)
    92b0:	687b      	ldr	r3, [r7, #4]
    92b2:	4691      	mov	r9, r2
    92b4:	2d10      	cmp	r5, #16
    92b6:	dd2c      	ble.n	9312 <_svfprintf_r+0x7b2>
    92b8:	2210      	movs	r2, #16
    92ba:	0021      	movs	r1, r4
    92bc:	4692      	mov	sl, r2
    92be:	9c09      	ldr	r4, [sp, #36]	; 0x24
    92c0:	0032      	movs	r2, r6
    92c2:	002e      	movs	r6, r5
    92c4:	464d      	mov	r5, r9
    92c6:	e009      	b.n	92dc <_svfprintf_r+0x77c>
    92c8:	0000e290 	.word	0x0000e290
    92cc:	0000e2a4 	.word	0x0000e2a4
    92d0:	0000e2d4 	.word	0x0000e2d4
    92d4:	3e10      	subs	r6, #16
    92d6:	3208      	adds	r2, #8
    92d8:	2e10      	cmp	r6, #16
    92da:	dd16      	ble.n	930a <_svfprintf_r+0x7aa>
    92dc:	4650      	mov	r0, sl
    92de:	3110      	adds	r1, #16
    92e0:	3301      	adds	r3, #1
    92e2:	6015      	str	r5, [r2, #0]
    92e4:	6050      	str	r0, [r2, #4]
    92e6:	60b9      	str	r1, [r7, #8]
    92e8:	607b      	str	r3, [r7, #4]
    92ea:	2b07      	cmp	r3, #7
    92ec:	ddf2      	ble.n	92d4 <_svfprintf_r+0x774>
    92ee:	003a      	movs	r2, r7
    92f0:	9906      	ldr	r1, [sp, #24]
    92f2:	0020      	movs	r0, r4
    92f4:	f002 fef2 	bl	c0dc <__ssprint_r>
    92f8:	2800      	cmp	r0, #0
    92fa:	d000      	beq.n	92fe <_svfprintf_r+0x79e>
    92fc:	e4b7      	b.n	8c6e <_svfprintf_r+0x10e>
    92fe:	3e10      	subs	r6, #16
    9300:	68b9      	ldr	r1, [r7, #8]
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	aa32      	add	r2, sp, #200	; 0xc8
    9306:	2e10      	cmp	r6, #16
    9308:	dce8      	bgt.n	92dc <_svfprintf_r+0x77c>
    930a:	46a9      	mov	r9, r5
    930c:	000c      	movs	r4, r1
    930e:	0035      	movs	r5, r6
    9310:	0016      	movs	r6, r2
    9312:	464a      	mov	r2, r9
    9314:	1964      	adds	r4, r4, r5
    9316:	3301      	adds	r3, #1
    9318:	6032      	str	r2, [r6, #0]
    931a:	6075      	str	r5, [r6, #4]
    931c:	60bc      	str	r4, [r7, #8]
    931e:	607b      	str	r3, [r7, #4]
    9320:	2b07      	cmp	r3, #7
    9322:	dd00      	ble.n	9326 <_svfprintf_r+0x7c6>
    9324:	e151      	b.n	95ca <_svfprintf_r+0xa6a>
    9326:	3608      	adds	r6, #8
    9328:	9b08      	ldr	r3, [sp, #32]
    932a:	05db      	lsls	r3, r3, #23
    932c:	d500      	bpl.n	9330 <_svfprintf_r+0x7d0>
    932e:	e0b6      	b.n	949e <_svfprintf_r+0x93e>
    9330:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9332:	6033      	str	r3, [r6, #0]
    9334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9336:	469c      	mov	ip, r3
    9338:	6073      	str	r3, [r6, #4]
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	4464      	add	r4, ip
    933e:	3301      	adds	r3, #1
    9340:	60bc      	str	r4, [r7, #8]
    9342:	607b      	str	r3, [r7, #4]
    9344:	2b07      	cmp	r3, #7
    9346:	dd00      	ble.n	934a <_svfprintf_r+0x7ea>
    9348:	e09d      	b.n	9486 <_svfprintf_r+0x926>
    934a:	3608      	adds	r6, #8
    934c:	9b08      	ldr	r3, [sp, #32]
    934e:	075b      	lsls	r3, r3, #29
    9350:	d541      	bpl.n	93d6 <_svfprintf_r+0x876>
    9352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9354:	9a07      	ldr	r2, [sp, #28]
    9356:	1a9d      	subs	r5, r3, r2
    9358:	2d00      	cmp	r5, #0
    935a:	dd3c      	ble.n	93d6 <_svfprintf_r+0x876>
    935c:	4ac4      	ldr	r2, [pc, #784]	; (9670 <_svfprintf_r+0xb10>)
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	4690      	mov	r8, r2
    9362:	2d10      	cmp	r5, #16
    9364:	dd26      	ble.n	93b4 <_svfprintf_r+0x854>
    9366:	2210      	movs	r2, #16
    9368:	0021      	movs	r1, r4
    936a:	4691      	mov	r9, r2
    936c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    936e:	0032      	movs	r2, r6
    9370:	002e      	movs	r6, r5
    9372:	9d06      	ldr	r5, [sp, #24]
    9374:	e003      	b.n	937e <_svfprintf_r+0x81e>
    9376:	3e10      	subs	r6, #16
    9378:	3208      	adds	r2, #8
    937a:	2e10      	cmp	r6, #16
    937c:	dd17      	ble.n	93ae <_svfprintf_r+0x84e>
    937e:	48bc      	ldr	r0, [pc, #752]	; (9670 <_svfprintf_r+0xb10>)
    9380:	3110      	adds	r1, #16
    9382:	6010      	str	r0, [r2, #0]
    9384:	4648      	mov	r0, r9
    9386:	3301      	adds	r3, #1
    9388:	6050      	str	r0, [r2, #4]
    938a:	60b9      	str	r1, [r7, #8]
    938c:	607b      	str	r3, [r7, #4]
    938e:	2b07      	cmp	r3, #7
    9390:	ddf1      	ble.n	9376 <_svfprintf_r+0x816>
    9392:	003a      	movs	r2, r7
    9394:	0029      	movs	r1, r5
    9396:	0020      	movs	r0, r4
    9398:	f002 fea0 	bl	c0dc <__ssprint_r>
    939c:	2800      	cmp	r0, #0
    939e:	d000      	beq.n	93a2 <_svfprintf_r+0x842>
    93a0:	e465      	b.n	8c6e <_svfprintf_r+0x10e>
    93a2:	3e10      	subs	r6, #16
    93a4:	68b9      	ldr	r1, [r7, #8]
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	aa32      	add	r2, sp, #200	; 0xc8
    93aa:	2e10      	cmp	r6, #16
    93ac:	dce7      	bgt.n	937e <_svfprintf_r+0x81e>
    93ae:	0035      	movs	r5, r6
    93b0:	000c      	movs	r4, r1
    93b2:	0016      	movs	r6, r2
    93b4:	4642      	mov	r2, r8
    93b6:	1964      	adds	r4, r4, r5
    93b8:	3301      	adds	r3, #1
    93ba:	c624      	stmia	r6!, {r2, r5}
    93bc:	60bc      	str	r4, [r7, #8]
    93be:	607b      	str	r3, [r7, #4]
    93c0:	2b07      	cmp	r3, #7
    93c2:	dd08      	ble.n	93d6 <_svfprintf_r+0x876>
    93c4:	003a      	movs	r2, r7
    93c6:	9906      	ldr	r1, [sp, #24]
    93c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    93ca:	f002 fe87 	bl	c0dc <__ssprint_r>
    93ce:	2800      	cmp	r0, #0
    93d0:	d000      	beq.n	93d4 <_svfprintf_r+0x874>
    93d2:	e44c      	b.n	8c6e <_svfprintf_r+0x10e>
    93d4:	68bc      	ldr	r4, [r7, #8]
    93d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    93d8:	9907      	ldr	r1, [sp, #28]
    93da:	428b      	cmp	r3, r1
    93dc:	da00      	bge.n	93e0 <_svfprintf_r+0x880>
    93de:	000b      	movs	r3, r1
    93e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    93e2:	4694      	mov	ip, r2
    93e4:	449c      	add	ip, r3
    93e6:	4663      	mov	r3, ip
    93e8:	930a      	str	r3, [sp, #40]	; 0x28
    93ea:	2c00      	cmp	r4, #0
    93ec:	d000      	beq.n	93f0 <_svfprintf_r+0x890>
    93ee:	e0d6      	b.n	959e <_svfprintf_r+0xa3e>
    93f0:	2300      	movs	r3, #0
    93f2:	ae32      	add	r6, sp, #200	; 0xc8
    93f4:	607b      	str	r3, [r7, #4]
    93f6:	f7ff fbde 	bl	8bb6 <_svfprintf_r+0x56>
    93fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    93fc:	2b01      	cmp	r3, #1
    93fe:	dc00      	bgt.n	9402 <_svfprintf_r+0x8a2>
    9400:	e0ae      	b.n	9560 <_svfprintf_r+0xa00>
    9402:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9404:	3401      	adds	r4, #1
    9406:	6033      	str	r3, [r6, #0]
    9408:	2301      	movs	r3, #1
    940a:	6073      	str	r3, [r6, #4]
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	60bc      	str	r4, [r7, #8]
    9410:	3301      	adds	r3, #1
    9412:	607b      	str	r3, [r7, #4]
    9414:	2b07      	cmp	r3, #7
    9416:	dd00      	ble.n	941a <_svfprintf_r+0x8ba>
    9418:	e2df      	b.n	99da <_svfprintf_r+0xe7a>
    941a:	3608      	adds	r6, #8
    941c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    941e:	3301      	adds	r3, #1
    9420:	6032      	str	r2, [r6, #0]
    9422:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9424:	4698      	mov	r8, r3
    9426:	4694      	mov	ip, r2
    9428:	4464      	add	r4, ip
    942a:	6072      	str	r2, [r6, #4]
    942c:	60bc      	str	r4, [r7, #8]
    942e:	607b      	str	r3, [r7, #4]
    9430:	2b07      	cmp	r3, #7
    9432:	dd00      	ble.n	9436 <_svfprintf_r+0x8d6>
    9434:	e2de      	b.n	99f4 <_svfprintf_r+0xe94>
    9436:	3608      	adds	r6, #8
    9438:	2200      	movs	r2, #0
    943a:	2300      	movs	r3, #0
    943c:	9816      	ldr	r0, [sp, #88]	; 0x58
    943e:	9915      	ldr	r1, [sp, #84]	; 0x54
    9440:	f7fc ffe4 	bl	640c <__aeabi_dcmpeq>
    9444:	2800      	cmp	r0, #0
    9446:	d000      	beq.n	944a <_svfprintf_r+0x8ea>
    9448:	e1a4      	b.n	9794 <_svfprintf_r+0xc34>
    944a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    944c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    944e:	3501      	adds	r5, #1
    9450:	3b01      	subs	r3, #1
    9452:	6035      	str	r5, [r6, #0]
    9454:	6073      	str	r3, [r6, #4]
    9456:	18e4      	adds	r4, r4, r3
    9458:	2301      	movs	r3, #1
    945a:	469c      	mov	ip, r3
    945c:	44e0      	add	r8, ip
    945e:	4643      	mov	r3, r8
    9460:	60bc      	str	r4, [r7, #8]
    9462:	607b      	str	r3, [r7, #4]
    9464:	2b07      	cmp	r3, #7
    9466:	dd00      	ble.n	946a <_svfprintf_r+0x90a>
    9468:	e08b      	b.n	9582 <_svfprintf_r+0xa22>
    946a:	3608      	adds	r6, #8
    946c:	ab21      	add	r3, sp, #132	; 0x84
    946e:	6033      	str	r3, [r6, #0]
    9470:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9472:	469c      	mov	ip, r3
    9474:	6073      	str	r3, [r6, #4]
    9476:	4643      	mov	r3, r8
    9478:	4464      	add	r4, ip
    947a:	3301      	adds	r3, #1
    947c:	60bc      	str	r4, [r7, #8]
    947e:	607b      	str	r3, [r7, #4]
    9480:	2b07      	cmp	r3, #7
    9482:	dc00      	bgt.n	9486 <_svfprintf_r+0x926>
    9484:	e761      	b.n	934a <_svfprintf_r+0x7ea>
    9486:	003a      	movs	r2, r7
    9488:	9906      	ldr	r1, [sp, #24]
    948a:	9809      	ldr	r0, [sp, #36]	; 0x24
    948c:	f002 fe26 	bl	c0dc <__ssprint_r>
    9490:	2800      	cmp	r0, #0
    9492:	d001      	beq.n	9498 <_svfprintf_r+0x938>
    9494:	f7ff fbeb 	bl	8c6e <_svfprintf_r+0x10e>
    9498:	68bc      	ldr	r4, [r7, #8]
    949a:	ae32      	add	r6, sp, #200	; 0xc8
    949c:	e756      	b.n	934c <_svfprintf_r+0x7ec>
    949e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    94a0:	2b65      	cmp	r3, #101	; 0x65
    94a2:	ddaa      	ble.n	93fa <_svfprintf_r+0x89a>
    94a4:	2200      	movs	r2, #0
    94a6:	2300      	movs	r3, #0
    94a8:	9816      	ldr	r0, [sp, #88]	; 0x58
    94aa:	9915      	ldr	r1, [sp, #84]	; 0x54
    94ac:	f7fc ffae 	bl	640c <__aeabi_dcmpeq>
    94b0:	2800      	cmp	r0, #0
    94b2:	d100      	bne.n	94b6 <_svfprintf_r+0x956>
    94b4:	e0e2      	b.n	967c <_svfprintf_r+0xb1c>
    94b6:	4b6f      	ldr	r3, [pc, #444]	; (9674 <_svfprintf_r+0xb14>)
    94b8:	3401      	adds	r4, #1
    94ba:	6033      	str	r3, [r6, #0]
    94bc:	2301      	movs	r3, #1
    94be:	6073      	str	r3, [r6, #4]
    94c0:	687b      	ldr	r3, [r7, #4]
    94c2:	60bc      	str	r4, [r7, #8]
    94c4:	3301      	adds	r3, #1
    94c6:	607b      	str	r3, [r7, #4]
    94c8:	2b07      	cmp	r3, #7
    94ca:	dd00      	ble.n	94ce <_svfprintf_r+0x96e>
    94cc:	e366      	b.n	9b9c <_svfprintf_r+0x103c>
    94ce:	3608      	adds	r6, #8
    94d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    94d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    94d4:	4293      	cmp	r3, r2
    94d6:	da00      	bge.n	94da <_svfprintf_r+0x97a>
    94d8:	e1a4      	b.n	9824 <_svfprintf_r+0xcc4>
    94da:	9b08      	ldr	r3, [sp, #32]
    94dc:	07db      	lsls	r3, r3, #31
    94de:	d500      	bpl.n	94e2 <_svfprintf_r+0x982>
    94e0:	e1a0      	b.n	9824 <_svfprintf_r+0xcc4>
    94e2:	68bc      	ldr	r4, [r7, #8]
    94e4:	e732      	b.n	934c <_svfprintf_r+0x7ec>
    94e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    94e8:	9a07      	ldr	r2, [sp, #28]
    94ea:	1a9d      	subs	r5, r3, r2
    94ec:	2d00      	cmp	r5, #0
    94ee:	dc00      	bgt.n	94f2 <_svfprintf_r+0x992>
    94f0:	e6d8      	b.n	92a4 <_svfprintf_r+0x744>
    94f2:	4a61      	ldr	r2, [pc, #388]	; (9678 <_svfprintf_r+0xb18>)
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	4691      	mov	r9, r2
    94f8:	2d10      	cmp	r5, #16
    94fa:	dd25      	ble.n	9548 <_svfprintf_r+0x9e8>
    94fc:	2210      	movs	r2, #16
    94fe:	0021      	movs	r1, r4
    9500:	4690      	mov	r8, r2
    9502:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9504:	0032      	movs	r2, r6
    9506:	464e      	mov	r6, r9
    9508:	e003      	b.n	9512 <_svfprintf_r+0x9b2>
    950a:	3d10      	subs	r5, #16
    950c:	3208      	adds	r2, #8
    950e:	2d10      	cmp	r5, #16
    9510:	dd17      	ble.n	9542 <_svfprintf_r+0x9e2>
    9512:	4640      	mov	r0, r8
    9514:	3110      	adds	r1, #16
    9516:	3301      	adds	r3, #1
    9518:	6016      	str	r6, [r2, #0]
    951a:	6050      	str	r0, [r2, #4]
    951c:	60b9      	str	r1, [r7, #8]
    951e:	607b      	str	r3, [r7, #4]
    9520:	2b07      	cmp	r3, #7
    9522:	ddf2      	ble.n	950a <_svfprintf_r+0x9aa>
    9524:	003a      	movs	r2, r7
    9526:	9906      	ldr	r1, [sp, #24]
    9528:	0020      	movs	r0, r4
    952a:	f002 fdd7 	bl	c0dc <__ssprint_r>
    952e:	2800      	cmp	r0, #0
    9530:	d001      	beq.n	9536 <_svfprintf_r+0x9d6>
    9532:	f7ff fb9c 	bl	8c6e <_svfprintf_r+0x10e>
    9536:	3d10      	subs	r5, #16
    9538:	68b9      	ldr	r1, [r7, #8]
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	aa32      	add	r2, sp, #200	; 0xc8
    953e:	2d10      	cmp	r5, #16
    9540:	dce7      	bgt.n	9512 <_svfprintf_r+0x9b2>
    9542:	46b1      	mov	r9, r6
    9544:	000c      	movs	r4, r1
    9546:	0016      	movs	r6, r2
    9548:	464a      	mov	r2, r9
    954a:	1964      	adds	r4, r4, r5
    954c:	3301      	adds	r3, #1
    954e:	6032      	str	r2, [r6, #0]
    9550:	6075      	str	r5, [r6, #4]
    9552:	60bc      	str	r4, [r7, #8]
    9554:	607b      	str	r3, [r7, #4]
    9556:	2b07      	cmp	r3, #7
    9558:	dd00      	ble.n	955c <_svfprintf_r+0x9fc>
    955a:	e27e      	b.n	9a5a <_svfprintf_r+0xefa>
    955c:	3608      	adds	r6, #8
    955e:	e6a1      	b.n	92a4 <_svfprintf_r+0x744>
    9560:	2301      	movs	r3, #1
    9562:	9a08      	ldr	r2, [sp, #32]
    9564:	4213      	tst	r3, r2
    9566:	d000      	beq.n	956a <_svfprintf_r+0xa0a>
    9568:	e74b      	b.n	9402 <_svfprintf_r+0x8a2>
    956a:	6073      	str	r3, [r6, #4]
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9570:	3301      	adds	r3, #1
    9572:	3401      	adds	r4, #1
    9574:	6032      	str	r2, [r6, #0]
    9576:	60bc      	str	r4, [r7, #8]
    9578:	4698      	mov	r8, r3
    957a:	607b      	str	r3, [r7, #4]
    957c:	2b07      	cmp	r3, #7
    957e:	dc00      	bgt.n	9582 <_svfprintf_r+0xa22>
    9580:	e773      	b.n	946a <_svfprintf_r+0x90a>
    9582:	003a      	movs	r2, r7
    9584:	9906      	ldr	r1, [sp, #24]
    9586:	9809      	ldr	r0, [sp, #36]	; 0x24
    9588:	f002 fda8 	bl	c0dc <__ssprint_r>
    958c:	2800      	cmp	r0, #0
    958e:	d001      	beq.n	9594 <_svfprintf_r+0xa34>
    9590:	f7ff fb6d 	bl	8c6e <_svfprintf_r+0x10e>
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	68bc      	ldr	r4, [r7, #8]
    9598:	4698      	mov	r8, r3
    959a:	ae32      	add	r6, sp, #200	; 0xc8
    959c:	e766      	b.n	946c <_svfprintf_r+0x90c>
    959e:	003a      	movs	r2, r7
    95a0:	9906      	ldr	r1, [sp, #24]
    95a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    95a4:	f002 fd9a 	bl	c0dc <__ssprint_r>
    95a8:	2800      	cmp	r0, #0
    95aa:	d100      	bne.n	95ae <_svfprintf_r+0xa4e>
    95ac:	e720      	b.n	93f0 <_svfprintf_r+0x890>
    95ae:	f7ff fb5e 	bl	8c6e <_svfprintf_r+0x10e>
    95b2:	9c08      	ldr	r4, [sp, #32]
    95b4:	2b01      	cmp	r3, #1
    95b6:	d100      	bne.n	95ba <_svfprintf_r+0xa5a>
    95b8:	e184      	b.n	98c4 <_svfprintf_r+0xd64>
    95ba:	2b02      	cmp	r3, #2
    95bc:	d129      	bne.n	9612 <_svfprintf_r+0xab2>
    95be:	9408      	str	r4, [sp, #32]
    95c0:	2300      	movs	r3, #0
    95c2:	2400      	movs	r4, #0
    95c4:	930c      	str	r3, [sp, #48]	; 0x30
    95c6:	940d      	str	r4, [sp, #52]	; 0x34
    95c8:	e4c5      	b.n	8f56 <_svfprintf_r+0x3f6>
    95ca:	003a      	movs	r2, r7
    95cc:	9906      	ldr	r1, [sp, #24]
    95ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    95d0:	f002 fd84 	bl	c0dc <__ssprint_r>
    95d4:	2800      	cmp	r0, #0
    95d6:	d001      	beq.n	95dc <_svfprintf_r+0xa7c>
    95d8:	f7ff fb49 	bl	8c6e <_svfprintf_r+0x10e>
    95dc:	68bc      	ldr	r4, [r7, #8]
    95de:	ae32      	add	r6, sp, #200	; 0xc8
    95e0:	e6a2      	b.n	9328 <_svfprintf_r+0x7c8>
    95e2:	003a      	movs	r2, r7
    95e4:	9906      	ldr	r1, [sp, #24]
    95e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    95e8:	f002 fd78 	bl	c0dc <__ssprint_r>
    95ec:	2800      	cmp	r0, #0
    95ee:	d001      	beq.n	95f4 <_svfprintf_r+0xa94>
    95f0:	f7ff fb3d 	bl	8c6e <_svfprintf_r+0x10e>
    95f4:	68bc      	ldr	r4, [r7, #8]
    95f6:	ae32      	add	r6, sp, #200	; 0xc8
    95f8:	e640      	b.n	927c <_svfprintf_r+0x71c>
    95fa:	003a      	movs	r2, r7
    95fc:	9906      	ldr	r1, [sp, #24]
    95fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    9600:	f002 fd6c 	bl	c0dc <__ssprint_r>
    9604:	2800      	cmp	r0, #0
    9606:	d001      	beq.n	960c <_svfprintf_r+0xaac>
    9608:	f7ff fb31 	bl	8c6e <_svfprintf_r+0x10e>
    960c:	68bc      	ldr	r4, [r7, #8]
    960e:	ae32      	add	r6, sp, #200	; 0xc8
    9610:	e644      	b.n	929c <_svfprintf_r+0x73c>
    9612:	9408      	str	r4, [sp, #32]
    9614:	2300      	movs	r3, #0
    9616:	2400      	movs	r4, #0
    9618:	930c      	str	r3, [sp, #48]	; 0x30
    961a:	940d      	str	r4, [sp, #52]	; 0x34
    961c:	980c      	ldr	r0, [sp, #48]	; 0x30
    961e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9620:	465b      	mov	r3, fp
    9622:	aa32      	add	r2, sp, #200	; 0xc8
    9624:	9307      	str	r3, [sp, #28]
    9626:	4691      	mov	r9, r2
    9628:	46b3      	mov	fp, r6
    962a:	e000      	b.n	962e <_svfprintf_r+0xace>
    962c:	46a1      	mov	r9, r4
    962e:	074a      	lsls	r2, r1, #29
    9630:	4694      	mov	ip, r2
    9632:	464b      	mov	r3, r9
    9634:	4665      	mov	r5, ip
    9636:	1e5c      	subs	r4, r3, #1
    9638:	08c6      	lsrs	r6, r0, #3
    963a:	2307      	movs	r3, #7
    963c:	08ca      	lsrs	r2, r1, #3
    963e:	4335      	orrs	r5, r6
    9640:	0011      	movs	r1, r2
    9642:	002a      	movs	r2, r5
    9644:	4003      	ands	r3, r0
    9646:	3330      	adds	r3, #48	; 0x30
    9648:	7023      	strb	r3, [r4, #0]
    964a:	0028      	movs	r0, r5
    964c:	430a      	orrs	r2, r1
    964e:	d1ed      	bne.n	962c <_svfprintf_r+0xacc>
    9650:	900c      	str	r0, [sp, #48]	; 0x30
    9652:	910d      	str	r1, [sp, #52]	; 0x34
    9654:	9907      	ldr	r1, [sp, #28]
    9656:	465e      	mov	r6, fp
    9658:	468b      	mov	fp, r1
    965a:	9908      	ldr	r1, [sp, #32]
    965c:	464a      	mov	r2, r9
    965e:	9411      	str	r4, [sp, #68]	; 0x44
    9660:	07c9      	lsls	r1, r1, #31
    9662:	d500      	bpl.n	9666 <_svfprintf_r+0xb06>
    9664:	e13d      	b.n	98e2 <_svfprintf_r+0xd82>
    9666:	ab32      	add	r3, sp, #200	; 0xc8
    9668:	1b1b      	subs	r3, r3, r4
    966a:	930e      	str	r3, [sp, #56]	; 0x38
    966c:	f7ff fb88 	bl	8d80 <_svfprintf_r+0x220>
    9670:	0000e2c4 	.word	0x0000e2c4
    9674:	0000e2c0 	.word	0x0000e2c0
    9678:	0000e2d4 	.word	0x0000e2d4
    967c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    967e:	2800      	cmp	r0, #0
    9680:	dc00      	bgt.n	9684 <_svfprintf_r+0xb24>
    9682:	e296      	b.n	9bb2 <_svfprintf_r+0x1052>
    9684:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9686:	9914      	ldr	r1, [sp, #80]	; 0x50
    9688:	0013      	movs	r3, r2
    968a:	4690      	mov	r8, r2
    968c:	428b      	cmp	r3, r1
    968e:	dd00      	ble.n	9692 <_svfprintf_r+0xb32>
    9690:	4688      	mov	r8, r1
    9692:	4643      	mov	r3, r8
    9694:	2b00      	cmp	r3, #0
    9696:	dd0c      	ble.n	96b2 <_svfprintf_r+0xb52>
    9698:	9b11      	ldr	r3, [sp, #68]	; 0x44
    969a:	4444      	add	r4, r8
    969c:	6033      	str	r3, [r6, #0]
    969e:	4643      	mov	r3, r8
    96a0:	6073      	str	r3, [r6, #4]
    96a2:	687b      	ldr	r3, [r7, #4]
    96a4:	60bc      	str	r4, [r7, #8]
    96a6:	3301      	adds	r3, #1
    96a8:	607b      	str	r3, [r7, #4]
    96aa:	2b07      	cmp	r3, #7
    96ac:	dd00      	ble.n	96b0 <_svfprintf_r+0xb50>
    96ae:	e3b7      	b.n	9e20 <_svfprintf_r+0x12c0>
    96b0:	3608      	adds	r6, #8
    96b2:	4643      	mov	r3, r8
    96b4:	43db      	mvns	r3, r3
    96b6:	4642      	mov	r2, r8
    96b8:	17db      	asrs	r3, r3, #31
    96ba:	4013      	ands	r3, r2
    96bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    96be:	1ad3      	subs	r3, r2, r3
    96c0:	4698      	mov	r8, r3
    96c2:	2b00      	cmp	r3, #0
    96c4:	dc00      	bgt.n	96c8 <_svfprintf_r+0xb68>
    96c6:	e128      	b.n	991a <_svfprintf_r+0xdba>
    96c8:	2b10      	cmp	r3, #16
    96ca:	dc01      	bgt.n	96d0 <_svfprintf_r+0xb70>
    96cc:	f000 fce7 	bl	a09e <_svfprintf_r+0x153e>
    96d0:	4acf      	ldr	r2, [pc, #828]	; (9a10 <_svfprintf_r+0xeb0>)
    96d2:	0021      	movs	r1, r4
    96d4:	4691      	mov	r9, r2
    96d6:	2210      	movs	r2, #16
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	4692      	mov	sl, r2
    96dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    96de:	0032      	movs	r2, r6
    96e0:	464c      	mov	r4, r9
    96e2:	4646      	mov	r6, r8
    96e4:	e004      	b.n	96f0 <_svfprintf_r+0xb90>
    96e6:	3208      	adds	r2, #8
    96e8:	3e10      	subs	r6, #16
    96ea:	2e10      	cmp	r6, #16
    96ec:	dc00      	bgt.n	96f0 <_svfprintf_r+0xb90>
    96ee:	e104      	b.n	98fa <_svfprintf_r+0xd9a>
    96f0:	4650      	mov	r0, sl
    96f2:	3110      	adds	r1, #16
    96f4:	3301      	adds	r3, #1
    96f6:	6014      	str	r4, [r2, #0]
    96f8:	6050      	str	r0, [r2, #4]
    96fa:	60b9      	str	r1, [r7, #8]
    96fc:	607b      	str	r3, [r7, #4]
    96fe:	2b07      	cmp	r3, #7
    9700:	ddf1      	ble.n	96e6 <_svfprintf_r+0xb86>
    9702:	003a      	movs	r2, r7
    9704:	9906      	ldr	r1, [sp, #24]
    9706:	0028      	movs	r0, r5
    9708:	f002 fce8 	bl	c0dc <__ssprint_r>
    970c:	2800      	cmp	r0, #0
    970e:	d001      	beq.n	9714 <_svfprintf_r+0xbb4>
    9710:	f7ff faad 	bl	8c6e <_svfprintf_r+0x10e>
    9714:	68b9      	ldr	r1, [r7, #8]
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	aa32      	add	r2, sp, #200	; 0xc8
    971a:	e7e5      	b.n	96e8 <_svfprintf_r+0xb88>
    971c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    971e:	2b00      	cmp	r3, #0
    9720:	d100      	bne.n	9724 <_svfprintf_r+0xbc4>
    9722:	e0ca      	b.n	98ba <_svfprintf_r+0xd5a>
    9724:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    9726:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9728:	ab32      	add	r3, sp, #200	; 0xc8
    972a:	46b1      	mov	r9, r6
    972c:	001e      	movs	r6, r3
    972e:	0020      	movs	r0, r4
    9730:	0029      	movs	r1, r5
    9732:	220a      	movs	r2, #10
    9734:	2300      	movs	r3, #0
    9736:	f003 fa3b 	bl	cbb0 <__aeabi_uldivmod>
    973a:	3e01      	subs	r6, #1
    973c:	3230      	adds	r2, #48	; 0x30
    973e:	7032      	strb	r2, [r6, #0]
    9740:	2300      	movs	r3, #0
    9742:	0020      	movs	r0, r4
    9744:	0029      	movs	r1, r5
    9746:	220a      	movs	r2, #10
    9748:	f003 fa32 	bl	cbb0 <__aeabi_uldivmod>
    974c:	0003      	movs	r3, r0
    974e:	0004      	movs	r4, r0
    9750:	000d      	movs	r5, r1
    9752:	430b      	orrs	r3, r1
    9754:	d1eb      	bne.n	972e <_svfprintf_r+0xbce>
    9756:	0032      	movs	r2, r6
    9758:	ab32      	add	r3, sp, #200	; 0xc8
    975a:	1a9b      	subs	r3, r3, r2
    975c:	9611      	str	r6, [sp, #68]	; 0x44
    975e:	940c      	str	r4, [sp, #48]	; 0x30
    9760:	950d      	str	r5, [sp, #52]	; 0x34
    9762:	464e      	mov	r6, r9
    9764:	930e      	str	r3, [sp, #56]	; 0x38
    9766:	f7ff fb0b 	bl	8d80 <_svfprintf_r+0x220>
    976a:	2300      	movs	r3, #0
    976c:	930e      	str	r3, [sp, #56]	; 0x38
    976e:	ab32      	add	r3, sp, #200	; 0xc8
    9770:	9311      	str	r3, [sp, #68]	; 0x44
    9772:	f7ff fb05 	bl	8d80 <_svfprintf_r+0x220>
    9776:	003a      	movs	r2, r7
    9778:	9906      	ldr	r1, [sp, #24]
    977a:	9809      	ldr	r0, [sp, #36]	; 0x24
    977c:	f002 fcae 	bl	c0dc <__ssprint_r>
    9780:	2800      	cmp	r0, #0
    9782:	d001      	beq.n	9788 <_svfprintf_r+0xc28>
    9784:	f7ff fa73 	bl	8c6e <_svfprintf_r+0x10e>
    9788:	ab16      	add	r3, sp, #88	; 0x58
    978a:	7fdb      	ldrb	r3, [r3, #31]
    978c:	68bc      	ldr	r4, [r7, #8]
    978e:	4698      	mov	r8, r3
    9790:	ae32      	add	r6, sp, #200	; 0xc8
    9792:	e560      	b.n	9256 <_svfprintf_r+0x6f6>
    9794:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9796:	1e5d      	subs	r5, r3, #1
    9798:	2d00      	cmp	r5, #0
    979a:	dc00      	bgt.n	979e <_svfprintf_r+0xc3e>
    979c:	e666      	b.n	946c <_svfprintf_r+0x90c>
    979e:	4b9c      	ldr	r3, [pc, #624]	; (9a10 <_svfprintf_r+0xeb0>)
    97a0:	4699      	mov	r9, r3
    97a2:	2d10      	cmp	r5, #16
    97a4:	dd29      	ble.n	97fa <_svfprintf_r+0xc9a>
    97a6:	2310      	movs	r3, #16
    97a8:	0032      	movs	r2, r6
    97aa:	469a      	mov	sl, r3
    97ac:	002e      	movs	r6, r5
    97ae:	0021      	movs	r1, r4
    97b0:	4643      	mov	r3, r8
    97b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    97b4:	464d      	mov	r5, r9
    97b6:	e003      	b.n	97c0 <_svfprintf_r+0xc60>
    97b8:	3e10      	subs	r6, #16
    97ba:	3208      	adds	r2, #8
    97bc:	2e10      	cmp	r6, #16
    97be:	dd17      	ble.n	97f0 <_svfprintf_r+0xc90>
    97c0:	4650      	mov	r0, sl
    97c2:	3110      	adds	r1, #16
    97c4:	3301      	adds	r3, #1
    97c6:	6015      	str	r5, [r2, #0]
    97c8:	6050      	str	r0, [r2, #4]
    97ca:	60b9      	str	r1, [r7, #8]
    97cc:	607b      	str	r3, [r7, #4]
    97ce:	2b07      	cmp	r3, #7
    97d0:	ddf2      	ble.n	97b8 <_svfprintf_r+0xc58>
    97d2:	003a      	movs	r2, r7
    97d4:	9906      	ldr	r1, [sp, #24]
    97d6:	0020      	movs	r0, r4
    97d8:	f002 fc80 	bl	c0dc <__ssprint_r>
    97dc:	2800      	cmp	r0, #0
    97de:	d001      	beq.n	97e4 <_svfprintf_r+0xc84>
    97e0:	f7ff fa45 	bl	8c6e <_svfprintf_r+0x10e>
    97e4:	3e10      	subs	r6, #16
    97e6:	68b9      	ldr	r1, [r7, #8]
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	aa32      	add	r2, sp, #200	; 0xc8
    97ec:	2e10      	cmp	r6, #16
    97ee:	dce7      	bgt.n	97c0 <_svfprintf_r+0xc60>
    97f0:	46a9      	mov	r9, r5
    97f2:	000c      	movs	r4, r1
    97f4:	0035      	movs	r5, r6
    97f6:	4698      	mov	r8, r3
    97f8:	0016      	movs	r6, r2
    97fa:	464b      	mov	r3, r9
    97fc:	6075      	str	r5, [r6, #4]
    97fe:	6033      	str	r3, [r6, #0]
    9800:	1964      	adds	r4, r4, r5
    9802:	e629      	b.n	9458 <_svfprintf_r+0x8f8>
    9804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9806:	681a      	ldr	r2, [r3, #0]
    9808:	f7ff fbfb 	bl	9002 <_svfprintf_r+0x4a2>
    980c:	6813      	ldr	r3, [r2, #0]
    980e:	9307      	str	r3, [sp, #28]
    9810:	f7ff fa82 	bl	8d18 <_svfprintf_r+0x1b8>
    9814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9816:	681a      	ldr	r2, [r3, #0]
    9818:	f7ff fb84 	bl	8f24 <_svfprintf_r+0x3c4>
    981c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    981e:	681a      	ldr	r2, [r3, #0]
    9820:	f7ff fbd1 	bl	8fc6 <_svfprintf_r+0x466>
    9824:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9826:	68ba      	ldr	r2, [r7, #8]
    9828:	6033      	str	r3, [r6, #0]
    982a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    982c:	469c      	mov	ip, r3
    982e:	6073      	str	r3, [r6, #4]
    9830:	687b      	ldr	r3, [r7, #4]
    9832:	4462      	add	r2, ip
    9834:	3301      	adds	r3, #1
    9836:	0014      	movs	r4, r2
    9838:	60ba      	str	r2, [r7, #8]
    983a:	607b      	str	r3, [r7, #4]
    983c:	2b07      	cmp	r3, #7
    983e:	dd00      	ble.n	9842 <_svfprintf_r+0xce2>
    9840:	e202      	b.n	9c48 <_svfprintf_r+0x10e8>
    9842:	3608      	adds	r6, #8
    9844:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9846:	1e5d      	subs	r5, r3, #1
    9848:	2d00      	cmp	r5, #0
    984a:	dc00      	bgt.n	984e <_svfprintf_r+0xcee>
    984c:	e57e      	b.n	934c <_svfprintf_r+0x7ec>
    984e:	4a70      	ldr	r2, [pc, #448]	; (9a10 <_svfprintf_r+0xeb0>)
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	4691      	mov	r9, r2
    9854:	2d10      	cmp	r5, #16
    9856:	dd25      	ble.n	98a4 <_svfprintf_r+0xd44>
    9858:	2210      	movs	r2, #16
    985a:	0021      	movs	r1, r4
    985c:	4690      	mov	r8, r2
    985e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9860:	0032      	movs	r2, r6
    9862:	002e      	movs	r6, r5
    9864:	464d      	mov	r5, r9
    9866:	e003      	b.n	9870 <_svfprintf_r+0xd10>
    9868:	3208      	adds	r2, #8
    986a:	3e10      	subs	r6, #16
    986c:	2e10      	cmp	r6, #16
    986e:	dd15      	ble.n	989c <_svfprintf_r+0xd3c>
    9870:	4640      	mov	r0, r8
    9872:	3110      	adds	r1, #16
    9874:	3301      	adds	r3, #1
    9876:	6015      	str	r5, [r2, #0]
    9878:	6050      	str	r0, [r2, #4]
    987a:	60b9      	str	r1, [r7, #8]
    987c:	607b      	str	r3, [r7, #4]
    987e:	2b07      	cmp	r3, #7
    9880:	ddf2      	ble.n	9868 <_svfprintf_r+0xd08>
    9882:	003a      	movs	r2, r7
    9884:	9906      	ldr	r1, [sp, #24]
    9886:	0020      	movs	r0, r4
    9888:	f002 fc28 	bl	c0dc <__ssprint_r>
    988c:	2800      	cmp	r0, #0
    988e:	d001      	beq.n	9894 <_svfprintf_r+0xd34>
    9890:	f7ff f9ed 	bl	8c6e <_svfprintf_r+0x10e>
    9894:	68b9      	ldr	r1, [r7, #8]
    9896:	687b      	ldr	r3, [r7, #4]
    9898:	aa32      	add	r2, sp, #200	; 0xc8
    989a:	e7e6      	b.n	986a <_svfprintf_r+0xd0a>
    989c:	46a9      	mov	r9, r5
    989e:	000c      	movs	r4, r1
    98a0:	0035      	movs	r5, r6
    98a2:	0016      	movs	r6, r2
    98a4:	464a      	mov	r2, r9
    98a6:	1964      	adds	r4, r4, r5
    98a8:	3301      	adds	r3, #1
    98aa:	6032      	str	r2, [r6, #0]
    98ac:	6075      	str	r5, [r6, #4]
    98ae:	60bc      	str	r4, [r7, #8]
    98b0:	607b      	str	r3, [r7, #4]
    98b2:	2b07      	cmp	r3, #7
    98b4:	dc00      	bgt.n	98b8 <_svfprintf_r+0xd58>
    98b6:	e548      	b.n	934a <_svfprintf_r+0x7ea>
    98b8:	e5e5      	b.n	9486 <_svfprintf_r+0x926>
    98ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    98bc:	2b09      	cmp	r3, #9
    98be:	d900      	bls.n	98c2 <_svfprintf_r+0xd62>
    98c0:	e730      	b.n	9724 <_svfprintf_r+0xbc4>
    98c2:	9c08      	ldr	r4, [sp, #32]
    98c4:	2227      	movs	r2, #39	; 0x27
    98c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    98c8:	a928      	add	r1, sp, #160	; 0xa0
    98ca:	3330      	adds	r3, #48	; 0x30
    98cc:	548b      	strb	r3, [r1, r2]
    98ce:	2301      	movs	r3, #1
    98d0:	aa16      	add	r2, sp, #88	; 0x58
    98d2:	4694      	mov	ip, r2
    98d4:	930e      	str	r3, [sp, #56]	; 0x38
    98d6:	336e      	adds	r3, #110	; 0x6e
    98d8:	4463      	add	r3, ip
    98da:	9408      	str	r4, [sp, #32]
    98dc:	9311      	str	r3, [sp, #68]	; 0x44
    98de:	f7ff fa4f 	bl	8d80 <_svfprintf_r+0x220>
    98e2:	2b30      	cmp	r3, #48	; 0x30
    98e4:	d100      	bne.n	98e8 <_svfprintf_r+0xd88>
    98e6:	e20b      	b.n	9d00 <_svfprintf_r+0x11a0>
    98e8:	2330      	movs	r3, #48	; 0x30
    98ea:	3a02      	subs	r2, #2
    98ec:	7013      	strb	r3, [r2, #0]
    98ee:	ab32      	add	r3, sp, #200	; 0xc8
    98f0:	1a9b      	subs	r3, r3, r2
    98f2:	930e      	str	r3, [sp, #56]	; 0x38
    98f4:	9211      	str	r2, [sp, #68]	; 0x44
    98f6:	f7ff fa43 	bl	8d80 <_svfprintf_r+0x220>
    98fa:	46b0      	mov	r8, r6
    98fc:	46a1      	mov	r9, r4
    98fe:	0016      	movs	r6, r2
    9900:	000c      	movs	r4, r1
    9902:	464a      	mov	r2, r9
    9904:	6032      	str	r2, [r6, #0]
    9906:	4642      	mov	r2, r8
    9908:	4444      	add	r4, r8
    990a:	3301      	adds	r3, #1
    990c:	6072      	str	r2, [r6, #4]
    990e:	60bc      	str	r4, [r7, #8]
    9910:	607b      	str	r3, [r7, #4]
    9912:	2b07      	cmp	r3, #7
    9914:	dd00      	ble.n	9918 <_svfprintf_r+0xdb8>
    9916:	e29c      	b.n	9e52 <_svfprintf_r+0x12f2>
    9918:	3608      	adds	r6, #8
    991a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    991c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    991e:	4293      	cmp	r3, r2
    9920:	db4c      	blt.n	99bc <_svfprintf_r+0xe5c>
    9922:	9a08      	ldr	r2, [sp, #32]
    9924:	07d2      	lsls	r2, r2, #31
    9926:	d449      	bmi.n	99bc <_svfprintf_r+0xe5c>
    9928:	9a14      	ldr	r2, [sp, #80]	; 0x50
    992a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    992c:	1ad3      	subs	r3, r2, r3
    992e:	1a52      	subs	r2, r2, r1
    9930:	4690      	mov	r8, r2
    9932:	429a      	cmp	r2, r3
    9934:	dd00      	ble.n	9938 <_svfprintf_r+0xdd8>
    9936:	4698      	mov	r8, r3
    9938:	4642      	mov	r2, r8
    993a:	2a00      	cmp	r2, #0
    993c:	dd0f      	ble.n	995e <_svfprintf_r+0xdfe>
    993e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9940:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9942:	468c      	mov	ip, r1
    9944:	4462      	add	r2, ip
    9946:	6032      	str	r2, [r6, #0]
    9948:	4642      	mov	r2, r8
    994a:	6072      	str	r2, [r6, #4]
    994c:	687a      	ldr	r2, [r7, #4]
    994e:	4444      	add	r4, r8
    9950:	3201      	adds	r2, #1
    9952:	60bc      	str	r4, [r7, #8]
    9954:	607a      	str	r2, [r7, #4]
    9956:	2a07      	cmp	r2, #7
    9958:	dd00      	ble.n	995c <_svfprintf_r+0xdfc>
    995a:	e286      	b.n	9e6a <_svfprintf_r+0x130a>
    995c:	3608      	adds	r6, #8
    995e:	4642      	mov	r2, r8
    9960:	43d5      	mvns	r5, r2
    9962:	17ed      	asrs	r5, r5, #31
    9964:	4015      	ands	r5, r2
    9966:	1b5d      	subs	r5, r3, r5
    9968:	2d00      	cmp	r5, #0
    996a:	dc00      	bgt.n	996e <_svfprintf_r+0xe0e>
    996c:	e4ee      	b.n	934c <_svfprintf_r+0x7ec>
    996e:	4a28      	ldr	r2, [pc, #160]	; (9a10 <_svfprintf_r+0xeb0>)
    9970:	687b      	ldr	r3, [r7, #4]
    9972:	4691      	mov	r9, r2
    9974:	2d10      	cmp	r5, #16
    9976:	dd95      	ble.n	98a4 <_svfprintf_r+0xd44>
    9978:	2210      	movs	r2, #16
    997a:	0021      	movs	r1, r4
    997c:	4690      	mov	r8, r2
    997e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9980:	0032      	movs	r2, r6
    9982:	002e      	movs	r6, r5
    9984:	464d      	mov	r5, r9
    9986:	e003      	b.n	9990 <_svfprintf_r+0xe30>
    9988:	3208      	adds	r2, #8
    998a:	3e10      	subs	r6, #16
    998c:	2e10      	cmp	r6, #16
    998e:	dd85      	ble.n	989c <_svfprintf_r+0xd3c>
    9990:	4640      	mov	r0, r8
    9992:	3110      	adds	r1, #16
    9994:	3301      	adds	r3, #1
    9996:	6015      	str	r5, [r2, #0]
    9998:	6050      	str	r0, [r2, #4]
    999a:	60b9      	str	r1, [r7, #8]
    999c:	607b      	str	r3, [r7, #4]
    999e:	2b07      	cmp	r3, #7
    99a0:	ddf2      	ble.n	9988 <_svfprintf_r+0xe28>
    99a2:	003a      	movs	r2, r7
    99a4:	9906      	ldr	r1, [sp, #24]
    99a6:	0020      	movs	r0, r4
    99a8:	f002 fb98 	bl	c0dc <__ssprint_r>
    99ac:	2800      	cmp	r0, #0
    99ae:	d001      	beq.n	99b4 <_svfprintf_r+0xe54>
    99b0:	f7ff f95d 	bl	8c6e <_svfprintf_r+0x10e>
    99b4:	68b9      	ldr	r1, [r7, #8]
    99b6:	687b      	ldr	r3, [r7, #4]
    99b8:	aa32      	add	r2, sp, #200	; 0xc8
    99ba:	e7e6      	b.n	998a <_svfprintf_r+0xe2a>
    99bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    99be:	6032      	str	r2, [r6, #0]
    99c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    99c2:	4694      	mov	ip, r2
    99c4:	6072      	str	r2, [r6, #4]
    99c6:	687a      	ldr	r2, [r7, #4]
    99c8:	4464      	add	r4, ip
    99ca:	3201      	adds	r2, #1
    99cc:	60bc      	str	r4, [r7, #8]
    99ce:	607a      	str	r2, [r7, #4]
    99d0:	2a07      	cmp	r2, #7
    99d2:	dd00      	ble.n	99d6 <_svfprintf_r+0xe76>
    99d4:	e230      	b.n	9e38 <_svfprintf_r+0x12d8>
    99d6:	3608      	adds	r6, #8
    99d8:	e7a6      	b.n	9928 <_svfprintf_r+0xdc8>
    99da:	003a      	movs	r2, r7
    99dc:	9906      	ldr	r1, [sp, #24]
    99de:	9809      	ldr	r0, [sp, #36]	; 0x24
    99e0:	f002 fb7c 	bl	c0dc <__ssprint_r>
    99e4:	2800      	cmp	r0, #0
    99e6:	d001      	beq.n	99ec <_svfprintf_r+0xe8c>
    99e8:	f7ff f941 	bl	8c6e <_svfprintf_r+0x10e>
    99ec:	68bc      	ldr	r4, [r7, #8]
    99ee:	687b      	ldr	r3, [r7, #4]
    99f0:	ae32      	add	r6, sp, #200	; 0xc8
    99f2:	e513      	b.n	941c <_svfprintf_r+0x8bc>
    99f4:	003a      	movs	r2, r7
    99f6:	9906      	ldr	r1, [sp, #24]
    99f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    99fa:	f002 fb6f 	bl	c0dc <__ssprint_r>
    99fe:	2800      	cmp	r0, #0
    9a00:	d001      	beq.n	9a06 <_svfprintf_r+0xea6>
    9a02:	f7ff f934 	bl	8c6e <_svfprintf_r+0x10e>
    9a06:	687b      	ldr	r3, [r7, #4]
    9a08:	68bc      	ldr	r4, [r7, #8]
    9a0a:	4698      	mov	r8, r3
    9a0c:	ae32      	add	r6, sp, #200	; 0xc8
    9a0e:	e513      	b.n	9438 <_svfprintf_r+0x8d8>
    9a10:	0000e2d4 	.word	0x0000e2d4
    9a14:	2307      	movs	r3, #7
    9a16:	3207      	adds	r2, #7
    9a18:	439a      	bics	r2, r3
    9a1a:	3301      	adds	r3, #1
    9a1c:	469c      	mov	ip, r3
    9a1e:	4494      	add	ip, r2
    9a20:	4663      	mov	r3, ip
    9a22:	930f      	str	r3, [sp, #60]	; 0x3c
    9a24:	6853      	ldr	r3, [r2, #4]
    9a26:	6812      	ldr	r2, [r2, #0]
    9a28:	930d      	str	r3, [sp, #52]	; 0x34
    9a2a:	920c      	str	r2, [sp, #48]	; 0x30
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	db01      	blt.n	9a34 <_svfprintf_r+0xed4>
    9a30:	f7ff f97a 	bl	8d28 <_svfprintf_r+0x1c8>
    9a34:	980c      	ldr	r0, [sp, #48]	; 0x30
    9a36:	990d      	ldr	r1, [sp, #52]	; 0x34
    9a38:	2300      	movs	r3, #0
    9a3a:	4242      	negs	r2, r0
    9a3c:	418b      	sbcs	r3, r1
    9a3e:	0011      	movs	r1, r2
    9a40:	001a      	movs	r2, r3
    9a42:	232d      	movs	r3, #45	; 0x2d
    9a44:	a816      	add	r0, sp, #88	; 0x58
    9a46:	77c3      	strb	r3, [r0, #31]
    9a48:	0008      	movs	r0, r1
    9a4a:	4310      	orrs	r0, r2
    9a4c:	910c      	str	r1, [sp, #48]	; 0x30
    9a4e:	920d      	str	r2, [sp, #52]	; 0x34
    9a50:	4698      	mov	r8, r3
    9a52:	0002      	movs	r2, r0
    9a54:	3b2c      	subs	r3, #44	; 0x2c
    9a56:	f7ff f970 	bl	8d3a <_svfprintf_r+0x1da>
    9a5a:	003a      	movs	r2, r7
    9a5c:	9906      	ldr	r1, [sp, #24]
    9a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a60:	f002 fb3c 	bl	c0dc <__ssprint_r>
    9a64:	2800      	cmp	r0, #0
    9a66:	d001      	beq.n	9a6c <_svfprintf_r+0xf0c>
    9a68:	f7ff f901 	bl	8c6e <_svfprintf_r+0x10e>
    9a6c:	68bc      	ldr	r4, [r7, #8]
    9a6e:	ae32      	add	r6, sp, #200	; 0xc8
    9a70:	e418      	b.n	92a4 <_svfprintf_r+0x744>
    9a72:	9916      	ldr	r1, [sp, #88]	; 0x58
    9a74:	9d15      	ldr	r5, [sp, #84]	; 0x54
    9a76:	000a      	movs	r2, r1
    9a78:	0008      	movs	r0, r1
    9a7a:	002b      	movs	r3, r5
    9a7c:	0029      	movs	r1, r5
    9a7e:	f7fe fa3d 	bl	7efc <__aeabi_dcmpun>
    9a82:	2800      	cmp	r0, #0
    9a84:	d000      	beq.n	9a88 <_svfprintf_r+0xf28>
    9a86:	e2e6      	b.n	a056 <_svfprintf_r+0x14f6>
    9a88:	4653      	mov	r3, sl
    9a8a:	3301      	adds	r3, #1
    9a8c:	d100      	bne.n	9a90 <_svfprintf_r+0xf30>
    9a8e:	e20d      	b.n	9eac <_svfprintf_r+0x134c>
    9a90:	2320      	movs	r3, #32
    9a92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9a94:	439a      	bics	r2, r3
    9a96:	920e      	str	r2, [sp, #56]	; 0x38
    9a98:	2a47      	cmp	r2, #71	; 0x47
    9a9a:	d100      	bne.n	9a9e <_svfprintf_r+0xf3e>
    9a9c:	e11c      	b.n	9cd8 <_svfprintf_r+0x1178>
    9a9e:	2380      	movs	r3, #128	; 0x80
    9aa0:	005b      	lsls	r3, r3, #1
    9aa2:	4323      	orrs	r3, r4
    9aa4:	9308      	str	r3, [sp, #32]
    9aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	da00      	bge.n	9aae <_svfprintf_r+0xf4e>
    9aac:	e221      	b.n	9ef2 <_svfprintf_r+0x1392>
    9aae:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9ab0:	9307      	str	r3, [sp, #28]
    9ab2:	2300      	movs	r3, #0
    9ab4:	4691      	mov	r9, r2
    9ab6:	9310      	str	r3, [sp, #64]	; 0x40
    9ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9aba:	2b66      	cmp	r3, #102	; 0x66
    9abc:	d100      	bne.n	9ac0 <_svfprintf_r+0xf60>
    9abe:	e1fc      	b.n	9eba <_svfprintf_r+0x135a>
    9ac0:	2b46      	cmp	r3, #70	; 0x46
    9ac2:	d100      	bne.n	9ac6 <_svfprintf_r+0xf66>
    9ac4:	e0db      	b.n	9c7e <_svfprintf_r+0x111e>
    9ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
    9aca:	3a45      	subs	r2, #69	; 0x45
    9acc:	0013      	movs	r3, r2
    9ace:	4259      	negs	r1, r3
    9ad0:	4159      	adcs	r1, r3
    9ad2:	ab20      	add	r3, sp, #128	; 0x80
    9ad4:	000d      	movs	r5, r1
    9ad6:	9303      	str	r3, [sp, #12]
    9ad8:	ab1f      	add	r3, sp, #124	; 0x7c
    9ada:	9302      	str	r3, [sp, #8]
    9adc:	2302      	movs	r3, #2
    9ade:	aa23      	add	r2, sp, #140	; 0x8c
    9ae0:	4455      	add	r5, sl
    9ae2:	921b      	str	r2, [sp, #108]	; 0x6c
    9ae4:	9204      	str	r2, [sp, #16]
    9ae6:	9300      	str	r3, [sp, #0]
    9ae8:	9501      	str	r5, [sp, #4]
    9aea:	9b07      	ldr	r3, [sp, #28]
    9aec:	464a      	mov	r2, r9
    9aee:	f000 fbf9 	bl	a2e4 <_dtoa_r>
    9af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9af4:	9011      	str	r0, [sp, #68]	; 0x44
    9af6:	2b67      	cmp	r3, #103	; 0x67
    9af8:	d000      	beq.n	9afc <_svfprintf_r+0xf9c>
    9afa:	e239      	b.n	9f70 <_svfprintf_r+0x1410>
    9afc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9afe:	4698      	mov	r8, r3
    9b00:	44a8      	add	r8, r5
    9b02:	07e3      	lsls	r3, r4, #31
    9b04:	d400      	bmi.n	9b08 <_svfprintf_r+0xfa8>
    9b06:	e28b      	b.n	a020 <_svfprintf_r+0x14c0>
    9b08:	2300      	movs	r3, #0
    9b0a:	2200      	movs	r2, #0
    9b0c:	4648      	mov	r0, r9
    9b0e:	9907      	ldr	r1, [sp, #28]
    9b10:	f7fc fc7c 	bl	640c <__aeabi_dcmpeq>
    9b14:	4643      	mov	r3, r8
    9b16:	2800      	cmp	r0, #0
    9b18:	d10a      	bne.n	9b30 <_svfprintf_r+0xfd0>
    9b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b1c:	4543      	cmp	r3, r8
    9b1e:	d207      	bcs.n	9b30 <_svfprintf_r+0xfd0>
    9b20:	2130      	movs	r1, #48	; 0x30
    9b22:	4640      	mov	r0, r8
    9b24:	1c5a      	adds	r2, r3, #1
    9b26:	9223      	str	r2, [sp, #140]	; 0x8c
    9b28:	7019      	strb	r1, [r3, #0]
    9b2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b2c:	4298      	cmp	r0, r3
    9b2e:	d8f9      	bhi.n	9b24 <_svfprintf_r+0xfc4>
    9b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9b32:	1a9b      	subs	r3, r3, r2
    9b34:	9314      	str	r3, [sp, #80]	; 0x50
    9b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9b38:	2b47      	cmp	r3, #71	; 0x47
    9b3a:	d100      	bne.n	9b3e <_svfprintf_r+0xfde>
    9b3c:	e0f6      	b.n	9d2c <_svfprintf_r+0x11cc>
    9b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b40:	2b65      	cmp	r3, #101	; 0x65
    9b42:	dc00      	bgt.n	9b46 <_svfprintf_r+0xfe6>
    9b44:	e226      	b.n	9f94 <_svfprintf_r+0x1434>
    9b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b48:	2b66      	cmp	r3, #102	; 0x66
    9b4a:	d100      	bne.n	9b4e <_svfprintf_r+0xfee>
    9b4c:	e1f4      	b.n	9f38 <_svfprintf_r+0x13d8>
    9b4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9b50:	9313      	str	r3, [sp, #76]	; 0x4c
    9b52:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9b54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9b56:	0019      	movs	r1, r3
    9b58:	4291      	cmp	r1, r2
    9b5a:	dd00      	ble.n	9b5e <_svfprintf_r+0xffe>
    9b5c:	e1d4      	b.n	9f08 <_svfprintf_r+0x13a8>
    9b5e:	07e3      	lsls	r3, r4, #31
    9b60:	d500      	bpl.n	9b64 <_svfprintf_r+0x1004>
    9b62:	e249      	b.n	9ff8 <_svfprintf_r+0x1498>
    9b64:	43d3      	mvns	r3, r2
    9b66:	17db      	asrs	r3, r3, #31
    9b68:	0011      	movs	r1, r2
    9b6a:	401a      	ands	r2, r3
    9b6c:	2367      	movs	r3, #103	; 0x67
    9b6e:	9207      	str	r2, [sp, #28]
    9b70:	910e      	str	r1, [sp, #56]	; 0x38
    9b72:	9312      	str	r3, [sp, #72]	; 0x48
    9b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b76:	2b00      	cmp	r3, #0
    9b78:	d000      	beq.n	9b7c <_svfprintf_r+0x101c>
    9b7a:	e0cf      	b.n	9d1c <_svfprintf_r+0x11bc>
    9b7c:	ab16      	add	r3, sp, #88	; 0x58
    9b7e:	7fdb      	ldrb	r3, [r3, #31]
    9b80:	4698      	mov	r8, r3
    9b82:	2300      	movs	r3, #0
    9b84:	469a      	mov	sl, r3
    9b86:	f7ff f903 	bl	8d90 <_svfprintf_r+0x230>
    9b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
    9b8e:	6813      	ldr	r3, [r2, #0]
    9b90:	6019      	str	r1, [r3, #0]
    9b92:	0013      	movs	r3, r2
    9b94:	3304      	adds	r3, #4
    9b96:	930f      	str	r3, [sp, #60]	; 0x3c
    9b98:	f7ff f80d 	bl	8bb6 <_svfprintf_r+0x56>
    9b9c:	003a      	movs	r2, r7
    9b9e:	9906      	ldr	r1, [sp, #24]
    9ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ba2:	f002 fa9b 	bl	c0dc <__ssprint_r>
    9ba6:	2800      	cmp	r0, #0
    9ba8:	d001      	beq.n	9bae <_svfprintf_r+0x104e>
    9baa:	f7ff f860 	bl	8c6e <_svfprintf_r+0x10e>
    9bae:	ae32      	add	r6, sp, #200	; 0xc8
    9bb0:	e48e      	b.n	94d0 <_svfprintf_r+0x970>
    9bb2:	4bde      	ldr	r3, [pc, #888]	; (9f2c <_svfprintf_r+0x13cc>)
    9bb4:	3401      	adds	r4, #1
    9bb6:	6033      	str	r3, [r6, #0]
    9bb8:	2301      	movs	r3, #1
    9bba:	6073      	str	r3, [r6, #4]
    9bbc:	687b      	ldr	r3, [r7, #4]
    9bbe:	60bc      	str	r4, [r7, #8]
    9bc0:	3301      	adds	r3, #1
    9bc2:	607b      	str	r3, [r7, #4]
    9bc4:	2b07      	cmp	r3, #7
    9bc6:	dc7a      	bgt.n	9cbe <_svfprintf_r+0x115e>
    9bc8:	3608      	adds	r6, #8
    9bca:	2800      	cmp	r0, #0
    9bcc:	d107      	bne.n	9bde <_svfprintf_r+0x107e>
    9bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d104      	bne.n	9bde <_svfprintf_r+0x107e>
    9bd4:	9b08      	ldr	r3, [sp, #32]
    9bd6:	07db      	lsls	r3, r3, #31
    9bd8:	d401      	bmi.n	9bde <_svfprintf_r+0x107e>
    9bda:	f7ff fbb7 	bl	934c <_svfprintf_r+0x7ec>
    9bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9be0:	6033      	str	r3, [r6, #0]
    9be2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9be4:	1919      	adds	r1, r3, r4
    9be6:	6073      	str	r3, [r6, #4]
    9be8:	687b      	ldr	r3, [r7, #4]
    9bea:	60b9      	str	r1, [r7, #8]
    9bec:	3301      	adds	r3, #1
    9bee:	607b      	str	r3, [r7, #4]
    9bf0:	2b07      	cmp	r3, #7
    9bf2:	dd00      	ble.n	9bf6 <_svfprintf_r+0x1096>
    9bf4:	e1f2      	b.n	9fdc <_svfprintf_r+0x147c>
    9bf6:	0032      	movs	r2, r6
    9bf8:	3208      	adds	r2, #8
    9bfa:	2800      	cmp	r0, #0
    9bfc:	da00      	bge.n	9c00 <_svfprintf_r+0x10a0>
    9bfe:	e1cc      	b.n	9f9a <_svfprintf_r+0x143a>
    9c00:	9811      	ldr	r0, [sp, #68]	; 0x44
    9c02:	3301      	adds	r3, #1
    9c04:	6010      	str	r0, [r2, #0]
    9c06:	9814      	ldr	r0, [sp, #80]	; 0x50
    9c08:	607b      	str	r3, [r7, #4]
    9c0a:	1844      	adds	r4, r0, r1
    9c0c:	6050      	str	r0, [r2, #4]
    9c0e:	60bc      	str	r4, [r7, #8]
    9c10:	2b07      	cmp	r3, #7
    9c12:	dd00      	ble.n	9c16 <_svfprintf_r+0x10b6>
    9c14:	e437      	b.n	9486 <_svfprintf_r+0x926>
    9c16:	3208      	adds	r2, #8
    9c18:	0016      	movs	r6, r2
    9c1a:	f7ff fb97 	bl	934c <_svfprintf_r+0x7ec>
    9c1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c22:	680b      	ldr	r3, [r1, #0]
    9c24:	601a      	str	r2, [r3, #0]
    9c26:	17d2      	asrs	r2, r2, #31
    9c28:	605a      	str	r2, [r3, #4]
    9c2a:	000b      	movs	r3, r1
    9c2c:	3304      	adds	r3, #4
    9c2e:	930f      	str	r3, [sp, #60]	; 0x3c
    9c30:	f7fe ffc1 	bl	8bb6 <_svfprintf_r+0x56>
    9c34:	464b      	mov	r3, r9
    9c36:	3101      	adds	r1, #1
    9c38:	431c      	orrs	r4, r3
    9c3a:	780b      	ldrb	r3, [r1, #0]
    9c3c:	f7fe fff4 	bl	8c28 <_svfprintf_r+0xc8>
    9c40:	4bbb      	ldr	r3, [pc, #748]	; (9f30 <_svfprintf_r+0x13d0>)
    9c42:	9311      	str	r3, [sp, #68]	; 0x44
    9c44:	f7ff f937 	bl	8eb6 <_svfprintf_r+0x356>
    9c48:	003a      	movs	r2, r7
    9c4a:	9906      	ldr	r1, [sp, #24]
    9c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c4e:	f002 fa45 	bl	c0dc <__ssprint_r>
    9c52:	2800      	cmp	r0, #0
    9c54:	d001      	beq.n	9c5a <_svfprintf_r+0x10fa>
    9c56:	f7ff f80a 	bl	8c6e <_svfprintf_r+0x10e>
    9c5a:	68bc      	ldr	r4, [r7, #8]
    9c5c:	ae32      	add	r6, sp, #200	; 0xc8
    9c5e:	e5f1      	b.n	9844 <_svfprintf_r+0xce4>
    9c60:	2140      	movs	r1, #64	; 0x40
    9c62:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c64:	f001 fb32 	bl	b2cc <_malloc_r>
    9c68:	9b06      	ldr	r3, [sp, #24]
    9c6a:	6018      	str	r0, [r3, #0]
    9c6c:	6118      	str	r0, [r3, #16]
    9c6e:	2800      	cmp	r0, #0
    9c70:	d100      	bne.n	9c74 <_svfprintf_r+0x1114>
    9c72:	e24f      	b.n	a114 <_svfprintf_r+0x15b4>
    9c74:	2340      	movs	r3, #64	; 0x40
    9c76:	9a06      	ldr	r2, [sp, #24]
    9c78:	6153      	str	r3, [r2, #20]
    9c7a:	f7fe ff8e 	bl	8b9a <_svfprintf_r+0x3a>
    9c7e:	ab23      	add	r3, sp, #140	; 0x8c
    9c80:	931b      	str	r3, [sp, #108]	; 0x6c
    9c82:	9304      	str	r3, [sp, #16]
    9c84:	ab20      	add	r3, sp, #128	; 0x80
    9c86:	9303      	str	r3, [sp, #12]
    9c88:	ab1f      	add	r3, sp, #124	; 0x7c
    9c8a:	9302      	str	r3, [sp, #8]
    9c8c:	4653      	mov	r3, sl
    9c8e:	9301      	str	r3, [sp, #4]
    9c90:	2303      	movs	r3, #3
    9c92:	464a      	mov	r2, r9
    9c94:	9300      	str	r3, [sp, #0]
    9c96:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c98:	9b07      	ldr	r3, [sp, #28]
    9c9a:	f000 fb23 	bl	a2e4 <_dtoa_r>
    9c9e:	4655      	mov	r5, sl
    9ca0:	9011      	str	r0, [sp, #68]	; 0x44
    9ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ca4:	4698      	mov	r8, r3
    9ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9ca8:	44a8      	add	r8, r5
    9caa:	2b46      	cmp	r3, #70	; 0x46
    9cac:	d000      	beq.n	9cb0 <_svfprintf_r+0x1150>
    9cae:	e72b      	b.n	9b08 <_svfprintf_r+0xfa8>
    9cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9cb2:	781b      	ldrb	r3, [r3, #0]
    9cb4:	2b30      	cmp	r3, #48	; 0x30
    9cb6:	d016      	beq.n	9ce6 <_svfprintf_r+0x1186>
    9cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9cba:	4498      	add	r8, r3
    9cbc:	e724      	b.n	9b08 <_svfprintf_r+0xfa8>
    9cbe:	003a      	movs	r2, r7
    9cc0:	9906      	ldr	r1, [sp, #24]
    9cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
    9cc4:	f002 fa0a 	bl	c0dc <__ssprint_r>
    9cc8:	2800      	cmp	r0, #0
    9cca:	d001      	beq.n	9cd0 <_svfprintf_r+0x1170>
    9ccc:	f7fe ffcf 	bl	8c6e <_svfprintf_r+0x10e>
    9cd0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9cd2:	68bc      	ldr	r4, [r7, #8]
    9cd4:	ae32      	add	r6, sp, #200	; 0xc8
    9cd6:	e778      	b.n	9bca <_svfprintf_r+0x106a>
    9cd8:	4653      	mov	r3, sl
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d000      	beq.n	9ce0 <_svfprintf_r+0x1180>
    9cde:	e6de      	b.n	9a9e <_svfprintf_r+0xf3e>
    9ce0:	3301      	adds	r3, #1
    9ce2:	469a      	mov	sl, r3
    9ce4:	e6db      	b.n	9a9e <_svfprintf_r+0xf3e>
    9ce6:	2200      	movs	r2, #0
    9ce8:	2300      	movs	r3, #0
    9cea:	4648      	mov	r0, r9
    9cec:	9907      	ldr	r1, [sp, #28]
    9cee:	f7fc fb8d 	bl	640c <__aeabi_dcmpeq>
    9cf2:	2800      	cmp	r0, #0
    9cf4:	d1e0      	bne.n	9cb8 <_svfprintf_r+0x1158>
    9cf6:	2301      	movs	r3, #1
    9cf8:	1b5b      	subs	r3, r3, r5
    9cfa:	931f      	str	r3, [sp, #124]	; 0x7c
    9cfc:	4498      	add	r8, r3
    9cfe:	e703      	b.n	9b08 <_svfprintf_r+0xfa8>
    9d00:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9d02:	ab32      	add	r3, sp, #200	; 0xc8
    9d04:	1a9b      	subs	r3, r3, r2
    9d06:	930e      	str	r3, [sp, #56]	; 0x38
    9d08:	f7ff f83a 	bl	8d80 <_svfprintf_r+0x220>
    9d0c:	9811      	ldr	r0, [sp, #68]	; 0x44
    9d0e:	f7fe fba3 	bl	8458 <strlen>
    9d12:	0002      	movs	r2, r0
    9d14:	900e      	str	r0, [sp, #56]	; 0x38
    9d16:	0003      	movs	r3, r0
    9d18:	f7ff f9cd 	bl	90b6 <_svfprintf_r+0x556>
    9d1c:	232d      	movs	r3, #45	; 0x2d
    9d1e:	aa16      	add	r2, sp, #88	; 0x58
    9d20:	77d3      	strb	r3, [r2, #31]
    9d22:	4698      	mov	r8, r3
    9d24:	2300      	movs	r3, #0
    9d26:	469a      	mov	sl, r3
    9d28:	f7ff f835 	bl	8d96 <_svfprintf_r+0x236>
    9d2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9d2e:	9313      	str	r3, [sp, #76]	; 0x4c
    9d30:	1cda      	adds	r2, r3, #3
    9d32:	db02      	blt.n	9d3a <_svfprintf_r+0x11da>
    9d34:	459a      	cmp	sl, r3
    9d36:	db00      	blt.n	9d3a <_svfprintf_r+0x11da>
    9d38:	e70b      	b.n	9b52 <_svfprintf_r+0xff2>
    9d3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d3c:	3b02      	subs	r3, #2
    9d3e:	9312      	str	r3, [sp, #72]	; 0x48
    9d40:	222c      	movs	r2, #44	; 0x2c
    9d42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9d44:	2148      	movs	r1, #72	; 0x48
    9d46:	1e5d      	subs	r5, r3, #1
    9d48:	ab16      	add	r3, sp, #88	; 0x58
    9d4a:	189b      	adds	r3, r3, r2
    9d4c:	466a      	mov	r2, sp
    9d4e:	1852      	adds	r2, r2, r1
    9d50:	7812      	ldrb	r2, [r2, #0]
    9d52:	951f      	str	r5, [sp, #124]	; 0x7c
    9d54:	701a      	strb	r2, [r3, #0]
    9d56:	2d00      	cmp	r5, #0
    9d58:	da00      	bge.n	9d5c <_svfprintf_r+0x11fc>
    9d5a:	e1a4      	b.n	a0a6 <_svfprintf_r+0x1546>
    9d5c:	212d      	movs	r1, #45	; 0x2d
    9d5e:	232b      	movs	r3, #43	; 0x2b
    9d60:	aa16      	add	r2, sp, #88	; 0x58
    9d62:	1852      	adds	r2, r2, r1
    9d64:	7013      	strb	r3, [r2, #0]
    9d66:	2d09      	cmp	r5, #9
    9d68:	dc00      	bgt.n	9d6c <_svfprintf_r+0x120c>
    9d6a:	e14c      	b.n	a006 <_svfprintf_r+0x14a6>
    9d6c:	aa16      	add	r2, sp, #88	; 0x58
    9d6e:	233b      	movs	r3, #59	; 0x3b
    9d70:	4694      	mov	ip, r2
    9d72:	4463      	add	r3, ip
    9d74:	469a      	mov	sl, r3
    9d76:	46b1      	mov	r9, r6
    9d78:	46a0      	mov	r8, r4
    9d7a:	4656      	mov	r6, sl
    9d7c:	e000      	b.n	9d80 <_svfprintf_r+0x1220>
    9d7e:	0026      	movs	r6, r4
    9d80:	0028      	movs	r0, r5
    9d82:	210a      	movs	r1, #10
    9d84:	f002 ff10 	bl	cba8 <__aeabi_idivmod>
    9d88:	1e74      	subs	r4, r6, #1
    9d8a:	3130      	adds	r1, #48	; 0x30
    9d8c:	7021      	strb	r1, [r4, #0]
    9d8e:	0028      	movs	r0, r5
    9d90:	210a      	movs	r1, #10
    9d92:	f002 fe23 	bl	c9dc <__divsi3>
    9d96:	0005      	movs	r5, r0
    9d98:	2809      	cmp	r0, #9
    9d9a:	dcf0      	bgt.n	9d7e <_svfprintf_r+0x121e>
    9d9c:	0023      	movs	r3, r4
    9d9e:	4644      	mov	r4, r8
    9da0:	46b0      	mov	r8, r6
    9da2:	464e      	mov	r6, r9
    9da4:	4699      	mov	r9, r3
    9da6:	0003      	movs	r3, r0
    9da8:	3330      	adds	r3, #48	; 0x30
    9daa:	b2d8      	uxtb	r0, r3
    9dac:	4643      	mov	r3, r8
    9dae:	3b02      	subs	r3, #2
    9db0:	7018      	strb	r0, [r3, #0]
    9db2:	459a      	cmp	sl, r3
    9db4:	d800      	bhi.n	9db8 <_svfprintf_r+0x1258>
    9db6:	e1b4      	b.n	a122 <_svfprintf_r+0x15c2>
    9db8:	4642      	mov	r2, r8
    9dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9dbc:	4645      	mov	r5, r8
    9dbe:	1a99      	subs	r1, r3, r2
    9dc0:	2301      	movs	r3, #1
    9dc2:	3107      	adds	r1, #7
    9dc4:	425b      	negs	r3, r3
    9dc6:	e001      	b.n	9dcc <_svfprintf_r+0x126c>
    9dc8:	5ce8      	ldrb	r0, [r5, r3]
    9dca:	3301      	adds	r3, #1
    9dcc:	aa21      	add	r2, sp, #132	; 0x84
    9dce:	18d2      	adds	r2, r2, r3
    9dd0:	70d0      	strb	r0, [r2, #3]
    9dd2:	428b      	cmp	r3, r1
    9dd4:	d1f8      	bne.n	9dc8 <_svfprintf_r+0x1268>
    9dd6:	a916      	add	r1, sp, #88	; 0x58
    9dd8:	468c      	mov	ip, r1
    9dda:	222e      	movs	r2, #46	; 0x2e
    9ddc:	464b      	mov	r3, r9
    9dde:	4462      	add	r2, ip
    9de0:	4694      	mov	ip, r2
    9de2:	1afb      	subs	r3, r7, r3
    9de4:	4463      	add	r3, ip
    9de6:	aa21      	add	r2, sp, #132	; 0x84
    9de8:	9914      	ldr	r1, [sp, #80]	; 0x50
    9dea:	1a9b      	subs	r3, r3, r2
    9dec:	469c      	mov	ip, r3
    9dee:	000a      	movs	r2, r1
    9df0:	4462      	add	r2, ip
    9df2:	931a      	str	r3, [sp, #104]	; 0x68
    9df4:	920e      	str	r2, [sp, #56]	; 0x38
    9df6:	2901      	cmp	r1, #1
    9df8:	dc00      	bgt.n	9dfc <_svfprintf_r+0x129c>
    9dfa:	e145      	b.n	a088 <_svfprintf_r+0x1528>
    9dfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e00:	4694      	mov	ip, r2
    9e02:	4463      	add	r3, ip
    9e04:	001a      	movs	r2, r3
    9e06:	930e      	str	r3, [sp, #56]	; 0x38
    9e08:	43db      	mvns	r3, r3
    9e0a:	17db      	asrs	r3, r3, #31
    9e0c:	401a      	ands	r2, r3
    9e0e:	2300      	movs	r3, #0
    9e10:	9207      	str	r2, [sp, #28]
    9e12:	9313      	str	r3, [sp, #76]	; 0x4c
    9e14:	e6ae      	b.n	9b74 <_svfprintf_r+0x1014>
    9e16:	2301      	movs	r3, #1
    9e18:	425b      	negs	r3, r3
    9e1a:	930a      	str	r3, [sp, #40]	; 0x28
    9e1c:	f7fe ff2d 	bl	8c7a <_svfprintf_r+0x11a>
    9e20:	003a      	movs	r2, r7
    9e22:	9906      	ldr	r1, [sp, #24]
    9e24:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e26:	f002 f959 	bl	c0dc <__ssprint_r>
    9e2a:	2800      	cmp	r0, #0
    9e2c:	d001      	beq.n	9e32 <_svfprintf_r+0x12d2>
    9e2e:	f7fe ff1e 	bl	8c6e <_svfprintf_r+0x10e>
    9e32:	68bc      	ldr	r4, [r7, #8]
    9e34:	ae32      	add	r6, sp, #200	; 0xc8
    9e36:	e43c      	b.n	96b2 <_svfprintf_r+0xb52>
    9e38:	003a      	movs	r2, r7
    9e3a:	9906      	ldr	r1, [sp, #24]
    9e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e3e:	f002 f94d 	bl	c0dc <__ssprint_r>
    9e42:	2800      	cmp	r0, #0
    9e44:	d001      	beq.n	9e4a <_svfprintf_r+0x12ea>
    9e46:	f7fe ff12 	bl	8c6e <_svfprintf_r+0x10e>
    9e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9e4c:	68bc      	ldr	r4, [r7, #8]
    9e4e:	ae32      	add	r6, sp, #200	; 0xc8
    9e50:	e56a      	b.n	9928 <_svfprintf_r+0xdc8>
    9e52:	003a      	movs	r2, r7
    9e54:	9906      	ldr	r1, [sp, #24]
    9e56:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e58:	f002 f940 	bl	c0dc <__ssprint_r>
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d001      	beq.n	9e64 <_svfprintf_r+0x1304>
    9e60:	f7fe ff05 	bl	8c6e <_svfprintf_r+0x10e>
    9e64:	68bc      	ldr	r4, [r7, #8]
    9e66:	ae32      	add	r6, sp, #200	; 0xc8
    9e68:	e557      	b.n	991a <_svfprintf_r+0xdba>
    9e6a:	003a      	movs	r2, r7
    9e6c:	9906      	ldr	r1, [sp, #24]
    9e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e70:	f002 f934 	bl	c0dc <__ssprint_r>
    9e74:	2800      	cmp	r0, #0
    9e76:	d001      	beq.n	9e7c <_svfprintf_r+0x131c>
    9e78:	f7fe fef9 	bl	8c6e <_svfprintf_r+0x10e>
    9e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9e80:	68bc      	ldr	r4, [r7, #8]
    9e82:	1a9b      	subs	r3, r3, r2
    9e84:	ae32      	add	r6, sp, #200	; 0xc8
    9e86:	e56a      	b.n	995e <_svfprintf_r+0xdfe>
    9e88:	4653      	mov	r3, sl
    9e8a:	9307      	str	r3, [sp, #28]
    9e8c:	2b06      	cmp	r3, #6
    9e8e:	d901      	bls.n	9e94 <_svfprintf_r+0x1334>
    9e90:	2306      	movs	r3, #6
    9e92:	9307      	str	r3, [sp, #28]
    9e94:	9b07      	ldr	r3, [sp, #28]
    9e96:	950f      	str	r5, [sp, #60]	; 0x3c
    9e98:	930e      	str	r3, [sp, #56]	; 0x38
    9e9a:	2300      	movs	r3, #0
    9e9c:	4698      	mov	r8, r3
    9e9e:	469a      	mov	sl, r3
    9ea0:	9313      	str	r3, [sp, #76]	; 0x4c
    9ea2:	4b24      	ldr	r3, [pc, #144]	; (9f34 <_svfprintf_r+0x13d4>)
    9ea4:	9408      	str	r4, [sp, #32]
    9ea6:	9311      	str	r3, [sp, #68]	; 0x44
    9ea8:	f7fe ff78 	bl	8d9c <_svfprintf_r+0x23c>
    9eac:	2320      	movs	r3, #32
    9eae:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9eb0:	439a      	bics	r2, r3
    9eb2:	3b1a      	subs	r3, #26
    9eb4:	920e      	str	r2, [sp, #56]	; 0x38
    9eb6:	469a      	mov	sl, r3
    9eb8:	e5f1      	b.n	9a9e <_svfprintf_r+0xf3e>
    9eba:	ab23      	add	r3, sp, #140	; 0x8c
    9ebc:	931b      	str	r3, [sp, #108]	; 0x6c
    9ebe:	9304      	str	r3, [sp, #16]
    9ec0:	ab20      	add	r3, sp, #128	; 0x80
    9ec2:	9303      	str	r3, [sp, #12]
    9ec4:	ab1f      	add	r3, sp, #124	; 0x7c
    9ec6:	9302      	str	r3, [sp, #8]
    9ec8:	4653      	mov	r3, sl
    9eca:	9301      	str	r3, [sp, #4]
    9ecc:	2303      	movs	r3, #3
    9ece:	464a      	mov	r2, r9
    9ed0:	9300      	str	r3, [sp, #0]
    9ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ed4:	9b07      	ldr	r3, [sp, #28]
    9ed6:	f000 fa05 	bl	a2e4 <_dtoa_r>
    9eda:	0003      	movs	r3, r0
    9edc:	4453      	add	r3, sl
    9ede:	9011      	str	r0, [sp, #68]	; 0x44
    9ee0:	4698      	mov	r8, r3
    9ee2:	4655      	mov	r5, sl
    9ee4:	e6e4      	b.n	9cb0 <_svfprintf_r+0x1150>
    9ee6:	232d      	movs	r3, #45	; 0x2d
    9ee8:	aa16      	add	r2, sp, #88	; 0x58
    9eea:	77d3      	strb	r3, [r2, #31]
    9eec:	4698      	mov	r8, r3
    9eee:	f7fe ffdb 	bl	8ea8 <_svfprintf_r+0x348>
    9ef2:	2280      	movs	r2, #128	; 0x80
    9ef4:	0612      	lsls	r2, r2, #24
    9ef6:	4694      	mov	ip, r2
    9ef8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9efa:	4699      	mov	r9, r3
    9efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9efe:	4463      	add	r3, ip
    9f00:	9307      	str	r3, [sp, #28]
    9f02:	232d      	movs	r3, #45	; 0x2d
    9f04:	9310      	str	r3, [sp, #64]	; 0x40
    9f06:	e5d7      	b.n	9ab8 <_svfprintf_r+0xf58>
    9f08:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9f0c:	4694      	mov	ip, r2
    9f0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9f10:	4463      	add	r3, ip
    9f12:	930e      	str	r3, [sp, #56]	; 0x38
    9f14:	2a00      	cmp	r2, #0
    9f16:	dc00      	bgt.n	9f1a <_svfprintf_r+0x13ba>
    9f18:	e0ce      	b.n	a0b8 <_svfprintf_r+0x1558>
    9f1a:	001a      	movs	r2, r3
    9f1c:	43db      	mvns	r3, r3
    9f1e:	17db      	asrs	r3, r3, #31
    9f20:	401a      	ands	r2, r3
    9f22:	2367      	movs	r3, #103	; 0x67
    9f24:	9207      	str	r2, [sp, #28]
    9f26:	9312      	str	r3, [sp, #72]	; 0x48
    9f28:	e624      	b.n	9b74 <_svfprintf_r+0x1014>
    9f2a:	46c0      	nop			; (mov r8, r8)
    9f2c:	0000e2c0 	.word	0x0000e2c0
    9f30:	0000e284 	.word	0x0000e284
    9f34:	0000e2b8 	.word	0x0000e2b8
    9f38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f3a:	9313      	str	r3, [sp, #76]	; 0x4c
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	dc00      	bgt.n	9f42 <_svfprintf_r+0x13e2>
    9f40:	e0d5      	b.n	a0ee <_svfprintf_r+0x158e>
    9f42:	4652      	mov	r2, sl
    9f44:	2a00      	cmp	r2, #0
    9f46:	d000      	beq.n	9f4a <_svfprintf_r+0x13ea>
    9f48:	e092      	b.n	a070 <_svfprintf_r+0x1510>
    9f4a:	07e2      	lsls	r2, r4, #31
    9f4c:	d500      	bpl.n	9f50 <_svfprintf_r+0x13f0>
    9f4e:	e08f      	b.n	a070 <_svfprintf_r+0x1510>
    9f50:	9307      	str	r3, [sp, #28]
    9f52:	930e      	str	r3, [sp, #56]	; 0x38
    9f54:	e60e      	b.n	9b74 <_svfprintf_r+0x1014>
    9f56:	ab16      	add	r3, sp, #88	; 0x58
    9f58:	7fdb      	ldrb	r3, [r3, #31]
    9f5a:	950f      	str	r5, [sp, #60]	; 0x3c
    9f5c:	4698      	mov	r8, r3
    9f5e:	4653      	mov	r3, sl
    9f60:	9307      	str	r3, [sp, #28]
    9f62:	930e      	str	r3, [sp, #56]	; 0x38
    9f64:	2300      	movs	r3, #0
    9f66:	9408      	str	r4, [sp, #32]
    9f68:	469a      	mov	sl, r3
    9f6a:	9313      	str	r3, [sp, #76]	; 0x4c
    9f6c:	f7fe ff10 	bl	8d90 <_svfprintf_r+0x230>
    9f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9f72:	4698      	mov	r8, r3
    9f74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9f76:	44a8      	add	r8, r5
    9f78:	2b47      	cmp	r3, #71	; 0x47
    9f7a:	d000      	beq.n	9f7e <_svfprintf_r+0x141e>
    9f7c:	e5c4      	b.n	9b08 <_svfprintf_r+0xfa8>
    9f7e:	07e3      	lsls	r3, r4, #31
    9f80:	d500      	bpl.n	9f84 <_svfprintf_r+0x1424>
    9f82:	e68e      	b.n	9ca2 <_svfprintf_r+0x1142>
    9f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9f88:	1a9b      	subs	r3, r3, r2
    9f8a:	9314      	str	r3, [sp, #80]	; 0x50
    9f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9f8e:	2b47      	cmp	r3, #71	; 0x47
    9f90:	d100      	bne.n	9f94 <_svfprintf_r+0x1434>
    9f92:	e6cb      	b.n	9d2c <_svfprintf_r+0x11cc>
    9f94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f96:	9313      	str	r3, [sp, #76]	; 0x4c
    9f98:	e6d2      	b.n	9d40 <_svfprintf_r+0x11e0>
    9f9a:	4244      	negs	r4, r0
    9f9c:	3010      	adds	r0, #16
    9f9e:	db00      	blt.n	9fa2 <_svfprintf_r+0x1442>
    9fa0:	e0d0      	b.n	a144 <_svfprintf_r+0x15e4>
    9fa2:	486e      	ldr	r0, [pc, #440]	; (a15c <_svfprintf_r+0x15fc>)
    9fa4:	2610      	movs	r6, #16
    9fa6:	0005      	movs	r5, r0
    9fa8:	e003      	b.n	9fb2 <_svfprintf_r+0x1452>
    9faa:	3208      	adds	r2, #8
    9fac:	3c10      	subs	r4, #16
    9fae:	2c10      	cmp	r4, #16
    9fb0:	dd38      	ble.n	a024 <_svfprintf_r+0x14c4>
    9fb2:	3110      	adds	r1, #16
    9fb4:	3301      	adds	r3, #1
    9fb6:	6015      	str	r5, [r2, #0]
    9fb8:	6056      	str	r6, [r2, #4]
    9fba:	60b9      	str	r1, [r7, #8]
    9fbc:	607b      	str	r3, [r7, #4]
    9fbe:	2b07      	cmp	r3, #7
    9fc0:	ddf3      	ble.n	9faa <_svfprintf_r+0x144a>
    9fc2:	003a      	movs	r2, r7
    9fc4:	9906      	ldr	r1, [sp, #24]
    9fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
    9fc8:	f002 f888 	bl	c0dc <__ssprint_r>
    9fcc:	2800      	cmp	r0, #0
    9fce:	d001      	beq.n	9fd4 <_svfprintf_r+0x1474>
    9fd0:	f7fe fe4d 	bl	8c6e <_svfprintf_r+0x10e>
    9fd4:	68b9      	ldr	r1, [r7, #8]
    9fd6:	687b      	ldr	r3, [r7, #4]
    9fd8:	aa32      	add	r2, sp, #200	; 0xc8
    9fda:	e7e7      	b.n	9fac <_svfprintf_r+0x144c>
    9fdc:	003a      	movs	r2, r7
    9fde:	9906      	ldr	r1, [sp, #24]
    9fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
    9fe2:	f002 f87b 	bl	c0dc <__ssprint_r>
    9fe6:	2800      	cmp	r0, #0
    9fe8:	d001      	beq.n	9fee <_svfprintf_r+0x148e>
    9fea:	f7fe fe40 	bl	8c6e <_svfprintf_r+0x10e>
    9fee:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9ff0:	68b9      	ldr	r1, [r7, #8]
    9ff2:	687b      	ldr	r3, [r7, #4]
    9ff4:	aa32      	add	r2, sp, #200	; 0xc8
    9ff6:	e600      	b.n	9bfa <_svfprintf_r+0x109a>
    9ff8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ffa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9ffc:	4694      	mov	ip, r2
    9ffe:	4463      	add	r3, ip
    a000:	001a      	movs	r2, r3
    a002:	930e      	str	r3, [sp, #56]	; 0x38
    a004:	e78a      	b.n	9f1c <_svfprintf_r+0x13bc>
    a006:	212e      	movs	r1, #46	; 0x2e
    a008:	2330      	movs	r3, #48	; 0x30
    a00a:	aa16      	add	r2, sp, #88	; 0x58
    a00c:	1852      	adds	r2, r2, r1
    a00e:	7013      	strb	r3, [r2, #0]
    a010:	002b      	movs	r3, r5
    a012:	aa16      	add	r2, sp, #88	; 0x58
    a014:	3101      	adds	r1, #1
    a016:	3330      	adds	r3, #48	; 0x30
    a018:	1852      	adds	r2, r2, r1
    a01a:	7013      	strb	r3, [r2, #0]
    a01c:	ab22      	add	r3, sp, #136	; 0x88
    a01e:	e6e2      	b.n	9de6 <_svfprintf_r+0x1286>
    a020:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a022:	e585      	b.n	9b30 <_svfprintf_r+0xfd0>
    a024:	46a9      	mov	r9, r5
    a026:	4648      	mov	r0, r9
    a028:	1909      	adds	r1, r1, r4
    a02a:	3301      	adds	r3, #1
    a02c:	6010      	str	r0, [r2, #0]
    a02e:	6054      	str	r4, [r2, #4]
    a030:	60b9      	str	r1, [r7, #8]
    a032:	3208      	adds	r2, #8
    a034:	607b      	str	r3, [r7, #4]
    a036:	2b07      	cmp	r3, #7
    a038:	dc00      	bgt.n	a03c <_svfprintf_r+0x14dc>
    a03a:	e5e1      	b.n	9c00 <_svfprintf_r+0x10a0>
    a03c:	003a      	movs	r2, r7
    a03e:	9906      	ldr	r1, [sp, #24]
    a040:	9809      	ldr	r0, [sp, #36]	; 0x24
    a042:	f002 f84b 	bl	c0dc <__ssprint_r>
    a046:	2800      	cmp	r0, #0
    a048:	d001      	beq.n	a04e <_svfprintf_r+0x14ee>
    a04a:	f7fe fe10 	bl	8c6e <_svfprintf_r+0x10e>
    a04e:	68b9      	ldr	r1, [r7, #8]
    a050:	687b      	ldr	r3, [r7, #4]
    a052:	aa32      	add	r2, sp, #200	; 0xc8
    a054:	e5d4      	b.n	9c00 <_svfprintf_r+0x10a0>
    a056:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a058:	2b00      	cmp	r3, #0
    a05a:	db38      	blt.n	a0ce <_svfprintf_r+0x156e>
    a05c:	ab16      	add	r3, sp, #88	; 0x58
    a05e:	7fdb      	ldrb	r3, [r3, #31]
    a060:	4698      	mov	r8, r3
    a062:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a064:	2b47      	cmp	r3, #71	; 0x47
    a066:	dc2e      	bgt.n	a0c6 <_svfprintf_r+0x1566>
    a068:	4b3d      	ldr	r3, [pc, #244]	; (a160 <_svfprintf_r+0x1600>)
    a06a:	9311      	str	r3, [sp, #68]	; 0x44
    a06c:	f7fe ff23 	bl	8eb6 <_svfprintf_r+0x356>
    a070:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a072:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a074:	4694      	mov	ip, r2
    a076:	4463      	add	r3, ip
    a078:	4453      	add	r3, sl
    a07a:	001a      	movs	r2, r3
    a07c:	930e      	str	r3, [sp, #56]	; 0x38
    a07e:	43db      	mvns	r3, r3
    a080:	17db      	asrs	r3, r3, #31
    a082:	401a      	ands	r2, r3
    a084:	9207      	str	r2, [sp, #28]
    a086:	e575      	b.n	9b74 <_svfprintf_r+0x1014>
    a088:	2301      	movs	r3, #1
    a08a:	4023      	ands	r3, r4
    a08c:	9313      	str	r3, [sp, #76]	; 0x4c
    a08e:	d000      	beq.n	a092 <_svfprintf_r+0x1532>
    a090:	e6b4      	b.n	9dfc <_svfprintf_r+0x129c>
    a092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a094:	43d3      	mvns	r3, r2
    a096:	17db      	asrs	r3, r3, #31
    a098:	401a      	ands	r2, r3
    a09a:	9207      	str	r2, [sp, #28]
    a09c:	e56a      	b.n	9b74 <_svfprintf_r+0x1014>
    a09e:	4a2f      	ldr	r2, [pc, #188]	; (a15c <_svfprintf_r+0x15fc>)
    a0a0:	687b      	ldr	r3, [r7, #4]
    a0a2:	4691      	mov	r9, r2
    a0a4:	e42d      	b.n	9902 <_svfprintf_r+0xda2>
    a0a6:	2301      	movs	r3, #1
    a0a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a0aa:	391b      	subs	r1, #27
    a0ac:	1a9d      	subs	r5, r3, r2
    a0ae:	aa16      	add	r2, sp, #88	; 0x58
    a0b0:	332c      	adds	r3, #44	; 0x2c
    a0b2:	1852      	adds	r2, r2, r1
    a0b4:	7013      	strb	r3, [r2, #0]
    a0b6:	e656      	b.n	9d66 <_svfprintf_r+0x1206>
    a0b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a0bc:	1a98      	subs	r0, r3, r2
    a0be:	1c43      	adds	r3, r0, #1
    a0c0:	001a      	movs	r2, r3
    a0c2:	930e      	str	r3, [sp, #56]	; 0x38
    a0c4:	e72a      	b.n	9f1c <_svfprintf_r+0x13bc>
    a0c6:	4b27      	ldr	r3, [pc, #156]	; (a164 <_svfprintf_r+0x1604>)
    a0c8:	9311      	str	r3, [sp, #68]	; 0x44
    a0ca:	f7fe fef4 	bl	8eb6 <_svfprintf_r+0x356>
    a0ce:	232d      	movs	r3, #45	; 0x2d
    a0d0:	aa16      	add	r2, sp, #88	; 0x58
    a0d2:	77d3      	strb	r3, [r2, #31]
    a0d4:	4698      	mov	r8, r3
    a0d6:	e7c4      	b.n	a062 <_svfprintf_r+0x1502>
    a0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0da:	1d1a      	adds	r2, r3, #4
    a0dc:	681b      	ldr	r3, [r3, #0]
    a0de:	469a      	mov	sl, r3
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	db36      	blt.n	a152 <_svfprintf_r+0x15f2>
    a0e4:	784b      	ldrb	r3, [r1, #1]
    a0e6:	920f      	str	r2, [sp, #60]	; 0x3c
    a0e8:	4659      	mov	r1, fp
    a0ea:	f7fe fd9d 	bl	8c28 <_svfprintf_r+0xc8>
    a0ee:	4653      	mov	r3, sl
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d101      	bne.n	a0f8 <_svfprintf_r+0x1598>
    a0f4:	07e3      	lsls	r3, r4, #31
    a0f6:	d503      	bpl.n	a100 <_svfprintf_r+0x15a0>
    a0f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a0fa:	1c58      	adds	r0, r3, #1
    a0fc:	0003      	movs	r3, r0
    a0fe:	e7bb      	b.n	a078 <_svfprintf_r+0x1518>
    a100:	2301      	movs	r3, #1
    a102:	e725      	b.n	9f50 <_svfprintf_r+0x13f0>
    a104:	ab16      	add	r3, sp, #88	; 0x58
    a106:	77d8      	strb	r0, [r3, #31]
    a108:	f7fe ff6c 	bl	8fe4 <_svfprintf_r+0x484>
    a10c:	ab16      	add	r3, sp, #88	; 0x58
    a10e:	77d8      	strb	r0, [r3, #31]
    a110:	f7ff f814 	bl	913c <_svfprintf_r+0x5dc>
    a114:	230c      	movs	r3, #12
    a116:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a118:	6013      	str	r3, [r2, #0]
    a11a:	3b0d      	subs	r3, #13
    a11c:	930a      	str	r3, [sp, #40]	; 0x28
    a11e:	f7fe fdac 	bl	8c7a <_svfprintf_r+0x11a>
    a122:	aa16      	add	r2, sp, #88	; 0x58
    a124:	232e      	movs	r3, #46	; 0x2e
    a126:	4694      	mov	ip, r2
    a128:	4463      	add	r3, ip
    a12a:	e65c      	b.n	9de6 <_svfprintf_r+0x1286>
    a12c:	ab16      	add	r3, sp, #88	; 0x58
    a12e:	77d8      	strb	r0, [r3, #31]
    a130:	f7fe fe85 	bl	8e3e <_svfprintf_r+0x2de>
    a134:	ab16      	add	r3, sp, #88	; 0x58
    a136:	77d8      	strb	r0, [r3, #31]
    a138:	f7fe fddd 	bl	8cf6 <_svfprintf_r+0x196>
    a13c:	ab16      	add	r3, sp, #88	; 0x58
    a13e:	77d8      	strb	r0, [r3, #31]
    a140:	f7ff f87d 	bl	923e <_svfprintf_r+0x6de>
    a144:	4805      	ldr	r0, [pc, #20]	; (a15c <_svfprintf_r+0x15fc>)
    a146:	4681      	mov	r9, r0
    a148:	e76d      	b.n	a026 <_svfprintf_r+0x14c6>
    a14a:	ab16      	add	r3, sp, #88	; 0x58
    a14c:	77d8      	strb	r0, [r3, #31]
    a14e:	f7fe ff79 	bl	9044 <_svfprintf_r+0x4e4>
    a152:	2301      	movs	r3, #1
    a154:	425b      	negs	r3, r3
    a156:	469a      	mov	sl, r3
    a158:	e7c4      	b.n	a0e4 <_svfprintf_r+0x1584>
    a15a:	46c0      	nop			; (mov r8, r8)
    a15c:	0000e2d4 	.word	0x0000e2d4
    a160:	0000e288 	.word	0x0000e288
    a164:	0000e28c 	.word	0x0000e28c

0000a168 <register_fini>:
    a168:	4b03      	ldr	r3, [pc, #12]	; (a178 <register_fini+0x10>)
    a16a:	b510      	push	{r4, lr}
    a16c:	2b00      	cmp	r3, #0
    a16e:	d002      	beq.n	a176 <register_fini+0xe>
    a170:	4802      	ldr	r0, [pc, #8]	; (a17c <register_fini+0x14>)
    a172:	f000 f805 	bl	a180 <atexit>
    a176:	bd10      	pop	{r4, pc}
    a178:	00000000 	.word	0x00000000
    a17c:	0000b26d 	.word	0x0000b26d

0000a180 <atexit>:
    a180:	b510      	push	{r4, lr}
    a182:	0001      	movs	r1, r0
    a184:	2300      	movs	r3, #0
    a186:	2200      	movs	r2, #0
    a188:	2000      	movs	r0, #0
    a18a:	f002 f845 	bl	c218 <__register_exitproc>
    a18e:	bd10      	pop	{r4, pc}

0000a190 <quorem>:
    a190:	b5f0      	push	{r4, r5, r6, r7, lr}
    a192:	4645      	mov	r5, r8
    a194:	4680      	mov	r8, r0
    a196:	46de      	mov	lr, fp
    a198:	4657      	mov	r7, sl
    a19a:	464e      	mov	r6, r9
    a19c:	4642      	mov	r2, r8
    a19e:	b5e0      	push	{r5, r6, r7, lr}
    a1a0:	690c      	ldr	r4, [r1, #16]
    a1a2:	6912      	ldr	r2, [r2, #16]
    a1a4:	b085      	sub	sp, #20
    a1a6:	000b      	movs	r3, r1
    a1a8:	9102      	str	r1, [sp, #8]
    a1aa:	2000      	movs	r0, #0
    a1ac:	4294      	cmp	r4, r2
    a1ae:	dd00      	ble.n	a1b2 <quorem+0x22>
    a1b0:	e090      	b.n	a2d4 <quorem+0x144>
    a1b2:	2214      	movs	r2, #20
    a1b4:	4694      	mov	ip, r2
    a1b6:	4463      	add	r3, ip
    a1b8:	4699      	mov	r9, r3
    a1ba:	464a      	mov	r2, r9
    a1bc:	3c01      	subs	r4, #1
    a1be:	00a3      	lsls	r3, r4, #2
    a1c0:	18d6      	adds	r6, r2, r3
    a1c2:	2214      	movs	r2, #20
    a1c4:	4442      	add	r2, r8
    a1c6:	4693      	mov	fp, r2
    a1c8:	449b      	add	fp, r3
    a1ca:	6833      	ldr	r3, [r6, #0]
    a1cc:	0015      	movs	r5, r2
    a1ce:	1c59      	adds	r1, r3, #1
    a1d0:	465b      	mov	r3, fp
    a1d2:	6818      	ldr	r0, [r3, #0]
    a1d4:	9201      	str	r2, [sp, #4]
    a1d6:	f7fc f87d 	bl	62d4 <__udivsi3>
    a1da:	1e03      	subs	r3, r0, #0
    a1dc:	9000      	str	r0, [sp, #0]
    a1de:	d042      	beq.n	a266 <quorem+0xd6>
    a1e0:	0029      	movs	r1, r5
    a1e2:	2700      	movs	r7, #0
    a1e4:	464d      	mov	r5, r9
    a1e6:	2000      	movs	r0, #0
    a1e8:	46b1      	mov	r9, r6
    a1ea:	46a2      	mov	sl, r4
    a1ec:	003e      	movs	r6, r7
    a1ee:	0004      	movs	r4, r0
    a1f0:	469c      	mov	ip, r3
    a1f2:	002f      	movs	r7, r5
    a1f4:	0008      	movs	r0, r1
    a1f6:	9503      	str	r5, [sp, #12]
    a1f8:	4663      	mov	r3, ip
    a1fa:	cf04      	ldmia	r7!, {r2}
    a1fc:	0415      	lsls	r5, r2, #16
    a1fe:	0c2d      	lsrs	r5, r5, #16
    a200:	435d      	muls	r5, r3
    a202:	0c12      	lsrs	r2, r2, #16
    a204:	435a      	muls	r2, r3
    a206:	19ad      	adds	r5, r5, r6
    a208:	0c2b      	lsrs	r3, r5, #16
    a20a:	18d2      	adds	r2, r2, r3
    a20c:	6803      	ldr	r3, [r0, #0]
    a20e:	042d      	lsls	r5, r5, #16
    a210:	0419      	lsls	r1, r3, #16
    a212:	0c09      	lsrs	r1, r1, #16
    a214:	1909      	adds	r1, r1, r4
    a216:	0c16      	lsrs	r6, r2, #16
    a218:	0c2d      	lsrs	r5, r5, #16
    a21a:	0412      	lsls	r2, r2, #16
    a21c:	1b49      	subs	r1, r1, r5
    a21e:	0c12      	lsrs	r2, r2, #16
    a220:	0c1b      	lsrs	r3, r3, #16
    a222:	1a9b      	subs	r3, r3, r2
    a224:	140a      	asrs	r2, r1, #16
    a226:	189b      	adds	r3, r3, r2
    a228:	0409      	lsls	r1, r1, #16
    a22a:	141c      	asrs	r4, r3, #16
    a22c:	0c09      	lsrs	r1, r1, #16
    a22e:	041b      	lsls	r3, r3, #16
    a230:	4319      	orrs	r1, r3
    a232:	c002      	stmia	r0!, {r1}
    a234:	45b9      	cmp	r9, r7
    a236:	d2df      	bcs.n	a1f8 <quorem+0x68>
    a238:	9b03      	ldr	r3, [sp, #12]
    a23a:	464e      	mov	r6, r9
    a23c:	4699      	mov	r9, r3
    a23e:	465b      	mov	r3, fp
    a240:	681b      	ldr	r3, [r3, #0]
    a242:	4654      	mov	r4, sl
    a244:	2b00      	cmp	r3, #0
    a246:	d10e      	bne.n	a266 <quorem+0xd6>
    a248:	465b      	mov	r3, fp
    a24a:	9a01      	ldr	r2, [sp, #4]
    a24c:	3b04      	subs	r3, #4
    a24e:	429a      	cmp	r2, r3
    a250:	d304      	bcc.n	a25c <quorem+0xcc>
    a252:	e006      	b.n	a262 <quorem+0xd2>
    a254:	3b04      	subs	r3, #4
    a256:	3c01      	subs	r4, #1
    a258:	429a      	cmp	r2, r3
    a25a:	d202      	bcs.n	a262 <quorem+0xd2>
    a25c:	6819      	ldr	r1, [r3, #0]
    a25e:	2900      	cmp	r1, #0
    a260:	d0f8      	beq.n	a254 <quorem+0xc4>
    a262:	4643      	mov	r3, r8
    a264:	611c      	str	r4, [r3, #16]
    a266:	9902      	ldr	r1, [sp, #8]
    a268:	4640      	mov	r0, r8
    a26a:	f001 fda3 	bl	bdb4 <__mcmp>
    a26e:	2800      	cmp	r0, #0
    a270:	db2f      	blt.n	a2d2 <quorem+0x142>
    a272:	464f      	mov	r7, r9
    a274:	2000      	movs	r0, #0
    a276:	9b00      	ldr	r3, [sp, #0]
    a278:	9d01      	ldr	r5, [sp, #4]
    a27a:	3301      	adds	r3, #1
    a27c:	9300      	str	r3, [sp, #0]
    a27e:	682b      	ldr	r3, [r5, #0]
    a280:	cf02      	ldmia	r7!, {r1}
    a282:	041a      	lsls	r2, r3, #16
    a284:	0c12      	lsrs	r2, r2, #16
    a286:	1810      	adds	r0, r2, r0
    a288:	040a      	lsls	r2, r1, #16
    a28a:	0c12      	lsrs	r2, r2, #16
    a28c:	1a82      	subs	r2, r0, r2
    a28e:	0c09      	lsrs	r1, r1, #16
    a290:	0c1b      	lsrs	r3, r3, #16
    a292:	1a5b      	subs	r3, r3, r1
    a294:	1411      	asrs	r1, r2, #16
    a296:	185b      	adds	r3, r3, r1
    a298:	0412      	lsls	r2, r2, #16
    a29a:	1418      	asrs	r0, r3, #16
    a29c:	0c12      	lsrs	r2, r2, #16
    a29e:	041b      	lsls	r3, r3, #16
    a2a0:	4313      	orrs	r3, r2
    a2a2:	c508      	stmia	r5!, {r3}
    a2a4:	42be      	cmp	r6, r7
    a2a6:	d2ea      	bcs.n	a27e <quorem+0xee>
    a2a8:	9901      	ldr	r1, [sp, #4]
    a2aa:	00a3      	lsls	r3, r4, #2
    a2ac:	468c      	mov	ip, r1
    a2ae:	4463      	add	r3, ip
    a2b0:	681a      	ldr	r2, [r3, #0]
    a2b2:	2a00      	cmp	r2, #0
    a2b4:	d10d      	bne.n	a2d2 <quorem+0x142>
    a2b6:	3b04      	subs	r3, #4
    a2b8:	000a      	movs	r2, r1
    a2ba:	4299      	cmp	r1, r3
    a2bc:	d304      	bcc.n	a2c8 <quorem+0x138>
    a2be:	e006      	b.n	a2ce <quorem+0x13e>
    a2c0:	3b04      	subs	r3, #4
    a2c2:	3c01      	subs	r4, #1
    a2c4:	429a      	cmp	r2, r3
    a2c6:	d202      	bcs.n	a2ce <quorem+0x13e>
    a2c8:	6819      	ldr	r1, [r3, #0]
    a2ca:	2900      	cmp	r1, #0
    a2cc:	d0f8      	beq.n	a2c0 <quorem+0x130>
    a2ce:	4643      	mov	r3, r8
    a2d0:	611c      	str	r4, [r3, #16]
    a2d2:	9800      	ldr	r0, [sp, #0]
    a2d4:	b005      	add	sp, #20
    a2d6:	bc3c      	pop	{r2, r3, r4, r5}
    a2d8:	4690      	mov	r8, r2
    a2da:	4699      	mov	r9, r3
    a2dc:	46a2      	mov	sl, r4
    a2de:	46ab      	mov	fp, r5
    a2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2e2:	46c0      	nop			; (mov r8, r8)

0000a2e4 <_dtoa_r>:
    a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2e6:	4657      	mov	r7, sl
    a2e8:	464e      	mov	r6, r9
    a2ea:	4645      	mov	r5, r8
    a2ec:	46de      	mov	lr, fp
    a2ee:	b5e0      	push	{r5, r6, r7, lr}
    a2f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    a2f2:	b099      	sub	sp, #100	; 0x64
    a2f4:	4682      	mov	sl, r0
    a2f6:	001d      	movs	r5, r3
    a2f8:	0016      	movs	r6, r2
    a2fa:	001f      	movs	r7, r3
    a2fc:	2900      	cmp	r1, #0
    a2fe:	d009      	beq.n	a314 <_dtoa_r+0x30>
    a300:	2301      	movs	r3, #1
    a302:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a304:	4093      	lsls	r3, r2
    a306:	604a      	str	r2, [r1, #4]
    a308:	608b      	str	r3, [r1, #8]
    a30a:	f001 fb47 	bl	b99c <_Bfree>
    a30e:	2300      	movs	r3, #0
    a310:	4652      	mov	r2, sl
    a312:	6413      	str	r3, [r2, #64]	; 0x40
    a314:	46b8      	mov	r8, r7
    a316:	2f00      	cmp	r7, #0
    a318:	db37      	blt.n	a38a <_dtoa_r+0xa6>
    a31a:	2300      	movs	r3, #0
    a31c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a31e:	6013      	str	r3, [r2, #0]
    a320:	4642      	mov	r2, r8
    a322:	4bd6      	ldr	r3, [pc, #856]	; (a67c <_dtoa_r+0x398>)
    a324:	401a      	ands	r2, r3
    a326:	429a      	cmp	r2, r3
    a328:	d018      	beq.n	a35c <_dtoa_r+0x78>
    a32a:	2200      	movs	r2, #0
    a32c:	2300      	movs	r3, #0
    a32e:	0030      	movs	r0, r6
    a330:	0039      	movs	r1, r7
    a332:	f7fc f86b 	bl	640c <__aeabi_dcmpeq>
    a336:	2800      	cmp	r0, #0
    a338:	d02f      	beq.n	a39a <_dtoa_r+0xb6>
    a33a:	2301      	movs	r3, #1
    a33c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a33e:	6013      	str	r3, [r2, #0]
    a340:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a342:	2b00      	cmp	r3, #0
    a344:	d100      	bne.n	a348 <_dtoa_r+0x64>
    a346:	e22a      	b.n	a79e <_dtoa_r+0x4ba>
    a348:	48cd      	ldr	r0, [pc, #820]	; (a680 <_dtoa_r+0x39c>)
    a34a:	6018      	str	r0, [r3, #0]
    a34c:	3801      	subs	r0, #1
    a34e:	b019      	add	sp, #100	; 0x64
    a350:	bc3c      	pop	{r2, r3, r4, r5}
    a352:	4690      	mov	r8, r2
    a354:	4699      	mov	r9, r3
    a356:	46a2      	mov	sl, r4
    a358:	46ab      	mov	fp, r5
    a35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a35c:	4bc9      	ldr	r3, [pc, #804]	; (a684 <_dtoa_r+0x3a0>)
    a35e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a360:	6013      	str	r3, [r2, #0]
    a362:	2e00      	cmp	r6, #0
    a364:	d10b      	bne.n	a37e <_dtoa_r+0x9a>
    a366:	4643      	mov	r3, r8
    a368:	0318      	lsls	r0, r3, #12
    a36a:	d108      	bne.n	a37e <_dtoa_r+0x9a>
    a36c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a36e:	48c6      	ldr	r0, [pc, #792]	; (a688 <_dtoa_r+0x3a4>)
    a370:	2b00      	cmp	r3, #0
    a372:	d0ec      	beq.n	a34e <_dtoa_r+0x6a>
    a374:	0003      	movs	r3, r0
    a376:	3308      	adds	r3, #8
    a378:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a37a:	6013      	str	r3, [r2, #0]
    a37c:	e7e7      	b.n	a34e <_dtoa_r+0x6a>
    a37e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a380:	48c2      	ldr	r0, [pc, #776]	; (a68c <_dtoa_r+0x3a8>)
    a382:	2b00      	cmp	r3, #0
    a384:	d0e3      	beq.n	a34e <_dtoa_r+0x6a>
    a386:	1cc3      	adds	r3, r0, #3
    a388:	e7f6      	b.n	a378 <_dtoa_r+0x94>
    a38a:	2301      	movs	r3, #1
    a38c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a38e:	0068      	lsls	r0, r5, #1
    a390:	6013      	str	r3, [r2, #0]
    a392:	0843      	lsrs	r3, r0, #1
    a394:	4698      	mov	r8, r3
    a396:	001f      	movs	r7, r3
    a398:	e7c2      	b.n	a320 <_dtoa_r+0x3c>
    a39a:	ab16      	add	r3, sp, #88	; 0x58
    a39c:	9301      	str	r3, [sp, #4]
    a39e:	ab17      	add	r3, sp, #92	; 0x5c
    a3a0:	9300      	str	r3, [sp, #0]
    a3a2:	0032      	movs	r2, r6
    a3a4:	003b      	movs	r3, r7
    a3a6:	4650      	mov	r0, sl
    a3a8:	f001 fdba 	bl	bf20 <__d2b>
    a3ac:	4643      	mov	r3, r8
    a3ae:	4683      	mov	fp, r0
    a3b0:	0d1a      	lsrs	r2, r3, #20
    a3b2:	d100      	bne.n	a3b6 <_dtoa_r+0xd2>
    a3b4:	e1d6      	b.n	a764 <_dtoa_r+0x480>
    a3b6:	033b      	lsls	r3, r7, #12
    a3b8:	4cb5      	ldr	r4, [pc, #724]	; (a690 <_dtoa_r+0x3ac>)
    a3ba:	0b1b      	lsrs	r3, r3, #12
    a3bc:	431c      	orrs	r4, r3
    a3be:	4bb5      	ldr	r3, [pc, #724]	; (a694 <_dtoa_r+0x3b0>)
    a3c0:	0030      	movs	r0, r6
    a3c2:	4698      	mov	r8, r3
    a3c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3c6:	0021      	movs	r1, r4
    a3c8:	4699      	mov	r9, r3
    a3ca:	2300      	movs	r3, #0
    a3cc:	4490      	add	r8, r2
    a3ce:	930f      	str	r3, [sp, #60]	; 0x3c
    a3d0:	2200      	movs	r2, #0
    a3d2:	4bb1      	ldr	r3, [pc, #708]	; (a698 <_dtoa_r+0x3b4>)
    a3d4:	f7fd fa7c 	bl	78d0 <__aeabi_dsub>
    a3d8:	4ab0      	ldr	r2, [pc, #704]	; (a69c <_dtoa_r+0x3b8>)
    a3da:	4bb1      	ldr	r3, [pc, #708]	; (a6a0 <_dtoa_r+0x3bc>)
    a3dc:	f7fc fff8 	bl	73d0 <__aeabi_dmul>
    a3e0:	4ab0      	ldr	r2, [pc, #704]	; (a6a4 <_dtoa_r+0x3c0>)
    a3e2:	4bb1      	ldr	r3, [pc, #708]	; (a6a8 <_dtoa_r+0x3c4>)
    a3e4:	f7fc f8b0 	bl	6548 <__aeabi_dadd>
    a3e8:	0004      	movs	r4, r0
    a3ea:	4640      	mov	r0, r8
    a3ec:	000d      	movs	r5, r1
    a3ee:	f7fd fdd9 	bl	7fa4 <__aeabi_i2d>
    a3f2:	4aae      	ldr	r2, [pc, #696]	; (a6ac <_dtoa_r+0x3c8>)
    a3f4:	4bae      	ldr	r3, [pc, #696]	; (a6b0 <_dtoa_r+0x3cc>)
    a3f6:	f7fc ffeb 	bl	73d0 <__aeabi_dmul>
    a3fa:	0002      	movs	r2, r0
    a3fc:	000b      	movs	r3, r1
    a3fe:	0020      	movs	r0, r4
    a400:	0029      	movs	r1, r5
    a402:	f7fc f8a1 	bl	6548 <__aeabi_dadd>
    a406:	0004      	movs	r4, r0
    a408:	000d      	movs	r5, r1
    a40a:	f7fd fd97 	bl	7f3c <__aeabi_d2iz>
    a40e:	2200      	movs	r2, #0
    a410:	9003      	str	r0, [sp, #12]
    a412:	2300      	movs	r3, #0
    a414:	0020      	movs	r0, r4
    a416:	0029      	movs	r1, r5
    a418:	f7fb fffe 	bl	6418 <__aeabi_dcmplt>
    a41c:	2800      	cmp	r0, #0
    a41e:	d000      	beq.n	a422 <_dtoa_r+0x13e>
    a420:	e2b1      	b.n	a986 <_dtoa_r+0x6a2>
    a422:	2301      	movs	r3, #1
    a424:	9c03      	ldr	r4, [sp, #12]
    a426:	930c      	str	r3, [sp, #48]	; 0x30
    a428:	2c16      	cmp	r4, #22
    a42a:	d810      	bhi.n	a44e <_dtoa_r+0x16a>
    a42c:	49a1      	ldr	r1, [pc, #644]	; (a6b4 <_dtoa_r+0x3d0>)
    a42e:	00e3      	lsls	r3, r4, #3
    a430:	18c9      	adds	r1, r1, r3
    a432:	0032      	movs	r2, r6
    a434:	6808      	ldr	r0, [r1, #0]
    a436:	6849      	ldr	r1, [r1, #4]
    a438:	003b      	movs	r3, r7
    a43a:	f7fc f801 	bl	6440 <__aeabi_dcmpgt>
    a43e:	2800      	cmp	r0, #0
    a440:	d100      	bne.n	a444 <_dtoa_r+0x160>
    a442:	e31d      	b.n	aa80 <_dtoa_r+0x79c>
    a444:	0023      	movs	r3, r4
    a446:	3b01      	subs	r3, #1
    a448:	9303      	str	r3, [sp, #12]
    a44a:	2300      	movs	r3, #0
    a44c:	930c      	str	r3, [sp, #48]	; 0x30
    a44e:	464b      	mov	r3, r9
    a450:	4642      	mov	r2, r8
    a452:	1a9a      	subs	r2, r3, r2
    a454:	2300      	movs	r3, #0
    a456:	9306      	str	r3, [sp, #24]
    a458:	0013      	movs	r3, r2
    a45a:	3b01      	subs	r3, #1
    a45c:	9304      	str	r3, [sp, #16]
    a45e:	d500      	bpl.n	a462 <_dtoa_r+0x17e>
    a460:	e2a1      	b.n	a9a6 <_dtoa_r+0x6c2>
    a462:	9b03      	ldr	r3, [sp, #12]
    a464:	2b00      	cmp	r3, #0
    a466:	da00      	bge.n	a46a <_dtoa_r+0x186>
    a468:	e284      	b.n	a974 <_dtoa_r+0x690>
    a46a:	469c      	mov	ip, r3
    a46c:	930d      	str	r3, [sp, #52]	; 0x34
    a46e:	2300      	movs	r3, #0
    a470:	9a04      	ldr	r2, [sp, #16]
    a472:	4699      	mov	r9, r3
    a474:	0011      	movs	r1, r2
    a476:	4461      	add	r1, ip
    a478:	9104      	str	r1, [sp, #16]
    a47a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a47c:	2b09      	cmp	r3, #9
    a47e:	d900      	bls.n	a482 <_dtoa_r+0x19e>
    a480:	e18f      	b.n	a7a2 <_dtoa_r+0x4be>
    a482:	2401      	movs	r4, #1
    a484:	2b05      	cmp	r3, #5
    a486:	dd02      	ble.n	a48e <_dtoa_r+0x1aa>
    a488:	2400      	movs	r4, #0
    a48a:	3b04      	subs	r3, #4
    a48c:	9322      	str	r3, [sp, #136]	; 0x88
    a48e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a490:	2b03      	cmp	r3, #3
    a492:	d101      	bne.n	a498 <_dtoa_r+0x1b4>
    a494:	f000 fcce 	bl	ae34 <_dtoa_r+0xb50>
    a498:	dc01      	bgt.n	a49e <_dtoa_r+0x1ba>
    a49a:	f000 fc92 	bl	adc2 <_dtoa_r+0xade>
    a49e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4a0:	2b04      	cmp	r3, #4
    a4a2:	d101      	bne.n	a4a8 <_dtoa_r+0x1c4>
    a4a4:	f000 fc40 	bl	ad28 <_dtoa_r+0xa44>
    a4a8:	2301      	movs	r3, #1
    a4aa:	930b      	str	r3, [sp, #44]	; 0x2c
    a4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4ae:	2b05      	cmp	r3, #5
    a4b0:	d001      	beq.n	a4b6 <_dtoa_r+0x1d2>
    a4b2:	f000 fc8b 	bl	adcc <_dtoa_r+0xae8>
    a4b6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a4b8:	9b03      	ldr	r3, [sp, #12]
    a4ba:	4694      	mov	ip, r2
    a4bc:	4463      	add	r3, ip
    a4be:	930e      	str	r3, [sp, #56]	; 0x38
    a4c0:	3301      	adds	r3, #1
    a4c2:	9307      	str	r3, [sp, #28]
    a4c4:	1e1d      	subs	r5, r3, #0
    a4c6:	dc01      	bgt.n	a4cc <_dtoa_r+0x1e8>
    a4c8:	f000 fd49 	bl	af5e <_dtoa_r+0xc7a>
    a4cc:	9b07      	ldr	r3, [sp, #28]
    a4ce:	4698      	mov	r8, r3
    a4d0:	2300      	movs	r3, #0
    a4d2:	4652      	mov	r2, sl
    a4d4:	2100      	movs	r1, #0
    a4d6:	6453      	str	r3, [r2, #68]	; 0x44
    a4d8:	2d17      	cmp	r5, #23
    a4da:	d90a      	bls.n	a4f2 <_dtoa_r+0x20e>
    a4dc:	2201      	movs	r2, #1
    a4de:	3304      	adds	r3, #4
    a4e0:	005b      	lsls	r3, r3, #1
    a4e2:	0018      	movs	r0, r3
    a4e4:	3014      	adds	r0, #20
    a4e6:	0011      	movs	r1, r2
    a4e8:	3201      	adds	r2, #1
    a4ea:	4285      	cmp	r5, r0
    a4ec:	d2f8      	bcs.n	a4e0 <_dtoa_r+0x1fc>
    a4ee:	4653      	mov	r3, sl
    a4f0:	6459      	str	r1, [r3, #68]	; 0x44
    a4f2:	4650      	mov	r0, sl
    a4f4:	f001 fa2a 	bl	b94c <_Balloc>
    a4f8:	4653      	mov	r3, sl
    a4fa:	6418      	str	r0, [r3, #64]	; 0x40
    a4fc:	4643      	mov	r3, r8
    a4fe:	900a      	str	r0, [sp, #40]	; 0x28
    a500:	2b0e      	cmp	r3, #14
    a502:	d900      	bls.n	a506 <_dtoa_r+0x222>
    a504:	e161      	b.n	a7ca <_dtoa_r+0x4e6>
    a506:	2c00      	cmp	r4, #0
    a508:	d100      	bne.n	a50c <_dtoa_r+0x228>
    a50a:	e15e      	b.n	a7ca <_dtoa_r+0x4e6>
    a50c:	9610      	str	r6, [sp, #64]	; 0x40
    a50e:	9711      	str	r7, [sp, #68]	; 0x44
    a510:	9e03      	ldr	r6, [sp, #12]
    a512:	2e00      	cmp	r6, #0
    a514:	dc01      	bgt.n	a51a <_dtoa_r+0x236>
    a516:	f000 fd25 	bl	af64 <_dtoa_r+0xc80>
    a51a:	0032      	movs	r2, r6
    a51c:	210f      	movs	r1, #15
    a51e:	4b65      	ldr	r3, [pc, #404]	; (a6b4 <_dtoa_r+0x3d0>)
    a520:	400a      	ands	r2, r1
    a522:	00d2      	lsls	r2, r2, #3
    a524:	189b      	adds	r3, r3, r2
    a526:	1136      	asrs	r6, r6, #4
    a528:	681c      	ldr	r4, [r3, #0]
    a52a:	685d      	ldr	r5, [r3, #4]
    a52c:	06f3      	lsls	r3, r6, #27
    a52e:	d401      	bmi.n	a534 <_dtoa_r+0x250>
    a530:	f000 fcca 	bl	aec8 <_dtoa_r+0xbe4>
    a534:	4b60      	ldr	r3, [pc, #384]	; (a6b8 <_dtoa_r+0x3d4>)
    a536:	400e      	ands	r6, r1
    a538:	6a1a      	ldr	r2, [r3, #32]
    a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a53c:	9810      	ldr	r0, [sp, #64]	; 0x40
    a53e:	9911      	ldr	r1, [sp, #68]	; 0x44
    a540:	f7fc fb12 	bl	6b68 <__aeabi_ddiv>
    a544:	2303      	movs	r3, #3
    a546:	4698      	mov	r8, r3
    a548:	9008      	str	r0, [sp, #32]
    a54a:	9109      	str	r1, [sp, #36]	; 0x24
    a54c:	2e00      	cmp	r6, #0
    a54e:	d011      	beq.n	a574 <_dtoa_r+0x290>
    a550:	4f59      	ldr	r7, [pc, #356]	; (a6b8 <_dtoa_r+0x3d4>)
    a552:	2301      	movs	r3, #1
    a554:	4233      	tst	r3, r6
    a556:	d009      	beq.n	a56c <_dtoa_r+0x288>
    a558:	469c      	mov	ip, r3
    a55a:	683a      	ldr	r2, [r7, #0]
    a55c:	687b      	ldr	r3, [r7, #4]
    a55e:	0020      	movs	r0, r4
    a560:	0029      	movs	r1, r5
    a562:	44e0      	add	r8, ip
    a564:	f7fc ff34 	bl	73d0 <__aeabi_dmul>
    a568:	0004      	movs	r4, r0
    a56a:	000d      	movs	r5, r1
    a56c:	1076      	asrs	r6, r6, #1
    a56e:	3708      	adds	r7, #8
    a570:	2e00      	cmp	r6, #0
    a572:	d1ee      	bne.n	a552 <_dtoa_r+0x26e>
    a574:	0022      	movs	r2, r4
    a576:	9808      	ldr	r0, [sp, #32]
    a578:	9909      	ldr	r1, [sp, #36]	; 0x24
    a57a:	002b      	movs	r3, r5
    a57c:	f7fc faf4 	bl	6b68 <__aeabi_ddiv>
    a580:	0006      	movs	r6, r0
    a582:	000f      	movs	r7, r1
    a584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a586:	2b00      	cmp	r3, #0
    a588:	d009      	beq.n	a59e <_dtoa_r+0x2ba>
    a58a:	2200      	movs	r2, #0
    a58c:	4b40      	ldr	r3, [pc, #256]	; (a690 <_dtoa_r+0x3ac>)
    a58e:	0030      	movs	r0, r6
    a590:	0039      	movs	r1, r7
    a592:	f7fb ff41 	bl	6418 <__aeabi_dcmplt>
    a596:	2800      	cmp	r0, #0
    a598:	d001      	beq.n	a59e <_dtoa_r+0x2ba>
    a59a:	f000 fdc2 	bl	b122 <_dtoa_r+0xe3e>
    a59e:	4640      	mov	r0, r8
    a5a0:	f7fd fd00 	bl	7fa4 <__aeabi_i2d>
    a5a4:	0032      	movs	r2, r6
    a5a6:	003b      	movs	r3, r7
    a5a8:	f7fc ff12 	bl	73d0 <__aeabi_dmul>
    a5ac:	2200      	movs	r2, #0
    a5ae:	4b43      	ldr	r3, [pc, #268]	; (a6bc <_dtoa_r+0x3d8>)
    a5b0:	f7fb ffca 	bl	6548 <__aeabi_dadd>
    a5b4:	4a42      	ldr	r2, [pc, #264]	; (a6c0 <_dtoa_r+0x3dc>)
    a5b6:	000b      	movs	r3, r1
    a5b8:	4694      	mov	ip, r2
    a5ba:	4463      	add	r3, ip
    a5bc:	9008      	str	r0, [sp, #32]
    a5be:	9109      	str	r1, [sp, #36]	; 0x24
    a5c0:	9309      	str	r3, [sp, #36]	; 0x24
    a5c2:	9b07      	ldr	r3, [sp, #28]
    a5c4:	2b00      	cmp	r3, #0
    a5c6:	d101      	bne.n	a5cc <_dtoa_r+0x2e8>
    a5c8:	f000 fc50 	bl	ae6c <_dtoa_r+0xb88>
    a5cc:	9b03      	ldr	r3, [sp, #12]
    a5ce:	9313      	str	r3, [sp, #76]	; 0x4c
    a5d0:	9b07      	ldr	r3, [sp, #28]
    a5d2:	9312      	str	r3, [sp, #72]	; 0x48
    a5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5d6:	2b00      	cmp	r3, #0
    a5d8:	d101      	bne.n	a5de <_dtoa_r+0x2fa>
    a5da:	f000 fd1d 	bl	b018 <_dtoa_r+0xd34>
    a5de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a5e0:	2000      	movs	r0, #0
    a5e2:	1e5a      	subs	r2, r3, #1
    a5e4:	4b33      	ldr	r3, [pc, #204]	; (a6b4 <_dtoa_r+0x3d0>)
    a5e6:	00d2      	lsls	r2, r2, #3
    a5e8:	189b      	adds	r3, r3, r2
    a5ea:	681a      	ldr	r2, [r3, #0]
    a5ec:	685b      	ldr	r3, [r3, #4]
    a5ee:	4935      	ldr	r1, [pc, #212]	; (a6c4 <_dtoa_r+0x3e0>)
    a5f0:	f7fc faba 	bl	6b68 <__aeabi_ddiv>
    a5f4:	9a08      	ldr	r2, [sp, #32]
    a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5f8:	f7fd f96a 	bl	78d0 <__aeabi_dsub>
    a5fc:	9008      	str	r0, [sp, #32]
    a5fe:	9109      	str	r1, [sp, #36]	; 0x24
    a600:	0039      	movs	r1, r7
    a602:	0030      	movs	r0, r6
    a604:	f7fd fc9a 	bl	7f3c <__aeabi_d2iz>
    a608:	0004      	movs	r4, r0
    a60a:	f7fd fccb 	bl	7fa4 <__aeabi_i2d>
    a60e:	0002      	movs	r2, r0
    a610:	000b      	movs	r3, r1
    a612:	0030      	movs	r0, r6
    a614:	0039      	movs	r1, r7
    a616:	f7fd f95b 	bl	78d0 <__aeabi_dsub>
    a61a:	0005      	movs	r5, r0
    a61c:	000e      	movs	r6, r1
    a61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a620:	3430      	adds	r4, #48	; 0x30
    a622:	1c51      	adds	r1, r2, #1
    a624:	b2e7      	uxtb	r7, r4
    a626:	9114      	str	r1, [sp, #80]	; 0x50
    a628:	7017      	strb	r7, [r2, #0]
    a62a:	0033      	movs	r3, r6
    a62c:	9808      	ldr	r0, [sp, #32]
    a62e:	9909      	ldr	r1, [sp, #36]	; 0x24
    a630:	002a      	movs	r2, r5
    a632:	f7fb ff05 	bl	6440 <__aeabi_dcmpgt>
    a636:	2800      	cmp	r0, #0
    a638:	d001      	beq.n	a63e <_dtoa_r+0x35a>
    a63a:	f000 fdfe 	bl	b23a <_dtoa_r+0xf56>
    a63e:	002a      	movs	r2, r5
    a640:	0033      	movs	r3, r6
    a642:	2000      	movs	r0, #0
    a644:	4912      	ldr	r1, [pc, #72]	; (a690 <_dtoa_r+0x3ac>)
    a646:	f7fd f943 	bl	78d0 <__aeabi_dsub>
    a64a:	0002      	movs	r2, r0
    a64c:	000b      	movs	r3, r1
    a64e:	9808      	ldr	r0, [sp, #32]
    a650:	9909      	ldr	r1, [sp, #36]	; 0x24
    a652:	f7fb fef5 	bl	6440 <__aeabi_dcmpgt>
    a656:	2800      	cmp	r0, #0
    a658:	d001      	beq.n	a65e <_dtoa_r+0x37a>
    a65a:	f000 fde7 	bl	b22c <_dtoa_r+0xf48>
    a65e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a660:	2b01      	cmp	r3, #1
    a662:	d101      	bne.n	a668 <_dtoa_r+0x384>
    a664:	f000 fc78 	bl	af58 <_dtoa_r+0xc74>
    a668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a66a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a66c:	4694      	mov	ip, r2
    a66e:	4463      	add	r3, ip
    a670:	4698      	mov	r8, r3
    a672:	464b      	mov	r3, r9
    a674:	9312      	str	r3, [sp, #72]	; 0x48
    a676:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a678:	4699      	mov	r9, r3
    a67a:	e038      	b.n	a6ee <_dtoa_r+0x40a>
    a67c:	7ff00000 	.word	0x7ff00000
    a680:	0000e2c1 	.word	0x0000e2c1
    a684:	0000270f 	.word	0x0000270f
    a688:	0000e2e4 	.word	0x0000e2e4
    a68c:	0000e2f0 	.word	0x0000e2f0
    a690:	3ff00000 	.word	0x3ff00000
    a694:	fffffc01 	.word	0xfffffc01
    a698:	3ff80000 	.word	0x3ff80000
    a69c:	636f4361 	.word	0x636f4361
    a6a0:	3fd287a7 	.word	0x3fd287a7
    a6a4:	8b60c8b3 	.word	0x8b60c8b3
    a6a8:	3fc68a28 	.word	0x3fc68a28
    a6ac:	509f79fb 	.word	0x509f79fb
    a6b0:	3fd34413 	.word	0x3fd34413
    a6b4:	0000e330 	.word	0x0000e330
    a6b8:	0000e308 	.word	0x0000e308
    a6bc:	401c0000 	.word	0x401c0000
    a6c0:	fcc00000 	.word	0xfcc00000
    a6c4:	3fe00000 	.word	0x3fe00000
    a6c8:	002a      	movs	r2, r5
    a6ca:	0033      	movs	r3, r6
    a6cc:	2000      	movs	r0, #0
    a6ce:	49b9      	ldr	r1, [pc, #740]	; (a9b4 <_dtoa_r+0x6d0>)
    a6d0:	f7fd f8fe 	bl	78d0 <__aeabi_dsub>
    a6d4:	9a08      	ldr	r2, [sp, #32]
    a6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6d8:	f7fb fe9e 	bl	6418 <__aeabi_dcmplt>
    a6dc:	2800      	cmp	r0, #0
    a6de:	d001      	beq.n	a6e4 <_dtoa_r+0x400>
    a6e0:	f000 fd74 	bl	b1cc <_dtoa_r+0xee8>
    a6e4:	46a1      	mov	r9, r4
    a6e6:	4544      	cmp	r4, r8
    a6e8:	d101      	bne.n	a6ee <_dtoa_r+0x40a>
    a6ea:	f000 fc33 	bl	af54 <_dtoa_r+0xc70>
    a6ee:	9808      	ldr	r0, [sp, #32]
    a6f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    a6f2:	2200      	movs	r2, #0
    a6f4:	4bb0      	ldr	r3, [pc, #704]	; (a9b8 <_dtoa_r+0x6d4>)
    a6f6:	f7fc fe6b 	bl	73d0 <__aeabi_dmul>
    a6fa:	2200      	movs	r2, #0
    a6fc:	4bae      	ldr	r3, [pc, #696]	; (a9b8 <_dtoa_r+0x6d4>)
    a6fe:	9008      	str	r0, [sp, #32]
    a700:	9109      	str	r1, [sp, #36]	; 0x24
    a702:	0028      	movs	r0, r5
    a704:	0031      	movs	r1, r6
    a706:	f7fc fe63 	bl	73d0 <__aeabi_dmul>
    a70a:	000d      	movs	r5, r1
    a70c:	0004      	movs	r4, r0
    a70e:	f7fd fc15 	bl	7f3c <__aeabi_d2iz>
    a712:	0007      	movs	r7, r0
    a714:	f7fd fc46 	bl	7fa4 <__aeabi_i2d>
    a718:	0002      	movs	r2, r0
    a71a:	000b      	movs	r3, r1
    a71c:	0020      	movs	r0, r4
    a71e:	0029      	movs	r1, r5
    a720:	f7fd f8d6 	bl	78d0 <__aeabi_dsub>
    a724:	464b      	mov	r3, r9
    a726:	3730      	adds	r7, #48	; 0x30
    a728:	b2ff      	uxtb	r7, r7
    a72a:	1c5c      	adds	r4, r3, #1
    a72c:	701f      	strb	r7, [r3, #0]
    a72e:	9a08      	ldr	r2, [sp, #32]
    a730:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a732:	0005      	movs	r5, r0
    a734:	000e      	movs	r6, r1
    a736:	f7fb fe6f 	bl	6418 <__aeabi_dcmplt>
    a73a:	2800      	cmp	r0, #0
    a73c:	d0c4      	beq.n	a6c8 <_dtoa_r+0x3e4>
    a73e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a740:	9303      	str	r3, [sp, #12]
    a742:	4659      	mov	r1, fp
    a744:	4650      	mov	r0, sl
    a746:	f001 f929 	bl	b99c <_Bfree>
    a74a:	2300      	movs	r3, #0
    a74c:	7023      	strb	r3, [r4, #0]
    a74e:	9b03      	ldr	r3, [sp, #12]
    a750:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a752:	3301      	adds	r3, #1
    a754:	6013      	str	r3, [r2, #0]
    a756:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a758:	2b00      	cmp	r3, #0
    a75a:	d100      	bne.n	a75e <_dtoa_r+0x47a>
    a75c:	e3a8      	b.n	aeb0 <_dtoa_r+0xbcc>
    a75e:	601c      	str	r4, [r3, #0]
    a760:	980a      	ldr	r0, [sp, #40]	; 0x28
    a762:	e5f4      	b.n	a34e <_dtoa_r+0x6a>
    a764:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a766:	4699      	mov	r9, r3
    a768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a76a:	444b      	add	r3, r9
    a76c:	001c      	movs	r4, r3
    a76e:	4b93      	ldr	r3, [pc, #588]	; (a9bc <_dtoa_r+0x6d8>)
    a770:	18e3      	adds	r3, r4, r3
    a772:	2b20      	cmp	r3, #32
    a774:	dc00      	bgt.n	a778 <_dtoa_r+0x494>
    a776:	e17e      	b.n	aa76 <_dtoa_r+0x792>
    a778:	0031      	movs	r1, r6
    a77a:	4a91      	ldr	r2, [pc, #580]	; (a9c0 <_dtoa_r+0x6dc>)
    a77c:	4640      	mov	r0, r8
    a77e:	18a2      	adds	r2, r4, r2
    a780:	40d1      	lsrs	r1, r2
    a782:	000a      	movs	r2, r1
    a784:	2140      	movs	r1, #64	; 0x40
    a786:	1acb      	subs	r3, r1, r3
    a788:	4098      	lsls	r0, r3
    a78a:	4310      	orrs	r0, r2
    a78c:	f7fd fc4c 	bl	8028 <__aeabi_ui2d>
    a790:	1e63      	subs	r3, r4, #1
    a792:	4698      	mov	r8, r3
    a794:	2301      	movs	r3, #1
    a796:	4d8b      	ldr	r5, [pc, #556]	; (a9c4 <_dtoa_r+0x6e0>)
    a798:	930f      	str	r3, [sp, #60]	; 0x3c
    a79a:	1949      	adds	r1, r1, r5
    a79c:	e618      	b.n	a3d0 <_dtoa_r+0xec>
    a79e:	488a      	ldr	r0, [pc, #552]	; (a9c8 <_dtoa_r+0x6e4>)
    a7a0:	e5d5      	b.n	a34e <_dtoa_r+0x6a>
    a7a2:	2300      	movs	r3, #0
    a7a4:	4652      	mov	r2, sl
    a7a6:	2100      	movs	r1, #0
    a7a8:	6453      	str	r3, [r2, #68]	; 0x44
    a7aa:	4650      	mov	r0, sl
    a7ac:	f001 f8ce 	bl	b94c <_Balloc>
    a7b0:	4653      	mov	r3, sl
    a7b2:	6418      	str	r0, [r3, #64]	; 0x40
    a7b4:	2301      	movs	r3, #1
    a7b6:	425b      	negs	r3, r3
    a7b8:	9307      	str	r3, [sp, #28]
    a7ba:	930e      	str	r3, [sp, #56]	; 0x38
    a7bc:	3302      	adds	r3, #2
    a7be:	2200      	movs	r2, #0
    a7c0:	930b      	str	r3, [sp, #44]	; 0x2c
    a7c2:	2300      	movs	r3, #0
    a7c4:	900a      	str	r0, [sp, #40]	; 0x28
    a7c6:	9223      	str	r2, [sp, #140]	; 0x8c
    a7c8:	9322      	str	r3, [sp, #136]	; 0x88
    a7ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	da00      	bge.n	a7d2 <_dtoa_r+0x4ee>
    a7d0:	e0ab      	b.n	a92a <_dtoa_r+0x646>
    a7d2:	9a03      	ldr	r2, [sp, #12]
    a7d4:	2a0e      	cmp	r2, #14
    a7d6:	dd00      	ble.n	a7da <_dtoa_r+0x4f6>
    a7d8:	e0a7      	b.n	a92a <_dtoa_r+0x646>
    a7da:	4b7c      	ldr	r3, [pc, #496]	; (a9cc <_dtoa_r+0x6e8>)
    a7dc:	00d2      	lsls	r2, r2, #3
    a7de:	189b      	adds	r3, r3, r2
    a7e0:	685c      	ldr	r4, [r3, #4]
    a7e2:	681b      	ldr	r3, [r3, #0]
    a7e4:	9304      	str	r3, [sp, #16]
    a7e6:	9405      	str	r4, [sp, #20]
    a7e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	da00      	bge.n	a7f0 <_dtoa_r+0x50c>
    a7ee:	e2a7      	b.n	ad40 <_dtoa_r+0xa5c>
    a7f0:	9c04      	ldr	r4, [sp, #16]
    a7f2:	9d05      	ldr	r5, [sp, #20]
    a7f4:	0030      	movs	r0, r6
    a7f6:	0022      	movs	r2, r4
    a7f8:	002b      	movs	r3, r5
    a7fa:	0039      	movs	r1, r7
    a7fc:	f7fc f9b4 	bl	6b68 <__aeabi_ddiv>
    a800:	f7fd fb9c 	bl	7f3c <__aeabi_d2iz>
    a804:	4680      	mov	r8, r0
    a806:	f7fd fbcd 	bl	7fa4 <__aeabi_i2d>
    a80a:	0022      	movs	r2, r4
    a80c:	002b      	movs	r3, r5
    a80e:	f7fc fddf 	bl	73d0 <__aeabi_dmul>
    a812:	0002      	movs	r2, r0
    a814:	000b      	movs	r3, r1
    a816:	0030      	movs	r0, r6
    a818:	0039      	movs	r1, r7
    a81a:	f7fd f859 	bl	78d0 <__aeabi_dsub>
    a81e:	4643      	mov	r3, r8
    a820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a822:	3330      	adds	r3, #48	; 0x30
    a824:	7013      	strb	r3, [r2, #0]
    a826:	9b07      	ldr	r3, [sp, #28]
    a828:	0006      	movs	r6, r0
    a82a:	000f      	movs	r7, r1
    a82c:	1c54      	adds	r4, r2, #1
    a82e:	2b01      	cmp	r3, #1
    a830:	d04e      	beq.n	a8d0 <_dtoa_r+0x5ec>
    a832:	2200      	movs	r2, #0
    a834:	4b60      	ldr	r3, [pc, #384]	; (a9b8 <_dtoa_r+0x6d4>)
    a836:	f7fc fdcb 	bl	73d0 <__aeabi_dmul>
    a83a:	2200      	movs	r2, #0
    a83c:	2300      	movs	r3, #0
    a83e:	0006      	movs	r6, r0
    a840:	000f      	movs	r7, r1
    a842:	f7fb fde3 	bl	640c <__aeabi_dcmpeq>
    a846:	2800      	cmp	r0, #0
    a848:	d000      	beq.n	a84c <_dtoa_r+0x568>
    a84a:	e77a      	b.n	a742 <_dtoa_r+0x45e>
    a84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a84e:	9a07      	ldr	r2, [sp, #28]
    a850:	1c9d      	adds	r5, r3, #2
    a852:	469c      	mov	ip, r3
    a854:	465b      	mov	r3, fp
    a856:	9306      	str	r3, [sp, #24]
    a858:	4653      	mov	r3, sl
    a85a:	4462      	add	r2, ip
    a85c:	46aa      	mov	sl, r5
    a85e:	9c04      	ldr	r4, [sp, #16]
    a860:	9d05      	ldr	r5, [sp, #20]
    a862:	4691      	mov	r9, r2
    a864:	9307      	str	r3, [sp, #28]
    a866:	e00f      	b.n	a888 <_dtoa_r+0x5a4>
    a868:	2200      	movs	r2, #0
    a86a:	4b53      	ldr	r3, [pc, #332]	; (a9b8 <_dtoa_r+0x6d4>)
    a86c:	f7fc fdb0 	bl	73d0 <__aeabi_dmul>
    a870:	2301      	movs	r3, #1
    a872:	469c      	mov	ip, r3
    a874:	2200      	movs	r2, #0
    a876:	2300      	movs	r3, #0
    a878:	0006      	movs	r6, r0
    a87a:	000f      	movs	r7, r1
    a87c:	44e2      	add	sl, ip
    a87e:	f7fb fdc5 	bl	640c <__aeabi_dcmpeq>
    a882:	2800      	cmp	r0, #0
    a884:	d000      	beq.n	a888 <_dtoa_r+0x5a4>
    a886:	e2d9      	b.n	ae3c <_dtoa_r+0xb58>
    a888:	0022      	movs	r2, r4
    a88a:	002b      	movs	r3, r5
    a88c:	0030      	movs	r0, r6
    a88e:	0039      	movs	r1, r7
    a890:	f7fc f96a 	bl	6b68 <__aeabi_ddiv>
    a894:	f7fd fb52 	bl	7f3c <__aeabi_d2iz>
    a898:	4680      	mov	r8, r0
    a89a:	f7fd fb83 	bl	7fa4 <__aeabi_i2d>
    a89e:	0022      	movs	r2, r4
    a8a0:	002b      	movs	r3, r5
    a8a2:	f7fc fd95 	bl	73d0 <__aeabi_dmul>
    a8a6:	0002      	movs	r2, r0
    a8a8:	000b      	movs	r3, r1
    a8aa:	0030      	movs	r0, r6
    a8ac:	0039      	movs	r1, r7
    a8ae:	f7fd f80f 	bl	78d0 <__aeabi_dsub>
    a8b2:	4653      	mov	r3, sl
    a8b4:	4642      	mov	r2, r8
    a8b6:	3b01      	subs	r3, #1
    a8b8:	3230      	adds	r2, #48	; 0x30
    a8ba:	0006      	movs	r6, r0
    a8bc:	000f      	movs	r7, r1
    a8be:	46d3      	mov	fp, sl
    a8c0:	701a      	strb	r2, [r3, #0]
    a8c2:	45d1      	cmp	r9, sl
    a8c4:	d1d0      	bne.n	a868 <_dtoa_r+0x584>
    a8c6:	9b06      	ldr	r3, [sp, #24]
    a8c8:	4654      	mov	r4, sl
    a8ca:	469b      	mov	fp, r3
    a8cc:	9b07      	ldr	r3, [sp, #28]
    a8ce:	469a      	mov	sl, r3
    a8d0:	0032      	movs	r2, r6
    a8d2:	003b      	movs	r3, r7
    a8d4:	0030      	movs	r0, r6
    a8d6:	0039      	movs	r1, r7
    a8d8:	f7fb fe36 	bl	6548 <__aeabi_dadd>
    a8dc:	0006      	movs	r6, r0
    a8de:	000f      	movs	r7, r1
    a8e0:	0002      	movs	r2, r0
    a8e2:	000b      	movs	r3, r1
    a8e4:	9804      	ldr	r0, [sp, #16]
    a8e6:	9905      	ldr	r1, [sp, #20]
    a8e8:	f7fb fd96 	bl	6418 <__aeabi_dcmplt>
    a8ec:	2800      	cmp	r0, #0
    a8ee:	d10c      	bne.n	a90a <_dtoa_r+0x626>
    a8f0:	9804      	ldr	r0, [sp, #16]
    a8f2:	9905      	ldr	r1, [sp, #20]
    a8f4:	0032      	movs	r2, r6
    a8f6:	003b      	movs	r3, r7
    a8f8:	f7fb fd88 	bl	640c <__aeabi_dcmpeq>
    a8fc:	2800      	cmp	r0, #0
    a8fe:	d100      	bne.n	a902 <_dtoa_r+0x61e>
    a900:	e71f      	b.n	a742 <_dtoa_r+0x45e>
    a902:	4643      	mov	r3, r8
    a904:	07db      	lsls	r3, r3, #31
    a906:	d400      	bmi.n	a90a <_dtoa_r+0x626>
    a908:	e71b      	b.n	a742 <_dtoa_r+0x45e>
    a90a:	1e65      	subs	r5, r4, #1
    a90c:	782f      	ldrb	r7, [r5, #0]
    a90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a910:	e006      	b.n	a920 <_dtoa_r+0x63c>
    a912:	429d      	cmp	r5, r3
    a914:	d100      	bne.n	a918 <_dtoa_r+0x634>
    a916:	e351      	b.n	afbc <_dtoa_r+0xcd8>
    a918:	3c02      	subs	r4, #2
    a91a:	7827      	ldrb	r7, [r4, #0]
    a91c:	002c      	movs	r4, r5
    a91e:	3d01      	subs	r5, #1
    a920:	2f39      	cmp	r7, #57	; 0x39
    a922:	d0f6      	beq.n	a912 <_dtoa_r+0x62e>
    a924:	3701      	adds	r7, #1
    a926:	702f      	strb	r7, [r5, #0]
    a928:	e70b      	b.n	a742 <_dtoa_r+0x45e>
    a92a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a92c:	2a00      	cmp	r2, #0
    a92e:	d04f      	beq.n	a9d0 <_dtoa_r+0x6ec>
    a930:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a932:	2a01      	cmp	r2, #1
    a934:	dc00      	bgt.n	a938 <_dtoa_r+0x654>
    a936:	e22c      	b.n	ad92 <_dtoa_r+0xaae>
    a938:	9b07      	ldr	r3, [sp, #28]
    a93a:	1e5c      	subs	r4, r3, #1
    a93c:	464b      	mov	r3, r9
    a93e:	45a1      	cmp	r9, r4
    a940:	da00      	bge.n	a944 <_dtoa_r+0x660>
    a942:	e2b8      	b.n	aeb6 <_dtoa_r+0xbd2>
    a944:	1b1c      	subs	r4, r3, r4
    a946:	9b07      	ldr	r3, [sp, #28]
    a948:	2b00      	cmp	r3, #0
    a94a:	da00      	bge.n	a94e <_dtoa_r+0x66a>
    a94c:	e3d4      	b.n	b0f8 <_dtoa_r+0xe14>
    a94e:	9b06      	ldr	r3, [sp, #24]
    a950:	9308      	str	r3, [sp, #32]
    a952:	9b07      	ldr	r3, [sp, #28]
    a954:	9a06      	ldr	r2, [sp, #24]
    a956:	2101      	movs	r1, #1
    a958:	4694      	mov	ip, r2
    a95a:	449c      	add	ip, r3
    a95c:	4662      	mov	r2, ip
    a95e:	9206      	str	r2, [sp, #24]
    a960:	9a04      	ldr	r2, [sp, #16]
    a962:	4650      	mov	r0, sl
    a964:	4694      	mov	ip, r2
    a966:	449c      	add	ip, r3
    a968:	4663      	mov	r3, ip
    a96a:	9304      	str	r3, [sp, #16]
    a96c:	f001 f8ae 	bl	bacc <__i2b>
    a970:	4680      	mov	r8, r0
    a972:	e032      	b.n	a9da <_dtoa_r+0x6f6>
    a974:	9a06      	ldr	r2, [sp, #24]
    a976:	9b03      	ldr	r3, [sp, #12]
    a978:	1ad2      	subs	r2, r2, r3
    a97a:	425b      	negs	r3, r3
    a97c:	4699      	mov	r9, r3
    a97e:	2300      	movs	r3, #0
    a980:	9206      	str	r2, [sp, #24]
    a982:	930d      	str	r3, [sp, #52]	; 0x34
    a984:	e579      	b.n	a47a <_dtoa_r+0x196>
    a986:	9803      	ldr	r0, [sp, #12]
    a988:	f7fd fb0c 	bl	7fa4 <__aeabi_i2d>
    a98c:	000b      	movs	r3, r1
    a98e:	0002      	movs	r2, r0
    a990:	0029      	movs	r1, r5
    a992:	0020      	movs	r0, r4
    a994:	f7fb fd3a 	bl	640c <__aeabi_dcmpeq>
    a998:	0002      	movs	r2, r0
    a99a:	4250      	negs	r0, r2
    a99c:	4150      	adcs	r0, r2
    a99e:	9b03      	ldr	r3, [sp, #12]
    a9a0:	1a1b      	subs	r3, r3, r0
    a9a2:	9303      	str	r3, [sp, #12]
    a9a4:	e53d      	b.n	a422 <_dtoa_r+0x13e>
    a9a6:	2301      	movs	r3, #1
    a9a8:	1a9b      	subs	r3, r3, r2
    a9aa:	9306      	str	r3, [sp, #24]
    a9ac:	2300      	movs	r3, #0
    a9ae:	9304      	str	r3, [sp, #16]
    a9b0:	e557      	b.n	a462 <_dtoa_r+0x17e>
    a9b2:	46c0      	nop			; (mov r8, r8)
    a9b4:	3ff00000 	.word	0x3ff00000
    a9b8:	40240000 	.word	0x40240000
    a9bc:	00000432 	.word	0x00000432
    a9c0:	00000412 	.word	0x00000412
    a9c4:	fe100000 	.word	0xfe100000
    a9c8:	0000e2c0 	.word	0x0000e2c0
    a9cc:	0000e330 	.word	0x0000e330
    a9d0:	9b06      	ldr	r3, [sp, #24]
    a9d2:	464c      	mov	r4, r9
    a9d4:	9308      	str	r3, [sp, #32]
    a9d6:	2300      	movs	r3, #0
    a9d8:	4698      	mov	r8, r3
    a9da:	9908      	ldr	r1, [sp, #32]
    a9dc:	1e0b      	subs	r3, r1, #0
    a9de:	dd0e      	ble.n	a9fe <_dtoa_r+0x71a>
    a9e0:	9a04      	ldr	r2, [sp, #16]
    a9e2:	2a00      	cmp	r2, #0
    a9e4:	dd0b      	ble.n	a9fe <_dtoa_r+0x71a>
    a9e6:	4293      	cmp	r3, r2
    a9e8:	dd00      	ble.n	a9ec <_dtoa_r+0x708>
    a9ea:	e187      	b.n	acfc <_dtoa_r+0xa18>
    a9ec:	9a06      	ldr	r2, [sp, #24]
    a9ee:	1ad2      	subs	r2, r2, r3
    a9f0:	9206      	str	r2, [sp, #24]
    a9f2:	9a08      	ldr	r2, [sp, #32]
    a9f4:	1ad2      	subs	r2, r2, r3
    a9f6:	9208      	str	r2, [sp, #32]
    a9f8:	9a04      	ldr	r2, [sp, #16]
    a9fa:	1ad3      	subs	r3, r2, r3
    a9fc:	9304      	str	r3, [sp, #16]
    a9fe:	464b      	mov	r3, r9
    aa00:	2b00      	cmp	r3, #0
    aa02:	d01a      	beq.n	aa3a <_dtoa_r+0x756>
    aa04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa06:	2b00      	cmp	r3, #0
    aa08:	d100      	bne.n	aa0c <_dtoa_r+0x728>
    aa0a:	e1bb      	b.n	ad84 <_dtoa_r+0xaa0>
    aa0c:	2c00      	cmp	r4, #0
    aa0e:	dd10      	ble.n	aa32 <_dtoa_r+0x74e>
    aa10:	4641      	mov	r1, r8
    aa12:	0022      	movs	r2, r4
    aa14:	4650      	mov	r0, sl
    aa16:	f001 f90d 	bl	bc34 <__pow5mult>
    aa1a:	465a      	mov	r2, fp
    aa1c:	0001      	movs	r1, r0
    aa1e:	4680      	mov	r8, r0
    aa20:	4650      	mov	r0, sl
    aa22:	f001 f85d 	bl	bae0 <__multiply>
    aa26:	0005      	movs	r5, r0
    aa28:	4659      	mov	r1, fp
    aa2a:	4650      	mov	r0, sl
    aa2c:	f000 ffb6 	bl	b99c <_Bfree>
    aa30:	46ab      	mov	fp, r5
    aa32:	464b      	mov	r3, r9
    aa34:	1b1a      	subs	r2, r3, r4
    aa36:	d000      	beq.n	aa3a <_dtoa_r+0x756>
    aa38:	e1a5      	b.n	ad86 <_dtoa_r+0xaa2>
    aa3a:	2101      	movs	r1, #1
    aa3c:	4650      	mov	r0, sl
    aa3e:	f001 f845 	bl	bacc <__i2b>
    aa42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa44:	4681      	mov	r9, r0
    aa46:	2b00      	cmp	r3, #0
    aa48:	dd1d      	ble.n	aa86 <_dtoa_r+0x7a2>
    aa4a:	001a      	movs	r2, r3
    aa4c:	0001      	movs	r1, r0
    aa4e:	4650      	mov	r0, sl
    aa50:	f001 f8f0 	bl	bc34 <__pow5mult>
    aa54:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aa56:	4681      	mov	r9, r0
    aa58:	2b01      	cmp	r3, #1
    aa5a:	dc00      	bgt.n	aa5e <_dtoa_r+0x77a>
    aa5c:	e150      	b.n	ad00 <_dtoa_r+0xa1c>
    aa5e:	2400      	movs	r4, #0
    aa60:	464b      	mov	r3, r9
    aa62:	691b      	ldr	r3, [r3, #16]
    aa64:	3303      	adds	r3, #3
    aa66:	009b      	lsls	r3, r3, #2
    aa68:	444b      	add	r3, r9
    aa6a:	6858      	ldr	r0, [r3, #4]
    aa6c:	f000 ffe6 	bl	ba3c <__hi0bits>
    aa70:	2320      	movs	r3, #32
    aa72:	1a1b      	subs	r3, r3, r0
    aa74:	e010      	b.n	aa98 <_dtoa_r+0x7b4>
    aa76:	2220      	movs	r2, #32
    aa78:	0030      	movs	r0, r6
    aa7a:	1ad3      	subs	r3, r2, r3
    aa7c:	4098      	lsls	r0, r3
    aa7e:	e685      	b.n	a78c <_dtoa_r+0x4a8>
    aa80:	2300      	movs	r3, #0
    aa82:	930c      	str	r3, [sp, #48]	; 0x30
    aa84:	e4e3      	b.n	a44e <_dtoa_r+0x16a>
    aa86:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aa88:	2400      	movs	r4, #0
    aa8a:	2b01      	cmp	r3, #1
    aa8c:	dc00      	bgt.n	aa90 <_dtoa_r+0x7ac>
    aa8e:	e18b      	b.n	ada8 <_dtoa_r+0xac4>
    aa90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aa92:	2301      	movs	r3, #1
    aa94:	2a00      	cmp	r2, #0
    aa96:	d1e3      	bne.n	aa60 <_dtoa_r+0x77c>
    aa98:	9904      	ldr	r1, [sp, #16]
    aa9a:	201f      	movs	r0, #31
    aa9c:	468c      	mov	ip, r1
    aa9e:	4463      	add	r3, ip
    aaa0:	4018      	ands	r0, r3
    aaa2:	d100      	bne.n	aaa6 <_dtoa_r+0x7c2>
    aaa4:	e0ae      	b.n	ac04 <_dtoa_r+0x920>
    aaa6:	2320      	movs	r3, #32
    aaa8:	1a1b      	subs	r3, r3, r0
    aaaa:	2b04      	cmp	r3, #4
    aaac:	dc00      	bgt.n	aab0 <_dtoa_r+0x7cc>
    aaae:	e3cc      	b.n	b24a <_dtoa_r+0xf66>
    aab0:	231c      	movs	r3, #28
    aab2:	1a18      	subs	r0, r3, r0
    aab4:	9b06      	ldr	r3, [sp, #24]
    aab6:	469c      	mov	ip, r3
    aab8:	4484      	add	ip, r0
    aaba:	4663      	mov	r3, ip
    aabc:	9306      	str	r3, [sp, #24]
    aabe:	9b08      	ldr	r3, [sp, #32]
    aac0:	469c      	mov	ip, r3
    aac2:	4484      	add	ip, r0
    aac4:	4663      	mov	r3, ip
    aac6:	468c      	mov	ip, r1
    aac8:	4484      	add	ip, r0
    aaca:	9308      	str	r3, [sp, #32]
    aacc:	4663      	mov	r3, ip
    aace:	9304      	str	r3, [sp, #16]
    aad0:	9b06      	ldr	r3, [sp, #24]
    aad2:	2b00      	cmp	r3, #0
    aad4:	dd05      	ble.n	aae2 <_dtoa_r+0x7fe>
    aad6:	4659      	mov	r1, fp
    aad8:	001a      	movs	r2, r3
    aada:	4650      	mov	r0, sl
    aadc:	f001 f90a 	bl	bcf4 <__lshift>
    aae0:	4683      	mov	fp, r0
    aae2:	9b04      	ldr	r3, [sp, #16]
    aae4:	2b00      	cmp	r3, #0
    aae6:	dd05      	ble.n	aaf4 <_dtoa_r+0x810>
    aae8:	4649      	mov	r1, r9
    aaea:	001a      	movs	r2, r3
    aaec:	4650      	mov	r0, sl
    aaee:	f001 f901 	bl	bcf4 <__lshift>
    aaf2:	4681      	mov	r9, r0
    aaf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d000      	beq.n	aafc <_dtoa_r+0x818>
    aafa:	e094      	b.n	ac26 <_dtoa_r+0x942>
    aafc:	9b07      	ldr	r3, [sp, #28]
    aafe:	2b00      	cmp	r3, #0
    ab00:	dc00      	bgt.n	ab04 <_dtoa_r+0x820>
    ab02:	e175      	b.n	adf0 <_dtoa_r+0xb0c>
    ab04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab06:	2b00      	cmp	r3, #0
    ab08:	d100      	bne.n	ab0c <_dtoa_r+0x828>
    ab0a:	e0a6      	b.n	ac5a <_dtoa_r+0x976>
    ab0c:	9b08      	ldr	r3, [sp, #32]
    ab0e:	2b00      	cmp	r3, #0
    ab10:	dd05      	ble.n	ab1e <_dtoa_r+0x83a>
    ab12:	4641      	mov	r1, r8
    ab14:	001a      	movs	r2, r3
    ab16:	4650      	mov	r0, sl
    ab18:	f001 f8ec 	bl	bcf4 <__lshift>
    ab1c:	4680      	mov	r8, r0
    ab1e:	4643      	mov	r3, r8
    ab20:	930c      	str	r3, [sp, #48]	; 0x30
    ab22:	2c00      	cmp	r4, #0
    ab24:	d000      	beq.n	ab28 <_dtoa_r+0x844>
    ab26:	e250      	b.n	afca <_dtoa_r+0xce6>
    ab28:	9c07      	ldr	r4, [sp, #28]
    ab2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ab2c:	3c01      	subs	r4, #1
    ab2e:	0023      	movs	r3, r4
    ab30:	4694      	mov	ip, r2
    ab32:	4463      	add	r3, ip
    ab34:	9308      	str	r3, [sp, #32]
    ab36:	2301      	movs	r3, #1
    ab38:	4033      	ands	r3, r6
    ab3a:	9307      	str	r3, [sp, #28]
    ab3c:	464b      	mov	r3, r9
    ab3e:	9306      	str	r3, [sp, #24]
    ab40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab42:	4657      	mov	r7, sl
    ab44:	4645      	mov	r5, r8
    ab46:	465e      	mov	r6, fp
    ab48:	4692      	mov	sl, r2
    ab4a:	4698      	mov	r8, r3
    ab4c:	9b06      	ldr	r3, [sp, #24]
    ab4e:	0030      	movs	r0, r6
    ab50:	0019      	movs	r1, r3
    ab52:	4699      	mov	r9, r3
    ab54:	f7ff fb1c 	bl	a190 <quorem>
    ab58:	0003      	movs	r3, r0
    ab5a:	900b      	str	r0, [sp, #44]	; 0x2c
    ab5c:	3330      	adds	r3, #48	; 0x30
    ab5e:	0029      	movs	r1, r5
    ab60:	0030      	movs	r0, r6
    ab62:	9304      	str	r3, [sp, #16]
    ab64:	f001 f926 	bl	bdb4 <__mcmp>
    ab68:	4649      	mov	r1, r9
    ab6a:	0004      	movs	r4, r0
    ab6c:	4642      	mov	r2, r8
    ab6e:	0038      	movs	r0, r7
    ab70:	f001 f93a 	bl	bde8 <__mdiff>
    ab74:	68c3      	ldr	r3, [r0, #12]
    ab76:	4681      	mov	r9, r0
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d000      	beq.n	ab7e <_dtoa_r+0x89a>
    ab7c:	e11e      	b.n	adbc <_dtoa_r+0xad8>
    ab7e:	0001      	movs	r1, r0
    ab80:	0030      	movs	r0, r6
    ab82:	f001 f917 	bl	bdb4 <__mcmp>
    ab86:	4683      	mov	fp, r0
    ab88:	4649      	mov	r1, r9
    ab8a:	0038      	movs	r0, r7
    ab8c:	f000 ff06 	bl	b99c <_Bfree>
    ab90:	465b      	mov	r3, fp
    ab92:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ab94:	4313      	orrs	r3, r2
    ab96:	d103      	bne.n	aba0 <_dtoa_r+0x8bc>
    ab98:	9b07      	ldr	r3, [sp, #28]
    ab9a:	2b00      	cmp	r3, #0
    ab9c:	d100      	bne.n	aba0 <_dtoa_r+0x8bc>
    ab9e:	e306      	b.n	b1ae <_dtoa_r+0xeca>
    aba0:	2c00      	cmp	r4, #0
    aba2:	da00      	bge.n	aba6 <_dtoa_r+0x8c2>
    aba4:	e1a8      	b.n	aef8 <_dtoa_r+0xc14>
    aba6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aba8:	431c      	orrs	r4, r3
    abaa:	d103      	bne.n	abb4 <_dtoa_r+0x8d0>
    abac:	9b07      	ldr	r3, [sp, #28]
    abae:	2b00      	cmp	r3, #0
    abb0:	d100      	bne.n	abb4 <_dtoa_r+0x8d0>
    abb2:	e1a1      	b.n	aef8 <_dtoa_r+0xc14>
    abb4:	465b      	mov	r3, fp
    abb6:	2b00      	cmp	r3, #0
    abb8:	dd00      	ble.n	abbc <_dtoa_r+0x8d8>
    abba:	e282      	b.n	b0c2 <_dtoa_r+0xdde>
    abbc:	4669      	mov	r1, sp
    abbe:	4652      	mov	r2, sl
    abc0:	4653      	mov	r3, sl
    abc2:	7c09      	ldrb	r1, [r1, #16]
    abc4:	1c5c      	adds	r4, r3, #1
    abc6:	7011      	strb	r1, [r2, #0]
    abc8:	9a08      	ldr	r2, [sp, #32]
    abca:	4552      	cmp	r2, sl
    abcc:	d100      	bne.n	abd0 <_dtoa_r+0x8ec>
    abce:	e28a      	b.n	b0e6 <_dtoa_r+0xe02>
    abd0:	0031      	movs	r1, r6
    abd2:	2300      	movs	r3, #0
    abd4:	220a      	movs	r2, #10
    abd6:	0038      	movs	r0, r7
    abd8:	f000 feea 	bl	b9b0 <__multadd>
    abdc:	2300      	movs	r3, #0
    abde:	0006      	movs	r6, r0
    abe0:	220a      	movs	r2, #10
    abe2:	0029      	movs	r1, r5
    abe4:	0038      	movs	r0, r7
    abe6:	4545      	cmp	r5, r8
    abe8:	d100      	bne.n	abec <_dtoa_r+0x908>
    abea:	e0e1      	b.n	adb0 <_dtoa_r+0xacc>
    abec:	f000 fee0 	bl	b9b0 <__multadd>
    abf0:	4641      	mov	r1, r8
    abf2:	0005      	movs	r5, r0
    abf4:	2300      	movs	r3, #0
    abf6:	220a      	movs	r2, #10
    abf8:	0038      	movs	r0, r7
    abfa:	f000 fed9 	bl	b9b0 <__multadd>
    abfe:	46a2      	mov	sl, r4
    ac00:	4680      	mov	r8, r0
    ac02:	e7a3      	b.n	ab4c <_dtoa_r+0x868>
    ac04:	201c      	movs	r0, #28
    ac06:	9b06      	ldr	r3, [sp, #24]
    ac08:	469c      	mov	ip, r3
    ac0a:	4484      	add	ip, r0
    ac0c:	4663      	mov	r3, ip
    ac0e:	9306      	str	r3, [sp, #24]
    ac10:	9b08      	ldr	r3, [sp, #32]
    ac12:	469c      	mov	ip, r3
    ac14:	4484      	add	ip, r0
    ac16:	4663      	mov	r3, ip
    ac18:	9308      	str	r3, [sp, #32]
    ac1a:	9b04      	ldr	r3, [sp, #16]
    ac1c:	469c      	mov	ip, r3
    ac1e:	4484      	add	ip, r0
    ac20:	4663      	mov	r3, ip
    ac22:	9304      	str	r3, [sp, #16]
    ac24:	e754      	b.n	aad0 <_dtoa_r+0x7ec>
    ac26:	4649      	mov	r1, r9
    ac28:	4658      	mov	r0, fp
    ac2a:	f001 f8c3 	bl	bdb4 <__mcmp>
    ac2e:	2800      	cmp	r0, #0
    ac30:	db00      	blt.n	ac34 <_dtoa_r+0x950>
    ac32:	e763      	b.n	aafc <_dtoa_r+0x818>
    ac34:	9b03      	ldr	r3, [sp, #12]
    ac36:	4659      	mov	r1, fp
    ac38:	3b01      	subs	r3, #1
    ac3a:	9303      	str	r3, [sp, #12]
    ac3c:	220a      	movs	r2, #10
    ac3e:	2300      	movs	r3, #0
    ac40:	4650      	mov	r0, sl
    ac42:	f000 feb5 	bl	b9b0 <__multadd>
    ac46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac48:	4683      	mov	fp, r0
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d000      	beq.n	ac50 <_dtoa_r+0x96c>
    ac4e:	e2ca      	b.n	b1e6 <_dtoa_r+0xf02>
    ac50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ac52:	2b00      	cmp	r3, #0
    ac54:	dc00      	bgt.n	ac58 <_dtoa_r+0x974>
    ac56:	e2d8      	b.n	b20a <_dtoa_r+0xf26>
    ac58:	9307      	str	r3, [sp, #28]
    ac5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac5c:	465d      	mov	r5, fp
    ac5e:	2400      	movs	r4, #0
    ac60:	9f07      	ldr	r7, [sp, #28]
    ac62:	469b      	mov	fp, r3
    ac64:	e006      	b.n	ac74 <_dtoa_r+0x990>
    ac66:	0029      	movs	r1, r5
    ac68:	2300      	movs	r3, #0
    ac6a:	220a      	movs	r2, #10
    ac6c:	4650      	mov	r0, sl
    ac6e:	f000 fe9f 	bl	b9b0 <__multadd>
    ac72:	0005      	movs	r5, r0
    ac74:	4649      	mov	r1, r9
    ac76:	0028      	movs	r0, r5
    ac78:	f7ff fa8a 	bl	a190 <quorem>
    ac7c:	465b      	mov	r3, fp
    ac7e:	3030      	adds	r0, #48	; 0x30
    ac80:	5518      	strb	r0, [r3, r4]
    ac82:	3401      	adds	r4, #1
    ac84:	42bc      	cmp	r4, r7
    ac86:	dbee      	blt.n	ac66 <_dtoa_r+0x982>
    ac88:	46ab      	mov	fp, r5
    ac8a:	0006      	movs	r6, r0
    ac8c:	9c07      	ldr	r4, [sp, #28]
    ac8e:	2c00      	cmp	r4, #0
    ac90:	dc00      	bgt.n	ac94 <_dtoa_r+0x9b0>
    ac92:	e237      	b.n	b104 <_dtoa_r+0xe20>
    ac94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac96:	2700      	movs	r7, #0
    ac98:	469c      	mov	ip, r3
    ac9a:	4464      	add	r4, ip
    ac9c:	4659      	mov	r1, fp
    ac9e:	2201      	movs	r2, #1
    aca0:	4650      	mov	r0, sl
    aca2:	f001 f827 	bl	bcf4 <__lshift>
    aca6:	4649      	mov	r1, r9
    aca8:	4683      	mov	fp, r0
    acaa:	f001 f883 	bl	bdb4 <__mcmp>
    acae:	2800      	cmp	r0, #0
    acb0:	dc00      	bgt.n	acb4 <_dtoa_r+0x9d0>
    acb2:	e144      	b.n	af3e <_dtoa_r+0xc5a>
    acb4:	1e65      	subs	r5, r4, #1
    acb6:	782b      	ldrb	r3, [r5, #0]
    acb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    acba:	e006      	b.n	acca <_dtoa_r+0x9e6>
    acbc:	4295      	cmp	r5, r2
    acbe:	d100      	bne.n	acc2 <_dtoa_r+0x9de>
    acc0:	e0b1      	b.n	ae26 <_dtoa_r+0xb42>
    acc2:	3c02      	subs	r4, #2
    acc4:	7823      	ldrb	r3, [r4, #0]
    acc6:	002c      	movs	r4, r5
    acc8:	3d01      	subs	r5, #1
    acca:	2b39      	cmp	r3, #57	; 0x39
    accc:	d0f6      	beq.n	acbc <_dtoa_r+0x9d8>
    acce:	3301      	adds	r3, #1
    acd0:	702b      	strb	r3, [r5, #0]
    acd2:	4649      	mov	r1, r9
    acd4:	4650      	mov	r0, sl
    acd6:	f000 fe61 	bl	b99c <_Bfree>
    acda:	4643      	mov	r3, r8
    acdc:	2b00      	cmp	r3, #0
    acde:	d100      	bne.n	ace2 <_dtoa_r+0x9fe>
    ace0:	e52f      	b.n	a742 <_dtoa_r+0x45e>
    ace2:	2f00      	cmp	r7, #0
    ace4:	d005      	beq.n	acf2 <_dtoa_r+0xa0e>
    ace6:	4547      	cmp	r7, r8
    ace8:	d003      	beq.n	acf2 <_dtoa_r+0xa0e>
    acea:	0039      	movs	r1, r7
    acec:	4650      	mov	r0, sl
    acee:	f000 fe55 	bl	b99c <_Bfree>
    acf2:	4641      	mov	r1, r8
    acf4:	4650      	mov	r0, sl
    acf6:	f000 fe51 	bl	b99c <_Bfree>
    acfa:	e522      	b.n	a742 <_dtoa_r+0x45e>
    acfc:	0013      	movs	r3, r2
    acfe:	e675      	b.n	a9ec <_dtoa_r+0x708>
    ad00:	2e00      	cmp	r6, #0
    ad02:	d000      	beq.n	ad06 <_dtoa_r+0xa22>
    ad04:	e6ab      	b.n	aa5e <_dtoa_r+0x77a>
    ad06:	033b      	lsls	r3, r7, #12
    ad08:	2400      	movs	r4, #0
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	d000      	beq.n	ad10 <_dtoa_r+0xa2c>
    ad0e:	e6bf      	b.n	aa90 <_dtoa_r+0x7ac>
    ad10:	4bba      	ldr	r3, [pc, #744]	; (affc <_dtoa_r+0xd18>)
    ad12:	423b      	tst	r3, r7
    ad14:	d100      	bne.n	ad18 <_dtoa_r+0xa34>
    ad16:	e6bb      	b.n	aa90 <_dtoa_r+0x7ac>
    ad18:	9b06      	ldr	r3, [sp, #24]
    ad1a:	3401      	adds	r4, #1
    ad1c:	3301      	adds	r3, #1
    ad1e:	9306      	str	r3, [sp, #24]
    ad20:	9b04      	ldr	r3, [sp, #16]
    ad22:	3301      	adds	r3, #1
    ad24:	9304      	str	r3, [sp, #16]
    ad26:	e6b3      	b.n	aa90 <_dtoa_r+0x7ac>
    ad28:	2301      	movs	r3, #1
    ad2a:	930b      	str	r3, [sp, #44]	; 0x2c
    ad2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ad2e:	2b00      	cmp	r3, #0
    ad30:	dc00      	bgt.n	ad34 <_dtoa_r+0xa50>
    ad32:	e0d1      	b.n	aed8 <_dtoa_r+0xbf4>
    ad34:	001d      	movs	r5, r3
    ad36:	4698      	mov	r8, r3
    ad38:	930e      	str	r3, [sp, #56]	; 0x38
    ad3a:	9307      	str	r3, [sp, #28]
    ad3c:	f7ff fbc8 	bl	a4d0 <_dtoa_r+0x1ec>
    ad40:	9b07      	ldr	r3, [sp, #28]
    ad42:	2b00      	cmp	r3, #0
    ad44:	dd00      	ble.n	ad48 <_dtoa_r+0xa64>
    ad46:	e553      	b.n	a7f0 <_dtoa_r+0x50c>
    ad48:	d000      	beq.n	ad4c <_dtoa_r+0xa68>
    ad4a:	e0ad      	b.n	aea8 <_dtoa_r+0xbc4>
    ad4c:	9804      	ldr	r0, [sp, #16]
    ad4e:	9905      	ldr	r1, [sp, #20]
    ad50:	2200      	movs	r2, #0
    ad52:	4bab      	ldr	r3, [pc, #684]	; (b000 <_dtoa_r+0xd1c>)
    ad54:	f7fc fb3c 	bl	73d0 <__aeabi_dmul>
    ad58:	003b      	movs	r3, r7
    ad5a:	0032      	movs	r2, r6
    ad5c:	f7fb fb7a 	bl	6454 <__aeabi_dcmpge>
    ad60:	2300      	movs	r3, #0
    ad62:	4699      	mov	r9, r3
    ad64:	4698      	mov	r8, r3
    ad66:	2800      	cmp	r0, #0
    ad68:	d055      	beq.n	ae16 <_dtoa_r+0xb32>
    ad6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ad6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ad6e:	43db      	mvns	r3, r3
    ad70:	9303      	str	r3, [sp, #12]
    ad72:	4649      	mov	r1, r9
    ad74:	4650      	mov	r0, sl
    ad76:	f000 fe11 	bl	b99c <_Bfree>
    ad7a:	4643      	mov	r3, r8
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d100      	bne.n	ad82 <_dtoa_r+0xa9e>
    ad80:	e4df      	b.n	a742 <_dtoa_r+0x45e>
    ad82:	e7b6      	b.n	acf2 <_dtoa_r+0xa0e>
    ad84:	464a      	mov	r2, r9
    ad86:	4659      	mov	r1, fp
    ad88:	4650      	mov	r0, sl
    ad8a:	f000 ff53 	bl	bc34 <__pow5mult>
    ad8e:	4683      	mov	fp, r0
    ad90:	e653      	b.n	aa3a <_dtoa_r+0x756>
    ad92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ad94:	2a00      	cmp	r2, #0
    ad96:	d100      	bne.n	ad9a <_dtoa_r+0xab6>
    ad98:	e1b6      	b.n	b108 <_dtoa_r+0xe24>
    ad9a:	4a9a      	ldr	r2, [pc, #616]	; (b004 <_dtoa_r+0xd20>)
    ad9c:	464c      	mov	r4, r9
    ad9e:	4694      	mov	ip, r2
    ada0:	9a06      	ldr	r2, [sp, #24]
    ada2:	4463      	add	r3, ip
    ada4:	9208      	str	r2, [sp, #32]
    ada6:	e5d5      	b.n	a954 <_dtoa_r+0x670>
    ada8:	2e00      	cmp	r6, #0
    adaa:	d000      	beq.n	adae <_dtoa_r+0xaca>
    adac:	e670      	b.n	aa90 <_dtoa_r+0x7ac>
    adae:	e7aa      	b.n	ad06 <_dtoa_r+0xa22>
    adb0:	f000 fdfe 	bl	b9b0 <__multadd>
    adb4:	46a2      	mov	sl, r4
    adb6:	0005      	movs	r5, r0
    adb8:	4680      	mov	r8, r0
    adba:	e6c7      	b.n	ab4c <_dtoa_r+0x868>
    adbc:	2301      	movs	r3, #1
    adbe:	469b      	mov	fp, r3
    adc0:	e6e2      	b.n	ab88 <_dtoa_r+0x8a4>
    adc2:	2300      	movs	r3, #0
    adc4:	930b      	str	r3, [sp, #44]	; 0x2c
    adc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    adc8:	2b02      	cmp	r3, #2
    adca:	d0af      	beq.n	ad2c <_dtoa_r+0xa48>
    adcc:	2400      	movs	r4, #0
    adce:	4653      	mov	r3, sl
    add0:	0021      	movs	r1, r4
    add2:	645c      	str	r4, [r3, #68]	; 0x44
    add4:	4650      	mov	r0, sl
    add6:	f000 fdb9 	bl	b94c <_Balloc>
    adda:	4653      	mov	r3, sl
    addc:	6418      	str	r0, [r3, #64]	; 0x40
    adde:	2301      	movs	r3, #1
    ade0:	425b      	negs	r3, r3
    ade2:	9307      	str	r3, [sp, #28]
    ade4:	930e      	str	r3, [sp, #56]	; 0x38
    ade6:	3302      	adds	r3, #2
    ade8:	900a      	str	r0, [sp, #40]	; 0x28
    adea:	9423      	str	r4, [sp, #140]	; 0x8c
    adec:	930b      	str	r3, [sp, #44]	; 0x2c
    adee:	e4ec      	b.n	a7ca <_dtoa_r+0x4e6>
    adf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    adf2:	2b02      	cmp	r3, #2
    adf4:	dc00      	bgt.n	adf8 <_dtoa_r+0xb14>
    adf6:	e685      	b.n	ab04 <_dtoa_r+0x820>
    adf8:	9b07      	ldr	r3, [sp, #28]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d1b5      	bne.n	ad6a <_dtoa_r+0xa86>
    adfe:	4649      	mov	r1, r9
    ae00:	2205      	movs	r2, #5
    ae02:	4650      	mov	r0, sl
    ae04:	f000 fdd4 	bl	b9b0 <__multadd>
    ae08:	4681      	mov	r9, r0
    ae0a:	0001      	movs	r1, r0
    ae0c:	4658      	mov	r0, fp
    ae0e:	f000 ffd1 	bl	bdb4 <__mcmp>
    ae12:	2800      	cmp	r0, #0
    ae14:	dda9      	ble.n	ad6a <_dtoa_r+0xa86>
    ae16:	2331      	movs	r3, #49	; 0x31
    ae18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae1a:	7013      	strb	r3, [r2, #0]
    ae1c:	9b03      	ldr	r3, [sp, #12]
    ae1e:	1c54      	adds	r4, r2, #1
    ae20:	3301      	adds	r3, #1
    ae22:	9303      	str	r3, [sp, #12]
    ae24:	e7a5      	b.n	ad72 <_dtoa_r+0xa8e>
    ae26:	9b03      	ldr	r3, [sp, #12]
    ae28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae2a:	3301      	adds	r3, #1
    ae2c:	9303      	str	r3, [sp, #12]
    ae2e:	2331      	movs	r3, #49	; 0x31
    ae30:	7013      	strb	r3, [r2, #0]
    ae32:	e74e      	b.n	acd2 <_dtoa_r+0x9ee>
    ae34:	2300      	movs	r3, #0
    ae36:	930b      	str	r3, [sp, #44]	; 0x2c
    ae38:	f7ff fb3d 	bl	a4b6 <_dtoa_r+0x1d2>
    ae3c:	9b06      	ldr	r3, [sp, #24]
    ae3e:	465c      	mov	r4, fp
    ae40:	469b      	mov	fp, r3
    ae42:	9b07      	ldr	r3, [sp, #28]
    ae44:	469a      	mov	sl, r3
    ae46:	e47c      	b.n	a742 <_dtoa_r+0x45e>
    ae48:	4640      	mov	r0, r8
    ae4a:	f7fd f8ab 	bl	7fa4 <__aeabi_i2d>
    ae4e:	0032      	movs	r2, r6
    ae50:	003b      	movs	r3, r7
    ae52:	f7fc fabd 	bl	73d0 <__aeabi_dmul>
    ae56:	2200      	movs	r2, #0
    ae58:	4b6b      	ldr	r3, [pc, #428]	; (b008 <_dtoa_r+0xd24>)
    ae5a:	f7fb fb75 	bl	6548 <__aeabi_dadd>
    ae5e:	4a6b      	ldr	r2, [pc, #428]	; (b00c <_dtoa_r+0xd28>)
    ae60:	000b      	movs	r3, r1
    ae62:	4694      	mov	ip, r2
    ae64:	4463      	add	r3, ip
    ae66:	9008      	str	r0, [sp, #32]
    ae68:	9109      	str	r1, [sp, #36]	; 0x24
    ae6a:	9309      	str	r3, [sp, #36]	; 0x24
    ae6c:	2200      	movs	r2, #0
    ae6e:	4b64      	ldr	r3, [pc, #400]	; (b000 <_dtoa_r+0xd1c>)
    ae70:	0030      	movs	r0, r6
    ae72:	0039      	movs	r1, r7
    ae74:	f7fc fd2c 	bl	78d0 <__aeabi_dsub>
    ae78:	9e08      	ldr	r6, [sp, #32]
    ae7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ae7c:	0032      	movs	r2, r6
    ae7e:	003b      	movs	r3, r7
    ae80:	0004      	movs	r4, r0
    ae82:	000d      	movs	r5, r1
    ae84:	f7fb fadc 	bl	6440 <__aeabi_dcmpgt>
    ae88:	2800      	cmp	r0, #0
    ae8a:	d000      	beq.n	ae8e <_dtoa_r+0xbaa>
    ae8c:	e0b2      	b.n	aff4 <_dtoa_r+0xd10>
    ae8e:	2080      	movs	r0, #128	; 0x80
    ae90:	0600      	lsls	r0, r0, #24
    ae92:	4684      	mov	ip, r0
    ae94:	0039      	movs	r1, r7
    ae96:	4461      	add	r1, ip
    ae98:	000b      	movs	r3, r1
    ae9a:	0032      	movs	r2, r6
    ae9c:	0020      	movs	r0, r4
    ae9e:	0029      	movs	r1, r5
    aea0:	f7fb faba 	bl	6418 <__aeabi_dcmplt>
    aea4:	2800      	cmp	r0, #0
    aea6:	d057      	beq.n	af58 <_dtoa_r+0xc74>
    aea8:	2300      	movs	r3, #0
    aeaa:	4699      	mov	r9, r3
    aeac:	4698      	mov	r8, r3
    aeae:	e75c      	b.n	ad6a <_dtoa_r+0xa86>
    aeb0:	980a      	ldr	r0, [sp, #40]	; 0x28
    aeb2:	f7ff fa4c 	bl	a34e <_dtoa_r+0x6a>
    aeb6:	1ae2      	subs	r2, r4, r3
    aeb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aeba:	46a1      	mov	r9, r4
    aebc:	469c      	mov	ip, r3
    aebe:	4494      	add	ip, r2
    aec0:	4663      	mov	r3, ip
    aec2:	2400      	movs	r4, #0
    aec4:	930d      	str	r3, [sp, #52]	; 0x34
    aec6:	e53e      	b.n	a946 <_dtoa_r+0x662>
    aec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aeca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aecc:	9208      	str	r2, [sp, #32]
    aece:	9309      	str	r3, [sp, #36]	; 0x24
    aed0:	2302      	movs	r3, #2
    aed2:	4698      	mov	r8, r3
    aed4:	f7ff fb3a 	bl	a54c <_dtoa_r+0x268>
    aed8:	2300      	movs	r3, #0
    aeda:	4652      	mov	r2, sl
    aedc:	2100      	movs	r1, #0
    aede:	6453      	str	r3, [r2, #68]	; 0x44
    aee0:	4650      	mov	r0, sl
    aee2:	f000 fd33 	bl	b94c <_Balloc>
    aee6:	4653      	mov	r3, sl
    aee8:	6418      	str	r0, [r3, #64]	; 0x40
    aeea:	2301      	movs	r3, #1
    aeec:	900a      	str	r0, [sp, #40]	; 0x28
    aeee:	9307      	str	r3, [sp, #28]
    aef0:	9323      	str	r3, [sp, #140]	; 0x8c
    aef2:	930e      	str	r3, [sp, #56]	; 0x38
    aef4:	f7ff fb07 	bl	a506 <_dtoa_r+0x222>
    aef8:	4643      	mov	r3, r8
    aefa:	930c      	str	r3, [sp, #48]	; 0x30
    aefc:	465b      	mov	r3, fp
    aefe:	9a06      	ldr	r2, [sp, #24]
    af00:	46a8      	mov	r8, r5
    af02:	46b3      	mov	fp, r6
    af04:	4655      	mov	r5, sl
    af06:	9e04      	ldr	r6, [sp, #16]
    af08:	4691      	mov	r9, r2
    af0a:	46ba      	mov	sl, r7
    af0c:	2b00      	cmp	r3, #0
    af0e:	dd10      	ble.n	af32 <_dtoa_r+0xc4e>
    af10:	4659      	mov	r1, fp
    af12:	2201      	movs	r2, #1
    af14:	0038      	movs	r0, r7
    af16:	f000 feed 	bl	bcf4 <__lshift>
    af1a:	4649      	mov	r1, r9
    af1c:	4683      	mov	fp, r0
    af1e:	f000 ff49 	bl	bdb4 <__mcmp>
    af22:	2800      	cmp	r0, #0
    af24:	dc00      	bgt.n	af28 <_dtoa_r+0xc44>
    af26:	e157      	b.n	b1d8 <_dtoa_r+0xef4>
    af28:	2e39      	cmp	r6, #57	; 0x39
    af2a:	d100      	bne.n	af2e <_dtoa_r+0xc4a>
    af2c:	e122      	b.n	b174 <_dtoa_r+0xe90>
    af2e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    af30:	3631      	adds	r6, #49	; 0x31
    af32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af34:	4647      	mov	r7, r8
    af36:	1c6c      	adds	r4, r5, #1
    af38:	702e      	strb	r6, [r5, #0]
    af3a:	4698      	mov	r8, r3
    af3c:	e6c9      	b.n	acd2 <_dtoa_r+0x9ee>
    af3e:	2800      	cmp	r0, #0
    af40:	d103      	bne.n	af4a <_dtoa_r+0xc66>
    af42:	07f3      	lsls	r3, r6, #31
    af44:	d501      	bpl.n	af4a <_dtoa_r+0xc66>
    af46:	e6b5      	b.n	acb4 <_dtoa_r+0x9d0>
    af48:	001c      	movs	r4, r3
    af4a:	1e63      	subs	r3, r4, #1
    af4c:	781a      	ldrb	r2, [r3, #0]
    af4e:	2a30      	cmp	r2, #48	; 0x30
    af50:	d0fa      	beq.n	af48 <_dtoa_r+0xc64>
    af52:	e6be      	b.n	acd2 <_dtoa_r+0x9ee>
    af54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af56:	4699      	mov	r9, r3
    af58:	9e10      	ldr	r6, [sp, #64]	; 0x40
    af5a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    af5c:	e435      	b.n	a7ca <_dtoa_r+0x4e6>
    af5e:	2501      	movs	r5, #1
    af60:	f7ff fab4 	bl	a4cc <_dtoa_r+0x1e8>
    af64:	9b03      	ldr	r3, [sp, #12]
    af66:	2b00      	cmp	r3, #0
    af68:	d100      	bne.n	af6c <_dtoa_r+0xc88>
    af6a:	e0d4      	b.n	b116 <_dtoa_r+0xe32>
    af6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    af6e:	9911      	ldr	r1, [sp, #68]	; 0x44
    af70:	425c      	negs	r4, r3
    af72:	230f      	movs	r3, #15
    af74:	4a26      	ldr	r2, [pc, #152]	; (b010 <_dtoa_r+0xd2c>)
    af76:	4023      	ands	r3, r4
    af78:	00db      	lsls	r3, r3, #3
    af7a:	18d3      	adds	r3, r2, r3
    af7c:	681a      	ldr	r2, [r3, #0]
    af7e:	685b      	ldr	r3, [r3, #4]
    af80:	f7fc fa26 	bl	73d0 <__aeabi_dmul>
    af84:	1124      	asrs	r4, r4, #4
    af86:	0006      	movs	r6, r0
    af88:	000f      	movs	r7, r1
    af8a:	2c00      	cmp	r4, #0
    af8c:	d100      	bne.n	af90 <_dtoa_r+0xcac>
    af8e:	e149      	b.n	b224 <_dtoa_r+0xf40>
    af90:	2302      	movs	r3, #2
    af92:	4698      	mov	r8, r3
    af94:	4d1f      	ldr	r5, [pc, #124]	; (b014 <_dtoa_r+0xd30>)
    af96:	2301      	movs	r3, #1
    af98:	4223      	tst	r3, r4
    af9a:	d009      	beq.n	afb0 <_dtoa_r+0xccc>
    af9c:	469c      	mov	ip, r3
    af9e:	682a      	ldr	r2, [r5, #0]
    afa0:	686b      	ldr	r3, [r5, #4]
    afa2:	0030      	movs	r0, r6
    afa4:	0039      	movs	r1, r7
    afa6:	44e0      	add	r8, ip
    afa8:	f7fc fa12 	bl	73d0 <__aeabi_dmul>
    afac:	0006      	movs	r6, r0
    afae:	000f      	movs	r7, r1
    afb0:	1064      	asrs	r4, r4, #1
    afb2:	3508      	adds	r5, #8
    afb4:	2c00      	cmp	r4, #0
    afb6:	d1ee      	bne.n	af96 <_dtoa_r+0xcb2>
    afb8:	f7ff fae4 	bl	a584 <_dtoa_r+0x2a0>
    afbc:	9b03      	ldr	r3, [sp, #12]
    afbe:	2730      	movs	r7, #48	; 0x30
    afc0:	3301      	adds	r3, #1
    afc2:	9303      	str	r3, [sp, #12]
    afc4:	2330      	movs	r3, #48	; 0x30
    afc6:	702b      	strb	r3, [r5, #0]
    afc8:	e4ac      	b.n	a924 <_dtoa_r+0x640>
    afca:	6859      	ldr	r1, [r3, #4]
    afcc:	4650      	mov	r0, sl
    afce:	f000 fcbd 	bl	b94c <_Balloc>
    afd2:	4643      	mov	r3, r8
    afd4:	4641      	mov	r1, r8
    afd6:	0004      	movs	r4, r0
    afd8:	691b      	ldr	r3, [r3, #16]
    afda:	310c      	adds	r1, #12
    afdc:	1c9a      	adds	r2, r3, #2
    afde:	0092      	lsls	r2, r2, #2
    afe0:	300c      	adds	r0, #12
    afe2:	f7fd f983 	bl	82ec <memcpy>
    afe6:	2201      	movs	r2, #1
    afe8:	0021      	movs	r1, r4
    afea:	4650      	mov	r0, sl
    afec:	f000 fe82 	bl	bcf4 <__lshift>
    aff0:	900c      	str	r0, [sp, #48]	; 0x30
    aff2:	e599      	b.n	ab28 <_dtoa_r+0x844>
    aff4:	2300      	movs	r3, #0
    aff6:	4699      	mov	r9, r3
    aff8:	4698      	mov	r8, r3
    affa:	e70c      	b.n	ae16 <_dtoa_r+0xb32>
    affc:	7ff00000 	.word	0x7ff00000
    b000:	40140000 	.word	0x40140000
    b004:	00000433 	.word	0x00000433
    b008:	401c0000 	.word	0x401c0000
    b00c:	fcc00000 	.word	0xfcc00000
    b010:	0000e330 	.word	0x0000e330
    b014:	0000e308 	.word	0x0000e308
    b018:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b01a:	498f      	ldr	r1, [pc, #572]	; (b258 <_dtoa_r+0xf74>)
    b01c:	3b01      	subs	r3, #1
    b01e:	00db      	lsls	r3, r3, #3
    b020:	18c9      	adds	r1, r1, r3
    b022:	6808      	ldr	r0, [r1, #0]
    b024:	6849      	ldr	r1, [r1, #4]
    b026:	9a08      	ldr	r2, [sp, #32]
    b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b02a:	f7fc f9d1 	bl	73d0 <__aeabi_dmul>
    b02e:	9014      	str	r0, [sp, #80]	; 0x50
    b030:	9115      	str	r1, [sp, #84]	; 0x54
    b032:	0039      	movs	r1, r7
    b034:	0030      	movs	r0, r6
    b036:	f7fc ff81 	bl	7f3c <__aeabi_d2iz>
    b03a:	0005      	movs	r5, r0
    b03c:	f7fc ffb2 	bl	7fa4 <__aeabi_i2d>
    b040:	0002      	movs	r2, r0
    b042:	000b      	movs	r3, r1
    b044:	0030      	movs	r0, r6
    b046:	0039      	movs	r1, r7
    b048:	f7fc fc42 	bl	78d0 <__aeabi_dsub>
    b04c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b04e:	9008      	str	r0, [sp, #32]
    b050:	9109      	str	r1, [sp, #36]	; 0x24
    b052:	990a      	ldr	r1, [sp, #40]	; 0x28
    b054:	001a      	movs	r2, r3
    b056:	468c      	mov	ip, r1
    b058:	3530      	adds	r5, #48	; 0x30
    b05a:	4462      	add	r2, ip
    b05c:	1c4c      	adds	r4, r1, #1
    b05e:	700d      	strb	r5, [r1, #0]
    b060:	4690      	mov	r8, r2
    b062:	2b01      	cmp	r3, #1
    b064:	d01b      	beq.n	b09e <_dtoa_r+0xdba>
    b066:	9808      	ldr	r0, [sp, #32]
    b068:	9909      	ldr	r1, [sp, #36]	; 0x24
    b06a:	0025      	movs	r5, r4
    b06c:	2200      	movs	r2, #0
    b06e:	4b7b      	ldr	r3, [pc, #492]	; (b25c <_dtoa_r+0xf78>)
    b070:	f7fc f9ae 	bl	73d0 <__aeabi_dmul>
    b074:	000f      	movs	r7, r1
    b076:	0006      	movs	r6, r0
    b078:	f7fc ff60 	bl	7f3c <__aeabi_d2iz>
    b07c:	0004      	movs	r4, r0
    b07e:	f7fc ff91 	bl	7fa4 <__aeabi_i2d>
    b082:	3430      	adds	r4, #48	; 0x30
    b084:	0002      	movs	r2, r0
    b086:	000b      	movs	r3, r1
    b088:	0030      	movs	r0, r6
    b08a:	0039      	movs	r1, r7
    b08c:	f7fc fc20 	bl	78d0 <__aeabi_dsub>
    b090:	702c      	strb	r4, [r5, #0]
    b092:	3501      	adds	r5, #1
    b094:	45a8      	cmp	r8, r5
    b096:	d1e9      	bne.n	b06c <_dtoa_r+0xd88>
    b098:	4644      	mov	r4, r8
    b09a:	9008      	str	r0, [sp, #32]
    b09c:	9109      	str	r1, [sp, #36]	; 0x24
    b09e:	9814      	ldr	r0, [sp, #80]	; 0x50
    b0a0:	9915      	ldr	r1, [sp, #84]	; 0x54
    b0a2:	2200      	movs	r2, #0
    b0a4:	4b6e      	ldr	r3, [pc, #440]	; (b260 <_dtoa_r+0xf7c>)
    b0a6:	f7fb fa4f 	bl	6548 <__aeabi_dadd>
    b0aa:	9a08      	ldr	r2, [sp, #32]
    b0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0ae:	f7fb f9b3 	bl	6418 <__aeabi_dcmplt>
    b0b2:	2800      	cmp	r0, #0
    b0b4:	d067      	beq.n	b186 <_dtoa_r+0xea2>
    b0b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b0b8:	1e65      	subs	r5, r4, #1
    b0ba:	9303      	str	r3, [sp, #12]
    b0bc:	782f      	ldrb	r7, [r5, #0]
    b0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b0c0:	e42e      	b.n	a920 <_dtoa_r+0x63c>
    b0c2:	4643      	mov	r3, r8
    b0c4:	46b3      	mov	fp, r6
    b0c6:	930c      	str	r3, [sp, #48]	; 0x30
    b0c8:	9e04      	ldr	r6, [sp, #16]
    b0ca:	9b06      	ldr	r3, [sp, #24]
    b0cc:	46a8      	mov	r8, r5
    b0ce:	4699      	mov	r9, r3
    b0d0:	4655      	mov	r5, sl
    b0d2:	46ba      	mov	sl, r7
    b0d4:	2e39      	cmp	r6, #57	; 0x39
    b0d6:	d04d      	beq.n	b174 <_dtoa_r+0xe90>
    b0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b0da:	3601      	adds	r6, #1
    b0dc:	4647      	mov	r7, r8
    b0de:	1c6c      	adds	r4, r5, #1
    b0e0:	702e      	strb	r6, [r5, #0]
    b0e2:	4698      	mov	r8, r3
    b0e4:	e5f5      	b.n	acd2 <_dtoa_r+0x9ee>
    b0e6:	4642      	mov	r2, r8
    b0e8:	9b06      	ldr	r3, [sp, #24]
    b0ea:	46b3      	mov	fp, r6
    b0ec:	46ba      	mov	sl, r7
    b0ee:	9e04      	ldr	r6, [sp, #16]
    b0f0:	4699      	mov	r9, r3
    b0f2:	002f      	movs	r7, r5
    b0f4:	4690      	mov	r8, r2
    b0f6:	e5d1      	b.n	ac9c <_dtoa_r+0x9b8>
    b0f8:	9b06      	ldr	r3, [sp, #24]
    b0fa:	9a07      	ldr	r2, [sp, #28]
    b0fc:	1a9b      	subs	r3, r3, r2
    b0fe:	9308      	str	r3, [sp, #32]
    b100:	2300      	movs	r3, #0
    b102:	e427      	b.n	a954 <_dtoa_r+0x670>
    b104:	2401      	movs	r4, #1
    b106:	e5c5      	b.n	ac94 <_dtoa_r+0x9b0>
    b108:	2336      	movs	r3, #54	; 0x36
    b10a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b10c:	464c      	mov	r4, r9
    b10e:	1a9b      	subs	r3, r3, r2
    b110:	9a06      	ldr	r2, [sp, #24]
    b112:	9208      	str	r2, [sp, #32]
    b114:	e41e      	b.n	a954 <_dtoa_r+0x670>
    b116:	2302      	movs	r3, #2
    b118:	9e10      	ldr	r6, [sp, #64]	; 0x40
    b11a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b11c:	4698      	mov	r8, r3
    b11e:	f7ff fa31 	bl	a584 <_dtoa_r+0x2a0>
    b122:	9b07      	ldr	r3, [sp, #28]
    b124:	2b00      	cmp	r3, #0
    b126:	d100      	bne.n	b12a <_dtoa_r+0xe46>
    b128:	e68e      	b.n	ae48 <_dtoa_r+0xb64>
    b12a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    b12c:	2c00      	cmp	r4, #0
    b12e:	dc00      	bgt.n	b132 <_dtoa_r+0xe4e>
    b130:	e712      	b.n	af58 <_dtoa_r+0xc74>
    b132:	9b03      	ldr	r3, [sp, #12]
    b134:	2200      	movs	r2, #0
    b136:	3b01      	subs	r3, #1
    b138:	9313      	str	r3, [sp, #76]	; 0x4c
    b13a:	0030      	movs	r0, r6
    b13c:	4b47      	ldr	r3, [pc, #284]	; (b25c <_dtoa_r+0xf78>)
    b13e:	0039      	movs	r1, r7
    b140:	f7fc f946 	bl	73d0 <__aeabi_dmul>
    b144:	0006      	movs	r6, r0
    b146:	4640      	mov	r0, r8
    b148:	000f      	movs	r7, r1
    b14a:	3001      	adds	r0, #1
    b14c:	f7fc ff2a 	bl	7fa4 <__aeabi_i2d>
    b150:	0032      	movs	r2, r6
    b152:	003b      	movs	r3, r7
    b154:	f7fc f93c 	bl	73d0 <__aeabi_dmul>
    b158:	2200      	movs	r2, #0
    b15a:	4b42      	ldr	r3, [pc, #264]	; (b264 <_dtoa_r+0xf80>)
    b15c:	f7fb f9f4 	bl	6548 <__aeabi_dadd>
    b160:	4a41      	ldr	r2, [pc, #260]	; (b268 <_dtoa_r+0xf84>)
    b162:	000b      	movs	r3, r1
    b164:	4694      	mov	ip, r2
    b166:	4463      	add	r3, ip
    b168:	9008      	str	r0, [sp, #32]
    b16a:	9109      	str	r1, [sp, #36]	; 0x24
    b16c:	9412      	str	r4, [sp, #72]	; 0x48
    b16e:	9309      	str	r3, [sp, #36]	; 0x24
    b170:	f7ff fa30 	bl	a5d4 <_dtoa_r+0x2f0>
    b174:	2339      	movs	r3, #57	; 0x39
    b176:	702b      	strb	r3, [r5, #0]
    b178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b17a:	4647      	mov	r7, r8
    b17c:	1c6c      	adds	r4, r5, #1
    b17e:	4698      	mov	r8, r3
    b180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b182:	2339      	movs	r3, #57	; 0x39
    b184:	e5a1      	b.n	acca <_dtoa_r+0x9e6>
    b186:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b188:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b18a:	2000      	movs	r0, #0
    b18c:	4934      	ldr	r1, [pc, #208]	; (b260 <_dtoa_r+0xf7c>)
    b18e:	f7fc fb9f 	bl	78d0 <__aeabi_dsub>
    b192:	9a08      	ldr	r2, [sp, #32]
    b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b196:	f7fb f953 	bl	6440 <__aeabi_dcmpgt>
    b19a:	2800      	cmp	r0, #0
    b19c:	d101      	bne.n	b1a2 <_dtoa_r+0xebe>
    b19e:	e6db      	b.n	af58 <_dtoa_r+0xc74>
    b1a0:	001c      	movs	r4, r3
    b1a2:	1e63      	subs	r3, r4, #1
    b1a4:	781a      	ldrb	r2, [r3, #0]
    b1a6:	2a30      	cmp	r2, #48	; 0x30
    b1a8:	d0fa      	beq.n	b1a0 <_dtoa_r+0xebc>
    b1aa:	f7ff fac8 	bl	a73e <_dtoa_r+0x45a>
    b1ae:	4643      	mov	r3, r8
    b1b0:	46b3      	mov	fp, r6
    b1b2:	930c      	str	r3, [sp, #48]	; 0x30
    b1b4:	9e04      	ldr	r6, [sp, #16]
    b1b6:	9b06      	ldr	r3, [sp, #24]
    b1b8:	46a8      	mov	r8, r5
    b1ba:	4699      	mov	r9, r3
    b1bc:	4655      	mov	r5, sl
    b1be:	46ba      	mov	sl, r7
    b1c0:	2e39      	cmp	r6, #57	; 0x39
    b1c2:	d0d7      	beq.n	b174 <_dtoa_r+0xe90>
    b1c4:	2c00      	cmp	r4, #0
    b1c6:	dd00      	ble.n	b1ca <_dtoa_r+0xee6>
    b1c8:	e6b1      	b.n	af2e <_dtoa_r+0xc4a>
    b1ca:	e6b2      	b.n	af32 <_dtoa_r+0xc4e>
    b1cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b1ce:	464d      	mov	r5, r9
    b1d0:	9203      	str	r2, [sp, #12]
    b1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1d4:	f7ff fba4 	bl	a920 <_dtoa_r+0x63c>
    b1d8:	2800      	cmp	r0, #0
    b1da:	d000      	beq.n	b1de <_dtoa_r+0xefa>
    b1dc:	e6a9      	b.n	af32 <_dtoa_r+0xc4e>
    b1de:	07f3      	lsls	r3, r6, #31
    b1e0:	d400      	bmi.n	b1e4 <_dtoa_r+0xf00>
    b1e2:	e6a6      	b.n	af32 <_dtoa_r+0xc4e>
    b1e4:	e6a0      	b.n	af28 <_dtoa_r+0xc44>
    b1e6:	2300      	movs	r3, #0
    b1e8:	4641      	mov	r1, r8
    b1ea:	220a      	movs	r2, #10
    b1ec:	4650      	mov	r0, sl
    b1ee:	f000 fbdf 	bl	b9b0 <__multadd>
    b1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b1f4:	4680      	mov	r8, r0
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	dd01      	ble.n	b1fe <_dtoa_r+0xf1a>
    b1fa:	9307      	str	r3, [sp, #28]
    b1fc:	e486      	b.n	ab0c <_dtoa_r+0x828>
    b1fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b200:	2b02      	cmp	r3, #2
    b202:	dc1f      	bgt.n	b244 <_dtoa_r+0xf60>
    b204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b206:	9307      	str	r3, [sp, #28]
    b208:	e480      	b.n	ab0c <_dtoa_r+0x828>
    b20a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b20c:	2b02      	cmp	r3, #2
    b20e:	dc19      	bgt.n	b244 <_dtoa_r+0xf60>
    b210:	4649      	mov	r1, r9
    b212:	f7fe ffbd 	bl	a190 <quorem>
    b216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b218:	3030      	adds	r0, #48	; 0x30
    b21a:	7018      	strb	r0, [r3, #0]
    b21c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b21e:	0006      	movs	r6, r0
    b220:	9307      	str	r3, [sp, #28]
    b222:	e533      	b.n	ac8c <_dtoa_r+0x9a8>
    b224:	2302      	movs	r3, #2
    b226:	4698      	mov	r8, r3
    b228:	f7ff f9ac 	bl	a584 <_dtoa_r+0x2a0>
    b22c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b22e:	9c14      	ldr	r4, [sp, #80]	; 0x50
    b230:	9303      	str	r3, [sp, #12]
    b232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b234:	001d      	movs	r5, r3
    b236:	f7ff fb73 	bl	a920 <_dtoa_r+0x63c>
    b23a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b23c:	9c14      	ldr	r4, [sp, #80]	; 0x50
    b23e:	9303      	str	r3, [sp, #12]
    b240:	f7ff fa7f 	bl	a742 <_dtoa_r+0x45e>
    b244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b246:	9307      	str	r3, [sp, #28]
    b248:	e5d6      	b.n	adf8 <_dtoa_r+0xb14>
    b24a:	2b04      	cmp	r3, #4
    b24c:	d100      	bne.n	b250 <_dtoa_r+0xf6c>
    b24e:	e43f      	b.n	aad0 <_dtoa_r+0x7ec>
    b250:	233c      	movs	r3, #60	; 0x3c
    b252:	1a18      	subs	r0, r3, r0
    b254:	e4d7      	b.n	ac06 <_dtoa_r+0x922>
    b256:	46c0      	nop			; (mov r8, r8)
    b258:	0000e330 	.word	0x0000e330
    b25c:	40240000 	.word	0x40240000
    b260:	3fe00000 	.word	0x3fe00000
    b264:	401c0000 	.word	0x401c0000
    b268:	fcc00000 	.word	0xfcc00000

0000b26c <__libc_fini_array>:
    b26c:	b570      	push	{r4, r5, r6, lr}
    b26e:	4b09      	ldr	r3, [pc, #36]	; (b294 <__libc_fini_array+0x28>)
    b270:	4c09      	ldr	r4, [pc, #36]	; (b298 <__libc_fini_array+0x2c>)
    b272:	1ae4      	subs	r4, r4, r3
    b274:	10a4      	asrs	r4, r4, #2
    b276:	d009      	beq.n	b28c <__libc_fini_array+0x20>
    b278:	4a08      	ldr	r2, [pc, #32]	; (b29c <__libc_fini_array+0x30>)
    b27a:	18a5      	adds	r5, r4, r2
    b27c:	00ad      	lsls	r5, r5, #2
    b27e:	18ed      	adds	r5, r5, r3
    b280:	682b      	ldr	r3, [r5, #0]
    b282:	3c01      	subs	r4, #1
    b284:	4798      	blx	r3
    b286:	3d04      	subs	r5, #4
    b288:	2c00      	cmp	r4, #0
    b28a:	d1f9      	bne.n	b280 <__libc_fini_array+0x14>
    b28c:	f003 f946 	bl	e51c <_fini>
    b290:	bd70      	pop	{r4, r5, r6, pc}
    b292:	46c0      	nop			; (mov r8, r8)
    b294:	0000e528 	.word	0x0000e528
    b298:	0000e52c 	.word	0x0000e52c
    b29c:	3fffffff 	.word	0x3fffffff

0000b2a0 <__locale_ctype_ptr_l>:
    b2a0:	23ec      	movs	r3, #236	; 0xec
    b2a2:	58c0      	ldr	r0, [r0, r3]
    b2a4:	4770      	bx	lr
    b2a6:	46c0      	nop			; (mov r8, r8)

0000b2a8 <_localeconv_r>:
    b2a8:	4b04      	ldr	r3, [pc, #16]	; (b2bc <_localeconv_r+0x14>)
    b2aa:	681b      	ldr	r3, [r3, #0]
    b2ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
    b2ae:	2800      	cmp	r0, #0
    b2b0:	d001      	beq.n	b2b6 <_localeconv_r+0xe>
    b2b2:	30f0      	adds	r0, #240	; 0xf0
    b2b4:	4770      	bx	lr
    b2b6:	4802      	ldr	r0, [pc, #8]	; (b2c0 <_localeconv_r+0x18>)
    b2b8:	e7fb      	b.n	b2b2 <_localeconv_r+0xa>
    b2ba:	46c0      	nop			; (mov r8, r8)
    b2bc:	20000014 	.word	0x20000014
    b2c0:	20000444 	.word	0x20000444

0000b2c4 <__retarget_lock_acquire_recursive>:
    b2c4:	4770      	bx	lr
    b2c6:	46c0      	nop			; (mov r8, r8)

0000b2c8 <__retarget_lock_release_recursive>:
    b2c8:	4770      	bx	lr
    b2ca:	46c0      	nop			; (mov r8, r8)

0000b2cc <_malloc_r>:
    b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ce:	4657      	mov	r7, sl
    b2d0:	4645      	mov	r5, r8
    b2d2:	46de      	mov	lr, fp
    b2d4:	464e      	mov	r6, r9
    b2d6:	b5e0      	push	{r5, r6, r7, lr}
    b2d8:	000d      	movs	r5, r1
    b2da:	350b      	adds	r5, #11
    b2dc:	b083      	sub	sp, #12
    b2de:	0007      	movs	r7, r0
    b2e0:	2d16      	cmp	r5, #22
    b2e2:	d800      	bhi.n	b2e6 <_malloc_r+0x1a>
    b2e4:	e09f      	b.n	b426 <_malloc_r+0x15a>
    b2e6:	2307      	movs	r3, #7
    b2e8:	439d      	bics	r5, r3
    b2ea:	d500      	bpl.n	b2ee <_malloc_r+0x22>
    b2ec:	e0c4      	b.n	b478 <_malloc_r+0x1ac>
    b2ee:	42a9      	cmp	r1, r5
    b2f0:	d900      	bls.n	b2f4 <_malloc_r+0x28>
    b2f2:	e0c1      	b.n	b478 <_malloc_r+0x1ac>
    b2f4:	f000 fb1a 	bl	b92c <__malloc_lock>
    b2f8:	23f8      	movs	r3, #248	; 0xf8
    b2fa:	33ff      	adds	r3, #255	; 0xff
    b2fc:	429d      	cmp	r5, r3
    b2fe:	d800      	bhi.n	b302 <_malloc_r+0x36>
    b300:	e28f      	b.n	b822 <_malloc_r+0x556>
    b302:	0a68      	lsrs	r0, r5, #9
    b304:	d100      	bne.n	b308 <_malloc_r+0x3c>
    b306:	e0bb      	b.n	b480 <_malloc_r+0x1b4>
    b308:	2804      	cmp	r0, #4
    b30a:	d900      	bls.n	b30e <_malloc_r+0x42>
    b30c:	e162      	b.n	b5d4 <_malloc_r+0x308>
    b30e:	2338      	movs	r3, #56	; 0x38
    b310:	4698      	mov	r8, r3
    b312:	09a8      	lsrs	r0, r5, #6
    b314:	4480      	add	r8, r0
    b316:	3039      	adds	r0, #57	; 0x39
    b318:	00c1      	lsls	r1, r0, #3
    b31a:	4ed2      	ldr	r6, [pc, #840]	; (b664 <_malloc_r+0x398>)
    b31c:	1871      	adds	r1, r6, r1
    b31e:	3908      	subs	r1, #8
    b320:	68cc      	ldr	r4, [r1, #12]
    b322:	42a1      	cmp	r1, r4
    b324:	d019      	beq.n	b35a <_malloc_r+0x8e>
    b326:	2303      	movs	r3, #3
    b328:	6862      	ldr	r2, [r4, #4]
    b32a:	439a      	bics	r2, r3
    b32c:	0013      	movs	r3, r2
    b32e:	1b52      	subs	r2, r2, r5
    b330:	2a0f      	cmp	r2, #15
    b332:	dd00      	ble.n	b336 <_malloc_r+0x6a>
    b334:	e0aa      	b.n	b48c <_malloc_r+0x1c0>
    b336:	2a00      	cmp	r2, #0
    b338:	db00      	blt.n	b33c <_malloc_r+0x70>
    b33a:	e088      	b.n	b44e <_malloc_r+0x182>
    b33c:	2303      	movs	r3, #3
    b33e:	469c      	mov	ip, r3
    b340:	e008      	b.n	b354 <_malloc_r+0x88>
    b342:	4662      	mov	r2, ip
    b344:	6863      	ldr	r3, [r4, #4]
    b346:	4393      	bics	r3, r2
    b348:	1b5a      	subs	r2, r3, r5
    b34a:	2a0f      	cmp	r2, #15
    b34c:	dd00      	ble.n	b350 <_malloc_r+0x84>
    b34e:	e09d      	b.n	b48c <_malloc_r+0x1c0>
    b350:	2a00      	cmp	r2, #0
    b352:	da7c      	bge.n	b44e <_malloc_r+0x182>
    b354:	68e4      	ldr	r4, [r4, #12]
    b356:	42a1      	cmp	r1, r4
    b358:	d1f3      	bne.n	b342 <_malloc_r+0x76>
    b35a:	0032      	movs	r2, r6
    b35c:	6934      	ldr	r4, [r6, #16]
    b35e:	3208      	adds	r2, #8
    b360:	4294      	cmp	r4, r2
    b362:	d100      	bne.n	b366 <_malloc_r+0x9a>
    b364:	e190      	b.n	b688 <_malloc_r+0x3bc>
    b366:	2303      	movs	r3, #3
    b368:	6861      	ldr	r1, [r4, #4]
    b36a:	4399      	bics	r1, r3
    b36c:	4689      	mov	r9, r1
    b36e:	1b49      	subs	r1, r1, r5
    b370:	290f      	cmp	r1, #15
    b372:	dd00      	ble.n	b376 <_malloc_r+0xaa>
    b374:	e162      	b.n	b63c <_malloc_r+0x370>
    b376:	6172      	str	r2, [r6, #20]
    b378:	6132      	str	r2, [r6, #16]
    b37a:	2900      	cmp	r1, #0
    b37c:	db00      	blt.n	b380 <_malloc_r+0xb4>
    b37e:	e087      	b.n	b490 <_malloc_r+0x1c4>
    b380:	4ab9      	ldr	r2, [pc, #740]	; (b668 <_malloc_r+0x39c>)
    b382:	464b      	mov	r3, r9
    b384:	4591      	cmp	r9, r2
    b386:	d900      	bls.n	b38a <_malloc_r+0xbe>
    b388:	e130      	b.n	b5ec <_malloc_r+0x320>
    b38a:	08db      	lsrs	r3, r3, #3
    b38c:	3aff      	subs	r2, #255	; 0xff
    b38e:	1099      	asrs	r1, r3, #2
    b390:	3aff      	subs	r2, #255	; 0xff
    b392:	408a      	lsls	r2, r1
    b394:	00db      	lsls	r3, r3, #3
    b396:	6871      	ldr	r1, [r6, #4]
    b398:	199b      	adds	r3, r3, r6
    b39a:	430a      	orrs	r2, r1
    b39c:	6899      	ldr	r1, [r3, #8]
    b39e:	6072      	str	r2, [r6, #4]
    b3a0:	60e3      	str	r3, [r4, #12]
    b3a2:	60a1      	str	r1, [r4, #8]
    b3a4:	609c      	str	r4, [r3, #8]
    b3a6:	0013      	movs	r3, r2
    b3a8:	60cc      	str	r4, [r1, #12]
    b3aa:	2101      	movs	r1, #1
    b3ac:	1082      	asrs	r2, r0, #2
    b3ae:	4091      	lsls	r1, r2
    b3b0:	4299      	cmp	r1, r3
    b3b2:	d86f      	bhi.n	b494 <_malloc_r+0x1c8>
    b3b4:	420b      	tst	r3, r1
    b3b6:	d105      	bne.n	b3c4 <_malloc_r+0xf8>
    b3b8:	2203      	movs	r2, #3
    b3ba:	4390      	bics	r0, r2
    b3bc:	0049      	lsls	r1, r1, #1
    b3be:	3004      	adds	r0, #4
    b3c0:	420b      	tst	r3, r1
    b3c2:	d0fb      	beq.n	b3bc <_malloc_r+0xf0>
    b3c4:	2303      	movs	r3, #3
    b3c6:	4698      	mov	r8, r3
    b3c8:	00c3      	lsls	r3, r0, #3
    b3ca:	4699      	mov	r9, r3
    b3cc:	44b1      	add	r9, r6
    b3ce:	46cc      	mov	ip, r9
    b3d0:	4682      	mov	sl, r0
    b3d2:	4663      	mov	r3, ip
    b3d4:	68dc      	ldr	r4, [r3, #12]
    b3d6:	45a4      	cmp	ip, r4
    b3d8:	d107      	bne.n	b3ea <_malloc_r+0x11e>
    b3da:	e157      	b.n	b68c <_malloc_r+0x3c0>
    b3dc:	2a00      	cmp	r2, #0
    b3de:	db00      	blt.n	b3e2 <_malloc_r+0x116>
    b3e0:	e166      	b.n	b6b0 <_malloc_r+0x3e4>
    b3e2:	68e4      	ldr	r4, [r4, #12]
    b3e4:	45a4      	cmp	ip, r4
    b3e6:	d100      	bne.n	b3ea <_malloc_r+0x11e>
    b3e8:	e150      	b.n	b68c <_malloc_r+0x3c0>
    b3ea:	4642      	mov	r2, r8
    b3ec:	6863      	ldr	r3, [r4, #4]
    b3ee:	4393      	bics	r3, r2
    b3f0:	1b5a      	subs	r2, r3, r5
    b3f2:	2a0f      	cmp	r2, #15
    b3f4:	ddf2      	ble.n	b3dc <_malloc_r+0x110>
    b3f6:	2001      	movs	r0, #1
    b3f8:	4680      	mov	r8, r0
    b3fa:	1961      	adds	r1, r4, r5
    b3fc:	4305      	orrs	r5, r0
    b3fe:	6065      	str	r5, [r4, #4]
    b400:	68a0      	ldr	r0, [r4, #8]
    b402:	68e5      	ldr	r5, [r4, #12]
    b404:	3608      	adds	r6, #8
    b406:	60c5      	str	r5, [r0, #12]
    b408:	60a8      	str	r0, [r5, #8]
    b40a:	4640      	mov	r0, r8
    b40c:	60f1      	str	r1, [r6, #12]
    b40e:	60b1      	str	r1, [r6, #8]
    b410:	4310      	orrs	r0, r2
    b412:	6048      	str	r0, [r1, #4]
    b414:	60ce      	str	r6, [r1, #12]
    b416:	608e      	str	r6, [r1, #8]
    b418:	0038      	movs	r0, r7
    b41a:	50e2      	str	r2, [r4, r3]
    b41c:	f000 fa8e 	bl	b93c <__malloc_unlock>
    b420:	0020      	movs	r0, r4
    b422:	3008      	adds	r0, #8
    b424:	e021      	b.n	b46a <_malloc_r+0x19e>
    b426:	2910      	cmp	r1, #16
    b428:	d826      	bhi.n	b478 <_malloc_r+0x1ac>
    b42a:	0038      	movs	r0, r7
    b42c:	f000 fa7e 	bl	b92c <__malloc_lock>
    b430:	2510      	movs	r5, #16
    b432:	2318      	movs	r3, #24
    b434:	2002      	movs	r0, #2
    b436:	4e8b      	ldr	r6, [pc, #556]	; (b664 <_malloc_r+0x398>)
    b438:	18f3      	adds	r3, r6, r3
    b43a:	001a      	movs	r2, r3
    b43c:	685c      	ldr	r4, [r3, #4]
    b43e:	3a08      	subs	r2, #8
    b440:	4294      	cmp	r4, r2
    b442:	d100      	bne.n	b446 <_malloc_r+0x17a>
    b444:	e12e      	b.n	b6a4 <_malloc_r+0x3d8>
    b446:	2303      	movs	r3, #3
    b448:	6862      	ldr	r2, [r4, #4]
    b44a:	439a      	bics	r2, r3
    b44c:	0013      	movs	r3, r2
    b44e:	68e2      	ldr	r2, [r4, #12]
    b450:	68a1      	ldr	r1, [r4, #8]
    b452:	60ca      	str	r2, [r1, #12]
    b454:	6091      	str	r1, [r2, #8]
    b456:	2201      	movs	r2, #1
    b458:	18e3      	adds	r3, r4, r3
    b45a:	6859      	ldr	r1, [r3, #4]
    b45c:	0038      	movs	r0, r7
    b45e:	430a      	orrs	r2, r1
    b460:	605a      	str	r2, [r3, #4]
    b462:	f000 fa6b 	bl	b93c <__malloc_unlock>
    b466:	0020      	movs	r0, r4
    b468:	3008      	adds	r0, #8
    b46a:	b003      	add	sp, #12
    b46c:	bc3c      	pop	{r2, r3, r4, r5}
    b46e:	4690      	mov	r8, r2
    b470:	4699      	mov	r9, r3
    b472:	46a2      	mov	sl, r4
    b474:	46ab      	mov	fp, r5
    b476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b478:	230c      	movs	r3, #12
    b47a:	2000      	movs	r0, #0
    b47c:	603b      	str	r3, [r7, #0]
    b47e:	e7f4      	b.n	b46a <_malloc_r+0x19e>
    b480:	2180      	movs	r1, #128	; 0x80
    b482:	233f      	movs	r3, #63	; 0x3f
    b484:	2040      	movs	r0, #64	; 0x40
    b486:	0089      	lsls	r1, r1, #2
    b488:	4698      	mov	r8, r3
    b48a:	e746      	b.n	b31a <_malloc_r+0x4e>
    b48c:	4640      	mov	r0, r8
    b48e:	e764      	b.n	b35a <_malloc_r+0x8e>
    b490:	464b      	mov	r3, r9
    b492:	e7e0      	b.n	b456 <_malloc_r+0x18a>
    b494:	2303      	movs	r3, #3
    b496:	68b4      	ldr	r4, [r6, #8]
    b498:	6862      	ldr	r2, [r4, #4]
    b49a:	439a      	bics	r2, r3
    b49c:	4690      	mov	r8, r2
    b49e:	42aa      	cmp	r2, r5
    b4a0:	d303      	bcc.n	b4aa <_malloc_r+0x1de>
    b4a2:	1b53      	subs	r3, r2, r5
    b4a4:	2b0f      	cmp	r3, #15
    b4a6:	dd00      	ble.n	b4aa <_malloc_r+0x1de>
    b4a8:	e086      	b.n	b5b8 <_malloc_r+0x2ec>
    b4aa:	0023      	movs	r3, r4
    b4ac:	4443      	add	r3, r8
    b4ae:	4a6f      	ldr	r2, [pc, #444]	; (b66c <_malloc_r+0x3a0>)
    b4b0:	9301      	str	r3, [sp, #4]
    b4b2:	4b6f      	ldr	r3, [pc, #444]	; (b670 <_malloc_r+0x3a4>)
    b4b4:	4693      	mov	fp, r2
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	6812      	ldr	r2, [r2, #0]
    b4ba:	18eb      	adds	r3, r5, r3
    b4bc:	3201      	adds	r2, #1
    b4be:	d100      	bne.n	b4c2 <_malloc_r+0x1f6>
    b4c0:	e168      	b.n	b794 <_malloc_r+0x4c8>
    b4c2:	4a6c      	ldr	r2, [pc, #432]	; (b674 <_malloc_r+0x3a8>)
    b4c4:	4694      	mov	ip, r2
    b4c6:	4463      	add	r3, ip
    b4c8:	0b1b      	lsrs	r3, r3, #12
    b4ca:	031b      	lsls	r3, r3, #12
    b4cc:	9300      	str	r3, [sp, #0]
    b4ce:	9900      	ldr	r1, [sp, #0]
    b4d0:	0038      	movs	r0, r7
    b4d2:	f000 fd83 	bl	bfdc <_sbrk_r>
    b4d6:	0003      	movs	r3, r0
    b4d8:	4681      	mov	r9, r0
    b4da:	3301      	adds	r3, #1
    b4dc:	d061      	beq.n	b5a2 <_malloc_r+0x2d6>
    b4de:	9b01      	ldr	r3, [sp, #4]
    b4e0:	4283      	cmp	r3, r0
    b4e2:	d900      	bls.n	b4e6 <_malloc_r+0x21a>
    b4e4:	e0ff      	b.n	b6e6 <_malloc_r+0x41a>
    b4e6:	4b64      	ldr	r3, [pc, #400]	; (b678 <_malloc_r+0x3ac>)
    b4e8:	9a00      	ldr	r2, [sp, #0]
    b4ea:	469a      	mov	sl, r3
    b4ec:	681b      	ldr	r3, [r3, #0]
    b4ee:	469c      	mov	ip, r3
    b4f0:	4653      	mov	r3, sl
    b4f2:	4462      	add	r2, ip
    b4f4:	601a      	str	r2, [r3, #0]
    b4f6:	9b01      	ldr	r3, [sp, #4]
    b4f8:	0011      	movs	r1, r2
    b4fa:	4283      	cmp	r3, r0
    b4fc:	d100      	bne.n	b500 <_malloc_r+0x234>
    b4fe:	e155      	b.n	b7ac <_malloc_r+0x4e0>
    b500:	465b      	mov	r3, fp
    b502:	681b      	ldr	r3, [r3, #0]
    b504:	3301      	adds	r3, #1
    b506:	d100      	bne.n	b50a <_malloc_r+0x23e>
    b508:	e16c      	b.n	b7e4 <_malloc_r+0x518>
    b50a:	464b      	mov	r3, r9
    b50c:	9a01      	ldr	r2, [sp, #4]
    b50e:	1a9b      	subs	r3, r3, r2
    b510:	1859      	adds	r1, r3, r1
    b512:	4653      	mov	r3, sl
    b514:	6019      	str	r1, [r3, #0]
    b516:	2307      	movs	r3, #7
    b518:	464a      	mov	r2, r9
    b51a:	4013      	ands	r3, r2
    b51c:	d100      	bne.n	b520 <_malloc_r+0x254>
    b51e:	e124      	b.n	b76a <_malloc_r+0x49e>
    b520:	2108      	movs	r1, #8
    b522:	4689      	mov	r9, r1
    b524:	4955      	ldr	r1, [pc, #340]	; (b67c <_malloc_r+0x3b0>)
    b526:	1ad2      	subs	r2, r2, r3
    b528:	4491      	add	r9, r2
    b52a:	1acb      	subs	r3, r1, r3
    b52c:	9a00      	ldr	r2, [sp, #0]
    b52e:	0038      	movs	r0, r7
    b530:	444a      	add	r2, r9
    b532:	0511      	lsls	r1, r2, #20
    b534:	0d09      	lsrs	r1, r1, #20
    b536:	1a5b      	subs	r3, r3, r1
    b538:	0019      	movs	r1, r3
    b53a:	469b      	mov	fp, r3
    b53c:	f000 fd4e 	bl	bfdc <_sbrk_r>
    b540:	1c43      	adds	r3, r0, #1
    b542:	d100      	bne.n	b546 <_malloc_r+0x27a>
    b544:	e142      	b.n	b7cc <_malloc_r+0x500>
    b546:	464b      	mov	r3, r9
    b548:	1ac0      	subs	r0, r0, r3
    b54a:	2301      	movs	r3, #1
    b54c:	4458      	add	r0, fp
    b54e:	4318      	orrs	r0, r3
    b550:	4653      	mov	r3, sl
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	445b      	add	r3, fp
    b556:	0019      	movs	r1, r3
    b558:	4653      	mov	r3, sl
    b55a:	6019      	str	r1, [r3, #0]
    b55c:	464b      	mov	r3, r9
    b55e:	60b3      	str	r3, [r6, #8]
    b560:	6058      	str	r0, [r3, #4]
    b562:	42b4      	cmp	r4, r6
    b564:	d013      	beq.n	b58e <_malloc_r+0x2c2>
    b566:	4643      	mov	r3, r8
    b568:	2b0f      	cmp	r3, #15
    b56a:	d800      	bhi.n	b56e <_malloc_r+0x2a2>
    b56c:	e0e8      	b.n	b740 <_malloc_r+0x474>
    b56e:	4643      	mov	r3, r8
    b570:	2207      	movs	r2, #7
    b572:	6860      	ldr	r0, [r4, #4]
    b574:	3b0c      	subs	r3, #12
    b576:	4393      	bics	r3, r2
    b578:	3a06      	subs	r2, #6
    b57a:	4002      	ands	r2, r0
    b57c:	2005      	movs	r0, #5
    b57e:	431a      	orrs	r2, r3
    b580:	6062      	str	r2, [r4, #4]
    b582:	18e2      	adds	r2, r4, r3
    b584:	6050      	str	r0, [r2, #4]
    b586:	6090      	str	r0, [r2, #8]
    b588:	2b0f      	cmp	r3, #15
    b58a:	d900      	bls.n	b58e <_malloc_r+0x2c2>
    b58c:	e122      	b.n	b7d4 <_malloc_r+0x508>
    b58e:	4b3c      	ldr	r3, [pc, #240]	; (b680 <_malloc_r+0x3b4>)
    b590:	681a      	ldr	r2, [r3, #0]
    b592:	4291      	cmp	r1, r2
    b594:	d900      	bls.n	b598 <_malloc_r+0x2cc>
    b596:	6019      	str	r1, [r3, #0]
    b598:	4b3a      	ldr	r3, [pc, #232]	; (b684 <_malloc_r+0x3b8>)
    b59a:	681a      	ldr	r2, [r3, #0]
    b59c:	4291      	cmp	r1, r2
    b59e:	d900      	bls.n	b5a2 <_malloc_r+0x2d6>
    b5a0:	6019      	str	r1, [r3, #0]
    b5a2:	2303      	movs	r3, #3
    b5a4:	68b4      	ldr	r4, [r6, #8]
    b5a6:	6862      	ldr	r2, [r4, #4]
    b5a8:	439a      	bics	r2, r3
    b5aa:	1b53      	subs	r3, r2, r5
    b5ac:	4295      	cmp	r5, r2
    b5ae:	d900      	bls.n	b5b2 <_malloc_r+0x2e6>
    b5b0:	e0c9      	b.n	b746 <_malloc_r+0x47a>
    b5b2:	2b0f      	cmp	r3, #15
    b5b4:	dc00      	bgt.n	b5b8 <_malloc_r+0x2ec>
    b5b6:	e0c6      	b.n	b746 <_malloc_r+0x47a>
    b5b8:	2201      	movs	r2, #1
    b5ba:	0029      	movs	r1, r5
    b5bc:	4313      	orrs	r3, r2
    b5be:	4311      	orrs	r1, r2
    b5c0:	1965      	adds	r5, r4, r5
    b5c2:	6061      	str	r1, [r4, #4]
    b5c4:	0038      	movs	r0, r7
    b5c6:	60b5      	str	r5, [r6, #8]
    b5c8:	606b      	str	r3, [r5, #4]
    b5ca:	f000 f9b7 	bl	b93c <__malloc_unlock>
    b5ce:	0020      	movs	r0, r4
    b5d0:	3008      	adds	r0, #8
    b5d2:	e74a      	b.n	b46a <_malloc_r+0x19e>
    b5d4:	2814      	cmp	r0, #20
    b5d6:	d97a      	bls.n	b6ce <_malloc_r+0x402>
    b5d8:	2854      	cmp	r0, #84	; 0x54
    b5da:	d900      	bls.n	b5de <_malloc_r+0x312>
    b5dc:	e0ba      	b.n	b754 <_malloc_r+0x488>
    b5de:	236e      	movs	r3, #110	; 0x6e
    b5e0:	4698      	mov	r8, r3
    b5e2:	0b28      	lsrs	r0, r5, #12
    b5e4:	4480      	add	r8, r0
    b5e6:	306f      	adds	r0, #111	; 0x6f
    b5e8:	00c1      	lsls	r1, r0, #3
    b5ea:	e696      	b.n	b31a <_malloc_r+0x4e>
    b5ec:	0a5a      	lsrs	r2, r3, #9
    b5ee:	2a04      	cmp	r2, #4
    b5f0:	d973      	bls.n	b6da <_malloc_r+0x40e>
    b5f2:	2a14      	cmp	r2, #20
    b5f4:	d900      	bls.n	b5f8 <_malloc_r+0x32c>
    b5f6:	e0d0      	b.n	b79a <_malloc_r+0x4ce>
    b5f8:	0011      	movs	r1, r2
    b5fa:	325c      	adds	r2, #92	; 0x5c
    b5fc:	315b      	adds	r1, #91	; 0x5b
    b5fe:	00d2      	lsls	r2, r2, #3
    b600:	2308      	movs	r3, #8
    b602:	425b      	negs	r3, r3
    b604:	469c      	mov	ip, r3
    b606:	18b2      	adds	r2, r6, r2
    b608:	4494      	add	ip, r2
    b60a:	4663      	mov	r3, ip
    b60c:	689a      	ldr	r2, [r3, #8]
    b60e:	2303      	movs	r3, #3
    b610:	4698      	mov	r8, r3
    b612:	4594      	cmp	ip, r2
    b614:	d100      	bne.n	b618 <_malloc_r+0x34c>
    b616:	e0ab      	b.n	b770 <_malloc_r+0x4a4>
    b618:	4643      	mov	r3, r8
    b61a:	6851      	ldr	r1, [r2, #4]
    b61c:	4399      	bics	r1, r3
    b61e:	4589      	cmp	r9, r1
    b620:	d300      	bcc.n	b624 <_malloc_r+0x358>
    b622:	e095      	b.n	b750 <_malloc_r+0x484>
    b624:	6892      	ldr	r2, [r2, #8]
    b626:	4594      	cmp	ip, r2
    b628:	d1f6      	bne.n	b618 <_malloc_r+0x34c>
    b62a:	4663      	mov	r3, ip
    b62c:	68da      	ldr	r2, [r3, #12]
    b62e:	6873      	ldr	r3, [r6, #4]
    b630:	4661      	mov	r1, ip
    b632:	60e2      	str	r2, [r4, #12]
    b634:	60a1      	str	r1, [r4, #8]
    b636:	6094      	str	r4, [r2, #8]
    b638:	60cc      	str	r4, [r1, #12]
    b63a:	e6b6      	b.n	b3aa <_malloc_r+0xde>
    b63c:	2301      	movs	r3, #1
    b63e:	1960      	adds	r0, r4, r5
    b640:	431d      	orrs	r5, r3
    b642:	6065      	str	r5, [r4, #4]
    b644:	6170      	str	r0, [r6, #20]
    b646:	6130      	str	r0, [r6, #16]
    b648:	60c2      	str	r2, [r0, #12]
    b64a:	6082      	str	r2, [r0, #8]
    b64c:	001a      	movs	r2, r3
    b64e:	464b      	mov	r3, r9
    b650:	430a      	orrs	r2, r1
    b652:	6042      	str	r2, [r0, #4]
    b654:	0038      	movs	r0, r7
    b656:	50e1      	str	r1, [r4, r3]
    b658:	f000 f970 	bl	b93c <__malloc_unlock>
    b65c:	0020      	movs	r0, r4
    b65e:	3008      	adds	r0, #8
    b660:	e703      	b.n	b46a <_malloc_r+0x19e>
    b662:	46c0      	nop			; (mov r8, r8)
    b664:	200005b0 	.word	0x200005b0
    b668:	000001ff 	.word	0x000001ff
    b66c:	200009b8 	.word	0x200009b8
    b670:	20000c68 	.word	0x20000c68
    b674:	0000100f 	.word	0x0000100f
    b678:	20000c38 	.word	0x20000c38
    b67c:	00001008 	.word	0x00001008
    b680:	20000c60 	.word	0x20000c60
    b684:	20000c64 	.word	0x20000c64
    b688:	6873      	ldr	r3, [r6, #4]
    b68a:	e68e      	b.n	b3aa <_malloc_r+0xde>
    b68c:	2308      	movs	r3, #8
    b68e:	469b      	mov	fp, r3
    b690:	3b07      	subs	r3, #7
    b692:	44dc      	add	ip, fp
    b694:	469b      	mov	fp, r3
    b696:	44da      	add	sl, fp
    b698:	4643      	mov	r3, r8
    b69a:	4652      	mov	r2, sl
    b69c:	4213      	tst	r3, r2
    b69e:	d000      	beq.n	b6a2 <_malloc_r+0x3d6>
    b6a0:	e697      	b.n	b3d2 <_malloc_r+0x106>
    b6a2:	e037      	b.n	b714 <_malloc_r+0x448>
    b6a4:	68dc      	ldr	r4, [r3, #12]
    b6a6:	3002      	adds	r0, #2
    b6a8:	42a3      	cmp	r3, r4
    b6aa:	d100      	bne.n	b6ae <_malloc_r+0x3e2>
    b6ac:	e655      	b.n	b35a <_malloc_r+0x8e>
    b6ae:	e6ca      	b.n	b446 <_malloc_r+0x17a>
    b6b0:	2201      	movs	r2, #1
    b6b2:	18e3      	adds	r3, r4, r3
    b6b4:	6859      	ldr	r1, [r3, #4]
    b6b6:	0038      	movs	r0, r7
    b6b8:	430a      	orrs	r2, r1
    b6ba:	605a      	str	r2, [r3, #4]
    b6bc:	68e3      	ldr	r3, [r4, #12]
    b6be:	68a2      	ldr	r2, [r4, #8]
    b6c0:	60d3      	str	r3, [r2, #12]
    b6c2:	609a      	str	r2, [r3, #8]
    b6c4:	f000 f93a 	bl	b93c <__malloc_unlock>
    b6c8:	0020      	movs	r0, r4
    b6ca:	3008      	adds	r0, #8
    b6cc:	e6cd      	b.n	b46a <_malloc_r+0x19e>
    b6ce:	235b      	movs	r3, #91	; 0x5b
    b6d0:	4698      	mov	r8, r3
    b6d2:	4480      	add	r8, r0
    b6d4:	305c      	adds	r0, #92	; 0x5c
    b6d6:	00c1      	lsls	r1, r0, #3
    b6d8:	e61f      	b.n	b31a <_malloc_r+0x4e>
    b6da:	099a      	lsrs	r2, r3, #6
    b6dc:	0011      	movs	r1, r2
    b6de:	3239      	adds	r2, #57	; 0x39
    b6e0:	3138      	adds	r1, #56	; 0x38
    b6e2:	00d2      	lsls	r2, r2, #3
    b6e4:	e78c      	b.n	b600 <_malloc_r+0x334>
    b6e6:	42b4      	cmp	r4, r6
    b6e8:	d000      	beq.n	b6ec <_malloc_r+0x420>
    b6ea:	e75a      	b.n	b5a2 <_malloc_r+0x2d6>
    b6ec:	4b4f      	ldr	r3, [pc, #316]	; (b82c <_malloc_r+0x560>)
    b6ee:	9a00      	ldr	r2, [sp, #0]
    b6f0:	469a      	mov	sl, r3
    b6f2:	681b      	ldr	r3, [r3, #0]
    b6f4:	469c      	mov	ip, r3
    b6f6:	4653      	mov	r3, sl
    b6f8:	4462      	add	r2, ip
    b6fa:	0011      	movs	r1, r2
    b6fc:	601a      	str	r2, [r3, #0]
    b6fe:	e6ff      	b.n	b500 <_malloc_r+0x234>
    b700:	2308      	movs	r3, #8
    b702:	425b      	negs	r3, r3
    b704:	469c      	mov	ip, r3
    b706:	44e1      	add	r9, ip
    b708:	464b      	mov	r3, r9
    b70a:	689b      	ldr	r3, [r3, #8]
    b70c:	3801      	subs	r0, #1
    b70e:	4599      	cmp	r9, r3
    b710:	d000      	beq.n	b714 <_malloc_r+0x448>
    b712:	e084      	b.n	b81e <_malloc_r+0x552>
    b714:	4643      	mov	r3, r8
    b716:	4203      	tst	r3, r0
    b718:	d1f2      	bne.n	b700 <_malloc_r+0x434>
    b71a:	6873      	ldr	r3, [r6, #4]
    b71c:	438b      	bics	r3, r1
    b71e:	6073      	str	r3, [r6, #4]
    b720:	0049      	lsls	r1, r1, #1
    b722:	4299      	cmp	r1, r3
    b724:	d900      	bls.n	b728 <_malloc_r+0x45c>
    b726:	e6b5      	b.n	b494 <_malloc_r+0x1c8>
    b728:	2900      	cmp	r1, #0
    b72a:	d100      	bne.n	b72e <_malloc_r+0x462>
    b72c:	e6b2      	b.n	b494 <_malloc_r+0x1c8>
    b72e:	4650      	mov	r0, sl
    b730:	420b      	tst	r3, r1
    b732:	d000      	beq.n	b736 <_malloc_r+0x46a>
    b734:	e648      	b.n	b3c8 <_malloc_r+0xfc>
    b736:	0049      	lsls	r1, r1, #1
    b738:	3004      	adds	r0, #4
    b73a:	420b      	tst	r3, r1
    b73c:	d0fb      	beq.n	b736 <_malloc_r+0x46a>
    b73e:	e643      	b.n	b3c8 <_malloc_r+0xfc>
    b740:	2301      	movs	r3, #1
    b742:	464a      	mov	r2, r9
    b744:	6053      	str	r3, [r2, #4]
    b746:	0038      	movs	r0, r7
    b748:	f000 f8f8 	bl	b93c <__malloc_unlock>
    b74c:	2000      	movs	r0, #0
    b74e:	e68c      	b.n	b46a <_malloc_r+0x19e>
    b750:	4694      	mov	ip, r2
    b752:	e76a      	b.n	b62a <_malloc_r+0x35e>
    b754:	23aa      	movs	r3, #170	; 0xaa
    b756:	005b      	lsls	r3, r3, #1
    b758:	4298      	cmp	r0, r3
    b75a:	d811      	bhi.n	b780 <_malloc_r+0x4b4>
    b75c:	3bdd      	subs	r3, #221	; 0xdd
    b75e:	4698      	mov	r8, r3
    b760:	0be8      	lsrs	r0, r5, #15
    b762:	4480      	add	r8, r0
    b764:	3078      	adds	r0, #120	; 0x78
    b766:	00c1      	lsls	r1, r0, #3
    b768:	e5d7      	b.n	b31a <_malloc_r+0x4e>
    b76a:	2380      	movs	r3, #128	; 0x80
    b76c:	015b      	lsls	r3, r3, #5
    b76e:	e6dd      	b.n	b52c <_malloc_r+0x260>
    b770:	1089      	asrs	r1, r1, #2
    b772:	3b02      	subs	r3, #2
    b774:	408b      	lsls	r3, r1
    b776:	6872      	ldr	r2, [r6, #4]
    b778:	4313      	orrs	r3, r2
    b77a:	6073      	str	r3, [r6, #4]
    b77c:	4662      	mov	r2, ip
    b77e:	e757      	b.n	b630 <_malloc_r+0x364>
    b780:	4b2b      	ldr	r3, [pc, #172]	; (b830 <_malloc_r+0x564>)
    b782:	4298      	cmp	r0, r3
    b784:	d81c      	bhi.n	b7c0 <_malloc_r+0x4f4>
    b786:	237c      	movs	r3, #124	; 0x7c
    b788:	4698      	mov	r8, r3
    b78a:	0ca8      	lsrs	r0, r5, #18
    b78c:	4480      	add	r8, r0
    b78e:	307d      	adds	r0, #125	; 0x7d
    b790:	00c1      	lsls	r1, r0, #3
    b792:	e5c2      	b.n	b31a <_malloc_r+0x4e>
    b794:	3310      	adds	r3, #16
    b796:	9300      	str	r3, [sp, #0]
    b798:	e699      	b.n	b4ce <_malloc_r+0x202>
    b79a:	2a54      	cmp	r2, #84	; 0x54
    b79c:	d826      	bhi.n	b7ec <_malloc_r+0x520>
    b79e:	464b      	mov	r3, r9
    b7a0:	0b1a      	lsrs	r2, r3, #12
    b7a2:	0011      	movs	r1, r2
    b7a4:	326f      	adds	r2, #111	; 0x6f
    b7a6:	316e      	adds	r1, #110	; 0x6e
    b7a8:	00d2      	lsls	r2, r2, #3
    b7aa:	e729      	b.n	b600 <_malloc_r+0x334>
    b7ac:	051b      	lsls	r3, r3, #20
    b7ae:	d000      	beq.n	b7b2 <_malloc_r+0x4e6>
    b7b0:	e6a6      	b.n	b500 <_malloc_r+0x234>
    b7b2:	2001      	movs	r0, #1
    b7b4:	9b00      	ldr	r3, [sp, #0]
    b7b6:	68b2      	ldr	r2, [r6, #8]
    b7b8:	4443      	add	r3, r8
    b7ba:	4303      	orrs	r3, r0
    b7bc:	6053      	str	r3, [r2, #4]
    b7be:	e6e6      	b.n	b58e <_malloc_r+0x2c2>
    b7c0:	21fe      	movs	r1, #254	; 0xfe
    b7c2:	237e      	movs	r3, #126	; 0x7e
    b7c4:	207f      	movs	r0, #127	; 0x7f
    b7c6:	0089      	lsls	r1, r1, #2
    b7c8:	4698      	mov	r8, r3
    b7ca:	e5a6      	b.n	b31a <_malloc_r+0x4e>
    b7cc:	2300      	movs	r3, #0
    b7ce:	2001      	movs	r0, #1
    b7d0:	469b      	mov	fp, r3
    b7d2:	e6bd      	b.n	b550 <_malloc_r+0x284>
    b7d4:	0021      	movs	r1, r4
    b7d6:	0038      	movs	r0, r7
    b7d8:	3108      	adds	r1, #8
    b7da:	f000 fe13 	bl	c404 <_free_r>
    b7de:	4653      	mov	r3, sl
    b7e0:	6819      	ldr	r1, [r3, #0]
    b7e2:	e6d4      	b.n	b58e <_malloc_r+0x2c2>
    b7e4:	465b      	mov	r3, fp
    b7e6:	464a      	mov	r2, r9
    b7e8:	601a      	str	r2, [r3, #0]
    b7ea:	e694      	b.n	b516 <_malloc_r+0x24a>
    b7ec:	21aa      	movs	r1, #170	; 0xaa
    b7ee:	0049      	lsls	r1, r1, #1
    b7f0:	428a      	cmp	r2, r1
    b7f2:	d806      	bhi.n	b802 <_malloc_r+0x536>
    b7f4:	464b      	mov	r3, r9
    b7f6:	0bda      	lsrs	r2, r3, #15
    b7f8:	0011      	movs	r1, r2
    b7fa:	3278      	adds	r2, #120	; 0x78
    b7fc:	3177      	adds	r1, #119	; 0x77
    b7fe:	00d2      	lsls	r2, r2, #3
    b800:	e6fe      	b.n	b600 <_malloc_r+0x334>
    b802:	490b      	ldr	r1, [pc, #44]	; (b830 <_malloc_r+0x564>)
    b804:	428a      	cmp	r2, r1
    b806:	d806      	bhi.n	b816 <_malloc_r+0x54a>
    b808:	464b      	mov	r3, r9
    b80a:	0c9a      	lsrs	r2, r3, #18
    b80c:	0011      	movs	r1, r2
    b80e:	327d      	adds	r2, #125	; 0x7d
    b810:	317c      	adds	r1, #124	; 0x7c
    b812:	00d2      	lsls	r2, r2, #3
    b814:	e6f4      	b.n	b600 <_malloc_r+0x334>
    b816:	22fe      	movs	r2, #254	; 0xfe
    b818:	217e      	movs	r1, #126	; 0x7e
    b81a:	0092      	lsls	r2, r2, #2
    b81c:	e6f0      	b.n	b600 <_malloc_r+0x334>
    b81e:	6873      	ldr	r3, [r6, #4]
    b820:	e77e      	b.n	b720 <_malloc_r+0x454>
    b822:	002b      	movs	r3, r5
    b824:	08e8      	lsrs	r0, r5, #3
    b826:	3308      	adds	r3, #8
    b828:	e605      	b.n	b436 <_malloc_r+0x16a>
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	20000c38 	.word	0x20000c38
    b830:	00000554 	.word	0x00000554

0000b834 <__ascii_mbtowc>:
    b834:	b082      	sub	sp, #8
    b836:	2900      	cmp	r1, #0
    b838:	d00a      	beq.n	b850 <__ascii_mbtowc+0x1c>
    b83a:	2a00      	cmp	r2, #0
    b83c:	d00b      	beq.n	b856 <__ascii_mbtowc+0x22>
    b83e:	2b00      	cmp	r3, #0
    b840:	d00b      	beq.n	b85a <__ascii_mbtowc+0x26>
    b842:	7813      	ldrb	r3, [r2, #0]
    b844:	600b      	str	r3, [r1, #0]
    b846:	7810      	ldrb	r0, [r2, #0]
    b848:	1e43      	subs	r3, r0, #1
    b84a:	4198      	sbcs	r0, r3
    b84c:	b002      	add	sp, #8
    b84e:	4770      	bx	lr
    b850:	a901      	add	r1, sp, #4
    b852:	2a00      	cmp	r2, #0
    b854:	d1f3      	bne.n	b83e <__ascii_mbtowc+0xa>
    b856:	2000      	movs	r0, #0
    b858:	e7f8      	b.n	b84c <__ascii_mbtowc+0x18>
    b85a:	2002      	movs	r0, #2
    b85c:	4240      	negs	r0, r0
    b85e:	e7f5      	b.n	b84c <__ascii_mbtowc+0x18>

0000b860 <memchr>:
    b860:	b570      	push	{r4, r5, r6, lr}
    b862:	b2cd      	uxtb	r5, r1
    b864:	0783      	lsls	r3, r0, #30
    b866:	d034      	beq.n	b8d2 <memchr+0x72>
    b868:	1e54      	subs	r4, r2, #1
    b86a:	2a00      	cmp	r2, #0
    b86c:	d01b      	beq.n	b8a6 <memchr+0x46>
    b86e:	7803      	ldrb	r3, [r0, #0]
    b870:	42ab      	cmp	r3, r5
    b872:	d019      	beq.n	b8a8 <memchr+0x48>
    b874:	2203      	movs	r2, #3
    b876:	e004      	b.n	b882 <memchr+0x22>
    b878:	3c01      	subs	r4, #1
    b87a:	d314      	bcc.n	b8a6 <memchr+0x46>
    b87c:	7803      	ldrb	r3, [r0, #0]
    b87e:	42ab      	cmp	r3, r5
    b880:	d012      	beq.n	b8a8 <memchr+0x48>
    b882:	3001      	adds	r0, #1
    b884:	4210      	tst	r0, r2
    b886:	d1f7      	bne.n	b878 <memchr+0x18>
    b888:	2c03      	cmp	r4, #3
    b88a:	d80e      	bhi.n	b8aa <memchr+0x4a>
    b88c:	2c00      	cmp	r4, #0
    b88e:	d00a      	beq.n	b8a6 <memchr+0x46>
    b890:	7803      	ldrb	r3, [r0, #0]
    b892:	42ab      	cmp	r3, r5
    b894:	d008      	beq.n	b8a8 <memchr+0x48>
    b896:	1904      	adds	r4, r0, r4
    b898:	e002      	b.n	b8a0 <memchr+0x40>
    b89a:	7803      	ldrb	r3, [r0, #0]
    b89c:	42ab      	cmp	r3, r5
    b89e:	d003      	beq.n	b8a8 <memchr+0x48>
    b8a0:	3001      	adds	r0, #1
    b8a2:	4284      	cmp	r4, r0
    b8a4:	d1f9      	bne.n	b89a <memchr+0x3a>
    b8a6:	2000      	movs	r0, #0
    b8a8:	bd70      	pop	{r4, r5, r6, pc}
    b8aa:	22ff      	movs	r2, #255	; 0xff
    b8ac:	060b      	lsls	r3, r1, #24
    b8ae:	0c1b      	lsrs	r3, r3, #16
    b8b0:	4011      	ands	r1, r2
    b8b2:	4319      	orrs	r1, r3
    b8b4:	040b      	lsls	r3, r1, #16
    b8b6:	4e08      	ldr	r6, [pc, #32]	; (b8d8 <memchr+0x78>)
    b8b8:	4319      	orrs	r1, r3
    b8ba:	6803      	ldr	r3, [r0, #0]
    b8bc:	4a07      	ldr	r2, [pc, #28]	; (b8dc <memchr+0x7c>)
    b8be:	404b      	eors	r3, r1
    b8c0:	189a      	adds	r2, r3, r2
    b8c2:	439a      	bics	r2, r3
    b8c4:	4232      	tst	r2, r6
    b8c6:	d1e3      	bne.n	b890 <memchr+0x30>
    b8c8:	3c04      	subs	r4, #4
    b8ca:	3004      	adds	r0, #4
    b8cc:	2c03      	cmp	r4, #3
    b8ce:	d8f4      	bhi.n	b8ba <memchr+0x5a>
    b8d0:	e7dc      	b.n	b88c <memchr+0x2c>
    b8d2:	0014      	movs	r4, r2
    b8d4:	e7d8      	b.n	b888 <memchr+0x28>
    b8d6:	46c0      	nop			; (mov r8, r8)
    b8d8:	80808080 	.word	0x80808080
    b8dc:	fefefeff 	.word	0xfefefeff

0000b8e0 <memcmp>:
    b8e0:	b510      	push	{r4, lr}
    b8e2:	2a03      	cmp	r2, #3
    b8e4:	d91c      	bls.n	b920 <memcmp+0x40>
    b8e6:	0003      	movs	r3, r0
    b8e8:	430b      	orrs	r3, r1
    b8ea:	079b      	lsls	r3, r3, #30
    b8ec:	d00f      	beq.n	b90e <memcmp+0x2e>
    b8ee:	7803      	ldrb	r3, [r0, #0]
    b8f0:	780c      	ldrb	r4, [r1, #0]
    b8f2:	1882      	adds	r2, r0, r2
    b8f4:	42a3      	cmp	r3, r4
    b8f6:	d004      	beq.n	b902 <memcmp+0x22>
    b8f8:	e015      	b.n	b926 <memcmp+0x46>
    b8fa:	7803      	ldrb	r3, [r0, #0]
    b8fc:	780c      	ldrb	r4, [r1, #0]
    b8fe:	42a3      	cmp	r3, r4
    b900:	d111      	bne.n	b926 <memcmp+0x46>
    b902:	3001      	adds	r0, #1
    b904:	3101      	adds	r1, #1
    b906:	4282      	cmp	r2, r0
    b908:	d1f7      	bne.n	b8fa <memcmp+0x1a>
    b90a:	2000      	movs	r0, #0
    b90c:	bd10      	pop	{r4, pc}
    b90e:	6803      	ldr	r3, [r0, #0]
    b910:	680c      	ldr	r4, [r1, #0]
    b912:	42a3      	cmp	r3, r4
    b914:	d1eb      	bne.n	b8ee <memcmp+0xe>
    b916:	3a04      	subs	r2, #4
    b918:	3004      	adds	r0, #4
    b91a:	3104      	adds	r1, #4
    b91c:	2a03      	cmp	r2, #3
    b91e:	d8f6      	bhi.n	b90e <memcmp+0x2e>
    b920:	2a00      	cmp	r2, #0
    b922:	d1e4      	bne.n	b8ee <memcmp+0xe>
    b924:	e7f1      	b.n	b90a <memcmp+0x2a>
    b926:	1b18      	subs	r0, r3, r4
    b928:	e7f0      	b.n	b90c <memcmp+0x2c>
    b92a:	46c0      	nop			; (mov r8, r8)

0000b92c <__malloc_lock>:
    b92c:	b510      	push	{r4, lr}
    b92e:	4802      	ldr	r0, [pc, #8]	; (b938 <__malloc_lock+0xc>)
    b930:	f7ff fcc8 	bl	b2c4 <__retarget_lock_acquire_recursive>
    b934:	bd10      	pop	{r4, pc}
    b936:	46c0      	nop			; (mov r8, r8)
    b938:	20000d04 	.word	0x20000d04

0000b93c <__malloc_unlock>:
    b93c:	b510      	push	{r4, lr}
    b93e:	4802      	ldr	r0, [pc, #8]	; (b948 <__malloc_unlock+0xc>)
    b940:	f7ff fcc2 	bl	b2c8 <__retarget_lock_release_recursive>
    b944:	bd10      	pop	{r4, pc}
    b946:	46c0      	nop			; (mov r8, r8)
    b948:	20000d04 	.word	0x20000d04

0000b94c <_Balloc>:
    b94c:	b570      	push	{r4, r5, r6, lr}
    b94e:	0004      	movs	r4, r0
    b950:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    b952:	000d      	movs	r5, r1
    b954:	2800      	cmp	r0, #0
    b956:	d00a      	beq.n	b96e <_Balloc+0x22>
    b958:	00ab      	lsls	r3, r5, #2
    b95a:	18c3      	adds	r3, r0, r3
    b95c:	6818      	ldr	r0, [r3, #0]
    b95e:	2800      	cmp	r0, #0
    b960:	d00f      	beq.n	b982 <_Balloc+0x36>
    b962:	6802      	ldr	r2, [r0, #0]
    b964:	601a      	str	r2, [r3, #0]
    b966:	2300      	movs	r3, #0
    b968:	6103      	str	r3, [r0, #16]
    b96a:	60c3      	str	r3, [r0, #12]
    b96c:	bd70      	pop	{r4, r5, r6, pc}
    b96e:	2221      	movs	r2, #33	; 0x21
    b970:	2104      	movs	r1, #4
    b972:	0020      	movs	r0, r4
    b974:	f000 fcca 	bl	c30c <_calloc_r>
    b978:	64e0      	str	r0, [r4, #76]	; 0x4c
    b97a:	2800      	cmp	r0, #0
    b97c:	d1ec      	bne.n	b958 <_Balloc+0xc>
    b97e:	2000      	movs	r0, #0
    b980:	e7f4      	b.n	b96c <_Balloc+0x20>
    b982:	2601      	movs	r6, #1
    b984:	40ae      	lsls	r6, r5
    b986:	1d72      	adds	r2, r6, #5
    b988:	0092      	lsls	r2, r2, #2
    b98a:	2101      	movs	r1, #1
    b98c:	0020      	movs	r0, r4
    b98e:	f000 fcbd 	bl	c30c <_calloc_r>
    b992:	2800      	cmp	r0, #0
    b994:	d0f3      	beq.n	b97e <_Balloc+0x32>
    b996:	6045      	str	r5, [r0, #4]
    b998:	6086      	str	r6, [r0, #8]
    b99a:	e7e4      	b.n	b966 <_Balloc+0x1a>

0000b99c <_Bfree>:
    b99c:	2900      	cmp	r1, #0
    b99e:	d006      	beq.n	b9ae <_Bfree+0x12>
    b9a0:	684b      	ldr	r3, [r1, #4]
    b9a2:	009a      	lsls	r2, r3, #2
    b9a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    b9a6:	189b      	adds	r3, r3, r2
    b9a8:	681a      	ldr	r2, [r3, #0]
    b9aa:	600a      	str	r2, [r1, #0]
    b9ac:	6019      	str	r1, [r3, #0]
    b9ae:	4770      	bx	lr

0000b9b0 <__multadd>:
    b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9b2:	46ce      	mov	lr, r9
    b9b4:	4647      	mov	r7, r8
    b9b6:	4681      	mov	r9, r0
    b9b8:	0008      	movs	r0, r1
    b9ba:	b580      	push	{r7, lr}
    b9bc:	000d      	movs	r5, r1
    b9be:	690c      	ldr	r4, [r1, #16]
    b9c0:	001f      	movs	r7, r3
    b9c2:	2100      	movs	r1, #0
    b9c4:	3014      	adds	r0, #20
    b9c6:	6803      	ldr	r3, [r0, #0]
    b9c8:	3101      	adds	r1, #1
    b9ca:	041e      	lsls	r6, r3, #16
    b9cc:	0c36      	lsrs	r6, r6, #16
    b9ce:	4356      	muls	r6, r2
    b9d0:	0c1b      	lsrs	r3, r3, #16
    b9d2:	4353      	muls	r3, r2
    b9d4:	19f6      	adds	r6, r6, r7
    b9d6:	0c37      	lsrs	r7, r6, #16
    b9d8:	19db      	adds	r3, r3, r7
    b9da:	0436      	lsls	r6, r6, #16
    b9dc:	0c1f      	lsrs	r7, r3, #16
    b9de:	0c36      	lsrs	r6, r6, #16
    b9e0:	041b      	lsls	r3, r3, #16
    b9e2:	199b      	adds	r3, r3, r6
    b9e4:	c008      	stmia	r0!, {r3}
    b9e6:	428c      	cmp	r4, r1
    b9e8:	dced      	bgt.n	b9c6 <__multadd+0x16>
    b9ea:	2f00      	cmp	r7, #0
    b9ec:	d008      	beq.n	ba00 <__multadd+0x50>
    b9ee:	68ab      	ldr	r3, [r5, #8]
    b9f0:	429c      	cmp	r4, r3
    b9f2:	da0a      	bge.n	ba0a <__multadd+0x5a>
    b9f4:	1d23      	adds	r3, r4, #4
    b9f6:	009b      	lsls	r3, r3, #2
    b9f8:	18eb      	adds	r3, r5, r3
    b9fa:	3401      	adds	r4, #1
    b9fc:	605f      	str	r7, [r3, #4]
    b9fe:	612c      	str	r4, [r5, #16]
    ba00:	0028      	movs	r0, r5
    ba02:	bc0c      	pop	{r2, r3}
    ba04:	4690      	mov	r8, r2
    ba06:	4699      	mov	r9, r3
    ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba0a:	686b      	ldr	r3, [r5, #4]
    ba0c:	4648      	mov	r0, r9
    ba0e:	1c59      	adds	r1, r3, #1
    ba10:	f7ff ff9c 	bl	b94c <_Balloc>
    ba14:	0029      	movs	r1, r5
    ba16:	692b      	ldr	r3, [r5, #16]
    ba18:	4680      	mov	r8, r0
    ba1a:	1c9a      	adds	r2, r3, #2
    ba1c:	0092      	lsls	r2, r2, #2
    ba1e:	310c      	adds	r1, #12
    ba20:	300c      	adds	r0, #12
    ba22:	f7fc fc63 	bl	82ec <memcpy>
    ba26:	686b      	ldr	r3, [r5, #4]
    ba28:	009a      	lsls	r2, r3, #2
    ba2a:	464b      	mov	r3, r9
    ba2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ba2e:	189b      	adds	r3, r3, r2
    ba30:	681a      	ldr	r2, [r3, #0]
    ba32:	602a      	str	r2, [r5, #0]
    ba34:	601d      	str	r5, [r3, #0]
    ba36:	4645      	mov	r5, r8
    ba38:	e7dc      	b.n	b9f4 <__multadd+0x44>
    ba3a:	46c0      	nop			; (mov r8, r8)

0000ba3c <__hi0bits>:
    ba3c:	0003      	movs	r3, r0
    ba3e:	0c02      	lsrs	r2, r0, #16
    ba40:	2000      	movs	r0, #0
    ba42:	2a00      	cmp	r2, #0
    ba44:	d101      	bne.n	ba4a <__hi0bits+0xe>
    ba46:	041b      	lsls	r3, r3, #16
    ba48:	3010      	adds	r0, #16
    ba4a:	0e1a      	lsrs	r2, r3, #24
    ba4c:	d101      	bne.n	ba52 <__hi0bits+0x16>
    ba4e:	3008      	adds	r0, #8
    ba50:	021b      	lsls	r3, r3, #8
    ba52:	0f1a      	lsrs	r2, r3, #28
    ba54:	d101      	bne.n	ba5a <__hi0bits+0x1e>
    ba56:	3004      	adds	r0, #4
    ba58:	011b      	lsls	r3, r3, #4
    ba5a:	0f9a      	lsrs	r2, r3, #30
    ba5c:	d101      	bne.n	ba62 <__hi0bits+0x26>
    ba5e:	3002      	adds	r0, #2
    ba60:	009b      	lsls	r3, r3, #2
    ba62:	2b00      	cmp	r3, #0
    ba64:	db03      	blt.n	ba6e <__hi0bits+0x32>
    ba66:	3001      	adds	r0, #1
    ba68:	005b      	lsls	r3, r3, #1
    ba6a:	d400      	bmi.n	ba6e <__hi0bits+0x32>
    ba6c:	2020      	movs	r0, #32
    ba6e:	4770      	bx	lr

0000ba70 <__lo0bits>:
    ba70:	6803      	ldr	r3, [r0, #0]
    ba72:	075a      	lsls	r2, r3, #29
    ba74:	d009      	beq.n	ba8a <__lo0bits+0x1a>
    ba76:	2200      	movs	r2, #0
    ba78:	07d9      	lsls	r1, r3, #31
    ba7a:	d404      	bmi.n	ba86 <__lo0bits+0x16>
    ba7c:	079a      	lsls	r2, r3, #30
    ba7e:	d420      	bmi.n	bac2 <__lo0bits+0x52>
    ba80:	2202      	movs	r2, #2
    ba82:	089b      	lsrs	r3, r3, #2
    ba84:	6003      	str	r3, [r0, #0]
    ba86:	0010      	movs	r0, r2
    ba88:	4770      	bx	lr
    ba8a:	0419      	lsls	r1, r3, #16
    ba8c:	2200      	movs	r2, #0
    ba8e:	2900      	cmp	r1, #0
    ba90:	d101      	bne.n	ba96 <__lo0bits+0x26>
    ba92:	0c1b      	lsrs	r3, r3, #16
    ba94:	3210      	adds	r2, #16
    ba96:	21ff      	movs	r1, #255	; 0xff
    ba98:	4219      	tst	r1, r3
    ba9a:	d101      	bne.n	baa0 <__lo0bits+0x30>
    ba9c:	3208      	adds	r2, #8
    ba9e:	0a1b      	lsrs	r3, r3, #8
    baa0:	0719      	lsls	r1, r3, #28
    baa2:	d101      	bne.n	baa8 <__lo0bits+0x38>
    baa4:	3204      	adds	r2, #4
    baa6:	091b      	lsrs	r3, r3, #4
    baa8:	0799      	lsls	r1, r3, #30
    baaa:	d101      	bne.n	bab0 <__lo0bits+0x40>
    baac:	3202      	adds	r2, #2
    baae:	089b      	lsrs	r3, r3, #2
    bab0:	07d9      	lsls	r1, r3, #31
    bab2:	d404      	bmi.n	babe <__lo0bits+0x4e>
    bab4:	085b      	lsrs	r3, r3, #1
    bab6:	d101      	bne.n	babc <__lo0bits+0x4c>
    bab8:	2220      	movs	r2, #32
    baba:	e7e4      	b.n	ba86 <__lo0bits+0x16>
    babc:	3201      	adds	r2, #1
    babe:	6003      	str	r3, [r0, #0]
    bac0:	e7e1      	b.n	ba86 <__lo0bits+0x16>
    bac2:	085b      	lsrs	r3, r3, #1
    bac4:	6003      	str	r3, [r0, #0]
    bac6:	2201      	movs	r2, #1
    bac8:	e7dd      	b.n	ba86 <__lo0bits+0x16>
    baca:	46c0      	nop			; (mov r8, r8)

0000bacc <__i2b>:
    bacc:	b510      	push	{r4, lr}
    bace:	000c      	movs	r4, r1
    bad0:	2101      	movs	r1, #1
    bad2:	f7ff ff3b 	bl	b94c <_Balloc>
    bad6:	2301      	movs	r3, #1
    bad8:	6144      	str	r4, [r0, #20]
    bada:	6103      	str	r3, [r0, #16]
    badc:	bd10      	pop	{r4, pc}
    bade:	46c0      	nop			; (mov r8, r8)

0000bae0 <__multiply>:
    bae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bae2:	4657      	mov	r7, sl
    bae4:	464e      	mov	r6, r9
    bae6:	4645      	mov	r5, r8
    bae8:	46de      	mov	lr, fp
    baea:	b5e0      	push	{r5, r6, r7, lr}
    baec:	6914      	ldr	r4, [r2, #16]
    baee:	690e      	ldr	r6, [r1, #16]
    baf0:	b085      	sub	sp, #20
    baf2:	000f      	movs	r7, r1
    baf4:	0015      	movs	r5, r2
    baf6:	42a6      	cmp	r6, r4
    baf8:	da04      	bge.n	bb04 <__multiply+0x24>
    bafa:	0033      	movs	r3, r6
    bafc:	0017      	movs	r7, r2
    bafe:	0026      	movs	r6, r4
    bb00:	000d      	movs	r5, r1
    bb02:	001c      	movs	r4, r3
    bb04:	1933      	adds	r3, r6, r4
    bb06:	4698      	mov	r8, r3
    bb08:	68bb      	ldr	r3, [r7, #8]
    bb0a:	6879      	ldr	r1, [r7, #4]
    bb0c:	4598      	cmp	r8, r3
    bb0e:	dd00      	ble.n	bb12 <__multiply+0x32>
    bb10:	3101      	adds	r1, #1
    bb12:	f7ff ff1b 	bl	b94c <_Balloc>
    bb16:	2214      	movs	r2, #20
    bb18:	0003      	movs	r3, r0
    bb1a:	4694      	mov	ip, r2
    bb1c:	4463      	add	r3, ip
    bb1e:	469b      	mov	fp, r3
    bb20:	4643      	mov	r3, r8
    bb22:	009b      	lsls	r3, r3, #2
    bb24:	445b      	add	r3, fp
    bb26:	0019      	movs	r1, r3
    bb28:	9302      	str	r3, [sp, #8]
    bb2a:	9003      	str	r0, [sp, #12]
    bb2c:	465b      	mov	r3, fp
    bb2e:	2200      	movs	r2, #0
    bb30:	458b      	cmp	fp, r1
    bb32:	d203      	bcs.n	bb3c <__multiply+0x5c>
    bb34:	9902      	ldr	r1, [sp, #8]
    bb36:	c304      	stmia	r3!, {r2}
    bb38:	4299      	cmp	r1, r3
    bb3a:	d8fc      	bhi.n	bb36 <__multiply+0x56>
    bb3c:	2314      	movs	r3, #20
    bb3e:	00a4      	lsls	r4, r4, #2
    bb40:	469a      	mov	sl, r3
    bb42:	3714      	adds	r7, #20
    bb44:	0023      	movs	r3, r4
    bb46:	46bc      	mov	ip, r7
    bb48:	44aa      	add	sl, r5
    bb4a:	00b6      	lsls	r6, r6, #2
    bb4c:	4453      	add	r3, sl
    bb4e:	9700      	str	r7, [sp, #0]
    bb50:	44b4      	add	ip, r6
    bb52:	9301      	str	r3, [sp, #4]
    bb54:	459a      	cmp	sl, r3
    bb56:	d24f      	bcs.n	bbf8 <__multiply+0x118>
    bb58:	4653      	mov	r3, sl
    bb5a:	681b      	ldr	r3, [r3, #0]
    bb5c:	041e      	lsls	r6, r3, #16
    bb5e:	0c36      	lsrs	r6, r6, #16
    bb60:	d020      	beq.n	bba4 <__multiply+0xc4>
    bb62:	465c      	mov	r4, fp
    bb64:	2700      	movs	r7, #0
    bb66:	9d00      	ldr	r5, [sp, #0]
    bb68:	0021      	movs	r1, r4
    bb6a:	cc08      	ldmia	r4!, {r3}
    bb6c:	cd04      	ldmia	r5!, {r2}
    bb6e:	4699      	mov	r9, r3
    bb70:	4648      	mov	r0, r9
    bb72:	0413      	lsls	r3, r2, #16
    bb74:	0c1b      	lsrs	r3, r3, #16
    bb76:	4373      	muls	r3, r6
    bb78:	0400      	lsls	r0, r0, #16
    bb7a:	0c00      	lsrs	r0, r0, #16
    bb7c:	181b      	adds	r3, r3, r0
    bb7e:	19d8      	adds	r0, r3, r7
    bb80:	0c13      	lsrs	r3, r2, #16
    bb82:	464a      	mov	r2, r9
    bb84:	4373      	muls	r3, r6
    bb86:	0c12      	lsrs	r2, r2, #16
    bb88:	189b      	adds	r3, r3, r2
    bb8a:	0c02      	lsrs	r2, r0, #16
    bb8c:	189b      	adds	r3, r3, r2
    bb8e:	0402      	lsls	r2, r0, #16
    bb90:	0c1f      	lsrs	r7, r3, #16
    bb92:	0c12      	lsrs	r2, r2, #16
    bb94:	041b      	lsls	r3, r3, #16
    bb96:	4313      	orrs	r3, r2
    bb98:	600b      	str	r3, [r1, #0]
    bb9a:	45ac      	cmp	ip, r5
    bb9c:	d8e4      	bhi.n	bb68 <__multiply+0x88>
    bb9e:	4653      	mov	r3, sl
    bba0:	6027      	str	r7, [r4, #0]
    bba2:	681b      	ldr	r3, [r3, #0]
    bba4:	0c1e      	lsrs	r6, r3, #16
    bba6:	d020      	beq.n	bbea <__multiply+0x10a>
    bba8:	465b      	mov	r3, fp
    bbaa:	2100      	movs	r1, #0
    bbac:	681b      	ldr	r3, [r3, #0]
    bbae:	465c      	mov	r4, fp
    bbb0:	0018      	movs	r0, r3
    bbb2:	000f      	movs	r7, r1
    bbb4:	4662      	mov	r2, ip
    bbb6:	9d00      	ldr	r5, [sp, #0]
    bbb8:	8829      	ldrh	r1, [r5, #0]
    bbba:	0c00      	lsrs	r0, r0, #16
    bbbc:	4371      	muls	r1, r6
    bbbe:	1809      	adds	r1, r1, r0
    bbc0:	19c9      	adds	r1, r1, r7
    bbc2:	041b      	lsls	r3, r3, #16
    bbc4:	0408      	lsls	r0, r1, #16
    bbc6:	0c1b      	lsrs	r3, r3, #16
    bbc8:	4303      	orrs	r3, r0
    bbca:	6023      	str	r3, [r4, #0]
    bbcc:	cd08      	ldmia	r5!, {r3}
    bbce:	6860      	ldr	r0, [r4, #4]
    bbd0:	0c1b      	lsrs	r3, r3, #16
    bbd2:	4373      	muls	r3, r6
    bbd4:	0407      	lsls	r7, r0, #16
    bbd6:	0c3f      	lsrs	r7, r7, #16
    bbd8:	19db      	adds	r3, r3, r7
    bbda:	0c09      	lsrs	r1, r1, #16
    bbdc:	185b      	adds	r3, r3, r1
    bbde:	0c1f      	lsrs	r7, r3, #16
    bbe0:	3404      	adds	r4, #4
    bbe2:	42aa      	cmp	r2, r5
    bbe4:	d8e8      	bhi.n	bbb8 <__multiply+0xd8>
    bbe6:	4694      	mov	ip, r2
    bbe8:	6023      	str	r3, [r4, #0]
    bbea:	2304      	movs	r3, #4
    bbec:	4699      	mov	r9, r3
    bbee:	9b01      	ldr	r3, [sp, #4]
    bbf0:	44ca      	add	sl, r9
    bbf2:	44cb      	add	fp, r9
    bbf4:	4553      	cmp	r3, sl
    bbf6:	d8af      	bhi.n	bb58 <__multiply+0x78>
    bbf8:	4643      	mov	r3, r8
    bbfa:	2b00      	cmp	r3, #0
    bbfc:	dd0e      	ble.n	bc1c <__multiply+0x13c>
    bbfe:	9b02      	ldr	r3, [sp, #8]
    bc00:	3b04      	subs	r3, #4
    bc02:	681a      	ldr	r2, [r3, #0]
    bc04:	2a00      	cmp	r2, #0
    bc06:	d109      	bne.n	bc1c <__multiply+0x13c>
    bc08:	4642      	mov	r2, r8
    bc0a:	e003      	b.n	bc14 <__multiply+0x134>
    bc0c:	3b04      	subs	r3, #4
    bc0e:	6819      	ldr	r1, [r3, #0]
    bc10:	2900      	cmp	r1, #0
    bc12:	d102      	bne.n	bc1a <__multiply+0x13a>
    bc14:	3a01      	subs	r2, #1
    bc16:	2a00      	cmp	r2, #0
    bc18:	d1f8      	bne.n	bc0c <__multiply+0x12c>
    bc1a:	4690      	mov	r8, r2
    bc1c:	9b03      	ldr	r3, [sp, #12]
    bc1e:	4642      	mov	r2, r8
    bc20:	0018      	movs	r0, r3
    bc22:	611a      	str	r2, [r3, #16]
    bc24:	b005      	add	sp, #20
    bc26:	bc3c      	pop	{r2, r3, r4, r5}
    bc28:	4690      	mov	r8, r2
    bc2a:	4699      	mov	r9, r3
    bc2c:	46a2      	mov	sl, r4
    bc2e:	46ab      	mov	fp, r5
    bc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc32:	46c0      	nop			; (mov r8, r8)

0000bc34 <__pow5mult>:
    bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc36:	4647      	mov	r7, r8
    bc38:	46ce      	mov	lr, r9
    bc3a:	2303      	movs	r3, #3
    bc3c:	b580      	push	{r7, lr}
    bc3e:	4680      	mov	r8, r0
    bc40:	000f      	movs	r7, r1
    bc42:	0014      	movs	r4, r2
    bc44:	4013      	ands	r3, r2
    bc46:	d13a      	bne.n	bcbe <__pow5mult+0x8a>
    bc48:	10a4      	asrs	r4, r4, #2
    bc4a:	003e      	movs	r6, r7
    bc4c:	2c00      	cmp	r4, #0
    bc4e:	d025      	beq.n	bc9c <__pow5mult+0x68>
    bc50:	4643      	mov	r3, r8
    bc52:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    bc54:	2d00      	cmp	r5, #0
    bc56:	d03b      	beq.n	bcd0 <__pow5mult+0x9c>
    bc58:	003e      	movs	r6, r7
    bc5a:	2300      	movs	r3, #0
    bc5c:	2701      	movs	r7, #1
    bc5e:	4699      	mov	r9, r3
    bc60:	4227      	tst	r7, r4
    bc62:	d107      	bne.n	bc74 <__pow5mult+0x40>
    bc64:	1064      	asrs	r4, r4, #1
    bc66:	d019      	beq.n	bc9c <__pow5mult+0x68>
    bc68:	6828      	ldr	r0, [r5, #0]
    bc6a:	2800      	cmp	r0, #0
    bc6c:	d01b      	beq.n	bca6 <__pow5mult+0x72>
    bc6e:	0005      	movs	r5, r0
    bc70:	4227      	tst	r7, r4
    bc72:	d0f7      	beq.n	bc64 <__pow5mult+0x30>
    bc74:	002a      	movs	r2, r5
    bc76:	0031      	movs	r1, r6
    bc78:	4640      	mov	r0, r8
    bc7a:	f7ff ff31 	bl	bae0 <__multiply>
    bc7e:	2e00      	cmp	r6, #0
    bc80:	d01b      	beq.n	bcba <__pow5mult+0x86>
    bc82:	4642      	mov	r2, r8
    bc84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    bc86:	6873      	ldr	r3, [r6, #4]
    bc88:	4694      	mov	ip, r2
    bc8a:	009b      	lsls	r3, r3, #2
    bc8c:	4463      	add	r3, ip
    bc8e:	681a      	ldr	r2, [r3, #0]
    bc90:	1064      	asrs	r4, r4, #1
    bc92:	6032      	str	r2, [r6, #0]
    bc94:	601e      	str	r6, [r3, #0]
    bc96:	0006      	movs	r6, r0
    bc98:	2c00      	cmp	r4, #0
    bc9a:	d1e5      	bne.n	bc68 <__pow5mult+0x34>
    bc9c:	0030      	movs	r0, r6
    bc9e:	bc0c      	pop	{r2, r3}
    bca0:	4690      	mov	r8, r2
    bca2:	4699      	mov	r9, r3
    bca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bca6:	002a      	movs	r2, r5
    bca8:	0029      	movs	r1, r5
    bcaa:	4640      	mov	r0, r8
    bcac:	f7ff ff18 	bl	bae0 <__multiply>
    bcb0:	464b      	mov	r3, r9
    bcb2:	6028      	str	r0, [r5, #0]
    bcb4:	6003      	str	r3, [r0, #0]
    bcb6:	0005      	movs	r5, r0
    bcb8:	e7da      	b.n	bc70 <__pow5mult+0x3c>
    bcba:	0006      	movs	r6, r0
    bcbc:	e7d2      	b.n	bc64 <__pow5mult+0x30>
    bcbe:	4a0b      	ldr	r2, [pc, #44]	; (bcec <__pow5mult+0xb8>)
    bcc0:	3b01      	subs	r3, #1
    bcc2:	009b      	lsls	r3, r3, #2
    bcc4:	589a      	ldr	r2, [r3, r2]
    bcc6:	2300      	movs	r3, #0
    bcc8:	f7ff fe72 	bl	b9b0 <__multadd>
    bccc:	0007      	movs	r7, r0
    bcce:	e7bb      	b.n	bc48 <__pow5mult+0x14>
    bcd0:	2101      	movs	r1, #1
    bcd2:	4640      	mov	r0, r8
    bcd4:	f7ff fe3a 	bl	b94c <_Balloc>
    bcd8:	4b05      	ldr	r3, [pc, #20]	; (bcf0 <__pow5mult+0xbc>)
    bcda:	0005      	movs	r5, r0
    bcdc:	6143      	str	r3, [r0, #20]
    bcde:	2301      	movs	r3, #1
    bce0:	6103      	str	r3, [r0, #16]
    bce2:	4643      	mov	r3, r8
    bce4:	6498      	str	r0, [r3, #72]	; 0x48
    bce6:	2300      	movs	r3, #0
    bce8:	6003      	str	r3, [r0, #0]
    bcea:	e7b5      	b.n	bc58 <__pow5mult+0x24>
    bcec:	0000e3f8 	.word	0x0000e3f8
    bcf0:	00000271 	.word	0x00000271

0000bcf4 <__lshift>:
    bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcf6:	464e      	mov	r6, r9
    bcf8:	4645      	mov	r5, r8
    bcfa:	46de      	mov	lr, fp
    bcfc:	4657      	mov	r7, sl
    bcfe:	b5e0      	push	{r5, r6, r7, lr}
    bd00:	000e      	movs	r6, r1
    bd02:	6933      	ldr	r3, [r6, #16]
    bd04:	1154      	asrs	r4, r2, #5
    bd06:	4698      	mov	r8, r3
    bd08:	44a0      	add	r8, r4
    bd0a:	4643      	mov	r3, r8
    bd0c:	1c5d      	adds	r5, r3, #1
    bd0e:	68b3      	ldr	r3, [r6, #8]
    bd10:	4683      	mov	fp, r0
    bd12:	4691      	mov	r9, r2
    bd14:	6849      	ldr	r1, [r1, #4]
    bd16:	429d      	cmp	r5, r3
    bd18:	dd03      	ble.n	bd22 <__lshift+0x2e>
    bd1a:	3101      	adds	r1, #1
    bd1c:	005b      	lsls	r3, r3, #1
    bd1e:	429d      	cmp	r5, r3
    bd20:	dcfb      	bgt.n	bd1a <__lshift+0x26>
    bd22:	4658      	mov	r0, fp
    bd24:	f7ff fe12 	bl	b94c <_Balloc>
    bd28:	0003      	movs	r3, r0
    bd2a:	4684      	mov	ip, r0
    bd2c:	3314      	adds	r3, #20
    bd2e:	2c00      	cmp	r4, #0
    bd30:	dd06      	ble.n	bd40 <__lshift+0x4c>
    bd32:	2100      	movs	r1, #0
    bd34:	00a4      	lsls	r4, r4, #2
    bd36:	001a      	movs	r2, r3
    bd38:	191b      	adds	r3, r3, r4
    bd3a:	c202      	stmia	r2!, {r1}
    bd3c:	4293      	cmp	r3, r2
    bd3e:	d1fc      	bne.n	bd3a <__lshift+0x46>
    bd40:	6932      	ldr	r2, [r6, #16]
    bd42:	4648      	mov	r0, r9
    bd44:	0097      	lsls	r7, r2, #2
    bd46:	0031      	movs	r1, r6
    bd48:	221f      	movs	r2, #31
    bd4a:	3114      	adds	r1, #20
    bd4c:	4010      	ands	r0, r2
    bd4e:	19cf      	adds	r7, r1, r7
    bd50:	4681      	mov	r9, r0
    bd52:	2800      	cmp	r0, #0
    bd54:	d025      	beq.n	bda2 <__lshift+0xae>
    bd56:	2220      	movs	r2, #32
    bd58:	1a12      	subs	r2, r2, r0
    bd5a:	4692      	mov	sl, r2
    bd5c:	2200      	movs	r2, #0
    bd5e:	4648      	mov	r0, r9
    bd60:	680c      	ldr	r4, [r1, #0]
    bd62:	4084      	lsls	r4, r0
    bd64:	4650      	mov	r0, sl
    bd66:	4314      	orrs	r4, r2
    bd68:	601c      	str	r4, [r3, #0]
    bd6a:	c904      	ldmia	r1!, {r2}
    bd6c:	3304      	adds	r3, #4
    bd6e:	40c2      	lsrs	r2, r0
    bd70:	428f      	cmp	r7, r1
    bd72:	d8f4      	bhi.n	bd5e <__lshift+0x6a>
    bd74:	601a      	str	r2, [r3, #0]
    bd76:	2a00      	cmp	r2, #0
    bd78:	d001      	beq.n	bd7e <__lshift+0x8a>
    bd7a:	4645      	mov	r5, r8
    bd7c:	3502      	adds	r5, #2
    bd7e:	4663      	mov	r3, ip
    bd80:	3d01      	subs	r5, #1
    bd82:	611d      	str	r5, [r3, #16]
    bd84:	6873      	ldr	r3, [r6, #4]
    bd86:	4660      	mov	r0, ip
    bd88:	009a      	lsls	r2, r3, #2
    bd8a:	465b      	mov	r3, fp
    bd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bd8e:	189b      	adds	r3, r3, r2
    bd90:	681a      	ldr	r2, [r3, #0]
    bd92:	6032      	str	r2, [r6, #0]
    bd94:	601e      	str	r6, [r3, #0]
    bd96:	bc3c      	pop	{r2, r3, r4, r5}
    bd98:	4690      	mov	r8, r2
    bd9a:	4699      	mov	r9, r3
    bd9c:	46a2      	mov	sl, r4
    bd9e:	46ab      	mov	fp, r5
    bda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bda2:	c904      	ldmia	r1!, {r2}
    bda4:	c304      	stmia	r3!, {r2}
    bda6:	428f      	cmp	r7, r1
    bda8:	d9e9      	bls.n	bd7e <__lshift+0x8a>
    bdaa:	c904      	ldmia	r1!, {r2}
    bdac:	c304      	stmia	r3!, {r2}
    bdae:	428f      	cmp	r7, r1
    bdb0:	d8f7      	bhi.n	bda2 <__lshift+0xae>
    bdb2:	e7e4      	b.n	bd7e <__lshift+0x8a>

0000bdb4 <__mcmp>:
    bdb4:	690a      	ldr	r2, [r1, #16]
    bdb6:	6903      	ldr	r3, [r0, #16]
    bdb8:	b530      	push	{r4, r5, lr}
    bdba:	0005      	movs	r5, r0
    bdbc:	1a98      	subs	r0, r3, r2
    bdbe:	d111      	bne.n	bde4 <__mcmp+0x30>
    bdc0:	0092      	lsls	r2, r2, #2
    bdc2:	3514      	adds	r5, #20
    bdc4:	3114      	adds	r1, #20
    bdc6:	18ab      	adds	r3, r5, r2
    bdc8:	1889      	adds	r1, r1, r2
    bdca:	e001      	b.n	bdd0 <__mcmp+0x1c>
    bdcc:	429d      	cmp	r5, r3
    bdce:	d209      	bcs.n	bde4 <__mcmp+0x30>
    bdd0:	3b04      	subs	r3, #4
    bdd2:	3904      	subs	r1, #4
    bdd4:	681c      	ldr	r4, [r3, #0]
    bdd6:	680a      	ldr	r2, [r1, #0]
    bdd8:	4294      	cmp	r4, r2
    bdda:	d0f7      	beq.n	bdcc <__mcmp+0x18>
    bddc:	4294      	cmp	r4, r2
    bdde:	4180      	sbcs	r0, r0
    bde0:	2201      	movs	r2, #1
    bde2:	4310      	orrs	r0, r2
    bde4:	bd30      	pop	{r4, r5, pc}
    bde6:	46c0      	nop			; (mov r8, r8)

0000bde8 <__mdiff>:
    bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdea:	4645      	mov	r5, r8
    bdec:	46de      	mov	lr, fp
    bdee:	4657      	mov	r7, sl
    bdf0:	464e      	mov	r6, r9
    bdf2:	0014      	movs	r4, r2
    bdf4:	690b      	ldr	r3, [r1, #16]
    bdf6:	6912      	ldr	r2, [r2, #16]
    bdf8:	b5e0      	push	{r5, r6, r7, lr}
    bdfa:	4688      	mov	r8, r1
    bdfc:	1a9d      	subs	r5, r3, r2
    bdfe:	d11a      	bne.n	be36 <__mdiff+0x4e>
    be00:	000f      	movs	r7, r1
    be02:	2114      	movs	r1, #20
    be04:	468c      	mov	ip, r1
    be06:	0092      	lsls	r2, r2, #2
    be08:	3714      	adds	r7, #20
    be0a:	44a4      	add	ip, r4
    be0c:	18bb      	adds	r3, r7, r2
    be0e:	4462      	add	r2, ip
    be10:	e002      	b.n	be18 <__mdiff+0x30>
    be12:	429f      	cmp	r7, r3
    be14:	d300      	bcc.n	be18 <__mdiff+0x30>
    be16:	e070      	b.n	befa <__mdiff+0x112>
    be18:	3b04      	subs	r3, #4
    be1a:	3a04      	subs	r2, #4
    be1c:	681e      	ldr	r6, [r3, #0]
    be1e:	6811      	ldr	r1, [r2, #0]
    be20:	428e      	cmp	r6, r1
    be22:	d0f6      	beq.n	be12 <__mdiff+0x2a>
    be24:	d300      	bcc.n	be28 <__mdiff+0x40>
    be26:	e071      	b.n	bf0c <__mdiff+0x124>
    be28:	4643      	mov	r3, r8
    be2a:	003e      	movs	r6, r7
    be2c:	46a0      	mov	r8, r4
    be2e:	4667      	mov	r7, ip
    be30:	001c      	movs	r4, r3
    be32:	2501      	movs	r5, #1
    be34:	e006      	b.n	be44 <__mdiff+0x5c>
    be36:	2d00      	cmp	r5, #0
    be38:	db6a      	blt.n	bf10 <__mdiff+0x128>
    be3a:	4647      	mov	r7, r8
    be3c:	0026      	movs	r6, r4
    be3e:	2500      	movs	r5, #0
    be40:	3714      	adds	r7, #20
    be42:	3614      	adds	r6, #20
    be44:	4643      	mov	r3, r8
    be46:	6859      	ldr	r1, [r3, #4]
    be48:	f7ff fd80 	bl	b94c <_Balloc>
    be4c:	4643      	mov	r3, r8
    be4e:	4681      	mov	r9, r0
    be50:	60c5      	str	r5, [r0, #12]
    be52:	6918      	ldr	r0, [r3, #16]
    be54:	464d      	mov	r5, r9
    be56:	0083      	lsls	r3, r0, #2
    be58:	469c      	mov	ip, r3
    be5a:	6923      	ldr	r3, [r4, #16]
    be5c:	44bc      	add	ip, r7
    be5e:	009b      	lsls	r3, r3, #2
    be60:	4698      	mov	r8, r3
    be62:	2300      	movs	r3, #0
    be64:	44b0      	add	r8, r6
    be66:	3514      	adds	r5, #20
    be68:	469a      	mov	sl, r3
    be6a:	e000      	b.n	be6e <__mdiff+0x86>
    be6c:	0027      	movs	r7, r4
    be6e:	ce04      	ldmia	r6!, {r2}
    be70:	003c      	movs	r4, r7
    be72:	4693      	mov	fp, r2
    be74:	4659      	mov	r1, fp
    be76:	cc08      	ldmia	r4!, {r3}
    be78:	0409      	lsls	r1, r1, #16
    be7a:	041a      	lsls	r2, r3, #16
    be7c:	0c12      	lsrs	r2, r2, #16
    be7e:	4452      	add	r2, sl
    be80:	0c09      	lsrs	r1, r1, #16
    be82:	1a52      	subs	r2, r2, r1
    be84:	0c19      	lsrs	r1, r3, #16
    be86:	465b      	mov	r3, fp
    be88:	0c1b      	lsrs	r3, r3, #16
    be8a:	1acb      	subs	r3, r1, r3
    be8c:	1411      	asrs	r1, r2, #16
    be8e:	185b      	adds	r3, r3, r1
    be90:	0412      	lsls	r2, r2, #16
    be92:	1419      	asrs	r1, r3, #16
    be94:	0c12      	lsrs	r2, r2, #16
    be96:	041b      	lsls	r3, r3, #16
    be98:	468a      	mov	sl, r1
    be9a:	4313      	orrs	r3, r2
    be9c:	1d29      	adds	r1, r5, #4
    be9e:	602b      	str	r3, [r5, #0]
    bea0:	000d      	movs	r5, r1
    bea2:	45b0      	cmp	r8, r6
    bea4:	d8e2      	bhi.n	be6c <__mdiff+0x84>
    bea6:	45a4      	cmp	ip, r4
    bea8:	d916      	bls.n	bed8 <__mdiff+0xf0>
    beaa:	cc08      	ldmia	r4!, {r3}
    beac:	041a      	lsls	r2, r3, #16
    beae:	0c12      	lsrs	r2, r2, #16
    beb0:	4452      	add	r2, sl
    beb2:	1416      	asrs	r6, r2, #16
    beb4:	0c1b      	lsrs	r3, r3, #16
    beb6:	199b      	adds	r3, r3, r6
    beb8:	0412      	lsls	r2, r2, #16
    beba:	141e      	asrs	r6, r3, #16
    bebc:	0c12      	lsrs	r2, r2, #16
    bebe:	041b      	lsls	r3, r3, #16
    bec0:	4313      	orrs	r3, r2
    bec2:	46b2      	mov	sl, r6
    bec4:	c508      	stmia	r5!, {r3}
    bec6:	45a4      	cmp	ip, r4
    bec8:	d8ef      	bhi.n	beaa <__mdiff+0xc2>
    beca:	4662      	mov	r2, ip
    becc:	2403      	movs	r4, #3
    bece:	1bd2      	subs	r2, r2, r7
    bed0:	3a05      	subs	r2, #5
    bed2:	43a2      	bics	r2, r4
    bed4:	3204      	adds	r2, #4
    bed6:	1889      	adds	r1, r1, r2
    bed8:	3904      	subs	r1, #4
    beda:	2b00      	cmp	r3, #0
    bedc:	d104      	bne.n	bee8 <__mdiff+0x100>
    bede:	3904      	subs	r1, #4
    bee0:	680b      	ldr	r3, [r1, #0]
    bee2:	3801      	subs	r0, #1
    bee4:	2b00      	cmp	r3, #0
    bee6:	d0fa      	beq.n	bede <__mdiff+0xf6>
    bee8:	464b      	mov	r3, r9
    beea:	6118      	str	r0, [r3, #16]
    beec:	4648      	mov	r0, r9
    beee:	bc3c      	pop	{r2, r3, r4, r5}
    bef0:	4690      	mov	r8, r2
    bef2:	4699      	mov	r9, r3
    bef4:	46a2      	mov	sl, r4
    bef6:	46ab      	mov	fp, r5
    bef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    befa:	2100      	movs	r1, #0
    befc:	f7ff fd26 	bl	b94c <_Balloc>
    bf00:	2301      	movs	r3, #1
    bf02:	6103      	str	r3, [r0, #16]
    bf04:	2300      	movs	r3, #0
    bf06:	4681      	mov	r9, r0
    bf08:	6143      	str	r3, [r0, #20]
    bf0a:	e7ef      	b.n	beec <__mdiff+0x104>
    bf0c:	4666      	mov	r6, ip
    bf0e:	e799      	b.n	be44 <__mdiff+0x5c>
    bf10:	0027      	movs	r7, r4
    bf12:	000e      	movs	r6, r1
    bf14:	46a0      	mov	r8, r4
    bf16:	3714      	adds	r7, #20
    bf18:	3614      	adds	r6, #20
    bf1a:	000c      	movs	r4, r1
    bf1c:	2501      	movs	r5, #1
    bf1e:	e791      	b.n	be44 <__mdiff+0x5c>

0000bf20 <__d2b>:
    bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf22:	2101      	movs	r1, #1
    bf24:	001c      	movs	r4, r3
    bf26:	b083      	sub	sp, #12
    bf28:	9e08      	ldr	r6, [sp, #32]
    bf2a:	0015      	movs	r5, r2
    bf2c:	f7ff fd0e 	bl	b94c <_Balloc>
    bf30:	0323      	lsls	r3, r4, #12
    bf32:	0064      	lsls	r4, r4, #1
    bf34:	0007      	movs	r7, r0
    bf36:	0b1b      	lsrs	r3, r3, #12
    bf38:	0d64      	lsrs	r4, r4, #21
    bf3a:	d002      	beq.n	bf42 <__d2b+0x22>
    bf3c:	2280      	movs	r2, #128	; 0x80
    bf3e:	0352      	lsls	r2, r2, #13
    bf40:	4313      	orrs	r3, r2
    bf42:	9301      	str	r3, [sp, #4]
    bf44:	2d00      	cmp	r5, #0
    bf46:	d019      	beq.n	bf7c <__d2b+0x5c>
    bf48:	4668      	mov	r0, sp
    bf4a:	9500      	str	r5, [sp, #0]
    bf4c:	f7ff fd90 	bl	ba70 <__lo0bits>
    bf50:	2800      	cmp	r0, #0
    bf52:	d130      	bne.n	bfb6 <__d2b+0x96>
    bf54:	9b00      	ldr	r3, [sp, #0]
    bf56:	617b      	str	r3, [r7, #20]
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	61bb      	str	r3, [r7, #24]
    bf5c:	1e5a      	subs	r2, r3, #1
    bf5e:	4193      	sbcs	r3, r2
    bf60:	1c5d      	adds	r5, r3, #1
    bf62:	613d      	str	r5, [r7, #16]
    bf64:	2c00      	cmp	r4, #0
    bf66:	d014      	beq.n	bf92 <__d2b+0x72>
    bf68:	4b19      	ldr	r3, [pc, #100]	; (bfd0 <__d2b+0xb0>)
    bf6a:	469c      	mov	ip, r3
    bf6c:	2335      	movs	r3, #53	; 0x35
    bf6e:	4464      	add	r4, ip
    bf70:	1824      	adds	r4, r4, r0
    bf72:	1a18      	subs	r0, r3, r0
    bf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf76:	6034      	str	r4, [r6, #0]
    bf78:	6018      	str	r0, [r3, #0]
    bf7a:	e019      	b.n	bfb0 <__d2b+0x90>
    bf7c:	a801      	add	r0, sp, #4
    bf7e:	f7ff fd77 	bl	ba70 <__lo0bits>
    bf82:	9b01      	ldr	r3, [sp, #4]
    bf84:	3020      	adds	r0, #32
    bf86:	617b      	str	r3, [r7, #20]
    bf88:	2301      	movs	r3, #1
    bf8a:	2501      	movs	r5, #1
    bf8c:	613b      	str	r3, [r7, #16]
    bf8e:	2c00      	cmp	r4, #0
    bf90:	d1ea      	bne.n	bf68 <__d2b+0x48>
    bf92:	4b10      	ldr	r3, [pc, #64]	; (bfd4 <__d2b+0xb4>)
    bf94:	469c      	mov	ip, r3
    bf96:	4b10      	ldr	r3, [pc, #64]	; (bfd8 <__d2b+0xb8>)
    bf98:	4460      	add	r0, ip
    bf9a:	18eb      	adds	r3, r5, r3
    bf9c:	009b      	lsls	r3, r3, #2
    bf9e:	18fb      	adds	r3, r7, r3
    bfa0:	6030      	str	r0, [r6, #0]
    bfa2:	6958      	ldr	r0, [r3, #20]
    bfa4:	f7ff fd4a 	bl	ba3c <__hi0bits>
    bfa8:	016b      	lsls	r3, r5, #5
    bfaa:	1a18      	subs	r0, r3, r0
    bfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bfae:	6018      	str	r0, [r3, #0]
    bfb0:	0038      	movs	r0, r7
    bfb2:	b003      	add	sp, #12
    bfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfb6:	9b01      	ldr	r3, [sp, #4]
    bfb8:	2220      	movs	r2, #32
    bfba:	0019      	movs	r1, r3
    bfbc:	1a12      	subs	r2, r2, r0
    bfbe:	4091      	lsls	r1, r2
    bfc0:	000a      	movs	r2, r1
    bfc2:	40c3      	lsrs	r3, r0
    bfc4:	9900      	ldr	r1, [sp, #0]
    bfc6:	9301      	str	r3, [sp, #4]
    bfc8:	430a      	orrs	r2, r1
    bfca:	617a      	str	r2, [r7, #20]
    bfcc:	e7c5      	b.n	bf5a <__d2b+0x3a>
    bfce:	46c0      	nop			; (mov r8, r8)
    bfd0:	fffffbcd 	.word	0xfffffbcd
    bfd4:	fffffbce 	.word	0xfffffbce
    bfd8:	3fffffff 	.word	0x3fffffff

0000bfdc <_sbrk_r>:
    bfdc:	2300      	movs	r3, #0
    bfde:	b570      	push	{r4, r5, r6, lr}
    bfe0:	4c06      	ldr	r4, [pc, #24]	; (bffc <_sbrk_r+0x20>)
    bfe2:	0005      	movs	r5, r0
    bfe4:	0008      	movs	r0, r1
    bfe6:	6023      	str	r3, [r4, #0]
    bfe8:	f7f9 fdc0 	bl	5b6c <_sbrk>
    bfec:	1c43      	adds	r3, r0, #1
    bfee:	d000      	beq.n	bff2 <_sbrk_r+0x16>
    bff0:	bd70      	pop	{r4, r5, r6, pc}
    bff2:	6823      	ldr	r3, [r4, #0]
    bff4:	2b00      	cmp	r3, #0
    bff6:	d0fb      	beq.n	bff0 <_sbrk_r+0x14>
    bff8:	602b      	str	r3, [r5, #0]
    bffa:	e7f9      	b.n	bff0 <_sbrk_r+0x14>
    bffc:	20000d18 	.word	0x20000d18

0000c000 <strchr>:
    c000:	b570      	push	{r4, r5, r6, lr}
    c002:	b2cc      	uxtb	r4, r1
    c004:	2c00      	cmp	r4, #0
    c006:	d03b      	beq.n	c080 <strchr+0x80>
    c008:	0783      	lsls	r3, r0, #30
    c00a:	d00e      	beq.n	c02a <strchr+0x2a>
    c00c:	7803      	ldrb	r3, [r0, #0]
    c00e:	2b00      	cmp	r3, #0
    c010:	d05b      	beq.n	c0ca <strchr+0xca>
    c012:	429c      	cmp	r4, r3
    c014:	d033      	beq.n	c07e <strchr+0x7e>
    c016:	2203      	movs	r2, #3
    c018:	e004      	b.n	c024 <strchr+0x24>
    c01a:	7803      	ldrb	r3, [r0, #0]
    c01c:	2b00      	cmp	r3, #0
    c01e:	d054      	beq.n	c0ca <strchr+0xca>
    c020:	429c      	cmp	r4, r3
    c022:	d02c      	beq.n	c07e <strchr+0x7e>
    c024:	3001      	adds	r0, #1
    c026:	4210      	tst	r0, r2
    c028:	d1f7      	bne.n	c01a <strchr+0x1a>
    c02a:	25ff      	movs	r5, #255	; 0xff
    c02c:	4029      	ands	r1, r5
    c02e:	020d      	lsls	r5, r1, #8
    c030:	4329      	orrs	r1, r5
    c032:	040d      	lsls	r5, r1, #16
    c034:	430d      	orrs	r5, r1
    c036:	0029      	movs	r1, r5
    c038:	6802      	ldr	r2, [r0, #0]
    c03a:	4b26      	ldr	r3, [pc, #152]	; (c0d4 <strchr+0xd4>)
    c03c:	4051      	eors	r1, r2
    c03e:	18d3      	adds	r3, r2, r3
    c040:	4393      	bics	r3, r2
    c042:	4a24      	ldr	r2, [pc, #144]	; (c0d4 <strchr+0xd4>)
    c044:	4e24      	ldr	r6, [pc, #144]	; (c0d8 <strchr+0xd8>)
    c046:	188a      	adds	r2, r1, r2
    c048:	438a      	bics	r2, r1
    c04a:	4313      	orrs	r3, r2
    c04c:	4233      	tst	r3, r6
    c04e:	d10c      	bne.n	c06a <strchr+0x6a>
    c050:	0029      	movs	r1, r5
    c052:	3004      	adds	r0, #4
    c054:	6802      	ldr	r2, [r0, #0]
    c056:	4b1f      	ldr	r3, [pc, #124]	; (c0d4 <strchr+0xd4>)
    c058:	4051      	eors	r1, r2
    c05a:	18d3      	adds	r3, r2, r3
    c05c:	4393      	bics	r3, r2
    c05e:	4a1d      	ldr	r2, [pc, #116]	; (c0d4 <strchr+0xd4>)
    c060:	188a      	adds	r2, r1, r2
    c062:	438a      	bics	r2, r1
    c064:	4313      	orrs	r3, r2
    c066:	4233      	tst	r3, r6
    c068:	d0f2      	beq.n	c050 <strchr+0x50>
    c06a:	7803      	ldrb	r3, [r0, #0]
    c06c:	2b00      	cmp	r3, #0
    c06e:	d104      	bne.n	c07a <strchr+0x7a>
    c070:	e02b      	b.n	c0ca <strchr+0xca>
    c072:	3001      	adds	r0, #1
    c074:	7803      	ldrb	r3, [r0, #0]
    c076:	2b00      	cmp	r3, #0
    c078:	d027      	beq.n	c0ca <strchr+0xca>
    c07a:	429c      	cmp	r4, r3
    c07c:	d1f9      	bne.n	c072 <strchr+0x72>
    c07e:	bd70      	pop	{r4, r5, r6, pc}
    c080:	0783      	lsls	r3, r0, #30
    c082:	d00a      	beq.n	c09a <strchr+0x9a>
    c084:	7803      	ldrb	r3, [r0, #0]
    c086:	2b00      	cmp	r3, #0
    c088:	d0f9      	beq.n	c07e <strchr+0x7e>
    c08a:	2203      	movs	r2, #3
    c08c:	e002      	b.n	c094 <strchr+0x94>
    c08e:	7803      	ldrb	r3, [r0, #0]
    c090:	2b00      	cmp	r3, #0
    c092:	d0f4      	beq.n	c07e <strchr+0x7e>
    c094:	3001      	adds	r0, #1
    c096:	4210      	tst	r0, r2
    c098:	d1f9      	bne.n	c08e <strchr+0x8e>
    c09a:	6801      	ldr	r1, [r0, #0]
    c09c:	4a0d      	ldr	r2, [pc, #52]	; (c0d4 <strchr+0xd4>)
    c09e:	0003      	movs	r3, r0
    c0a0:	188a      	adds	r2, r1, r2
    c0a2:	480d      	ldr	r0, [pc, #52]	; (c0d8 <strchr+0xd8>)
    c0a4:	438a      	bics	r2, r1
    c0a6:	4202      	tst	r2, r0
    c0a8:	d106      	bne.n	c0b8 <strchr+0xb8>
    c0aa:	3304      	adds	r3, #4
    c0ac:	6819      	ldr	r1, [r3, #0]
    c0ae:	4a09      	ldr	r2, [pc, #36]	; (c0d4 <strchr+0xd4>)
    c0b0:	188a      	adds	r2, r1, r2
    c0b2:	438a      	bics	r2, r1
    c0b4:	4202      	tst	r2, r0
    c0b6:	d0f8      	beq.n	c0aa <strchr+0xaa>
    c0b8:	781a      	ldrb	r2, [r3, #0]
    c0ba:	0018      	movs	r0, r3
    c0bc:	2a00      	cmp	r2, #0
    c0be:	d006      	beq.n	c0ce <strchr+0xce>
    c0c0:	3001      	adds	r0, #1
    c0c2:	7803      	ldrb	r3, [r0, #0]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d1fb      	bne.n	c0c0 <strchr+0xc0>
    c0c8:	e7d9      	b.n	c07e <strchr+0x7e>
    c0ca:	2000      	movs	r0, #0
    c0cc:	e7d7      	b.n	c07e <strchr+0x7e>
    c0ce:	0018      	movs	r0, r3
    c0d0:	e7d5      	b.n	c07e <strchr+0x7e>
    c0d2:	46c0      	nop			; (mov r8, r8)
    c0d4:	fefefeff 	.word	0xfefefeff
    c0d8:	80808080 	.word	0x80808080

0000c0dc <__ssprint_r>:
    c0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0de:	4657      	mov	r7, sl
    c0e0:	464e      	mov	r6, r9
    c0e2:	46de      	mov	lr, fp
    c0e4:	4645      	mov	r5, r8
    c0e6:	b5e0      	push	{r5, r6, r7, lr}
    c0e8:	6893      	ldr	r3, [r2, #8]
    c0ea:	b083      	sub	sp, #12
    c0ec:	9001      	str	r0, [sp, #4]
    c0ee:	000e      	movs	r6, r1
    c0f0:	4692      	mov	sl, r2
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	d070      	beq.n	c1d8 <__ssprint_r+0xfc>
    c0f6:	688d      	ldr	r5, [r1, #8]
    c0f8:	6813      	ldr	r3, [r2, #0]
    c0fa:	002c      	movs	r4, r5
    c0fc:	6808      	ldr	r0, [r1, #0]
    c0fe:	001d      	movs	r5, r3
    c100:	e046      	b.n	c190 <__ssprint_r+0xb4>
    c102:	2290      	movs	r2, #144	; 0x90
    c104:	89b3      	ldrh	r3, [r6, #12]
    c106:	00d2      	lsls	r2, r2, #3
    c108:	4213      	tst	r3, r2
    c10a:	d030      	beq.n	c16e <__ssprint_r+0x92>
    c10c:	6931      	ldr	r1, [r6, #16]
    c10e:	1a42      	subs	r2, r0, r1
    c110:	4693      	mov	fp, r2
    c112:	6970      	ldr	r0, [r6, #20]
    c114:	0042      	lsls	r2, r0, #1
    c116:	1812      	adds	r2, r2, r0
    c118:	0fd0      	lsrs	r0, r2, #31
    c11a:	1882      	adds	r2, r0, r2
    c11c:	1052      	asrs	r2, r2, #1
    c11e:	4690      	mov	r8, r2
    c120:	465a      	mov	r2, fp
    c122:	1c50      	adds	r0, r2, #1
    c124:	19c0      	adds	r0, r0, r7
    c126:	4642      	mov	r2, r8
    c128:	4540      	cmp	r0, r8
    c12a:	d901      	bls.n	c130 <__ssprint_r+0x54>
    c12c:	4680      	mov	r8, r0
    c12e:	0002      	movs	r2, r0
    c130:	2080      	movs	r0, #128	; 0x80
    c132:	00c0      	lsls	r0, r0, #3
    c134:	4203      	tst	r3, r0
    c136:	d038      	beq.n	c1aa <__ssprint_r+0xce>
    c138:	0011      	movs	r1, r2
    c13a:	9801      	ldr	r0, [sp, #4]
    c13c:	f7ff f8c6 	bl	b2cc <_malloc_r>
    c140:	1e04      	subs	r4, r0, #0
    c142:	d054      	beq.n	c1ee <__ssprint_r+0x112>
    c144:	465a      	mov	r2, fp
    c146:	6931      	ldr	r1, [r6, #16]
    c148:	f7fc f8d0 	bl	82ec <memcpy>
    c14c:	89b3      	ldrh	r3, [r6, #12]
    c14e:	4a2a      	ldr	r2, [pc, #168]	; (c1f8 <__ssprint_r+0x11c>)
    c150:	4013      	ands	r3, r2
    c152:	2280      	movs	r2, #128	; 0x80
    c154:	4313      	orrs	r3, r2
    c156:	81b3      	strh	r3, [r6, #12]
    c158:	4643      	mov	r3, r8
    c15a:	0020      	movs	r0, r4
    c15c:	465a      	mov	r2, fp
    c15e:	6134      	str	r4, [r6, #16]
    c160:	46b8      	mov	r8, r7
    c162:	003c      	movs	r4, r7
    c164:	4458      	add	r0, fp
    c166:	6173      	str	r3, [r6, #20]
    c168:	1a9b      	subs	r3, r3, r2
    c16a:	6030      	str	r0, [r6, #0]
    c16c:	60b3      	str	r3, [r6, #8]
    c16e:	4642      	mov	r2, r8
    c170:	4649      	mov	r1, r9
    c172:	f000 fa25 	bl	c5c0 <memmove>
    c176:	68b3      	ldr	r3, [r6, #8]
    c178:	1b1c      	subs	r4, r3, r4
    c17a:	6833      	ldr	r3, [r6, #0]
    c17c:	60b4      	str	r4, [r6, #8]
    c17e:	4443      	add	r3, r8
    c180:	6033      	str	r3, [r6, #0]
    c182:	0018      	movs	r0, r3
    c184:	4653      	mov	r3, sl
    c186:	689b      	ldr	r3, [r3, #8]
    c188:	1bdf      	subs	r7, r3, r7
    c18a:	4653      	mov	r3, sl
    c18c:	609f      	str	r7, [r3, #8]
    c18e:	d023      	beq.n	c1d8 <__ssprint_r+0xfc>
    c190:	686f      	ldr	r7, [r5, #4]
    c192:	002b      	movs	r3, r5
    c194:	3508      	adds	r5, #8
    c196:	2f00      	cmp	r7, #0
    c198:	d0fa      	beq.n	c190 <__ssprint_r+0xb4>
    c19a:	681b      	ldr	r3, [r3, #0]
    c19c:	46a0      	mov	r8, r4
    c19e:	4699      	mov	r9, r3
    c1a0:	42a7      	cmp	r7, r4
    c1a2:	d2ae      	bcs.n	c102 <__ssprint_r+0x26>
    c1a4:	003c      	movs	r4, r7
    c1a6:	46b8      	mov	r8, r7
    c1a8:	e7e1      	b.n	c16e <__ssprint_r+0x92>
    c1aa:	9801      	ldr	r0, [sp, #4]
    c1ac:	f000 fa58 	bl	c660 <_realloc_r>
    c1b0:	1e04      	subs	r4, r0, #0
    c1b2:	d1d1      	bne.n	c158 <__ssprint_r+0x7c>
    c1b4:	9c01      	ldr	r4, [sp, #4]
    c1b6:	6931      	ldr	r1, [r6, #16]
    c1b8:	0020      	movs	r0, r4
    c1ba:	f000 f923 	bl	c404 <_free_r>
    c1be:	230c      	movs	r3, #12
    c1c0:	6023      	str	r3, [r4, #0]
    c1c2:	2240      	movs	r2, #64	; 0x40
    c1c4:	89b3      	ldrh	r3, [r6, #12]
    c1c6:	2001      	movs	r0, #1
    c1c8:	4313      	orrs	r3, r2
    c1ca:	81b3      	strh	r3, [r6, #12]
    c1cc:	4652      	mov	r2, sl
    c1ce:	2300      	movs	r3, #0
    c1d0:	4240      	negs	r0, r0
    c1d2:	6093      	str	r3, [r2, #8]
    c1d4:	6053      	str	r3, [r2, #4]
    c1d6:	e003      	b.n	c1e0 <__ssprint_r+0x104>
    c1d8:	2300      	movs	r3, #0
    c1da:	4652      	mov	r2, sl
    c1dc:	2000      	movs	r0, #0
    c1de:	6053      	str	r3, [r2, #4]
    c1e0:	b003      	add	sp, #12
    c1e2:	bc3c      	pop	{r2, r3, r4, r5}
    c1e4:	4690      	mov	r8, r2
    c1e6:	4699      	mov	r9, r3
    c1e8:	46a2      	mov	sl, r4
    c1ea:	46ab      	mov	fp, r5
    c1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1ee:	230c      	movs	r3, #12
    c1f0:	9a01      	ldr	r2, [sp, #4]
    c1f2:	6013      	str	r3, [r2, #0]
    c1f4:	e7e5      	b.n	c1c2 <__ssprint_r+0xe6>
    c1f6:	46c0      	nop			; (mov r8, r8)
    c1f8:	fffffb7f 	.word	0xfffffb7f

0000c1fc <__ascii_wctomb>:
    c1fc:	2900      	cmp	r1, #0
    c1fe:	d004      	beq.n	c20a <__ascii_wctomb+0xe>
    c200:	2aff      	cmp	r2, #255	; 0xff
    c202:	d804      	bhi.n	c20e <__ascii_wctomb+0x12>
    c204:	2001      	movs	r0, #1
    c206:	700a      	strb	r2, [r1, #0]
    c208:	4770      	bx	lr
    c20a:	2000      	movs	r0, #0
    c20c:	e7fc      	b.n	c208 <__ascii_wctomb+0xc>
    c20e:	238a      	movs	r3, #138	; 0x8a
    c210:	6003      	str	r3, [r0, #0]
    c212:	2001      	movs	r0, #1
    c214:	4240      	negs	r0, r0
    c216:	e7f7      	b.n	c208 <__ascii_wctomb+0xc>

0000c218 <__register_exitproc>:
    c218:	b5f0      	push	{r4, r5, r6, r7, lr}
    c21a:	464e      	mov	r6, r9
    c21c:	4645      	mov	r5, r8
    c21e:	46de      	mov	lr, fp
    c220:	4657      	mov	r7, sl
    c222:	b5e0      	push	{r5, r6, r7, lr}
    c224:	4d36      	ldr	r5, [pc, #216]	; (c300 <__register_exitproc+0xe8>)
    c226:	b083      	sub	sp, #12
    c228:	0006      	movs	r6, r0
    c22a:	6828      	ldr	r0, [r5, #0]
    c22c:	4698      	mov	r8, r3
    c22e:	000f      	movs	r7, r1
    c230:	4691      	mov	r9, r2
    c232:	f7ff f847 	bl	b2c4 <__retarget_lock_acquire_recursive>
    c236:	4b33      	ldr	r3, [pc, #204]	; (c304 <__register_exitproc+0xec>)
    c238:	681c      	ldr	r4, [r3, #0]
    c23a:	23a4      	movs	r3, #164	; 0xa4
    c23c:	005b      	lsls	r3, r3, #1
    c23e:	58e0      	ldr	r0, [r4, r3]
    c240:	2800      	cmp	r0, #0
    c242:	d052      	beq.n	c2ea <__register_exitproc+0xd2>
    c244:	6843      	ldr	r3, [r0, #4]
    c246:	2b1f      	cmp	r3, #31
    c248:	dc13      	bgt.n	c272 <__register_exitproc+0x5a>
    c24a:	1c5a      	adds	r2, r3, #1
    c24c:	9201      	str	r2, [sp, #4]
    c24e:	2e00      	cmp	r6, #0
    c250:	d128      	bne.n	c2a4 <__register_exitproc+0x8c>
    c252:	9a01      	ldr	r2, [sp, #4]
    c254:	3302      	adds	r3, #2
    c256:	009b      	lsls	r3, r3, #2
    c258:	6042      	str	r2, [r0, #4]
    c25a:	501f      	str	r7, [r3, r0]
    c25c:	6828      	ldr	r0, [r5, #0]
    c25e:	f7ff f833 	bl	b2c8 <__retarget_lock_release_recursive>
    c262:	2000      	movs	r0, #0
    c264:	b003      	add	sp, #12
    c266:	bc3c      	pop	{r2, r3, r4, r5}
    c268:	4690      	mov	r8, r2
    c26a:	4699      	mov	r9, r3
    c26c:	46a2      	mov	sl, r4
    c26e:	46ab      	mov	fp, r5
    c270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c272:	4b25      	ldr	r3, [pc, #148]	; (c308 <__register_exitproc+0xf0>)
    c274:	2b00      	cmp	r3, #0
    c276:	d03d      	beq.n	c2f4 <__register_exitproc+0xdc>
    c278:	20c8      	movs	r0, #200	; 0xc8
    c27a:	0040      	lsls	r0, r0, #1
    c27c:	e000      	b.n	c280 <__register_exitproc+0x68>
    c27e:	bf00      	nop
    c280:	2800      	cmp	r0, #0
    c282:	d037      	beq.n	c2f4 <__register_exitproc+0xdc>
    c284:	22a4      	movs	r2, #164	; 0xa4
    c286:	2300      	movs	r3, #0
    c288:	0052      	lsls	r2, r2, #1
    c28a:	58a1      	ldr	r1, [r4, r2]
    c28c:	6043      	str	r3, [r0, #4]
    c28e:	6001      	str	r1, [r0, #0]
    c290:	50a0      	str	r0, [r4, r2]
    c292:	3240      	adds	r2, #64	; 0x40
    c294:	5083      	str	r3, [r0, r2]
    c296:	3204      	adds	r2, #4
    c298:	5083      	str	r3, [r0, r2]
    c29a:	3301      	adds	r3, #1
    c29c:	9301      	str	r3, [sp, #4]
    c29e:	2300      	movs	r3, #0
    c2a0:	2e00      	cmp	r6, #0
    c2a2:	d0d6      	beq.n	c252 <__register_exitproc+0x3a>
    c2a4:	009a      	lsls	r2, r3, #2
    c2a6:	4692      	mov	sl, r2
    c2a8:	4482      	add	sl, r0
    c2aa:	464a      	mov	r2, r9
    c2ac:	2188      	movs	r1, #136	; 0x88
    c2ae:	4654      	mov	r4, sl
    c2b0:	5062      	str	r2, [r4, r1]
    c2b2:	22c4      	movs	r2, #196	; 0xc4
    c2b4:	0052      	lsls	r2, r2, #1
    c2b6:	4691      	mov	r9, r2
    c2b8:	4481      	add	r9, r0
    c2ba:	464a      	mov	r2, r9
    c2bc:	3987      	subs	r1, #135	; 0x87
    c2be:	4099      	lsls	r1, r3
    c2c0:	6812      	ldr	r2, [r2, #0]
    c2c2:	468b      	mov	fp, r1
    c2c4:	430a      	orrs	r2, r1
    c2c6:	4694      	mov	ip, r2
    c2c8:	464a      	mov	r2, r9
    c2ca:	4661      	mov	r1, ip
    c2cc:	6011      	str	r1, [r2, #0]
    c2ce:	2284      	movs	r2, #132	; 0x84
    c2d0:	4641      	mov	r1, r8
    c2d2:	0052      	lsls	r2, r2, #1
    c2d4:	50a1      	str	r1, [r4, r2]
    c2d6:	2e02      	cmp	r6, #2
    c2d8:	d1bb      	bne.n	c252 <__register_exitproc+0x3a>
    c2da:	0002      	movs	r2, r0
    c2dc:	465c      	mov	r4, fp
    c2de:	328d      	adds	r2, #141	; 0x8d
    c2e0:	32ff      	adds	r2, #255	; 0xff
    c2e2:	6811      	ldr	r1, [r2, #0]
    c2e4:	430c      	orrs	r4, r1
    c2e6:	6014      	str	r4, [r2, #0]
    c2e8:	e7b3      	b.n	c252 <__register_exitproc+0x3a>
    c2ea:	0020      	movs	r0, r4
    c2ec:	304d      	adds	r0, #77	; 0x4d
    c2ee:	30ff      	adds	r0, #255	; 0xff
    c2f0:	50e0      	str	r0, [r4, r3]
    c2f2:	e7a7      	b.n	c244 <__register_exitproc+0x2c>
    c2f4:	6828      	ldr	r0, [r5, #0]
    c2f6:	f7fe ffe7 	bl	b2c8 <__retarget_lock_release_recursive>
    c2fa:	2001      	movs	r0, #1
    c2fc:	4240      	negs	r0, r0
    c2fe:	e7b1      	b.n	c264 <__register_exitproc+0x4c>
    c300:	20000440 	.word	0x20000440
    c304:	0000e118 	.word	0x0000e118
    c308:	00000000 	.word	0x00000000

0000c30c <_calloc_r>:
    c30c:	b510      	push	{r4, lr}
    c30e:	4351      	muls	r1, r2
    c310:	f7fe ffdc 	bl	b2cc <_malloc_r>
    c314:	1e04      	subs	r4, r0, #0
    c316:	d01c      	beq.n	c352 <_calloc_r+0x46>
    c318:	0003      	movs	r3, r0
    c31a:	3b08      	subs	r3, #8
    c31c:	685a      	ldr	r2, [r3, #4]
    c31e:	2303      	movs	r3, #3
    c320:	439a      	bics	r2, r3
    c322:	3a04      	subs	r2, #4
    c324:	2a24      	cmp	r2, #36	; 0x24
    c326:	d816      	bhi.n	c356 <_calloc_r+0x4a>
    c328:	0003      	movs	r3, r0
    c32a:	2a13      	cmp	r2, #19
    c32c:	d90d      	bls.n	c34a <_calloc_r+0x3e>
    c32e:	2100      	movs	r1, #0
    c330:	3308      	adds	r3, #8
    c332:	6001      	str	r1, [r0, #0]
    c334:	6041      	str	r1, [r0, #4]
    c336:	2a1b      	cmp	r2, #27
    c338:	d907      	bls.n	c34a <_calloc_r+0x3e>
    c33a:	6081      	str	r1, [r0, #8]
    c33c:	60c1      	str	r1, [r0, #12]
    c33e:	2a24      	cmp	r2, #36	; 0x24
    c340:	d10d      	bne.n	c35e <_calloc_r+0x52>
    c342:	0003      	movs	r3, r0
    c344:	6101      	str	r1, [r0, #16]
    c346:	3318      	adds	r3, #24
    c348:	6141      	str	r1, [r0, #20]
    c34a:	2200      	movs	r2, #0
    c34c:	601a      	str	r2, [r3, #0]
    c34e:	605a      	str	r2, [r3, #4]
    c350:	609a      	str	r2, [r3, #8]
    c352:	0020      	movs	r0, r4
    c354:	bd10      	pop	{r4, pc}
    c356:	2100      	movs	r1, #0
    c358:	f7fc f80a 	bl	8370 <memset>
    c35c:	e7f9      	b.n	c352 <_calloc_r+0x46>
    c35e:	0003      	movs	r3, r0
    c360:	3310      	adds	r3, #16
    c362:	e7f2      	b.n	c34a <_calloc_r+0x3e>

0000c364 <_malloc_trim_r>:
    c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c366:	000c      	movs	r4, r1
    c368:	0006      	movs	r6, r0
    c36a:	f7ff fadf 	bl	b92c <__malloc_lock>
    c36e:	4f20      	ldr	r7, [pc, #128]	; (c3f0 <_malloc_trim_r+0x8c>)
    c370:	68bb      	ldr	r3, [r7, #8]
    c372:	685d      	ldr	r5, [r3, #4]
    c374:	2303      	movs	r3, #3
    c376:	439d      	bics	r5, r3
    c378:	4b1e      	ldr	r3, [pc, #120]	; (c3f4 <_malloc_trim_r+0x90>)
    c37a:	1b2c      	subs	r4, r5, r4
    c37c:	469c      	mov	ip, r3
    c37e:	4464      	add	r4, ip
    c380:	0b24      	lsrs	r4, r4, #12
    c382:	4b1d      	ldr	r3, [pc, #116]	; (c3f8 <_malloc_trim_r+0x94>)
    c384:	3c01      	subs	r4, #1
    c386:	0324      	lsls	r4, r4, #12
    c388:	429c      	cmp	r4, r3
    c38a:	dd07      	ble.n	c39c <_malloc_trim_r+0x38>
    c38c:	2100      	movs	r1, #0
    c38e:	0030      	movs	r0, r6
    c390:	f7ff fe24 	bl	bfdc <_sbrk_r>
    c394:	68bb      	ldr	r3, [r7, #8]
    c396:	195b      	adds	r3, r3, r5
    c398:	4298      	cmp	r0, r3
    c39a:	d004      	beq.n	c3a6 <_malloc_trim_r+0x42>
    c39c:	0030      	movs	r0, r6
    c39e:	f7ff facd 	bl	b93c <__malloc_unlock>
    c3a2:	2000      	movs	r0, #0
    c3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3a6:	4261      	negs	r1, r4
    c3a8:	0030      	movs	r0, r6
    c3aa:	f7ff fe17 	bl	bfdc <_sbrk_r>
    c3ae:	1c43      	adds	r3, r0, #1
    c3b0:	d00d      	beq.n	c3ce <_malloc_trim_r+0x6a>
    c3b2:	2201      	movs	r2, #1
    c3b4:	68bb      	ldr	r3, [r7, #8]
    c3b6:	1b2d      	subs	r5, r5, r4
    c3b8:	4315      	orrs	r5, r2
    c3ba:	605d      	str	r5, [r3, #4]
    c3bc:	4b0f      	ldr	r3, [pc, #60]	; (c3fc <_malloc_trim_r+0x98>)
    c3be:	0030      	movs	r0, r6
    c3c0:	681a      	ldr	r2, [r3, #0]
    c3c2:	1b14      	subs	r4, r2, r4
    c3c4:	601c      	str	r4, [r3, #0]
    c3c6:	f7ff fab9 	bl	b93c <__malloc_unlock>
    c3ca:	2001      	movs	r0, #1
    c3cc:	e7ea      	b.n	c3a4 <_malloc_trim_r+0x40>
    c3ce:	2100      	movs	r1, #0
    c3d0:	0030      	movs	r0, r6
    c3d2:	f7ff fe03 	bl	bfdc <_sbrk_r>
    c3d6:	68ba      	ldr	r2, [r7, #8]
    c3d8:	1a83      	subs	r3, r0, r2
    c3da:	2b0f      	cmp	r3, #15
    c3dc:	ddde      	ble.n	c39c <_malloc_trim_r+0x38>
    c3de:	4908      	ldr	r1, [pc, #32]	; (c400 <_malloc_trim_r+0x9c>)
    c3e0:	6809      	ldr	r1, [r1, #0]
    c3e2:	1a40      	subs	r0, r0, r1
    c3e4:	4905      	ldr	r1, [pc, #20]	; (c3fc <_malloc_trim_r+0x98>)
    c3e6:	6008      	str	r0, [r1, #0]
    c3e8:	2101      	movs	r1, #1
    c3ea:	430b      	orrs	r3, r1
    c3ec:	6053      	str	r3, [r2, #4]
    c3ee:	e7d5      	b.n	c39c <_malloc_trim_r+0x38>
    c3f0:	200005b0 	.word	0x200005b0
    c3f4:	00000fef 	.word	0x00000fef
    c3f8:	00000fff 	.word	0x00000fff
    c3fc:	20000c38 	.word	0x20000c38
    c400:	200009b8 	.word	0x200009b8

0000c404 <_free_r>:
    c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c406:	0004      	movs	r4, r0
    c408:	1e0d      	subs	r5, r1, #0
    c40a:	d03c      	beq.n	c486 <_free_r+0x82>
    c40c:	f7ff fa8e 	bl	b92c <__malloc_lock>
    c410:	0029      	movs	r1, r5
    c412:	3908      	subs	r1, #8
    c414:	6848      	ldr	r0, [r1, #4]
    c416:	2301      	movs	r3, #1
    c418:	0005      	movs	r5, r0
    c41a:	2603      	movs	r6, #3
    c41c:	439d      	bics	r5, r3
    c41e:	194a      	adds	r2, r1, r5
    c420:	469c      	mov	ip, r3
    c422:	4f61      	ldr	r7, [pc, #388]	; (c5a8 <_free_r+0x1a4>)
    c424:	6853      	ldr	r3, [r2, #4]
    c426:	43b3      	bics	r3, r6
    c428:	68be      	ldr	r6, [r7, #8]
    c42a:	42b2      	cmp	r2, r6
    c42c:	d056      	beq.n	c4dc <_free_r+0xd8>
    c42e:	4666      	mov	r6, ip
    c430:	6053      	str	r3, [r2, #4]
    c432:	4206      	tst	r6, r0
    c434:	d10a      	bne.n	c44c <_free_r+0x48>
    c436:	003e      	movs	r6, r7
    c438:	6808      	ldr	r0, [r1, #0]
    c43a:	3608      	adds	r6, #8
    c43c:	1a09      	subs	r1, r1, r0
    c43e:	182d      	adds	r5, r5, r0
    c440:	6888      	ldr	r0, [r1, #8]
    c442:	42b0      	cmp	r0, r6
    c444:	d065      	beq.n	c512 <_free_r+0x10e>
    c446:	68ce      	ldr	r6, [r1, #12]
    c448:	60c6      	str	r6, [r0, #12]
    c44a:	60b0      	str	r0, [r6, #8]
    c44c:	2001      	movs	r0, #1
    c44e:	18d6      	adds	r6, r2, r3
    c450:	6876      	ldr	r6, [r6, #4]
    c452:	4206      	tst	r6, r0
    c454:	d033      	beq.n	c4be <_free_r+0xba>
    c456:	4b55      	ldr	r3, [pc, #340]	; (c5ac <_free_r+0x1a8>)
    c458:	4328      	orrs	r0, r5
    c45a:	6048      	str	r0, [r1, #4]
    c45c:	514d      	str	r5, [r1, r5]
    c45e:	429d      	cmp	r5, r3
    c460:	d812      	bhi.n	c488 <_free_r+0x84>
    c462:	08ed      	lsrs	r5, r5, #3
    c464:	3bff      	subs	r3, #255	; 0xff
    c466:	10aa      	asrs	r2, r5, #2
    c468:	3bff      	subs	r3, #255	; 0xff
    c46a:	4093      	lsls	r3, r2
    c46c:	687a      	ldr	r2, [r7, #4]
    c46e:	00ed      	lsls	r5, r5, #3
    c470:	4313      	orrs	r3, r2
    c472:	607b      	str	r3, [r7, #4]
    c474:	19ef      	adds	r7, r5, r7
    c476:	68bb      	ldr	r3, [r7, #8]
    c478:	60cf      	str	r7, [r1, #12]
    c47a:	608b      	str	r3, [r1, #8]
    c47c:	60b9      	str	r1, [r7, #8]
    c47e:	60d9      	str	r1, [r3, #12]
    c480:	0020      	movs	r0, r4
    c482:	f7ff fa5b 	bl	b93c <__malloc_unlock>
    c486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c488:	0a68      	lsrs	r0, r5, #9
    c48a:	2804      	cmp	r0, #4
    c48c:	d850      	bhi.n	c530 <_free_r+0x12c>
    c48e:	09a8      	lsrs	r0, r5, #6
    c490:	0002      	movs	r2, r0
    c492:	3039      	adds	r0, #57	; 0x39
    c494:	3238      	adds	r2, #56	; 0x38
    c496:	00c0      	lsls	r0, r0, #3
    c498:	1838      	adds	r0, r7, r0
    c49a:	3808      	subs	r0, #8
    c49c:	6883      	ldr	r3, [r0, #8]
    c49e:	2603      	movs	r6, #3
    c4a0:	4298      	cmp	r0, r3
    c4a2:	d04c      	beq.n	c53e <_free_r+0x13a>
    c4a4:	685a      	ldr	r2, [r3, #4]
    c4a6:	43b2      	bics	r2, r6
    c4a8:	4295      	cmp	r5, r2
    c4aa:	d230      	bcs.n	c50e <_free_r+0x10a>
    c4ac:	689b      	ldr	r3, [r3, #8]
    c4ae:	4298      	cmp	r0, r3
    c4b0:	d1f8      	bne.n	c4a4 <_free_r+0xa0>
    c4b2:	68c3      	ldr	r3, [r0, #12]
    c4b4:	60cb      	str	r3, [r1, #12]
    c4b6:	6088      	str	r0, [r1, #8]
    c4b8:	6099      	str	r1, [r3, #8]
    c4ba:	60c1      	str	r1, [r0, #12]
    c4bc:	e7e0      	b.n	c480 <_free_r+0x7c>
    c4be:	18ed      	adds	r5, r5, r3
    c4c0:	4e3b      	ldr	r6, [pc, #236]	; (c5b0 <_free_r+0x1ac>)
    c4c2:	6893      	ldr	r3, [r2, #8]
    c4c4:	42b3      	cmp	r3, r6
    c4c6:	d042      	beq.n	c54e <_free_r+0x14a>
    c4c8:	68d2      	ldr	r2, [r2, #12]
    c4ca:	4328      	orrs	r0, r5
    c4cc:	60da      	str	r2, [r3, #12]
    c4ce:	6093      	str	r3, [r2, #8]
    c4d0:	4b36      	ldr	r3, [pc, #216]	; (c5ac <_free_r+0x1a8>)
    c4d2:	6048      	str	r0, [r1, #4]
    c4d4:	514d      	str	r5, [r1, r5]
    c4d6:	429d      	cmp	r5, r3
    c4d8:	d8d6      	bhi.n	c488 <_free_r+0x84>
    c4da:	e7c2      	b.n	c462 <_free_r+0x5e>
    c4dc:	4662      	mov	r2, ip
    c4de:	18eb      	adds	r3, r5, r3
    c4e0:	4202      	tst	r2, r0
    c4e2:	d106      	bne.n	c4f2 <_free_r+0xee>
    c4e4:	680a      	ldr	r2, [r1, #0]
    c4e6:	1a89      	subs	r1, r1, r2
    c4e8:	6888      	ldr	r0, [r1, #8]
    c4ea:	189b      	adds	r3, r3, r2
    c4ec:	68ca      	ldr	r2, [r1, #12]
    c4ee:	60c2      	str	r2, [r0, #12]
    c4f0:	6090      	str	r0, [r2, #8]
    c4f2:	2201      	movs	r2, #1
    c4f4:	431a      	orrs	r2, r3
    c4f6:	604a      	str	r2, [r1, #4]
    c4f8:	4a2e      	ldr	r2, [pc, #184]	; (c5b4 <_free_r+0x1b0>)
    c4fa:	60b9      	str	r1, [r7, #8]
    c4fc:	6812      	ldr	r2, [r2, #0]
    c4fe:	4293      	cmp	r3, r2
    c500:	d3be      	bcc.n	c480 <_free_r+0x7c>
    c502:	4b2d      	ldr	r3, [pc, #180]	; (c5b8 <_free_r+0x1b4>)
    c504:	0020      	movs	r0, r4
    c506:	6819      	ldr	r1, [r3, #0]
    c508:	f7ff ff2c 	bl	c364 <_malloc_trim_r>
    c50c:	e7b8      	b.n	c480 <_free_r+0x7c>
    c50e:	0018      	movs	r0, r3
    c510:	e7cf      	b.n	c4b2 <_free_r+0xae>
    c512:	4666      	mov	r6, ip
    c514:	18d0      	adds	r0, r2, r3
    c516:	6840      	ldr	r0, [r0, #4]
    c518:	4230      	tst	r0, r6
    c51a:	d13f      	bne.n	c59c <_free_r+0x198>
    c51c:	6890      	ldr	r0, [r2, #8]
    c51e:	195d      	adds	r5, r3, r5
    c520:	68d3      	ldr	r3, [r2, #12]
    c522:	60c3      	str	r3, [r0, #12]
    c524:	6098      	str	r0, [r3, #8]
    c526:	4663      	mov	r3, ip
    c528:	432b      	orrs	r3, r5
    c52a:	604b      	str	r3, [r1, #4]
    c52c:	514d      	str	r5, [r1, r5]
    c52e:	e7a7      	b.n	c480 <_free_r+0x7c>
    c530:	2814      	cmp	r0, #20
    c532:	d814      	bhi.n	c55e <_free_r+0x15a>
    c534:	0002      	movs	r2, r0
    c536:	305c      	adds	r0, #92	; 0x5c
    c538:	325b      	adds	r2, #91	; 0x5b
    c53a:	00c0      	lsls	r0, r0, #3
    c53c:	e7ac      	b.n	c498 <_free_r+0x94>
    c53e:	2301      	movs	r3, #1
    c540:	1092      	asrs	r2, r2, #2
    c542:	4093      	lsls	r3, r2
    c544:	687a      	ldr	r2, [r7, #4]
    c546:	4313      	orrs	r3, r2
    c548:	607b      	str	r3, [r7, #4]
    c54a:	0003      	movs	r3, r0
    c54c:	e7b2      	b.n	c4b4 <_free_r+0xb0>
    c54e:	4328      	orrs	r0, r5
    c550:	60d9      	str	r1, [r3, #12]
    c552:	6099      	str	r1, [r3, #8]
    c554:	60cb      	str	r3, [r1, #12]
    c556:	608b      	str	r3, [r1, #8]
    c558:	6048      	str	r0, [r1, #4]
    c55a:	514d      	str	r5, [r1, r5]
    c55c:	e790      	b.n	c480 <_free_r+0x7c>
    c55e:	2854      	cmp	r0, #84	; 0x54
    c560:	d805      	bhi.n	c56e <_free_r+0x16a>
    c562:	0b28      	lsrs	r0, r5, #12
    c564:	0002      	movs	r2, r0
    c566:	306f      	adds	r0, #111	; 0x6f
    c568:	326e      	adds	r2, #110	; 0x6e
    c56a:	00c0      	lsls	r0, r0, #3
    c56c:	e794      	b.n	c498 <_free_r+0x94>
    c56e:	22aa      	movs	r2, #170	; 0xaa
    c570:	0052      	lsls	r2, r2, #1
    c572:	4290      	cmp	r0, r2
    c574:	d805      	bhi.n	c582 <_free_r+0x17e>
    c576:	0be8      	lsrs	r0, r5, #15
    c578:	0002      	movs	r2, r0
    c57a:	3078      	adds	r0, #120	; 0x78
    c57c:	3277      	adds	r2, #119	; 0x77
    c57e:	00c0      	lsls	r0, r0, #3
    c580:	e78a      	b.n	c498 <_free_r+0x94>
    c582:	4a0e      	ldr	r2, [pc, #56]	; (c5bc <_free_r+0x1b8>)
    c584:	4290      	cmp	r0, r2
    c586:	d805      	bhi.n	c594 <_free_r+0x190>
    c588:	0ca8      	lsrs	r0, r5, #18
    c58a:	0002      	movs	r2, r0
    c58c:	307d      	adds	r0, #125	; 0x7d
    c58e:	327c      	adds	r2, #124	; 0x7c
    c590:	00c0      	lsls	r0, r0, #3
    c592:	e781      	b.n	c498 <_free_r+0x94>
    c594:	20fe      	movs	r0, #254	; 0xfe
    c596:	227e      	movs	r2, #126	; 0x7e
    c598:	0080      	lsls	r0, r0, #2
    c59a:	e77d      	b.n	c498 <_free_r+0x94>
    c59c:	4663      	mov	r3, ip
    c59e:	432b      	orrs	r3, r5
    c5a0:	604b      	str	r3, [r1, #4]
    c5a2:	6015      	str	r5, [r2, #0]
    c5a4:	e76c      	b.n	c480 <_free_r+0x7c>
    c5a6:	46c0      	nop			; (mov r8, r8)
    c5a8:	200005b0 	.word	0x200005b0
    c5ac:	000001ff 	.word	0x000001ff
    c5b0:	200005b8 	.word	0x200005b8
    c5b4:	200009bc 	.word	0x200009bc
    c5b8:	20000c68 	.word	0x20000c68
    c5bc:	00000554 	.word	0x00000554

0000c5c0 <memmove>:
    c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5c2:	4288      	cmp	r0, r1
    c5c4:	d90a      	bls.n	c5dc <memmove+0x1c>
    c5c6:	188b      	adds	r3, r1, r2
    c5c8:	4298      	cmp	r0, r3
    c5ca:	d207      	bcs.n	c5dc <memmove+0x1c>
    c5cc:	1e53      	subs	r3, r2, #1
    c5ce:	2a00      	cmp	r2, #0
    c5d0:	d003      	beq.n	c5da <memmove+0x1a>
    c5d2:	5cca      	ldrb	r2, [r1, r3]
    c5d4:	54c2      	strb	r2, [r0, r3]
    c5d6:	3b01      	subs	r3, #1
    c5d8:	d2fb      	bcs.n	c5d2 <memmove+0x12>
    c5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5dc:	0005      	movs	r5, r0
    c5de:	2a0f      	cmp	r2, #15
    c5e0:	d808      	bhi.n	c5f4 <memmove+0x34>
    c5e2:	2a00      	cmp	r2, #0
    c5e4:	d0f9      	beq.n	c5da <memmove+0x1a>
    c5e6:	2300      	movs	r3, #0
    c5e8:	5ccc      	ldrb	r4, [r1, r3]
    c5ea:	54ec      	strb	r4, [r5, r3]
    c5ec:	3301      	adds	r3, #1
    c5ee:	4293      	cmp	r3, r2
    c5f0:	d1fa      	bne.n	c5e8 <memmove+0x28>
    c5f2:	e7f2      	b.n	c5da <memmove+0x1a>
    c5f4:	000b      	movs	r3, r1
    c5f6:	4303      	orrs	r3, r0
    c5f8:	079b      	lsls	r3, r3, #30
    c5fa:	d12d      	bne.n	c658 <memmove+0x98>
    c5fc:	0015      	movs	r5, r2
    c5fe:	000c      	movs	r4, r1
    c600:	0003      	movs	r3, r0
    c602:	3d10      	subs	r5, #16
    c604:	092f      	lsrs	r7, r5, #4
    c606:	3701      	adds	r7, #1
    c608:	013f      	lsls	r7, r7, #4
    c60a:	19c7      	adds	r7, r0, r7
    c60c:	6826      	ldr	r6, [r4, #0]
    c60e:	601e      	str	r6, [r3, #0]
    c610:	6866      	ldr	r6, [r4, #4]
    c612:	605e      	str	r6, [r3, #4]
    c614:	68a6      	ldr	r6, [r4, #8]
    c616:	609e      	str	r6, [r3, #8]
    c618:	68e6      	ldr	r6, [r4, #12]
    c61a:	3410      	adds	r4, #16
    c61c:	60de      	str	r6, [r3, #12]
    c61e:	3310      	adds	r3, #16
    c620:	429f      	cmp	r7, r3
    c622:	d1f3      	bne.n	c60c <memmove+0x4c>
    c624:	240f      	movs	r4, #15
    c626:	43a5      	bics	r5, r4
    c628:	3510      	adds	r5, #16
    c62a:	1949      	adds	r1, r1, r5
    c62c:	4014      	ands	r4, r2
    c62e:	1945      	adds	r5, r0, r5
    c630:	2c03      	cmp	r4, #3
    c632:	d913      	bls.n	c65c <memmove+0x9c>
    c634:	2300      	movs	r3, #0
    c636:	1f27      	subs	r7, r4, #4
    c638:	08be      	lsrs	r6, r7, #2
    c63a:	3601      	adds	r6, #1
    c63c:	00b6      	lsls	r6, r6, #2
    c63e:	58cc      	ldr	r4, [r1, r3]
    c640:	50ec      	str	r4, [r5, r3]
    c642:	3304      	adds	r3, #4
    c644:	42b3      	cmp	r3, r6
    c646:	d1fa      	bne.n	c63e <memmove+0x7e>
    c648:	2603      	movs	r6, #3
    c64a:	43b7      	bics	r7, r6
    c64c:	1d3c      	adds	r4, r7, #4
    c64e:	1909      	adds	r1, r1, r4
    c650:	192d      	adds	r5, r5, r4
    c652:	4032      	ands	r2, r6
    c654:	d1c7      	bne.n	c5e6 <memmove+0x26>
    c656:	e7c0      	b.n	c5da <memmove+0x1a>
    c658:	0005      	movs	r5, r0
    c65a:	e7c4      	b.n	c5e6 <memmove+0x26>
    c65c:	0022      	movs	r2, r4
    c65e:	e7c0      	b.n	c5e2 <memmove+0x22>

0000c660 <_realloc_r>:
    c660:	b5f0      	push	{r4, r5, r6, r7, lr}
    c662:	464e      	mov	r6, r9
    c664:	4645      	mov	r5, r8
    c666:	46de      	mov	lr, fp
    c668:	4657      	mov	r7, sl
    c66a:	b5e0      	push	{r5, r6, r7, lr}
    c66c:	b085      	sub	sp, #20
    c66e:	9001      	str	r0, [sp, #4]
    c670:	000e      	movs	r6, r1
    c672:	0015      	movs	r5, r2
    c674:	2900      	cmp	r1, #0
    c676:	d100      	bne.n	c67a <_realloc_r+0x1a>
    c678:	e09e      	b.n	c7b8 <_realloc_r+0x158>
    c67a:	0037      	movs	r7, r6
    c67c:	9801      	ldr	r0, [sp, #4]
    c67e:	3f08      	subs	r7, #8
    c680:	f7ff f954 	bl	b92c <__malloc_lock>
    c684:	687a      	ldr	r2, [r7, #4]
    c686:	2303      	movs	r3, #3
    c688:	0014      	movs	r4, r2
    c68a:	439c      	bics	r4, r3
    c68c:	002b      	movs	r3, r5
    c68e:	330b      	adds	r3, #11
    c690:	46b9      	mov	r9, r7
    c692:	2b16      	cmp	r3, #22
    c694:	d847      	bhi.n	c726 <_realloc_r+0xc6>
    c696:	2110      	movs	r1, #16
    c698:	2310      	movs	r3, #16
    c69a:	4688      	mov	r8, r1
    c69c:	4545      	cmp	r5, r8
    c69e:	d846      	bhi.n	c72e <_realloc_r+0xce>
    c6a0:	429c      	cmp	r4, r3
    c6a2:	da49      	bge.n	c738 <_realloc_r+0xd8>
    c6a4:	49cc      	ldr	r1, [pc, #816]	; (c9d8 <_realloc_r+0x378>)
    c6a6:	1938      	adds	r0, r7, r4
    c6a8:	468b      	mov	fp, r1
    c6aa:	6889      	ldr	r1, [r1, #8]
    c6ac:	9002      	str	r0, [sp, #8]
    c6ae:	4288      	cmp	r0, r1
    c6b0:	d100      	bne.n	c6b4 <_realloc_r+0x54>
    c6b2:	e0c2      	b.n	c83a <_realloc_r+0x1da>
    c6b4:	2101      	movs	r1, #1
    c6b6:	468a      	mov	sl, r1
    c6b8:	6840      	ldr	r0, [r0, #4]
    c6ba:	0001      	movs	r1, r0
    c6bc:	9003      	str	r0, [sp, #12]
    c6be:	4650      	mov	r0, sl
    c6c0:	4381      	bics	r1, r0
    c6c2:	468c      	mov	ip, r1
    c6c4:	9902      	ldr	r1, [sp, #8]
    c6c6:	468b      	mov	fp, r1
    c6c8:	44dc      	add	ip, fp
    c6ca:	4661      	mov	r1, ip
    c6cc:	6849      	ldr	r1, [r1, #4]
    c6ce:	4201      	tst	r1, r0
    c6d0:	d04d      	beq.n	c76e <_realloc_r+0x10e>
    c6d2:	4210      	tst	r0, r2
    c6d4:	d100      	bne.n	c6d8 <_realloc_r+0x78>
    c6d6:	e0a2      	b.n	c81e <_realloc_r+0x1be>
    c6d8:	0029      	movs	r1, r5
    c6da:	9801      	ldr	r0, [sp, #4]
    c6dc:	f7fe fdf6 	bl	b2cc <_malloc_r>
    c6e0:	1e05      	subs	r5, r0, #0
    c6e2:	d039      	beq.n	c758 <_realloc_r+0xf8>
    c6e4:	2301      	movs	r3, #1
    c6e6:	0002      	movs	r2, r0
    c6e8:	6879      	ldr	r1, [r7, #4]
    c6ea:	3a08      	subs	r2, #8
    c6ec:	4399      	bics	r1, r3
    c6ee:	187f      	adds	r7, r7, r1
    c6f0:	42ba      	cmp	r2, r7
    c6f2:	d100      	bne.n	c6f6 <_realloc_r+0x96>
    c6f4:	e12e      	b.n	c954 <_realloc_r+0x2f4>
    c6f6:	1f22      	subs	r2, r4, #4
    c6f8:	2a24      	cmp	r2, #36	; 0x24
    c6fa:	d900      	bls.n	c6fe <_realloc_r+0x9e>
    c6fc:	e114      	b.n	c928 <_realloc_r+0x2c8>
    c6fe:	2a13      	cmp	r2, #19
    c700:	d900      	bls.n	c704 <_realloc_r+0xa4>
    c702:	e0e8      	b.n	c8d6 <_realloc_r+0x276>
    c704:	0003      	movs	r3, r0
    c706:	0032      	movs	r2, r6
    c708:	6811      	ldr	r1, [r2, #0]
    c70a:	6019      	str	r1, [r3, #0]
    c70c:	6851      	ldr	r1, [r2, #4]
    c70e:	6059      	str	r1, [r3, #4]
    c710:	6892      	ldr	r2, [r2, #8]
    c712:	609a      	str	r2, [r3, #8]
    c714:	9c01      	ldr	r4, [sp, #4]
    c716:	0031      	movs	r1, r6
    c718:	0020      	movs	r0, r4
    c71a:	f7ff fe73 	bl	c404 <_free_r>
    c71e:	0020      	movs	r0, r4
    c720:	f7ff f90c 	bl	b93c <__malloc_unlock>
    c724:	e01b      	b.n	c75e <_realloc_r+0xfe>
    c726:	2107      	movs	r1, #7
    c728:	438b      	bics	r3, r1
    c72a:	4698      	mov	r8, r3
    c72c:	d5b6      	bpl.n	c69c <_realloc_r+0x3c>
    c72e:	230c      	movs	r3, #12
    c730:	9a01      	ldr	r2, [sp, #4]
    c732:	2500      	movs	r5, #0
    c734:	6013      	str	r3, [r2, #0]
    c736:	e012      	b.n	c75e <_realloc_r+0xfe>
    c738:	0035      	movs	r5, r6
    c73a:	4643      	mov	r3, r8
    c73c:	1ae3      	subs	r3, r4, r3
    c73e:	2b0f      	cmp	r3, #15
    c740:	d825      	bhi.n	c78e <_realloc_r+0x12e>
    c742:	464b      	mov	r3, r9
    c744:	2201      	movs	r2, #1
    c746:	4649      	mov	r1, r9
    c748:	685b      	ldr	r3, [r3, #4]
    c74a:	4013      	ands	r3, r2
    c74c:	4323      	orrs	r3, r4
    c74e:	604b      	str	r3, [r1, #4]
    c750:	444c      	add	r4, r9
    c752:	6863      	ldr	r3, [r4, #4]
    c754:	431a      	orrs	r2, r3
    c756:	6062      	str	r2, [r4, #4]
    c758:	9801      	ldr	r0, [sp, #4]
    c75a:	f7ff f8ef 	bl	b93c <__malloc_unlock>
    c75e:	0028      	movs	r0, r5
    c760:	b005      	add	sp, #20
    c762:	bc3c      	pop	{r2, r3, r4, r5}
    c764:	4690      	mov	r8, r2
    c766:	4699      	mov	r9, r3
    c768:	46a2      	mov	sl, r4
    c76a:	46ab      	mov	fp, r5
    c76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c76e:	2103      	movs	r1, #3
    c770:	9803      	ldr	r0, [sp, #12]
    c772:	468c      	mov	ip, r1
    c774:	4388      	bics	r0, r1
    c776:	1821      	adds	r1, r4, r0
    c778:	468b      	mov	fp, r1
    c77a:	4299      	cmp	r1, r3
    c77c:	db21      	blt.n	c7c2 <_realloc_r+0x162>
    c77e:	9a02      	ldr	r2, [sp, #8]
    c780:	0035      	movs	r5, r6
    c782:	68d3      	ldr	r3, [r2, #12]
    c784:	6892      	ldr	r2, [r2, #8]
    c786:	465c      	mov	r4, fp
    c788:	60d3      	str	r3, [r2, #12]
    c78a:	609a      	str	r2, [r3, #8]
    c78c:	e7d5      	b.n	c73a <_realloc_r+0xda>
    c78e:	464a      	mov	r2, r9
    c790:	2001      	movs	r0, #1
    c792:	4646      	mov	r6, r8
    c794:	6852      	ldr	r2, [r2, #4]
    c796:	4649      	mov	r1, r9
    c798:	4002      	ands	r2, r0
    c79a:	4332      	orrs	r2, r6
    c79c:	464e      	mov	r6, r9
    c79e:	4441      	add	r1, r8
    c7a0:	4303      	orrs	r3, r0
    c7a2:	6072      	str	r2, [r6, #4]
    c7a4:	444c      	add	r4, r9
    c7a6:	604b      	str	r3, [r1, #4]
    c7a8:	6863      	ldr	r3, [r4, #4]
    c7aa:	3108      	adds	r1, #8
    c7ac:	4318      	orrs	r0, r3
    c7ae:	6060      	str	r0, [r4, #4]
    c7b0:	9801      	ldr	r0, [sp, #4]
    c7b2:	f7ff fe27 	bl	c404 <_free_r>
    c7b6:	e7cf      	b.n	c758 <_realloc_r+0xf8>
    c7b8:	0011      	movs	r1, r2
    c7ba:	f7fe fd87 	bl	b2cc <_malloc_r>
    c7be:	0005      	movs	r5, r0
    c7c0:	e7cd      	b.n	c75e <_realloc_r+0xfe>
    c7c2:	4651      	mov	r1, sl
    c7c4:	4211      	tst	r1, r2
    c7c6:	d000      	beq.n	c7ca <_realloc_r+0x16a>
    c7c8:	e786      	b.n	c6d8 <_realloc_r+0x78>
    c7ca:	4661      	mov	r1, ip
    c7cc:	683a      	ldr	r2, [r7, #0]
    c7ce:	1aba      	subs	r2, r7, r2
    c7d0:	4692      	mov	sl, r2
    c7d2:	6852      	ldr	r2, [r2, #4]
    c7d4:	438a      	bics	r2, r1
    c7d6:	1880      	adds	r0, r0, r2
    c7d8:	4683      	mov	fp, r0
    c7da:	44a3      	add	fp, r4
    c7dc:	459b      	cmp	fp, r3
    c7de:	db26      	blt.n	c82e <_realloc_r+0x1ce>
    c7e0:	9a02      	ldr	r2, [sp, #8]
    c7e2:	68d3      	ldr	r3, [r2, #12]
    c7e4:	6892      	ldr	r2, [r2, #8]
    c7e6:	60d3      	str	r3, [r2, #12]
    c7e8:	609a      	str	r2, [r3, #8]
    c7ea:	4653      	mov	r3, sl
    c7ec:	4652      	mov	r2, sl
    c7ee:	4655      	mov	r5, sl
    c7f0:	6892      	ldr	r2, [r2, #8]
    c7f2:	68db      	ldr	r3, [r3, #12]
    c7f4:	3508      	adds	r5, #8
    c7f6:	60d3      	str	r3, [r2, #12]
    c7f8:	609a      	str	r2, [r3, #8]
    c7fa:	1f22      	subs	r2, r4, #4
    c7fc:	2a24      	cmp	r2, #36	; 0x24
    c7fe:	d900      	bls.n	c802 <_realloc_r+0x1a2>
    c800:	e096      	b.n	c930 <_realloc_r+0x2d0>
    c802:	2a13      	cmp	r2, #19
    c804:	d972      	bls.n	c8ec <_realloc_r+0x28c>
    c806:	4653      	mov	r3, sl
    c808:	6831      	ldr	r1, [r6, #0]
    c80a:	6099      	str	r1, [r3, #8]
    c80c:	6871      	ldr	r1, [r6, #4]
    c80e:	60d9      	str	r1, [r3, #12]
    c810:	2a1b      	cmp	r2, #27
    c812:	d900      	bls.n	c816 <_realloc_r+0x1b6>
    c814:	e0a4      	b.n	c960 <_realloc_r+0x300>
    c816:	0032      	movs	r2, r6
    c818:	3310      	adds	r3, #16
    c81a:	3208      	adds	r2, #8
    c81c:	e068      	b.n	c8f0 <_realloc_r+0x290>
    c81e:	683a      	ldr	r2, [r7, #0]
    c820:	1aba      	subs	r2, r7, r2
    c822:	4692      	mov	sl, r2
    c824:	4651      	mov	r1, sl
    c826:	2203      	movs	r2, #3
    c828:	6849      	ldr	r1, [r1, #4]
    c82a:	4391      	bics	r1, r2
    c82c:	000a      	movs	r2, r1
    c82e:	4693      	mov	fp, r2
    c830:	44a3      	add	fp, r4
    c832:	459b      	cmp	fp, r3
    c834:	da00      	bge.n	c838 <_realloc_r+0x1d8>
    c836:	e74f      	b.n	c6d8 <_realloc_r+0x78>
    c838:	e7d7      	b.n	c7ea <_realloc_r+0x18a>
    c83a:	2003      	movs	r0, #3
    c83c:	9902      	ldr	r1, [sp, #8]
    c83e:	4684      	mov	ip, r0
    c840:	6849      	ldr	r1, [r1, #4]
    c842:	4381      	bics	r1, r0
    c844:	4640      	mov	r0, r8
    c846:	1909      	adds	r1, r1, r4
    c848:	3010      	adds	r0, #16
    c84a:	9002      	str	r0, [sp, #8]
    c84c:	4281      	cmp	r1, r0
    c84e:	da58      	bge.n	c902 <_realloc_r+0x2a2>
    c850:	07d2      	lsls	r2, r2, #31
    c852:	d500      	bpl.n	c856 <_realloc_r+0x1f6>
    c854:	e740      	b.n	c6d8 <_realloc_r+0x78>
    c856:	4660      	mov	r0, ip
    c858:	683a      	ldr	r2, [r7, #0]
    c85a:	1aba      	subs	r2, r7, r2
    c85c:	4692      	mov	sl, r2
    c85e:	6852      	ldr	r2, [r2, #4]
    c860:	4382      	bics	r2, r0
    c862:	9802      	ldr	r0, [sp, #8]
    c864:	1851      	adds	r1, r2, r1
    c866:	9103      	str	r1, [sp, #12]
    c868:	4288      	cmp	r0, r1
    c86a:	dce0      	bgt.n	c82e <_realloc_r+0x1ce>
    c86c:	4653      	mov	r3, sl
    c86e:	4652      	mov	r2, sl
    c870:	4655      	mov	r5, sl
    c872:	6892      	ldr	r2, [r2, #8]
    c874:	68db      	ldr	r3, [r3, #12]
    c876:	3508      	adds	r5, #8
    c878:	60d3      	str	r3, [r2, #12]
    c87a:	609a      	str	r2, [r3, #8]
    c87c:	1f22      	subs	r2, r4, #4
    c87e:	2a24      	cmp	r2, #36	; 0x24
    c880:	d900      	bls.n	c884 <_realloc_r+0x224>
    c882:	e08e      	b.n	c9a2 <_realloc_r+0x342>
    c884:	2a13      	cmp	r2, #19
    c886:	d800      	bhi.n	c88a <_realloc_r+0x22a>
    c888:	e088      	b.n	c99c <_realloc_r+0x33c>
    c88a:	4653      	mov	r3, sl
    c88c:	6831      	ldr	r1, [r6, #0]
    c88e:	6099      	str	r1, [r3, #8]
    c890:	6871      	ldr	r1, [r6, #4]
    c892:	60d9      	str	r1, [r3, #12]
    c894:	2a1b      	cmp	r2, #27
    c896:	d900      	bls.n	c89a <_realloc_r+0x23a>
    c898:	e088      	b.n	c9ac <_realloc_r+0x34c>
    c89a:	0032      	movs	r2, r6
    c89c:	3310      	adds	r3, #16
    c89e:	3208      	adds	r2, #8
    c8a0:	6811      	ldr	r1, [r2, #0]
    c8a2:	6019      	str	r1, [r3, #0]
    c8a4:	6851      	ldr	r1, [r2, #4]
    c8a6:	6059      	str	r1, [r3, #4]
    c8a8:	6892      	ldr	r2, [r2, #8]
    c8aa:	609a      	str	r2, [r3, #8]
    c8ac:	4651      	mov	r1, sl
    c8ae:	465b      	mov	r3, fp
    c8b0:	4642      	mov	r2, r8
    c8b2:	4441      	add	r1, r8
    c8b4:	6099      	str	r1, [r3, #8]
    c8b6:	9b03      	ldr	r3, [sp, #12]
    c8b8:	9801      	ldr	r0, [sp, #4]
    c8ba:	1a9a      	subs	r2, r3, r2
    c8bc:	2301      	movs	r3, #1
    c8be:	431a      	orrs	r2, r3
    c8c0:	604a      	str	r2, [r1, #4]
    c8c2:	4652      	mov	r2, sl
    c8c4:	6852      	ldr	r2, [r2, #4]
    c8c6:	4013      	ands	r3, r2
    c8c8:	4642      	mov	r2, r8
    c8ca:	4313      	orrs	r3, r2
    c8cc:	4652      	mov	r2, sl
    c8ce:	6053      	str	r3, [r2, #4]
    c8d0:	f7ff f834 	bl	b93c <__malloc_unlock>
    c8d4:	e743      	b.n	c75e <_realloc_r+0xfe>
    c8d6:	6833      	ldr	r3, [r6, #0]
    c8d8:	6003      	str	r3, [r0, #0]
    c8da:	6873      	ldr	r3, [r6, #4]
    c8dc:	6043      	str	r3, [r0, #4]
    c8de:	2a1b      	cmp	r2, #27
    c8e0:	d82d      	bhi.n	c93e <_realloc_r+0x2de>
    c8e2:	0003      	movs	r3, r0
    c8e4:	0032      	movs	r2, r6
    c8e6:	3308      	adds	r3, #8
    c8e8:	3208      	adds	r2, #8
    c8ea:	e70d      	b.n	c708 <_realloc_r+0xa8>
    c8ec:	002b      	movs	r3, r5
    c8ee:	0032      	movs	r2, r6
    c8f0:	6811      	ldr	r1, [r2, #0]
    c8f2:	465c      	mov	r4, fp
    c8f4:	6019      	str	r1, [r3, #0]
    c8f6:	6851      	ldr	r1, [r2, #4]
    c8f8:	46d1      	mov	r9, sl
    c8fa:	6059      	str	r1, [r3, #4]
    c8fc:	6892      	ldr	r2, [r2, #8]
    c8fe:	609a      	str	r2, [r3, #8]
    c900:	e71b      	b.n	c73a <_realloc_r+0xda>
    c902:	4643      	mov	r3, r8
    c904:	18fa      	adds	r2, r7, r3
    c906:	465b      	mov	r3, fp
    c908:	609a      	str	r2, [r3, #8]
    c90a:	4643      	mov	r3, r8
    c90c:	1ac9      	subs	r1, r1, r3
    c90e:	2301      	movs	r3, #1
    c910:	4319      	orrs	r1, r3
    c912:	6051      	str	r1, [r2, #4]
    c914:	687a      	ldr	r2, [r7, #4]
    c916:	9801      	ldr	r0, [sp, #4]
    c918:	4013      	ands	r3, r2
    c91a:	4642      	mov	r2, r8
    c91c:	4313      	orrs	r3, r2
    c91e:	607b      	str	r3, [r7, #4]
    c920:	f7ff f80c 	bl	b93c <__malloc_unlock>
    c924:	0035      	movs	r5, r6
    c926:	e71a      	b.n	c75e <_realloc_r+0xfe>
    c928:	0031      	movs	r1, r6
    c92a:	f7ff fe49 	bl	c5c0 <memmove>
    c92e:	e6f1      	b.n	c714 <_realloc_r+0xb4>
    c930:	0031      	movs	r1, r6
    c932:	0028      	movs	r0, r5
    c934:	f7ff fe44 	bl	c5c0 <memmove>
    c938:	465c      	mov	r4, fp
    c93a:	46d1      	mov	r9, sl
    c93c:	e6fd      	b.n	c73a <_realloc_r+0xda>
    c93e:	68b3      	ldr	r3, [r6, #8]
    c940:	6083      	str	r3, [r0, #8]
    c942:	68f3      	ldr	r3, [r6, #12]
    c944:	60c3      	str	r3, [r0, #12]
    c946:	2a24      	cmp	r2, #36	; 0x24
    c948:	d015      	beq.n	c976 <_realloc_r+0x316>
    c94a:	0003      	movs	r3, r0
    c94c:	0032      	movs	r2, r6
    c94e:	3310      	adds	r3, #16
    c950:	3210      	adds	r2, #16
    c952:	e6d9      	b.n	c708 <_realloc_r+0xa8>
    c954:	6853      	ldr	r3, [r2, #4]
    c956:	2203      	movs	r2, #3
    c958:	4393      	bics	r3, r2
    c95a:	18e4      	adds	r4, r4, r3
    c95c:	0035      	movs	r5, r6
    c95e:	e6ec      	b.n	c73a <_realloc_r+0xda>
    c960:	4653      	mov	r3, sl
    c962:	68b1      	ldr	r1, [r6, #8]
    c964:	6119      	str	r1, [r3, #16]
    c966:	68f1      	ldr	r1, [r6, #12]
    c968:	6159      	str	r1, [r3, #20]
    c96a:	2a24      	cmp	r2, #36	; 0x24
    c96c:	d00c      	beq.n	c988 <_realloc_r+0x328>
    c96e:	0032      	movs	r2, r6
    c970:	3318      	adds	r3, #24
    c972:	3210      	adds	r2, #16
    c974:	e7bc      	b.n	c8f0 <_realloc_r+0x290>
    c976:	6933      	ldr	r3, [r6, #16]
    c978:	0032      	movs	r2, r6
    c97a:	6103      	str	r3, [r0, #16]
    c97c:	0003      	movs	r3, r0
    c97e:	6971      	ldr	r1, [r6, #20]
    c980:	3318      	adds	r3, #24
    c982:	3218      	adds	r2, #24
    c984:	6141      	str	r1, [r0, #20]
    c986:	e6bf      	b.n	c708 <_realloc_r+0xa8>
    c988:	4653      	mov	r3, sl
    c98a:	6932      	ldr	r2, [r6, #16]
    c98c:	4651      	mov	r1, sl
    c98e:	619a      	str	r2, [r3, #24]
    c990:	0032      	movs	r2, r6
    c992:	6970      	ldr	r0, [r6, #20]
    c994:	3320      	adds	r3, #32
    c996:	3218      	adds	r2, #24
    c998:	61c8      	str	r0, [r1, #28]
    c99a:	e7a9      	b.n	c8f0 <_realloc_r+0x290>
    c99c:	002b      	movs	r3, r5
    c99e:	0032      	movs	r2, r6
    c9a0:	e77e      	b.n	c8a0 <_realloc_r+0x240>
    c9a2:	0031      	movs	r1, r6
    c9a4:	0028      	movs	r0, r5
    c9a6:	f7ff fe0b 	bl	c5c0 <memmove>
    c9aa:	e77f      	b.n	c8ac <_realloc_r+0x24c>
    c9ac:	4653      	mov	r3, sl
    c9ae:	68b1      	ldr	r1, [r6, #8]
    c9b0:	6119      	str	r1, [r3, #16]
    c9b2:	68f1      	ldr	r1, [r6, #12]
    c9b4:	6159      	str	r1, [r3, #20]
    c9b6:	2a24      	cmp	r2, #36	; 0x24
    c9b8:	d003      	beq.n	c9c2 <_realloc_r+0x362>
    c9ba:	0032      	movs	r2, r6
    c9bc:	3318      	adds	r3, #24
    c9be:	3210      	adds	r2, #16
    c9c0:	e76e      	b.n	c8a0 <_realloc_r+0x240>
    c9c2:	4653      	mov	r3, sl
    c9c4:	6932      	ldr	r2, [r6, #16]
    c9c6:	4651      	mov	r1, sl
    c9c8:	619a      	str	r2, [r3, #24]
    c9ca:	0032      	movs	r2, r6
    c9cc:	6970      	ldr	r0, [r6, #20]
    c9ce:	3320      	adds	r3, #32
    c9d0:	3218      	adds	r2, #24
    c9d2:	61c8      	str	r0, [r1, #28]
    c9d4:	e764      	b.n	c8a0 <_realloc_r+0x240>
    c9d6:	46c0      	nop			; (mov r8, r8)
    c9d8:	200005b0 	.word	0x200005b0

0000c9dc <__divsi3>:
    c9dc:	4603      	mov	r3, r0
    c9de:	430b      	orrs	r3, r1
    c9e0:	d47f      	bmi.n	cae2 <__divsi3+0x106>
    c9e2:	2200      	movs	r2, #0
    c9e4:	0843      	lsrs	r3, r0, #1
    c9e6:	428b      	cmp	r3, r1
    c9e8:	d374      	bcc.n	cad4 <__divsi3+0xf8>
    c9ea:	0903      	lsrs	r3, r0, #4
    c9ec:	428b      	cmp	r3, r1
    c9ee:	d35f      	bcc.n	cab0 <__divsi3+0xd4>
    c9f0:	0a03      	lsrs	r3, r0, #8
    c9f2:	428b      	cmp	r3, r1
    c9f4:	d344      	bcc.n	ca80 <__divsi3+0xa4>
    c9f6:	0b03      	lsrs	r3, r0, #12
    c9f8:	428b      	cmp	r3, r1
    c9fa:	d328      	bcc.n	ca4e <__divsi3+0x72>
    c9fc:	0c03      	lsrs	r3, r0, #16
    c9fe:	428b      	cmp	r3, r1
    ca00:	d30d      	bcc.n	ca1e <__divsi3+0x42>
    ca02:	22ff      	movs	r2, #255	; 0xff
    ca04:	0209      	lsls	r1, r1, #8
    ca06:	ba12      	rev	r2, r2
    ca08:	0c03      	lsrs	r3, r0, #16
    ca0a:	428b      	cmp	r3, r1
    ca0c:	d302      	bcc.n	ca14 <__divsi3+0x38>
    ca0e:	1212      	asrs	r2, r2, #8
    ca10:	0209      	lsls	r1, r1, #8
    ca12:	d065      	beq.n	cae0 <__divsi3+0x104>
    ca14:	0b03      	lsrs	r3, r0, #12
    ca16:	428b      	cmp	r3, r1
    ca18:	d319      	bcc.n	ca4e <__divsi3+0x72>
    ca1a:	e000      	b.n	ca1e <__divsi3+0x42>
    ca1c:	0a09      	lsrs	r1, r1, #8
    ca1e:	0bc3      	lsrs	r3, r0, #15
    ca20:	428b      	cmp	r3, r1
    ca22:	d301      	bcc.n	ca28 <__divsi3+0x4c>
    ca24:	03cb      	lsls	r3, r1, #15
    ca26:	1ac0      	subs	r0, r0, r3
    ca28:	4152      	adcs	r2, r2
    ca2a:	0b83      	lsrs	r3, r0, #14
    ca2c:	428b      	cmp	r3, r1
    ca2e:	d301      	bcc.n	ca34 <__divsi3+0x58>
    ca30:	038b      	lsls	r3, r1, #14
    ca32:	1ac0      	subs	r0, r0, r3
    ca34:	4152      	adcs	r2, r2
    ca36:	0b43      	lsrs	r3, r0, #13
    ca38:	428b      	cmp	r3, r1
    ca3a:	d301      	bcc.n	ca40 <__divsi3+0x64>
    ca3c:	034b      	lsls	r3, r1, #13
    ca3e:	1ac0      	subs	r0, r0, r3
    ca40:	4152      	adcs	r2, r2
    ca42:	0b03      	lsrs	r3, r0, #12
    ca44:	428b      	cmp	r3, r1
    ca46:	d301      	bcc.n	ca4c <__divsi3+0x70>
    ca48:	030b      	lsls	r3, r1, #12
    ca4a:	1ac0      	subs	r0, r0, r3
    ca4c:	4152      	adcs	r2, r2
    ca4e:	0ac3      	lsrs	r3, r0, #11
    ca50:	428b      	cmp	r3, r1
    ca52:	d301      	bcc.n	ca58 <__divsi3+0x7c>
    ca54:	02cb      	lsls	r3, r1, #11
    ca56:	1ac0      	subs	r0, r0, r3
    ca58:	4152      	adcs	r2, r2
    ca5a:	0a83      	lsrs	r3, r0, #10
    ca5c:	428b      	cmp	r3, r1
    ca5e:	d301      	bcc.n	ca64 <__divsi3+0x88>
    ca60:	028b      	lsls	r3, r1, #10
    ca62:	1ac0      	subs	r0, r0, r3
    ca64:	4152      	adcs	r2, r2
    ca66:	0a43      	lsrs	r3, r0, #9
    ca68:	428b      	cmp	r3, r1
    ca6a:	d301      	bcc.n	ca70 <__divsi3+0x94>
    ca6c:	024b      	lsls	r3, r1, #9
    ca6e:	1ac0      	subs	r0, r0, r3
    ca70:	4152      	adcs	r2, r2
    ca72:	0a03      	lsrs	r3, r0, #8
    ca74:	428b      	cmp	r3, r1
    ca76:	d301      	bcc.n	ca7c <__divsi3+0xa0>
    ca78:	020b      	lsls	r3, r1, #8
    ca7a:	1ac0      	subs	r0, r0, r3
    ca7c:	4152      	adcs	r2, r2
    ca7e:	d2cd      	bcs.n	ca1c <__divsi3+0x40>
    ca80:	09c3      	lsrs	r3, r0, #7
    ca82:	428b      	cmp	r3, r1
    ca84:	d301      	bcc.n	ca8a <__divsi3+0xae>
    ca86:	01cb      	lsls	r3, r1, #7
    ca88:	1ac0      	subs	r0, r0, r3
    ca8a:	4152      	adcs	r2, r2
    ca8c:	0983      	lsrs	r3, r0, #6
    ca8e:	428b      	cmp	r3, r1
    ca90:	d301      	bcc.n	ca96 <__divsi3+0xba>
    ca92:	018b      	lsls	r3, r1, #6
    ca94:	1ac0      	subs	r0, r0, r3
    ca96:	4152      	adcs	r2, r2
    ca98:	0943      	lsrs	r3, r0, #5
    ca9a:	428b      	cmp	r3, r1
    ca9c:	d301      	bcc.n	caa2 <__divsi3+0xc6>
    ca9e:	014b      	lsls	r3, r1, #5
    caa0:	1ac0      	subs	r0, r0, r3
    caa2:	4152      	adcs	r2, r2
    caa4:	0903      	lsrs	r3, r0, #4
    caa6:	428b      	cmp	r3, r1
    caa8:	d301      	bcc.n	caae <__divsi3+0xd2>
    caaa:	010b      	lsls	r3, r1, #4
    caac:	1ac0      	subs	r0, r0, r3
    caae:	4152      	adcs	r2, r2
    cab0:	08c3      	lsrs	r3, r0, #3
    cab2:	428b      	cmp	r3, r1
    cab4:	d301      	bcc.n	caba <__divsi3+0xde>
    cab6:	00cb      	lsls	r3, r1, #3
    cab8:	1ac0      	subs	r0, r0, r3
    caba:	4152      	adcs	r2, r2
    cabc:	0883      	lsrs	r3, r0, #2
    cabe:	428b      	cmp	r3, r1
    cac0:	d301      	bcc.n	cac6 <__divsi3+0xea>
    cac2:	008b      	lsls	r3, r1, #2
    cac4:	1ac0      	subs	r0, r0, r3
    cac6:	4152      	adcs	r2, r2
    cac8:	0843      	lsrs	r3, r0, #1
    caca:	428b      	cmp	r3, r1
    cacc:	d301      	bcc.n	cad2 <__divsi3+0xf6>
    cace:	004b      	lsls	r3, r1, #1
    cad0:	1ac0      	subs	r0, r0, r3
    cad2:	4152      	adcs	r2, r2
    cad4:	1a41      	subs	r1, r0, r1
    cad6:	d200      	bcs.n	cada <__divsi3+0xfe>
    cad8:	4601      	mov	r1, r0
    cada:	4152      	adcs	r2, r2
    cadc:	4610      	mov	r0, r2
    cade:	4770      	bx	lr
    cae0:	e05d      	b.n	cb9e <__divsi3+0x1c2>
    cae2:	0fca      	lsrs	r2, r1, #31
    cae4:	d000      	beq.n	cae8 <__divsi3+0x10c>
    cae6:	4249      	negs	r1, r1
    cae8:	1003      	asrs	r3, r0, #32
    caea:	d300      	bcc.n	caee <__divsi3+0x112>
    caec:	4240      	negs	r0, r0
    caee:	4053      	eors	r3, r2
    caf0:	2200      	movs	r2, #0
    caf2:	469c      	mov	ip, r3
    caf4:	0903      	lsrs	r3, r0, #4
    caf6:	428b      	cmp	r3, r1
    caf8:	d32d      	bcc.n	cb56 <__divsi3+0x17a>
    cafa:	0a03      	lsrs	r3, r0, #8
    cafc:	428b      	cmp	r3, r1
    cafe:	d312      	bcc.n	cb26 <__divsi3+0x14a>
    cb00:	22fc      	movs	r2, #252	; 0xfc
    cb02:	0189      	lsls	r1, r1, #6
    cb04:	ba12      	rev	r2, r2
    cb06:	0a03      	lsrs	r3, r0, #8
    cb08:	428b      	cmp	r3, r1
    cb0a:	d30c      	bcc.n	cb26 <__divsi3+0x14a>
    cb0c:	0189      	lsls	r1, r1, #6
    cb0e:	1192      	asrs	r2, r2, #6
    cb10:	428b      	cmp	r3, r1
    cb12:	d308      	bcc.n	cb26 <__divsi3+0x14a>
    cb14:	0189      	lsls	r1, r1, #6
    cb16:	1192      	asrs	r2, r2, #6
    cb18:	428b      	cmp	r3, r1
    cb1a:	d304      	bcc.n	cb26 <__divsi3+0x14a>
    cb1c:	0189      	lsls	r1, r1, #6
    cb1e:	d03a      	beq.n	cb96 <__divsi3+0x1ba>
    cb20:	1192      	asrs	r2, r2, #6
    cb22:	e000      	b.n	cb26 <__divsi3+0x14a>
    cb24:	0989      	lsrs	r1, r1, #6
    cb26:	09c3      	lsrs	r3, r0, #7
    cb28:	428b      	cmp	r3, r1
    cb2a:	d301      	bcc.n	cb30 <__divsi3+0x154>
    cb2c:	01cb      	lsls	r3, r1, #7
    cb2e:	1ac0      	subs	r0, r0, r3
    cb30:	4152      	adcs	r2, r2
    cb32:	0983      	lsrs	r3, r0, #6
    cb34:	428b      	cmp	r3, r1
    cb36:	d301      	bcc.n	cb3c <__divsi3+0x160>
    cb38:	018b      	lsls	r3, r1, #6
    cb3a:	1ac0      	subs	r0, r0, r3
    cb3c:	4152      	adcs	r2, r2
    cb3e:	0943      	lsrs	r3, r0, #5
    cb40:	428b      	cmp	r3, r1
    cb42:	d301      	bcc.n	cb48 <__divsi3+0x16c>
    cb44:	014b      	lsls	r3, r1, #5
    cb46:	1ac0      	subs	r0, r0, r3
    cb48:	4152      	adcs	r2, r2
    cb4a:	0903      	lsrs	r3, r0, #4
    cb4c:	428b      	cmp	r3, r1
    cb4e:	d301      	bcc.n	cb54 <__divsi3+0x178>
    cb50:	010b      	lsls	r3, r1, #4
    cb52:	1ac0      	subs	r0, r0, r3
    cb54:	4152      	adcs	r2, r2
    cb56:	08c3      	lsrs	r3, r0, #3
    cb58:	428b      	cmp	r3, r1
    cb5a:	d301      	bcc.n	cb60 <__divsi3+0x184>
    cb5c:	00cb      	lsls	r3, r1, #3
    cb5e:	1ac0      	subs	r0, r0, r3
    cb60:	4152      	adcs	r2, r2
    cb62:	0883      	lsrs	r3, r0, #2
    cb64:	428b      	cmp	r3, r1
    cb66:	d301      	bcc.n	cb6c <__divsi3+0x190>
    cb68:	008b      	lsls	r3, r1, #2
    cb6a:	1ac0      	subs	r0, r0, r3
    cb6c:	4152      	adcs	r2, r2
    cb6e:	d2d9      	bcs.n	cb24 <__divsi3+0x148>
    cb70:	0843      	lsrs	r3, r0, #1
    cb72:	428b      	cmp	r3, r1
    cb74:	d301      	bcc.n	cb7a <__divsi3+0x19e>
    cb76:	004b      	lsls	r3, r1, #1
    cb78:	1ac0      	subs	r0, r0, r3
    cb7a:	4152      	adcs	r2, r2
    cb7c:	1a41      	subs	r1, r0, r1
    cb7e:	d200      	bcs.n	cb82 <__divsi3+0x1a6>
    cb80:	4601      	mov	r1, r0
    cb82:	4663      	mov	r3, ip
    cb84:	4152      	adcs	r2, r2
    cb86:	105b      	asrs	r3, r3, #1
    cb88:	4610      	mov	r0, r2
    cb8a:	d301      	bcc.n	cb90 <__divsi3+0x1b4>
    cb8c:	4240      	negs	r0, r0
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d500      	bpl.n	cb94 <__divsi3+0x1b8>
    cb92:	4249      	negs	r1, r1
    cb94:	4770      	bx	lr
    cb96:	4663      	mov	r3, ip
    cb98:	105b      	asrs	r3, r3, #1
    cb9a:	d300      	bcc.n	cb9e <__divsi3+0x1c2>
    cb9c:	4240      	negs	r0, r0
    cb9e:	b501      	push	{r0, lr}
    cba0:	2000      	movs	r0, #0
    cba2:	f7f9 fc21 	bl	63e8 <__aeabi_idiv0>
    cba6:	bd02      	pop	{r1, pc}

0000cba8 <__aeabi_idivmod>:
    cba8:	2900      	cmp	r1, #0
    cbaa:	d0f8      	beq.n	cb9e <__divsi3+0x1c2>
    cbac:	e716      	b.n	c9dc <__divsi3>
    cbae:	4770      	bx	lr

0000cbb0 <__aeabi_uldivmod>:
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	d111      	bne.n	cbd8 <__aeabi_uldivmod+0x28>
    cbb4:	2a00      	cmp	r2, #0
    cbb6:	d10f      	bne.n	cbd8 <__aeabi_uldivmod+0x28>
    cbb8:	2900      	cmp	r1, #0
    cbba:	d100      	bne.n	cbbe <__aeabi_uldivmod+0xe>
    cbbc:	2800      	cmp	r0, #0
    cbbe:	d002      	beq.n	cbc6 <__aeabi_uldivmod+0x16>
    cbc0:	2100      	movs	r1, #0
    cbc2:	43c9      	mvns	r1, r1
    cbc4:	1c08      	adds	r0, r1, #0
    cbc6:	b407      	push	{r0, r1, r2}
    cbc8:	4802      	ldr	r0, [pc, #8]	; (cbd4 <__aeabi_uldivmod+0x24>)
    cbca:	a102      	add	r1, pc, #8	; (adr r1, cbd4 <__aeabi_uldivmod+0x24>)
    cbcc:	1840      	adds	r0, r0, r1
    cbce:	9002      	str	r0, [sp, #8]
    cbd0:	bd03      	pop	{r0, r1, pc}
    cbd2:	46c0      	nop			; (mov r8, r8)
    cbd4:	ffff9815 	.word	0xffff9815
    cbd8:	b403      	push	{r0, r1}
    cbda:	4668      	mov	r0, sp
    cbdc:	b501      	push	{r0, lr}
    cbde:	9802      	ldr	r0, [sp, #8]
    cbe0:	f000 f806 	bl	cbf0 <__udivmoddi4>
    cbe4:	9b01      	ldr	r3, [sp, #4]
    cbe6:	469e      	mov	lr, r3
    cbe8:	b002      	add	sp, #8
    cbea:	bc0c      	pop	{r2, r3}
    cbec:	4770      	bx	lr
    cbee:	46c0      	nop			; (mov r8, r8)

0000cbf0 <__udivmoddi4>:
    cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbf2:	4657      	mov	r7, sl
    cbf4:	464e      	mov	r6, r9
    cbf6:	4645      	mov	r5, r8
    cbf8:	46de      	mov	lr, fp
    cbfa:	b5e0      	push	{r5, r6, r7, lr}
    cbfc:	0004      	movs	r4, r0
    cbfe:	b083      	sub	sp, #12
    cc00:	000d      	movs	r5, r1
    cc02:	4692      	mov	sl, r2
    cc04:	4699      	mov	r9, r3
    cc06:	428b      	cmp	r3, r1
    cc08:	d82f      	bhi.n	cc6a <__udivmoddi4+0x7a>
    cc0a:	d02c      	beq.n	cc66 <__udivmoddi4+0x76>
    cc0c:	4649      	mov	r1, r9
    cc0e:	4650      	mov	r0, sl
    cc10:	f000 f8ae 	bl	cd70 <__clzdi2>
    cc14:	0029      	movs	r1, r5
    cc16:	0006      	movs	r6, r0
    cc18:	0020      	movs	r0, r4
    cc1a:	f000 f8a9 	bl	cd70 <__clzdi2>
    cc1e:	1a33      	subs	r3, r6, r0
    cc20:	4698      	mov	r8, r3
    cc22:	3b20      	subs	r3, #32
    cc24:	469b      	mov	fp, r3
    cc26:	d500      	bpl.n	cc2a <__udivmoddi4+0x3a>
    cc28:	e074      	b.n	cd14 <__udivmoddi4+0x124>
    cc2a:	4653      	mov	r3, sl
    cc2c:	465a      	mov	r2, fp
    cc2e:	4093      	lsls	r3, r2
    cc30:	001f      	movs	r7, r3
    cc32:	4653      	mov	r3, sl
    cc34:	4642      	mov	r2, r8
    cc36:	4093      	lsls	r3, r2
    cc38:	001e      	movs	r6, r3
    cc3a:	42af      	cmp	r7, r5
    cc3c:	d829      	bhi.n	cc92 <__udivmoddi4+0xa2>
    cc3e:	d026      	beq.n	cc8e <__udivmoddi4+0x9e>
    cc40:	465b      	mov	r3, fp
    cc42:	1ba4      	subs	r4, r4, r6
    cc44:	41bd      	sbcs	r5, r7
    cc46:	2b00      	cmp	r3, #0
    cc48:	da00      	bge.n	cc4c <__udivmoddi4+0x5c>
    cc4a:	e079      	b.n	cd40 <__udivmoddi4+0x150>
    cc4c:	2200      	movs	r2, #0
    cc4e:	2300      	movs	r3, #0
    cc50:	9200      	str	r2, [sp, #0]
    cc52:	9301      	str	r3, [sp, #4]
    cc54:	2301      	movs	r3, #1
    cc56:	465a      	mov	r2, fp
    cc58:	4093      	lsls	r3, r2
    cc5a:	9301      	str	r3, [sp, #4]
    cc5c:	2301      	movs	r3, #1
    cc5e:	4642      	mov	r2, r8
    cc60:	4093      	lsls	r3, r2
    cc62:	9300      	str	r3, [sp, #0]
    cc64:	e019      	b.n	cc9a <__udivmoddi4+0xaa>
    cc66:	4282      	cmp	r2, r0
    cc68:	d9d0      	bls.n	cc0c <__udivmoddi4+0x1c>
    cc6a:	2200      	movs	r2, #0
    cc6c:	2300      	movs	r3, #0
    cc6e:	9200      	str	r2, [sp, #0]
    cc70:	9301      	str	r3, [sp, #4]
    cc72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc74:	2b00      	cmp	r3, #0
    cc76:	d001      	beq.n	cc7c <__udivmoddi4+0x8c>
    cc78:	601c      	str	r4, [r3, #0]
    cc7a:	605d      	str	r5, [r3, #4]
    cc7c:	9800      	ldr	r0, [sp, #0]
    cc7e:	9901      	ldr	r1, [sp, #4]
    cc80:	b003      	add	sp, #12
    cc82:	bc3c      	pop	{r2, r3, r4, r5}
    cc84:	4690      	mov	r8, r2
    cc86:	4699      	mov	r9, r3
    cc88:	46a2      	mov	sl, r4
    cc8a:	46ab      	mov	fp, r5
    cc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc8e:	42a3      	cmp	r3, r4
    cc90:	d9d6      	bls.n	cc40 <__udivmoddi4+0x50>
    cc92:	2200      	movs	r2, #0
    cc94:	2300      	movs	r3, #0
    cc96:	9200      	str	r2, [sp, #0]
    cc98:	9301      	str	r3, [sp, #4]
    cc9a:	4643      	mov	r3, r8
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	d0e8      	beq.n	cc72 <__udivmoddi4+0x82>
    cca0:	07fb      	lsls	r3, r7, #31
    cca2:	0872      	lsrs	r2, r6, #1
    cca4:	431a      	orrs	r2, r3
    cca6:	4646      	mov	r6, r8
    cca8:	087b      	lsrs	r3, r7, #1
    ccaa:	e00e      	b.n	ccca <__udivmoddi4+0xda>
    ccac:	42ab      	cmp	r3, r5
    ccae:	d101      	bne.n	ccb4 <__udivmoddi4+0xc4>
    ccb0:	42a2      	cmp	r2, r4
    ccb2:	d80c      	bhi.n	ccce <__udivmoddi4+0xde>
    ccb4:	1aa4      	subs	r4, r4, r2
    ccb6:	419d      	sbcs	r5, r3
    ccb8:	2001      	movs	r0, #1
    ccba:	1924      	adds	r4, r4, r4
    ccbc:	416d      	adcs	r5, r5
    ccbe:	2100      	movs	r1, #0
    ccc0:	3e01      	subs	r6, #1
    ccc2:	1824      	adds	r4, r4, r0
    ccc4:	414d      	adcs	r5, r1
    ccc6:	2e00      	cmp	r6, #0
    ccc8:	d006      	beq.n	ccd8 <__udivmoddi4+0xe8>
    ccca:	42ab      	cmp	r3, r5
    cccc:	d9ee      	bls.n	ccac <__udivmoddi4+0xbc>
    ccce:	3e01      	subs	r6, #1
    ccd0:	1924      	adds	r4, r4, r4
    ccd2:	416d      	adcs	r5, r5
    ccd4:	2e00      	cmp	r6, #0
    ccd6:	d1f8      	bne.n	ccca <__udivmoddi4+0xda>
    ccd8:	465b      	mov	r3, fp
    ccda:	9800      	ldr	r0, [sp, #0]
    ccdc:	9901      	ldr	r1, [sp, #4]
    ccde:	1900      	adds	r0, r0, r4
    cce0:	4169      	adcs	r1, r5
    cce2:	2b00      	cmp	r3, #0
    cce4:	db22      	blt.n	cd2c <__udivmoddi4+0x13c>
    cce6:	002b      	movs	r3, r5
    cce8:	465a      	mov	r2, fp
    ccea:	40d3      	lsrs	r3, r2
    ccec:	002a      	movs	r2, r5
    ccee:	4644      	mov	r4, r8
    ccf0:	40e2      	lsrs	r2, r4
    ccf2:	001c      	movs	r4, r3
    ccf4:	465b      	mov	r3, fp
    ccf6:	0015      	movs	r5, r2
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	db2c      	blt.n	cd56 <__udivmoddi4+0x166>
    ccfc:	0026      	movs	r6, r4
    ccfe:	409e      	lsls	r6, r3
    cd00:	0033      	movs	r3, r6
    cd02:	0026      	movs	r6, r4
    cd04:	4647      	mov	r7, r8
    cd06:	40be      	lsls	r6, r7
    cd08:	0032      	movs	r2, r6
    cd0a:	1a80      	subs	r0, r0, r2
    cd0c:	4199      	sbcs	r1, r3
    cd0e:	9000      	str	r0, [sp, #0]
    cd10:	9101      	str	r1, [sp, #4]
    cd12:	e7ae      	b.n	cc72 <__udivmoddi4+0x82>
    cd14:	4642      	mov	r2, r8
    cd16:	2320      	movs	r3, #32
    cd18:	1a9b      	subs	r3, r3, r2
    cd1a:	4652      	mov	r2, sl
    cd1c:	40da      	lsrs	r2, r3
    cd1e:	4641      	mov	r1, r8
    cd20:	0013      	movs	r3, r2
    cd22:	464a      	mov	r2, r9
    cd24:	408a      	lsls	r2, r1
    cd26:	0017      	movs	r7, r2
    cd28:	431f      	orrs	r7, r3
    cd2a:	e782      	b.n	cc32 <__udivmoddi4+0x42>
    cd2c:	4642      	mov	r2, r8
    cd2e:	2320      	movs	r3, #32
    cd30:	1a9b      	subs	r3, r3, r2
    cd32:	002a      	movs	r2, r5
    cd34:	4646      	mov	r6, r8
    cd36:	409a      	lsls	r2, r3
    cd38:	0023      	movs	r3, r4
    cd3a:	40f3      	lsrs	r3, r6
    cd3c:	4313      	orrs	r3, r2
    cd3e:	e7d5      	b.n	ccec <__udivmoddi4+0xfc>
    cd40:	4642      	mov	r2, r8
    cd42:	2320      	movs	r3, #32
    cd44:	2100      	movs	r1, #0
    cd46:	1a9b      	subs	r3, r3, r2
    cd48:	2200      	movs	r2, #0
    cd4a:	9100      	str	r1, [sp, #0]
    cd4c:	9201      	str	r2, [sp, #4]
    cd4e:	2201      	movs	r2, #1
    cd50:	40da      	lsrs	r2, r3
    cd52:	9201      	str	r2, [sp, #4]
    cd54:	e782      	b.n	cc5c <__udivmoddi4+0x6c>
    cd56:	4642      	mov	r2, r8
    cd58:	2320      	movs	r3, #32
    cd5a:	0026      	movs	r6, r4
    cd5c:	1a9b      	subs	r3, r3, r2
    cd5e:	40de      	lsrs	r6, r3
    cd60:	002f      	movs	r7, r5
    cd62:	46b4      	mov	ip, r6
    cd64:	4097      	lsls	r7, r2
    cd66:	4666      	mov	r6, ip
    cd68:	003b      	movs	r3, r7
    cd6a:	4333      	orrs	r3, r6
    cd6c:	e7c9      	b.n	cd02 <__udivmoddi4+0x112>
    cd6e:	46c0      	nop			; (mov r8, r8)

0000cd70 <__clzdi2>:
    cd70:	b510      	push	{r4, lr}
    cd72:	2900      	cmp	r1, #0
    cd74:	d103      	bne.n	cd7e <__clzdi2+0xe>
    cd76:	f7fb fa6b 	bl	8250 <__clzsi2>
    cd7a:	3020      	adds	r0, #32
    cd7c:	e002      	b.n	cd84 <__clzdi2+0x14>
    cd7e:	1c08      	adds	r0, r1, #0
    cd80:	f7fb fa66 	bl	8250 <__clzsi2>
    cd84:	bd10      	pop	{r4, pc}
    cd86:	46c0      	nop			; (mov r8, r8)
    cd88:	74696e69 	.word	0x74696e69
    cd8c:	65746e49 	.word	0x65746e49
    cd90:	6c616e72 	.word	0x6c616e72
    cd94:	203a5748 	.word	0x203a5748
    cd98:	5f6d6377 	.word	0x5f6d6377
    cd9c:	3635736d 	.word	0x3635736d
    cda0:	695f3733 	.word	0x695f3733
    cda4:	2074696e 	.word	0x2074696e
    cda8:	656e6f64 	.word	0x656e6f64
    cdac:	00000a0d 	.word	0x00000a0d
    cdb0:	74696e69 	.word	0x74696e69
    cdb4:	65746e49 	.word	0x65746e49
    cdb8:	6c616e72 	.word	0x6c616e72
    cdbc:	203a5748 	.word	0x203a5748
    cdc0:	6c756f43 	.word	0x6c756f43
    cdc4:	6f6e2064 	.word	0x6f6e2064
    cdc8:	6e692074 	.word	0x6e692074
    cdcc:	61697469 	.word	0x61697469
    cdd0:	657a696c 	.word	0x657a696c
    cdd4:	35534d20 	.word	0x35534d20
    cdd8:	21373336 	.word	0x21373336
    cddc:	00000a0d 	.word	0x00000a0d
    cde0:	74696e69 	.word	0x74696e69
    cde4:	65746e49 	.word	0x65746e49
    cde8:	6c616e72 	.word	0x6c616e72
    cdec:	203a5748 	.word	0x203a5748
    cdf0:	5f6d6377 	.word	0x5f6d6377
    cdf4:	3433636d 	.word	0x3433636d
    cdf8:	695f3631 	.word	0x695f3631
    cdfc:	2074696e 	.word	0x2074696e
    ce00:	656e6f64 	.word	0x656e6f64
    ce04:	00000a0d 	.word	0x00000a0d
    ce08:	74696e69 	.word	0x74696e69
    ce0c:	65746e49 	.word	0x65746e49
    ce10:	6c616e72 	.word	0x6c616e72
    ce14:	203a5748 	.word	0x203a5748
    ce18:	6c756f43 	.word	0x6c756f43
    ce1c:	6f6e2064 	.word	0x6f6e2064
    ce20:	6e692074 	.word	0x6e692074
    ce24:	61697469 	.word	0x61697469
    ce28:	657a696c 	.word	0x657a696c
    ce2c:	33434d20 	.word	0x33434d20
    ce30:	21363134 	.word	0x21363134
    ce34:	00000a0d 	.word	0x00000a0d
    ce38:	544c4954 	.word	0x544c4954
    ce3c:	474e4120 	.word	0x474e4120
    ce40:	2520454c 	.word	0x2520454c
    ce44:	0d66322e 	.word	0x0d66322e
    ce48:	0000000a 	.word	0x0000000a

0000ce4c <tc_interrupt_vectors.13876>:
    ce4c:	00151211 5f6d6377 3a6e7572 61747320     ....wcm_run: sta
    ce5c:	64657472 00000a0d 5f6d6377 3a6e7572     rted....wcm_run:
    ce6c:	49505320 696e6920 6c616974 64657a69      SPI initialized
    ce7c:	00000a0d 5f6d6377 3a6e7572 6d637720     ....wcm_run: wcm
    ce8c:	6970735f 6174735f 725f7472 20646165     _spi_start_read 
    ce9c:	6c696166 28206465 0d212931 0000000a     failed (1)!.....
    ceac:	4b41454c 00000000 322e2a25 00000066     LEAK....%*.2f...
    cebc:	646e6168 735f656c 635f6970 616d6d6f     handle_spi_comma
    cecc:	203a646e 6c756f43 6f6e2064 65722074     nd: Could not re
    cedc:	6c206461 206b6165 65746564 726f7463     ad leak detector
    ceec:	000a0d21 64616572 7370675f 00000000     !...read_gps....
    cefc:	5f6d6377 676e6970 00000000 646e6168     wcm_ping....hand
    cf0c:	635f656c 616d6d6f 203a646e 676e6950     le_command: Ping
    cf1c:	000a0d21 3635534d 00003733 646e6168     !...MS5637..hand
    cf2c:	735f656c 635f6970 616d6d6f 203a646e     le_spi_command: 
    cf3c:	6c756f43 6f6e2064 65722074 4d206461     Could not read M
    cf4c:	33363553 0a0d2137 00000000 64616572     S5637!......read
    cf5c:	33636d5f 00363134 646e6168 635f656c     _mc3416.handle_c
    cf6c:	616d6d6f 203a646e 6c756f43 6f6e2064     ommand: Could no
    cf7c:	65722074 4d206461 31343343 0a0d2136     t read MC3416!..
    cf8c:	00000000 696c6163 74617262 636d5f65     ....calibrate_mc
    cf9c:	36313433 00000000 646e6168 635f656c     3416....handle_c
    cfac:	616d6d6f 203a646e 6c756f43 6f6e2064     ommand: Could no
    cfbc:	61632074 7262696c 20657461 3433434d     t calibrate MC34
    cfcc:	0d213631 0000000a 6f72657a 33636d5f     16!.....zero_mc3
    cfdc:	00363134 646e6168 635f656c 616d6d6f     416.handle_comma
    cfec:	203a646e 6c756f43 6f6e2064 657a2074     nd: Could not ze
    cffc:	4d206f72 31343343 0a0d2136 00000000     ro MC3416!......
    d00c:	45574f50 00000052 00642a25 50534552     POWER...%*d.RESP
    d01c:	00000000 2d2d2d2d 2d2d2d2d 00000000     ....--------....
    d02c:	3356332b 455f4156 0000004e 00000020     +3V3VA_EN... ...
    d03c:	3356332b 455f4156 6425204e 00000000     +3V3VA_EN %d....
    d04c:	5f535047 5f525750 00004e45 5f535047     GPS_PWR_EN..GPS_
    d05c:	5f525750 25204e45 00000064 5f4d4f43     PWR_EN %d...COM_
    d06c:	415f5753 00000000 5f4d4f43 415f5753     SW_A....COM_SW_A
    d07c:	00642520 5f544153 5f525750 00004e45      %d.SAT_PWR_EN..
    d08c:	5f544153 5f525750 25204e45 00000064     SAT_PWR_EN %d...
    d09c:	4c4c4543 5257505f 004e455f 4c4c4543     CELL_PWR_EN.CELL
    d0ac:	5257505f 204e455f 00006425 505f4657     _PWR_EN %d..WF_P
    d0bc:	455f5257 0000004e 505f4657 455f5257     WR_EN...WF_PWR_E
    d0cc:	6425204e 00000000 5f54474c 00004e4f     N %d....LGT_ON..
    d0dc:	5f54474c 25204e4f 00000064 646e6168     LGT_ON %d...hand
    d0ec:	735f656c 635f6970 616d6d6f 203a646e     le_spi_command: 
    d0fc:	6e6b6e55 206e776f 6d6d6f63 21646e61     Unknown command!
    d10c:	00000a0d 5f6d6377 3a6e7572 6d637720     ....wcm_run: wcm
    d11c:	6970735f 6174735f 725f7472 20646165     _spi_start_read 
    d12c:	6c696166 28206465 0d212932 0000000a     failed (2)!.....
    d13c:	64616572 61656c5f 0000006b 4b41454c     read_leak...LEAK
    d14c:	322e2520 0a0d666c 00000000 646e6168      %.2lf......hand
    d15c:	635f656c 616d6d6f 203a646e 6c756f43     le_command: Coul
    d16c:	6f6e2064 65722074 6c206461 206b6165     d not read leak 
    d17c:	65746564 726f7463 000a0d21 64616572     detector!...read
    d18c:	7461625f 00000074 54544142 20595245     _batt...BATTERY 
    d19c:	45544544 25205443 666c322e 00000a0d     DETECT %.2lf....
    d1ac:	646e6168 635f656c 616d6d6f 203a646e     handle_command: 
    d1bc:	6c756f43 6f6e2064 65722074 62206461     Could not read b
    d1cc:	65747461 64207972 63657465 21726f74     attery detector!
    d1dc:	00000a0d 64616572 6d6f635f 00000073     ....read_coms...
    d1ec:	44265441 000a0d30 494c4156 000a0d44     AT&D0...VALID...
    d1fc:	41564e49 0d44494c 0000000a 646e6168     INVALID.....hand
    d20c:	635f656c 616d6d6f 203a646e 676e6950     le_command: Ping
    d21c:	63655220 65766965 0a0d2164 00000000      Received!......
    d22c:	64616572 35736d5f 00373336 25203144     read_ms5637.D1 %
    d23c:	0a0d756c 00000000 25203244 0a0d756c     lu......D2 %lu..
    d24c:	00000000 3635534d 50203733 53534552     ....MS5637 PRESS
    d25c:	20455255 66322e25 00000a0d 3635534d     URE %.2f....MS56
    d26c:	54203733 45504d45 55544152 25204552     37 TEMPERATURE %
    d27c:	0d66322e 0000000a 646e6168 635f656c     .2f.....handle_c
    d28c:	616d6d6f 203a646e 6c756f43 6f6e2064     ommand: Could no
    d29c:	65722074 4d206461 33363553 0a0d2137     t read MS5637!..
    d2ac:	00000000 64616572 776f705f 625f7265     ....read_power_b
    d2bc:	00737469 3356332b 455f4156 6425204e     its.+3V3VA_EN %d
    d2cc:	00000a0d 5f535047 5f525750 25204e45     ....GPS_PWR_EN %
    d2dc:	000a0d64 5f4d4f43 415f5753 0d642520     d...COM_SW_A %d.
    d2ec:	0000000a 5f544153 5f525750 25204e45     ....SAT_PWR_EN %
    d2fc:	000a0d64 4c4c4543 52575020 204e455f     d...CELL PWR_EN 
    d30c:	0a0d6425 00000000 505f4657 455f5257     %d......WF_PWR_E
    d31c:	6425204e 00000a0d 5f54474c 25204e4f     N %d....LGT_ON %
    d32c:	000a0d64 6e696572 61697469 657a696c     d...reinitialize
    d33c:	00000000 72706565 635f6d6f 69666e6f     ....eeprom_confi
    d34c:	65727567 5453203a 53555441 0d4b4f5f     gure: STATUS_OK.
    d35c:	0000000a 72706565 635f6d6f 69666e6f     ....eeprom_confi
    d36c:	65727567 6148203a 74206576 6572206f     gure: Have to re
    d37c:	73206461 69747465 0d73676e 0000000a     ad settings.....
    d38c:	72706565 635f6d6f 69666e6f 65727567     eeprom_configure
    d39c:	5453203a 53555441 5252455f 5f4f4e5f     : STATUS_ERR_NO_
    d3ac:	4f4d454d 0a0d5952 00000000 72706565     MEMORY......eepr
    d3bc:	635f6d6f 69666e6f 65727567 5453203a     om_configure: ST
    d3cc:	53555441 5252455f 4441425f 524f465f     ATUS_ERR_BAD_FOR
    d3dc:	0d54414d 0000000a 72706565 635f6d6f     MAT.....eeprom_c
    d3ec:	69666e6f 65727567 726f203a 00000a0d     onfigure: or....
    d3fc:	72706565 635f6d6f 69666e6f 65727567     eeprom_configure
    d40c:	5453203a 53555441 5252455f 0d4f495f     : STATUS_ERR_IO.
    d41c:	0000000a 72706565 635f6d6f 69666e6f     ....eeprom_confi
    d42c:	65727567 6148203a 74206576 7265206f     gure: Have to er
    d43c:	20657361 20646e61 74696e69 696c6169     ase and initiali
    d44c:	0a0d657a 00000000 72706565 635f6d6f     ze......eeprom_c
    d45c:	69666e6f 65727567 5453203a 53555441     onfigure: STATUS
    d46c:	204b4f5f 000a0d32 72706565 635f6d6f     _OK 2...eeprom_c
    d47c:	69666e6f 65727567 6148203a 74206576     onfigure: Have t
    d48c:	7277206f 20657469 74746573 73676e69     o write settings
    d49c:	00000a0d 72706565 635f6d6f 69666e6f     ....eeprom_confi
    d4ac:	65727567 5453203a 53555441 5252455f     gure: STATUS_ERR
    d4bc:	4145525f 45455f44 4d4f5250 00000a0d     _READ_EEPROM....
    d4cc:	72706565 635f6d6f 69666e6f 65727567     eeprom_configure
    d4dc:	5453203a 53555441 5252455f 4952575f     : STATUS_ERR_WRI
    d4ec:	455f4554 4f525045 55425f4d 52454646     TE_EEPROM_BUFFER
    d4fc:	00000a0d 72706565 635f6d6f 69666e6f     ....eeprom_confi
    d50c:	65727567 5453203a 53555441 5252455f     gure: STATUS_ERR
    d51c:	4952575f 455f4554 4f525045 4f435f4d     _WRITE_EEPROM_CO
    d52c:	54494d4d 00000a0d 5f6d6377 5f633269     MMIT....wcm_i2c_
    d53c:	6d6d6f63 5f646e61 64616572 6765725f     command_read_reg
    d54c:	7365725f 736e6f70 28203a65 73202931     _response: (1) s
    d55c:	75746174 203d2073 78257830 000a0d21     tatus = 0x%x!...
    d56c:	5f6d6377 5f633269 6d6d6f63 5f646e61     wcm_i2c_command_
    d57c:	64616572 7365725f 736e6f70 28203a65     read_response: (
    d58c:	73202932 75746174 203d2073 78257830     2) status = 0x%x
    d59c:	000a0d21 5f6d6377 5f633269 74697277     !...wcm_i2c_writ
    d5ac:	6f635f65 6e616d6d 65725f64 73203a67     e_command_reg: s
    d5bc:	75746174 203d2073 78257830 000a0d21     tatus = 0x%x!...
    d5cc:	5f6d6377 5f633269 64616572 7365725f     wcm_i2c_read_res
    d5dc:	736e6f70 61705f65 74656b63 7473203a     ponse_packet: st
    d5ec:	73757461 30203d20 21782578 00000a0d     atus = 0x%x!....
    d5fc:	5f6d6377 5f633269 74697277 6f635f65     wcm_i2c_write_co
    d60c:	6e616d6d 61705f64 74656b63 7473203a     mmand_packet: st
    d61c:	73757461 30203d20 21782578 00000a0d     atus = 0x%x!....
    d62c:	5f6d6377 5f633269 74697277 6f635f65     wcm_i2c_write_co
    d63c:	6e616d6d 65725f64 725f6461 6f707365     mmand_read_respo
    d64c:	3a65736e 29312820 61747320 20737574     nse: (1) status 
    d65c:	7830203d 0d217825 0000000a 5f6d6377     = 0x%x!.....wcm_
    d66c:	5f633269 74697277 6f635f65 6e616d6d     i2c_write_comman
    d67c:	65725f64 725f6461 6f707365 3a65736e     d_read_response:
    d68c:	29322820 61747320 20737574 7830203d      (2) status = 0x
    d69c:	0d217825 0000000a 3433636d 635f3631     %x!.....mc3416_c
    d6ac:	6b636568 646f6d5f 72203a65 5f646165     heck_mode: read_
    d6bc:	6c696166 0d216465 0000000a 3433636d     failed!.....mc34
    d6cc:	635f3631 6b636568 646f6d5f 53203a65     16_check_mode: S
    d6dc:	444e4154 4d5f5942 2145444f 00000a0d     TANDBY_MODE!....
    d6ec:	3433636d 735f3631 6c706d61 78615f65     mc3416_sample_ax
    d6fc:	203a7369 73697861 6165725f 61665f64     is: axis_read_fa
    d70c:	64656c69 000a0d21 656b6177 64207075     iled!...wakeup d
    d71c:	79616c65 6e696620 65687369 0a0d2164     elay finished!..
    d72c:	00000000 3433636d 735f3631 6d5f7465     ....mc3416_set_m
    d73c:	3a65646f 69727720 665f6574 656c6961     ode: write_faile
    d74c:	0a0d2164 00000000 3433636d 735f3631     d!......mc3416_s
    d75c:	725f7465 65676e61 7365725f 74756c6f     et_range_resolut
    d76c:	3a6e6f69 61657220 61665f64 64656c69     ion: read_failed
    d77c:	000a0d21 3433636d 735f3631 725f7465     !...mc3416_set_r
    d78c:	65676e61 7365725f 74756c6f 3a6e6f69     ange_resolution:
    d79c:	69727720 665f6574 656c6961 0a0d2164      write_failed!..
    d7ac:	00000000 3433636d 735f3631 735f7465     ....mc3416_set_s
    d7bc:	6c706d61 5f676e69 65746172 6572203a     ampling_rate: re
    d7cc:	665f6461 656c6961 0a0d2164 00000000     ad_failed!......
    d7dc:	3433636d 735f3631 735f7465 6c706d61     mc3416_set_sampl
    d7ec:	5f676e69 65746172 7277203a 5f657469     ing_rate: write_
    d7fc:	6c696166 0d216465 0000000a 3433636d     failed!.....mc34
    d80c:	765f3631 64696c61 5f657461 70696863     16_validate_chip
    d81c:	6863203a 44497069 6165725f 61665f64     : chipID_read_fa
    d82c:	64656c69 000a0d21 3433636d 765f3631     iled!...mc3416_v
    d83c:	64696c61 5f657461 70696863 6350203a     alidate_chip: Pc
    d84c:	5f65646f 64616572 6961665f 2164656c     ode_read_failed!
    d85c:	00000a0d 3433636d 765f3631 64696c61     ....mc3416_valid
    d86c:	5f657461 70696863 6843203a 495f7069     ate_chip: Chip_I
    d87c:	6e695f44 72726f63 21746365 00000a0d     D_incorrect!....
    d88c:	3433636d 765f3631 64696c61 5f657461     mc3416_validate_
    d89c:	70696863 7250203a 6375646f 6f435f74     chip: Product_Co
    d8ac:	695f6564 726f636e 74636572 000a0d21     de_incorrect!...
    d8bc:	5f6d6377 3433636d 635f3631 62696c61     wcm_mc3416_calib
    d8cc:	65746172 6f6d203a 635f6564 6b636568     rate: mode_check
    d8dc:	6961665f 2164656c 00000a0d 5f6d6377     _failed!....wcm_
    d8ec:	3433636d 635f3631 62696c61 65746172     mc3416_calibrate
    d8fc:	6157203a 7075656b 6961665f 2164656c     : Wakeup_failed!
    d90c:	00000a0d 5f6d6377 3433636d 635f3631     ....wcm_mc3416_c
    d91c:	62696c61 65746172 6552203a 615f6461     alibrate: Read_a
    d92c:	5f736978 6c696166 0d216465 0000000a     xis_failed!.....
    d93c:	5f6d6377 3433636d 695f3631 3a74696e     wcm_mc3416_init:
    d94c:	5f6f6e20 70696863 7465645f 65746365      no_chip_detecte
    d95c:	0a0d2164 00000000 5f6d6377 3433636d     d!......wcm_mc34
    d96c:	695f3631 3a74696e 61747320 7962646e     16_init: standby
    d97c:	646f6d5f 6f6e5f65 6e655f74 65726574     _mode_not_entere
    d98c:	0a0d2164 00000000 5f6d6377 3433636d     d!......wcm_mc34
    d99c:	695f3631 3a74696e 6d615320 6e696c70     16_init: Samplin
    d9ac:	61725f67 6e5f6574 635f746f 69666e6f     g_rate_not_confi
    d9bc:	65727567 0a0d2164 00000000 5f6d6377     gured!......wcm_
    d9cc:	3433636d 695f3631 3a74696e 6e615220     mc3416_init: Ran
    d9dc:	725f6567 6e5f7365 635f746f 69666e6f     ge_res_not_confi
    d9ec:	65727567 0a0d2164 00000000 5f6d6377     gured!......wcm_
    d9fc:	3433636d 695f3631 3a74696e 66664f20     mc3416_init: Off
    da0c:	5f746573 64616572 61665f73 64656c69     set_reads_failed
    da1c:	000a0d21 5f6d6377 3433636d 695f3631     !...wcm_mc3416_i
    da2c:	3a74696e 6b617720 6f6d5f65 6e5f6564     nit: wake_mode_n
    da3c:	655f746f 7265746e 0d216465 0000000a     ot_entered!.....
    da4c:	5f6d6377 3433636d 725f3631 5f646165     wcm_mc3416_read_
    da5c:	746c6974 6f6d203a 635f6564 6b636568     tilt: mode_check
    da6c:	6961665f 2164656c 00000a0d 5f6d6377     _failed!....wcm_
    da7c:	3433636d 725f3631 5f646165 746c6974     mc3416_read_tilt
    da8c:	6157203a 7075656b 6961665f 2164656c     : Wakeup_failed!
    da9c:	00000a0d 5f6d6377 3433636d 725f3631     ....wcm_mc3416_r
    daac:	5f646165 746c6974 6153203a 656c706d     ead_tilt: Sample
    dabc:	6978615f 61665f73 64656c69 000a0d21     _axis_failed!...
    dacc:	5f6d6377 3635736d 695f3733 3a74696e     wcm_ms5637_init:
    dadc:	756f4320 6e20646c 7220746f 74657365      Could not reset
    daec:	000a0d21 5f6d6377 3635736d 705f3733     !...wcm_ms5637_p
    dafc:	5f6d6f72 64616572 6f43203a 20646c75     rom_read: Could 
    db0c:	20746f6e 64616572 43524320 000a0d21     not read CRC!...
    db1c:	5f6d6377 3635736d 705f3733 5f6d6f72     wcm_ms5637_prom_
    db2c:	64616572 6f43203a 20646c75 20746f6e     read: Could not 
    db3c:	64616572 6c616320 61726269 6e6f6974     read calibration
    db4c:	656f6320 63696666 746e6569 000a0d21      coefficient!...
    db5c:	3635736d 725f3733 5f646165 645f3164     ms5637_read_d1_d
    db6c:	43203a32 646c756f 746f6e20 6e6f6320     2: Could not con
    db7c:	74726576 21314420 00000a0d 3635736d     vert D1!....ms56
    db8c:	725f3733 5f646165 645f3164 43203a32     37_read_d1_d2: C
    db9c:	646c756f 746f6e20 61657220 44412064     ould not read AD
    dbac:	31282043 0a0d2129 00000000 3635736d     C (1)!......ms56
    dbbc:	725f3733 5f646165 645f3164 43203a32     37_read_d1_d2: C
    dbcc:	646c756f 746f6e20 6e6f6320 74726576     ould not convert
    dbdc:	21324420 00000a0d 3635736d 725f3733      D2!....ms5637_r
    dbec:	5f646165 645f3164 43203a32 646c756f     ead_d1_d2: Could
    dbfc:	746f6e20 61657220 44412064 32282043      not read ADC (2
    dc0c:	0a0d2129 00000000 20697073 61736964     )!......spi disa
    dc1c:	64656c62 000a0d21 206d6f63 72617375     bled!...com usar
    dc2c:	69642074 6c626173 0d216465 0000000a     t disabled!.....
    dc3c:	20737067 72617375 69642074 6c626173     gps usart disabl
    dc4c:	0d216465 0000000a 75206370 74726173     ed!.....pc usart
    dc5c:	73696420 656c6261 0a0d2164 00000000      disabled!......
    dc6c:	72617375 65725f74 775f6461 20746961     usart_read_wait 
    dc7c:	54415453 455f5355 425f5252 465f4441     STATUS_ERR_BAD_F
    dc8c:	414d524f 0a0d2154 00000000 72617375     ORMAT!......usar
    dc9c:	65725f74 775f6461 20746961 54415453     t_read_wait STAT
    dcac:	455f5355 4f5f5252 46524556 21574f4c     US_ERR_OVERFLOW!
    dcbc:	00000a0d 72617375 65725f74 775f6461     ....usart_read_w
    dccc:	20746961 54415453 455f5355 425f5252     ait STATUS_ERR_B
    dcdc:	445f4441 21415441 00000a0d 72617375     AD_DATA!....usar
    dcec:	65725f74 775f6461 20746961 54415453     t_read_wait STAT
    dcfc:	455f5355 445f5252 45494e45 0a0d2144     US_ERR_DENIED!..
    dd0c:	00000000 72617375 65725f74 775f6461     ....usart_read_w
    dd1c:	20746961 54415453 455f5355 505f5252     ait STATUS_ERR_P
    dd2c:	4f544f52 214c4f43 00000a0d 72617375     ROTOCOL!....usar
    dd3c:	65725f74 775f6461 20746961 54415453     t_read_wait STAT
    dd4c:	455f5355 505f5252 454b4341 4f435f54     US_ERR_PACKET_CO
    dd5c:	53494c4c 214e4f49 00000a0d 72617375     LLISION!....usar
    dd6c:	65725f74 775f6461 20746961 4e4b4e55     t_read_wait UNKN
    dd7c:	214e574f 00000a0d 00002d50 00002f80     OWN!....P-.../..
    dd8c:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    dd9c:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    ddac:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    ddbc:	00002f80 00002f80 00002d38 00002f80     ./.../..8-.../..
    ddcc:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    dddc:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    ddec:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    ddfc:	00002f80 00002f80 00002d48 00002f80     ./.../..H-.../..
    de0c:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    de1c:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    de2c:	00002f80 00002f80 00002f80 00002f80     ./.../.../.../..
    de3c:	00002f80 00002f80 00002d40 00002d58     ./.../..@-..X-..
    de4c:	00002d20 00002d30 00002d28 00000002      -..0-..(-......
    de5c:	00000003 0000ffff 0000ffff 00000004     ................
    de6c:	00000005 00000006 00000007 0000ffff     ................
    de7c:	0000ffff 0000ffff 0000ffff 0000ffff     ................
    de8c:	0000ffff 0000ffff 0000ffff 00000008     ................
    de9c:	00000009 0000000a 0000000b 0000ffff     ................
    deac:	0000ffff 0000ffff 0000ffff 0000377c     ............|7..
    debc:	00003870 0000387a 00003884 0000388e     p8..z8...8...8..
    decc:	000038c0 000038ca 000038d4 000038de     .8...8...8...8..
    dedc:	000038e8 42002000 42002400 43000800     .8... .B.$.B...C
    deec:	00000002 00000100 00000002 00000200     ................
    defc:	00000003 00000004 42000000 42000400     ...........B...B
    df0c:	42000800 42000c00 42001000 43000400     ...B...B...B...C
    df1c:	000049e0 000049e0 000049ae 000049e0     .I...I...I...I..
    df2c:	000049ae 00004994 00004994 000049e0     .I...I...I...I..
    df3c:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    df4c:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    df5c:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    df6c:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    df7c:	000049e0 000049e0 000049ae 000049e0     .I...I...I...I..
    df8c:	000049ae 000049e0 000049e0 000049e0     .I...I...I...I..
    df9c:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    dfac:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    dfbc:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    dfcc:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    dfdc:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    dfec:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    dffc:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    e00c:	000049e0 000049e0 000049e0 000049e0     .I...I...I...I..
    e01c:	000049ae 000049ae 000049b6 000049b6     .I...I...I...I..
    e02c:	000049b6 000049b6 41744545 50524f4d     .I...I..EEtAMORP
    e03c:	456d752e 00005476 00005472 00005472     .umEvT..rT..rT..
    e04c:	000054dc 000054dc 0000548c 0000547c     .T...T...T..|T..
    e05c:	00005492 000054ca 000055e8 000055c8     .T...T...U...U..
    e06c:	000055c8 00005674 000055da 000055f6     .U..tV...U...U..
    e07c:	000055cc 00005604 00005658 736f6361     .U...V..XV..acos
    e08c:	00000000 74727173 00000000 00006d60     ....sqrt....`m..
    e09c:	00006d42 00006cfc 00006c1a 00006cfc     Bm...l...l...l..
    e0ac:	00006d34 00006cfc 00006c1a 00006d42     4m...l...l..Bm..
    e0bc:	00006d42 00006d34 00006c1a 00006c12     Bm..4m...l...l..
    e0cc:	00006c12 00006c12 00006f78 000075c0     .l...l..xo...u..
    e0dc:	00007480 00007480 0000747c 00007598     .t...t..|t...u..
    e0ec:	00007598 0000758a 0000747c 00007598     .u...u..|t...u..
    e0fc:	0000758a 00007598 0000747c 000075a0     .u...u..|t...u..
    e10c:	000075a0 000075a0 000077a4              .u...u...w..

0000e118 <_global_impure_ptr>:
    e118:	20000018 000091bc 00009230 00009230     ... ....0...0...
    e128:	000091a0 00009230 00009230 00009230     ....0...0...0...
    e138:	00009230 00009230 00009230 000091a8     0...0...0.......
    e148:	00008c8a 00009230 00008c44 00008c94     ....0...D.......
    e158:	00009230 00008ce0 00008eca 00008eca     0...............
    e168:	00008eca 00008eca 00008eca 00008eca     ................
    e178:	00008eca 00008eca 00008eca 00009230     ............0...
    e188:	00009230 00009230 00009230 00009230     0...0...0...0...
    e198:	00009230 00009230 00009230 00009230     0...0...0...0...
    e1a8:	00009230 00008ce8 00008e30 00009230     0.......0...0...
    e1b8:	00008e30 00009230 00009230 00009230     0...0...0...0...
    e1c8:	00009230 00008efa 00009230 00009230     0.......0...0...
    e1d8:	00008f02 00009230 00009230 00009230     ....0...0...0...
    e1e8:	00009230 00009230 00008fa4 00009230     0...0.......0...
    e1f8:	00009230 00008fd6 00009230 00009230     0.......0...0...
    e208:	00009230 00009230 00009230 00009230     0...0...0...0...
    e218:	00009230 00009230 00009230 00009230     0...0...0...0...
    e228:	000090d0 00009104 00008e30 00008e30     ........0...0...
    e238:	00008e30 00009116 00009104 00009230     0...........0...
    e248:	00009230 0000911e 00009230 00009038     0.......0...8...
    e258:	000091fe 00009174 0000906e 00009230     ....t...n...0...
    e268:	00009076 00009230 000091cc 00009230     v...0.......0...
    e278:	00009230 0000912e 00464e49 00666e69     0.......INF.inf.
    e288:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
    e298:	42413938 46454443 00000000 33323130     89ABCDEF....0123
    e2a8:	37363534 62613938 66656463 00000000     456789abcdef....
    e2b8:	6c756e28 0000296c 00000030              (null)..0...

0000e2c4 <blanks.7223>:
    e2c4:	20202020 20202020 20202020 20202020                     

0000e2d4 <zeroes.7224>:
    e2d4:	30303030 30303030 30303030 30303030     0000000000000000
    e2e4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
    e2f4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
    e304:	00000000                                ....

0000e308 <__mprec_bigtens>:
    e308:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    e318:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    e328:	7f73bf3c 75154fdd                       <.s..O.u

0000e330 <__mprec_tens>:
    e330:	00000000 3ff00000 00000000 40240000     .......?......$@
    e340:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    e350:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    e360:	00000000 412e8480 00000000 416312d0     .......A......cA
    e370:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    e380:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    e390:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    e3a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    e3b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    e3c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    e3d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    e3e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    e3f0:	79d99db4 44ea7843                       ...yCx.D

0000e3f8 <p05.6055>:
    e3f8:	00000005 00000019 0000007d              ........}...

0000e404 <_ctype_>:
    e404:	20202000 20202020 28282020 20282828     .         ((((( 
    e414:	20202020 20202020 20202020 20202020                     
    e424:	10108820 10101010 10101010 10101010      ...............
    e434:	04040410 04040404 10040404 10101010     ................
    e444:	41411010 41414141 01010101 01010101     ..AAAAAA........
    e454:	01010101 01010101 01010101 10101010     ................
    e464:	42421010 42424242 02020202 02020202     ..BBBBBB........
    e474:	02020202 02020202 02020202 10101010     ................
    e484:	00000020 00000000 00000000 00000000      ...............
	...

0000e508 <_init>:
    e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e50a:	46c0      	nop			; (mov r8, r8)
    e50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e50e:	bc08      	pop	{r3}
    e510:	469e      	mov	lr, r3
    e512:	4770      	bx	lr

0000e514 <__init_array_start>:
    e514:	0000a169 	.word	0x0000a169

0000e518 <__frame_dummy_init_array_entry>:
    e518:	000000dd                                ....

0000e51c <_fini>:
    e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e51e:	46c0      	nop			; (mov r8, r8)
    e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e522:	bc08      	pop	{r3}
    e524:	469e      	mov	lr, r3
    e526:	4770      	bx	lr

0000e528 <__fini_array_start>:
    e528:	000000b5 	.word	0x000000b5
